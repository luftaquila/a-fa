
ECU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012004  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b78  08012194  08012194  00022194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012d0c  08012d0c  00030128  2**0
                  CONTENTS
  4 .ARM          00000008  08012d0c  08012d0c  00022d0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012d14  08012d14  00030128  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012d14  08012d14  00022d14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012d18  08012d18  00022d18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000128  20000000  08012d1c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030128  2**0
                  CONTENTS
 10 .bss          0001192c  20000128  20000128  00030128  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  20011a54  20011a54  00030128  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030128  2**0
                  CONTENTS, READONLY
 13 .debug_info   000248a0  00000000  00000000  00030158  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004ec0  00000000  00000000  000549f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001e78  00000000  00000000  000598b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001c38  00000000  00000000  0005b730  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00029d91  00000000  00000000  0005d368  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00029951  00000000  00000000  000870f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ed4f9  00000000  00000000  000b0a4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0019df43  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00008b98  00000000  00000000  0019df94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000128 	.word	0x20000128
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801217c 	.word	0x0801217c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000012c 	.word	0x2000012c
 80001cc:	0801217c 	.word	0x0801217c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2iz>:
 8000a1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a20:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a24:	d215      	bcs.n	8000a52 <__aeabi_d2iz+0x36>
 8000a26:	d511      	bpl.n	8000a4c <__aeabi_d2iz+0x30>
 8000a28:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a30:	d912      	bls.n	8000a58 <__aeabi_d2iz+0x3c>
 8000a32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a3e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a42:	fa23 f002 	lsr.w	r0, r3, r2
 8000a46:	bf18      	it	ne
 8000a48:	4240      	negne	r0, r0
 8000a4a:	4770      	bx	lr
 8000a4c:	f04f 0000 	mov.w	r0, #0
 8000a50:	4770      	bx	lr
 8000a52:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a56:	d105      	bne.n	8000a64 <__aeabi_d2iz+0x48>
 8000a58:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a5c:	bf08      	it	eq
 8000a5e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a62:	4770      	bx	lr
 8000a64:	f04f 0000 	mov.w	r0, #0
 8000a68:	4770      	bx	lr
 8000a6a:	bf00      	nop

08000a6c <__aeabi_d2uiz>:
 8000a6c:	004a      	lsls	r2, r1, #1
 8000a6e:	d211      	bcs.n	8000a94 <__aeabi_d2uiz+0x28>
 8000a70:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a74:	d211      	bcs.n	8000a9a <__aeabi_d2uiz+0x2e>
 8000a76:	d50d      	bpl.n	8000a94 <__aeabi_d2uiz+0x28>
 8000a78:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a7c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a80:	d40e      	bmi.n	8000aa0 <__aeabi_d2uiz+0x34>
 8000a82:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a86:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a8a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a92:	4770      	bx	lr
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a9e:	d102      	bne.n	8000aa6 <__aeabi_d2uiz+0x3a>
 8000aa0:	f04f 30ff 	mov.w	r0, #4294967295
 8000aa4:	4770      	bx	lr
 8000aa6:	f04f 0000 	mov.w	r0, #0
 8000aaa:	4770      	bx	lr

08000aac <__aeabi_frsub>:
 8000aac:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000ab0:	e002      	b.n	8000ab8 <__addsf3>
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_fsub>:
 8000ab4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000ab8 <__addsf3>:
 8000ab8:	0042      	lsls	r2, r0, #1
 8000aba:	bf1f      	itttt	ne
 8000abc:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000ac0:	ea92 0f03 	teqne	r2, r3
 8000ac4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ac8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000acc:	d06a      	beq.n	8000ba4 <__addsf3+0xec>
 8000ace:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000ad2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ad6:	bfc1      	itttt	gt
 8000ad8:	18d2      	addgt	r2, r2, r3
 8000ada:	4041      	eorgt	r1, r0
 8000adc:	4048      	eorgt	r0, r1
 8000ade:	4041      	eorgt	r1, r0
 8000ae0:	bfb8      	it	lt
 8000ae2:	425b      	neglt	r3, r3
 8000ae4:	2b19      	cmp	r3, #25
 8000ae6:	bf88      	it	hi
 8000ae8:	4770      	bxhi	lr
 8000aea:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000aee:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000af2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000af6:	bf18      	it	ne
 8000af8:	4240      	negne	r0, r0
 8000afa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000afe:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b02:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b06:	bf18      	it	ne
 8000b08:	4249      	negne	r1, r1
 8000b0a:	ea92 0f03 	teq	r2, r3
 8000b0e:	d03f      	beq.n	8000b90 <__addsf3+0xd8>
 8000b10:	f1a2 0201 	sub.w	r2, r2, #1
 8000b14:	fa41 fc03 	asr.w	ip, r1, r3
 8000b18:	eb10 000c 	adds.w	r0, r0, ip
 8000b1c:	f1c3 0320 	rsb	r3, r3, #32
 8000b20:	fa01 f103 	lsl.w	r1, r1, r3
 8000b24:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b28:	d502      	bpl.n	8000b30 <__addsf3+0x78>
 8000b2a:	4249      	negs	r1, r1
 8000b2c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b30:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b34:	d313      	bcc.n	8000b5e <__addsf3+0xa6>
 8000b36:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b3a:	d306      	bcc.n	8000b4a <__addsf3+0x92>
 8000b3c:	0840      	lsrs	r0, r0, #1
 8000b3e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b42:	f102 0201 	add.w	r2, r2, #1
 8000b46:	2afe      	cmp	r2, #254	; 0xfe
 8000b48:	d251      	bcs.n	8000bee <__addsf3+0x136>
 8000b4a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b4e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b52:	bf08      	it	eq
 8000b54:	f020 0001 	biceq.w	r0, r0, #1
 8000b58:	ea40 0003 	orr.w	r0, r0, r3
 8000b5c:	4770      	bx	lr
 8000b5e:	0049      	lsls	r1, r1, #1
 8000b60:	eb40 0000 	adc.w	r0, r0, r0
 8000b64:	3a01      	subs	r2, #1
 8000b66:	bf28      	it	cs
 8000b68:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b6c:	d2ed      	bcs.n	8000b4a <__addsf3+0x92>
 8000b6e:	fab0 fc80 	clz	ip, r0
 8000b72:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b76:	ebb2 020c 	subs.w	r2, r2, ip
 8000b7a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b7e:	bfaa      	itet	ge
 8000b80:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b84:	4252      	neglt	r2, r2
 8000b86:	4318      	orrge	r0, r3
 8000b88:	bfbc      	itt	lt
 8000b8a:	40d0      	lsrlt	r0, r2
 8000b8c:	4318      	orrlt	r0, r3
 8000b8e:	4770      	bx	lr
 8000b90:	f092 0f00 	teq	r2, #0
 8000b94:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b98:	bf06      	itte	eq
 8000b9a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b9e:	3201      	addeq	r2, #1
 8000ba0:	3b01      	subne	r3, #1
 8000ba2:	e7b5      	b.n	8000b10 <__addsf3+0x58>
 8000ba4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ba8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bac:	bf18      	it	ne
 8000bae:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bb2:	d021      	beq.n	8000bf8 <__addsf3+0x140>
 8000bb4:	ea92 0f03 	teq	r2, r3
 8000bb8:	d004      	beq.n	8000bc4 <__addsf3+0x10c>
 8000bba:	f092 0f00 	teq	r2, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	4608      	moveq	r0, r1
 8000bc2:	4770      	bx	lr
 8000bc4:	ea90 0f01 	teq	r0, r1
 8000bc8:	bf1c      	itt	ne
 8000bca:	2000      	movne	r0, #0
 8000bcc:	4770      	bxne	lr
 8000bce:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bd2:	d104      	bne.n	8000bde <__addsf3+0x126>
 8000bd4:	0040      	lsls	r0, r0, #1
 8000bd6:	bf28      	it	cs
 8000bd8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bdc:	4770      	bx	lr
 8000bde:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000be2:	bf3c      	itt	cc
 8000be4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000be8:	4770      	bxcc	lr
 8000bea:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bee:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000bf2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bf6:	4770      	bx	lr
 8000bf8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bfc:	bf16      	itet	ne
 8000bfe:	4608      	movne	r0, r1
 8000c00:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c04:	4601      	movne	r1, r0
 8000c06:	0242      	lsls	r2, r0, #9
 8000c08:	bf06      	itte	eq
 8000c0a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c0e:	ea90 0f01 	teqeq	r0, r1
 8000c12:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_ui2f>:
 8000c18:	f04f 0300 	mov.w	r3, #0
 8000c1c:	e004      	b.n	8000c28 <__aeabi_i2f+0x8>
 8000c1e:	bf00      	nop

08000c20 <__aeabi_i2f>:
 8000c20:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c24:	bf48      	it	mi
 8000c26:	4240      	negmi	r0, r0
 8000c28:	ea5f 0c00 	movs.w	ip, r0
 8000c2c:	bf08      	it	eq
 8000c2e:	4770      	bxeq	lr
 8000c30:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c34:	4601      	mov	r1, r0
 8000c36:	f04f 0000 	mov.w	r0, #0
 8000c3a:	e01c      	b.n	8000c76 <__aeabi_l2f+0x2a>

08000c3c <__aeabi_ul2f>:
 8000c3c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c40:	bf08      	it	eq
 8000c42:	4770      	bxeq	lr
 8000c44:	f04f 0300 	mov.w	r3, #0
 8000c48:	e00a      	b.n	8000c60 <__aeabi_l2f+0x14>
 8000c4a:	bf00      	nop

08000c4c <__aeabi_l2f>:
 8000c4c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c50:	bf08      	it	eq
 8000c52:	4770      	bxeq	lr
 8000c54:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c58:	d502      	bpl.n	8000c60 <__aeabi_l2f+0x14>
 8000c5a:	4240      	negs	r0, r0
 8000c5c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c60:	ea5f 0c01 	movs.w	ip, r1
 8000c64:	bf02      	ittt	eq
 8000c66:	4684      	moveq	ip, r0
 8000c68:	4601      	moveq	r1, r0
 8000c6a:	2000      	moveq	r0, #0
 8000c6c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c70:	bf08      	it	eq
 8000c72:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c76:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c7a:	fabc f28c 	clz	r2, ip
 8000c7e:	3a08      	subs	r2, #8
 8000c80:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c84:	db10      	blt.n	8000ca8 <__aeabi_l2f+0x5c>
 8000c86:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c8a:	4463      	add	r3, ip
 8000c8c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c90:	f1c2 0220 	rsb	r2, r2, #32
 8000c94:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c98:	fa20 f202 	lsr.w	r2, r0, r2
 8000c9c:	eb43 0002 	adc.w	r0, r3, r2
 8000ca0:	bf08      	it	eq
 8000ca2:	f020 0001 	biceq.w	r0, r0, #1
 8000ca6:	4770      	bx	lr
 8000ca8:	f102 0220 	add.w	r2, r2, #32
 8000cac:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cb0:	f1c2 0220 	rsb	r2, r2, #32
 8000cb4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000cb8:	fa21 f202 	lsr.w	r2, r1, r2
 8000cbc:	eb43 0002 	adc.w	r0, r3, r2
 8000cc0:	bf08      	it	eq
 8000cc2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b974 	b.w	8000fc8 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f806 	bl	8000cf8 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__udivmoddi4>:
 8000cf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cfc:	9d08      	ldr	r5, [sp, #32]
 8000cfe:	4604      	mov	r4, r0
 8000d00:	468e      	mov	lr, r1
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d14d      	bne.n	8000da2 <__udivmoddi4+0xaa>
 8000d06:	428a      	cmp	r2, r1
 8000d08:	4694      	mov	ip, r2
 8000d0a:	d969      	bls.n	8000de0 <__udivmoddi4+0xe8>
 8000d0c:	fab2 f282 	clz	r2, r2
 8000d10:	b152      	cbz	r2, 8000d28 <__udivmoddi4+0x30>
 8000d12:	fa01 f302 	lsl.w	r3, r1, r2
 8000d16:	f1c2 0120 	rsb	r1, r2, #32
 8000d1a:	fa20 f101 	lsr.w	r1, r0, r1
 8000d1e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d22:	ea41 0e03 	orr.w	lr, r1, r3
 8000d26:	4094      	lsls	r4, r2
 8000d28:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d2c:	0c21      	lsrs	r1, r4, #16
 8000d2e:	fbbe f6f8 	udiv	r6, lr, r8
 8000d32:	fa1f f78c 	uxth.w	r7, ip
 8000d36:	fb08 e316 	mls	r3, r8, r6, lr
 8000d3a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d3e:	fb06 f107 	mul.w	r1, r6, r7
 8000d42:	4299      	cmp	r1, r3
 8000d44:	d90a      	bls.n	8000d5c <__udivmoddi4+0x64>
 8000d46:	eb1c 0303 	adds.w	r3, ip, r3
 8000d4a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d4e:	f080 811f 	bcs.w	8000f90 <__udivmoddi4+0x298>
 8000d52:	4299      	cmp	r1, r3
 8000d54:	f240 811c 	bls.w	8000f90 <__udivmoddi4+0x298>
 8000d58:	3e02      	subs	r6, #2
 8000d5a:	4463      	add	r3, ip
 8000d5c:	1a5b      	subs	r3, r3, r1
 8000d5e:	b2a4      	uxth	r4, r4
 8000d60:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d64:	fb08 3310 	mls	r3, r8, r0, r3
 8000d68:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d6c:	fb00 f707 	mul.w	r7, r0, r7
 8000d70:	42a7      	cmp	r7, r4
 8000d72:	d90a      	bls.n	8000d8a <__udivmoddi4+0x92>
 8000d74:	eb1c 0404 	adds.w	r4, ip, r4
 8000d78:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d7c:	f080 810a 	bcs.w	8000f94 <__udivmoddi4+0x29c>
 8000d80:	42a7      	cmp	r7, r4
 8000d82:	f240 8107 	bls.w	8000f94 <__udivmoddi4+0x29c>
 8000d86:	4464      	add	r4, ip
 8000d88:	3802      	subs	r0, #2
 8000d8a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d8e:	1be4      	subs	r4, r4, r7
 8000d90:	2600      	movs	r6, #0
 8000d92:	b11d      	cbz	r5, 8000d9c <__udivmoddi4+0xa4>
 8000d94:	40d4      	lsrs	r4, r2
 8000d96:	2300      	movs	r3, #0
 8000d98:	e9c5 4300 	strd	r4, r3, [r5]
 8000d9c:	4631      	mov	r1, r6
 8000d9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da2:	428b      	cmp	r3, r1
 8000da4:	d909      	bls.n	8000dba <__udivmoddi4+0xc2>
 8000da6:	2d00      	cmp	r5, #0
 8000da8:	f000 80ef 	beq.w	8000f8a <__udivmoddi4+0x292>
 8000dac:	2600      	movs	r6, #0
 8000dae:	e9c5 0100 	strd	r0, r1, [r5]
 8000db2:	4630      	mov	r0, r6
 8000db4:	4631      	mov	r1, r6
 8000db6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dba:	fab3 f683 	clz	r6, r3
 8000dbe:	2e00      	cmp	r6, #0
 8000dc0:	d14a      	bne.n	8000e58 <__udivmoddi4+0x160>
 8000dc2:	428b      	cmp	r3, r1
 8000dc4:	d302      	bcc.n	8000dcc <__udivmoddi4+0xd4>
 8000dc6:	4282      	cmp	r2, r0
 8000dc8:	f200 80f9 	bhi.w	8000fbe <__udivmoddi4+0x2c6>
 8000dcc:	1a84      	subs	r4, r0, r2
 8000dce:	eb61 0303 	sbc.w	r3, r1, r3
 8000dd2:	2001      	movs	r0, #1
 8000dd4:	469e      	mov	lr, r3
 8000dd6:	2d00      	cmp	r5, #0
 8000dd8:	d0e0      	beq.n	8000d9c <__udivmoddi4+0xa4>
 8000dda:	e9c5 4e00 	strd	r4, lr, [r5]
 8000dde:	e7dd      	b.n	8000d9c <__udivmoddi4+0xa4>
 8000de0:	b902      	cbnz	r2, 8000de4 <__udivmoddi4+0xec>
 8000de2:	deff      	udf	#255	; 0xff
 8000de4:	fab2 f282 	clz	r2, r2
 8000de8:	2a00      	cmp	r2, #0
 8000dea:	f040 8092 	bne.w	8000f12 <__udivmoddi4+0x21a>
 8000dee:	eba1 010c 	sub.w	r1, r1, ip
 8000df2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000df6:	fa1f fe8c 	uxth.w	lr, ip
 8000dfa:	2601      	movs	r6, #1
 8000dfc:	0c20      	lsrs	r0, r4, #16
 8000dfe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e02:	fb07 1113 	mls	r1, r7, r3, r1
 8000e06:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e0a:	fb0e f003 	mul.w	r0, lr, r3
 8000e0e:	4288      	cmp	r0, r1
 8000e10:	d908      	bls.n	8000e24 <__udivmoddi4+0x12c>
 8000e12:	eb1c 0101 	adds.w	r1, ip, r1
 8000e16:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e1a:	d202      	bcs.n	8000e22 <__udivmoddi4+0x12a>
 8000e1c:	4288      	cmp	r0, r1
 8000e1e:	f200 80cb 	bhi.w	8000fb8 <__udivmoddi4+0x2c0>
 8000e22:	4643      	mov	r3, r8
 8000e24:	1a09      	subs	r1, r1, r0
 8000e26:	b2a4      	uxth	r4, r4
 8000e28:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e2c:	fb07 1110 	mls	r1, r7, r0, r1
 8000e30:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e34:	fb0e fe00 	mul.w	lr, lr, r0
 8000e38:	45a6      	cmp	lr, r4
 8000e3a:	d908      	bls.n	8000e4e <__udivmoddi4+0x156>
 8000e3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e40:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e44:	d202      	bcs.n	8000e4c <__udivmoddi4+0x154>
 8000e46:	45a6      	cmp	lr, r4
 8000e48:	f200 80bb 	bhi.w	8000fc2 <__udivmoddi4+0x2ca>
 8000e4c:	4608      	mov	r0, r1
 8000e4e:	eba4 040e 	sub.w	r4, r4, lr
 8000e52:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e56:	e79c      	b.n	8000d92 <__udivmoddi4+0x9a>
 8000e58:	f1c6 0720 	rsb	r7, r6, #32
 8000e5c:	40b3      	lsls	r3, r6
 8000e5e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e62:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e66:	fa20 f407 	lsr.w	r4, r0, r7
 8000e6a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e6e:	431c      	orrs	r4, r3
 8000e70:	40f9      	lsrs	r1, r7
 8000e72:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e76:	fa00 f306 	lsl.w	r3, r0, r6
 8000e7a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e7e:	0c20      	lsrs	r0, r4, #16
 8000e80:	fa1f fe8c 	uxth.w	lr, ip
 8000e84:	fb09 1118 	mls	r1, r9, r8, r1
 8000e88:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e8c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e90:	4288      	cmp	r0, r1
 8000e92:	fa02 f206 	lsl.w	r2, r2, r6
 8000e96:	d90b      	bls.n	8000eb0 <__udivmoddi4+0x1b8>
 8000e98:	eb1c 0101 	adds.w	r1, ip, r1
 8000e9c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ea0:	f080 8088 	bcs.w	8000fb4 <__udivmoddi4+0x2bc>
 8000ea4:	4288      	cmp	r0, r1
 8000ea6:	f240 8085 	bls.w	8000fb4 <__udivmoddi4+0x2bc>
 8000eaa:	f1a8 0802 	sub.w	r8, r8, #2
 8000eae:	4461      	add	r1, ip
 8000eb0:	1a09      	subs	r1, r1, r0
 8000eb2:	b2a4      	uxth	r4, r4
 8000eb4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000eb8:	fb09 1110 	mls	r1, r9, r0, r1
 8000ebc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000ec0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ec4:	458e      	cmp	lr, r1
 8000ec6:	d908      	bls.n	8000eda <__udivmoddi4+0x1e2>
 8000ec8:	eb1c 0101 	adds.w	r1, ip, r1
 8000ecc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ed0:	d26c      	bcs.n	8000fac <__udivmoddi4+0x2b4>
 8000ed2:	458e      	cmp	lr, r1
 8000ed4:	d96a      	bls.n	8000fac <__udivmoddi4+0x2b4>
 8000ed6:	3802      	subs	r0, #2
 8000ed8:	4461      	add	r1, ip
 8000eda:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000ede:	fba0 9402 	umull	r9, r4, r0, r2
 8000ee2:	eba1 010e 	sub.w	r1, r1, lr
 8000ee6:	42a1      	cmp	r1, r4
 8000ee8:	46c8      	mov	r8, r9
 8000eea:	46a6      	mov	lr, r4
 8000eec:	d356      	bcc.n	8000f9c <__udivmoddi4+0x2a4>
 8000eee:	d053      	beq.n	8000f98 <__udivmoddi4+0x2a0>
 8000ef0:	b15d      	cbz	r5, 8000f0a <__udivmoddi4+0x212>
 8000ef2:	ebb3 0208 	subs.w	r2, r3, r8
 8000ef6:	eb61 010e 	sbc.w	r1, r1, lr
 8000efa:	fa01 f707 	lsl.w	r7, r1, r7
 8000efe:	fa22 f306 	lsr.w	r3, r2, r6
 8000f02:	40f1      	lsrs	r1, r6
 8000f04:	431f      	orrs	r7, r3
 8000f06:	e9c5 7100 	strd	r7, r1, [r5]
 8000f0a:	2600      	movs	r6, #0
 8000f0c:	4631      	mov	r1, r6
 8000f0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f12:	f1c2 0320 	rsb	r3, r2, #32
 8000f16:	40d8      	lsrs	r0, r3
 8000f18:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f1c:	fa21 f303 	lsr.w	r3, r1, r3
 8000f20:	4091      	lsls	r1, r2
 8000f22:	4301      	orrs	r1, r0
 8000f24:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f28:	fa1f fe8c 	uxth.w	lr, ip
 8000f2c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f30:	fb07 3610 	mls	r6, r7, r0, r3
 8000f34:	0c0b      	lsrs	r3, r1, #16
 8000f36:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f3a:	fb00 f60e 	mul.w	r6, r0, lr
 8000f3e:	429e      	cmp	r6, r3
 8000f40:	fa04 f402 	lsl.w	r4, r4, r2
 8000f44:	d908      	bls.n	8000f58 <__udivmoddi4+0x260>
 8000f46:	eb1c 0303 	adds.w	r3, ip, r3
 8000f4a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f4e:	d22f      	bcs.n	8000fb0 <__udivmoddi4+0x2b8>
 8000f50:	429e      	cmp	r6, r3
 8000f52:	d92d      	bls.n	8000fb0 <__udivmoddi4+0x2b8>
 8000f54:	3802      	subs	r0, #2
 8000f56:	4463      	add	r3, ip
 8000f58:	1b9b      	subs	r3, r3, r6
 8000f5a:	b289      	uxth	r1, r1
 8000f5c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f60:	fb07 3316 	mls	r3, r7, r6, r3
 8000f64:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f68:	fb06 f30e 	mul.w	r3, r6, lr
 8000f6c:	428b      	cmp	r3, r1
 8000f6e:	d908      	bls.n	8000f82 <__udivmoddi4+0x28a>
 8000f70:	eb1c 0101 	adds.w	r1, ip, r1
 8000f74:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f78:	d216      	bcs.n	8000fa8 <__udivmoddi4+0x2b0>
 8000f7a:	428b      	cmp	r3, r1
 8000f7c:	d914      	bls.n	8000fa8 <__udivmoddi4+0x2b0>
 8000f7e:	3e02      	subs	r6, #2
 8000f80:	4461      	add	r1, ip
 8000f82:	1ac9      	subs	r1, r1, r3
 8000f84:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f88:	e738      	b.n	8000dfc <__udivmoddi4+0x104>
 8000f8a:	462e      	mov	r6, r5
 8000f8c:	4628      	mov	r0, r5
 8000f8e:	e705      	b.n	8000d9c <__udivmoddi4+0xa4>
 8000f90:	4606      	mov	r6, r0
 8000f92:	e6e3      	b.n	8000d5c <__udivmoddi4+0x64>
 8000f94:	4618      	mov	r0, r3
 8000f96:	e6f8      	b.n	8000d8a <__udivmoddi4+0x92>
 8000f98:	454b      	cmp	r3, r9
 8000f9a:	d2a9      	bcs.n	8000ef0 <__udivmoddi4+0x1f8>
 8000f9c:	ebb9 0802 	subs.w	r8, r9, r2
 8000fa0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fa4:	3801      	subs	r0, #1
 8000fa6:	e7a3      	b.n	8000ef0 <__udivmoddi4+0x1f8>
 8000fa8:	4646      	mov	r6, r8
 8000faa:	e7ea      	b.n	8000f82 <__udivmoddi4+0x28a>
 8000fac:	4620      	mov	r0, r4
 8000fae:	e794      	b.n	8000eda <__udivmoddi4+0x1e2>
 8000fb0:	4640      	mov	r0, r8
 8000fb2:	e7d1      	b.n	8000f58 <__udivmoddi4+0x260>
 8000fb4:	46d0      	mov	r8, sl
 8000fb6:	e77b      	b.n	8000eb0 <__udivmoddi4+0x1b8>
 8000fb8:	3b02      	subs	r3, #2
 8000fba:	4461      	add	r1, ip
 8000fbc:	e732      	b.n	8000e24 <__udivmoddi4+0x12c>
 8000fbe:	4630      	mov	r0, r6
 8000fc0:	e709      	b.n	8000dd6 <__udivmoddi4+0xde>
 8000fc2:	4464      	add	r4, ip
 8000fc4:	3802      	subs	r0, #2
 8000fc6:	e742      	b.n	8000e4e <__udivmoddi4+0x156>

08000fc8 <__aeabi_idiv0>:
 8000fc8:	4770      	bx	lr
 8000fca:	bf00      	nop

08000fcc <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b084      	sub	sp, #16
 8000fd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000fd2:	463b      	mov	r3, r7
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	601a      	str	r2, [r3, #0]
 8000fd8:	605a      	str	r2, [r3, #4]
 8000fda:	609a      	str	r2, [r3, #8]
 8000fdc:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000fde:	4b21      	ldr	r3, [pc, #132]	; (8001064 <MX_ADC1_Init+0x98>)
 8000fe0:	4a21      	ldr	r2, [pc, #132]	; (8001068 <MX_ADC1_Init+0x9c>)
 8000fe2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000fe4:	4b1f      	ldr	r3, [pc, #124]	; (8001064 <MX_ADC1_Init+0x98>)
 8000fe6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000fea:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000fec:	4b1d      	ldr	r3, [pc, #116]	; (8001064 <MX_ADC1_Init+0x98>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000ff2:	4b1c      	ldr	r3, [pc, #112]	; (8001064 <MX_ADC1_Init+0x98>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000ff8:	4b1a      	ldr	r3, [pc, #104]	; (8001064 <MX_ADC1_Init+0x98>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000ffe:	4b19      	ldr	r3, [pc, #100]	; (8001064 <MX_ADC1_Init+0x98>)
 8001000:	2200      	movs	r2, #0
 8001002:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001006:	4b17      	ldr	r3, [pc, #92]	; (8001064 <MX_ADC1_Init+0x98>)
 8001008:	2200      	movs	r2, #0
 800100a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800100c:	4b15      	ldr	r3, [pc, #84]	; (8001064 <MX_ADC1_Init+0x98>)
 800100e:	4a17      	ldr	r2, [pc, #92]	; (800106c <MX_ADC1_Init+0xa0>)
 8001010:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001012:	4b14      	ldr	r3, [pc, #80]	; (8001064 <MX_ADC1_Init+0x98>)
 8001014:	2200      	movs	r2, #0
 8001016:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001018:	4b12      	ldr	r3, [pc, #72]	; (8001064 <MX_ADC1_Init+0x98>)
 800101a:	2201      	movs	r2, #1
 800101c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800101e:	4b11      	ldr	r3, [pc, #68]	; (8001064 <MX_ADC1_Init+0x98>)
 8001020:	2200      	movs	r2, #0
 8001022:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001026:	4b0f      	ldr	r3, [pc, #60]	; (8001064 <MX_ADC1_Init+0x98>)
 8001028:	2201      	movs	r2, #1
 800102a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800102c:	480d      	ldr	r0, [pc, #52]	; (8001064 <MX_ADC1_Init+0x98>)
 800102e:	f003 f993 	bl	8004358 <HAL_ADC_Init>
 8001032:	4603      	mov	r3, r0
 8001034:	2b00      	cmp	r3, #0
 8001036:	d001      	beq.n	800103c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001038:	f002 f98e 	bl	8003358 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800103c:	2310      	movs	r3, #16
 800103e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001040:	2301      	movs	r3, #1
 8001042:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001044:	2300      	movs	r3, #0
 8001046:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001048:	463b      	mov	r3, r7
 800104a:	4619      	mov	r1, r3
 800104c:	4805      	ldr	r0, [pc, #20]	; (8001064 <MX_ADC1_Init+0x98>)
 800104e:	f003 fbd7 	bl	8004800 <HAL_ADC_ConfigChannel>
 8001052:	4603      	mov	r3, r0
 8001054:	2b00      	cmp	r3, #0
 8001056:	d001      	beq.n	800105c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001058:	f002 f97e 	bl	8003358 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800105c:	bf00      	nop
 800105e:	3710      	adds	r7, #16
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}
 8001064:	20000144 	.word	0x20000144
 8001068:	40012000 	.word	0x40012000
 800106c:	0f000001 	.word	0x0f000001

08001070 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b084      	sub	sp, #16
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC1)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	4a0e      	ldr	r2, [pc, #56]	; (80010b8 <HAL_ADC_MspInit+0x48>)
 800107e:	4293      	cmp	r3, r2
 8001080:	d115      	bne.n	80010ae <HAL_ADC_MspInit+0x3e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001082:	2300      	movs	r3, #0
 8001084:	60fb      	str	r3, [r7, #12]
 8001086:	4b0d      	ldr	r3, [pc, #52]	; (80010bc <HAL_ADC_MspInit+0x4c>)
 8001088:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800108a:	4a0c      	ldr	r2, [pc, #48]	; (80010bc <HAL_ADC_MspInit+0x4c>)
 800108c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001090:	6453      	str	r3, [r2, #68]	; 0x44
 8001092:	4b0a      	ldr	r3, [pc, #40]	; (80010bc <HAL_ADC_MspInit+0x4c>)
 8001094:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001096:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800109a:	60fb      	str	r3, [r7, #12]
 800109c:	68fb      	ldr	r3, [r7, #12]

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800109e:	2200      	movs	r2, #0
 80010a0:	2100      	movs	r1, #0
 80010a2:	2012      	movs	r0, #18
 80010a4:	f004 fc49 	bl	800593a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80010a8:	2012      	movs	r0, #18
 80010aa:	f004 fc62 	bl	8005972 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80010ae:	bf00      	nop
 80010b0:	3710      	adds	r7, #16
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	40012000 	.word	0x40012000
 80010bc:	40023800 	.word	0x40023800

080010c0 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80010c4:	4b18      	ldr	r3, [pc, #96]	; (8001128 <MX_CAN1_Init+0x68>)
 80010c6:	4a19      	ldr	r2, [pc, #100]	; (800112c <MX_CAN1_Init+0x6c>)
 80010c8:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 12;
 80010ca:	4b17      	ldr	r3, [pc, #92]	; (8001128 <MX_CAN1_Init+0x68>)
 80010cc:	220c      	movs	r2, #12
 80010ce:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_SILENT;
 80010d0:	4b15      	ldr	r3, [pc, #84]	; (8001128 <MX_CAN1_Init+0x68>)
 80010d2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80010d6:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80010d8:	4b13      	ldr	r3, [pc, #76]	; (8001128 <MX_CAN1_Init+0x68>)
 80010da:	2200      	movs	r2, #0
 80010dc:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_11TQ;
 80010de:	4b12      	ldr	r3, [pc, #72]	; (8001128 <MX_CAN1_Init+0x68>)
 80010e0:	f44f 2220 	mov.w	r2, #655360	; 0xa0000
 80010e4:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 80010e6:	4b10      	ldr	r3, [pc, #64]	; (8001128 <MX_CAN1_Init+0x68>)
 80010e8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80010ec:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80010ee:	4b0e      	ldr	r3, [pc, #56]	; (8001128 <MX_CAN1_Init+0x68>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = ENABLE;
 80010f4:	4b0c      	ldr	r3, [pc, #48]	; (8001128 <MX_CAN1_Init+0x68>)
 80010f6:	2201      	movs	r2, #1
 80010f8:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80010fa:	4b0b      	ldr	r3, [pc, #44]	; (8001128 <MX_CAN1_Init+0x68>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = ENABLE;
 8001100:	4b09      	ldr	r3, [pc, #36]	; (8001128 <MX_CAN1_Init+0x68>)
 8001102:	2201      	movs	r2, #1
 8001104:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001106:	4b08      	ldr	r3, [pc, #32]	; (8001128 <MX_CAN1_Init+0x68>)
 8001108:	2200      	movs	r2, #0
 800110a:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800110c:	4b06      	ldr	r3, [pc, #24]	; (8001128 <MX_CAN1_Init+0x68>)
 800110e:	2200      	movs	r2, #0
 8001110:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001112:	4805      	ldr	r0, [pc, #20]	; (8001128 <MX_CAN1_Init+0x68>)
 8001114:	f003 fd9c 	bl	8004c50 <HAL_CAN_Init>
 8001118:	4603      	mov	r3, r0
 800111a:	2b00      	cmp	r3, #0
 800111c:	d001      	beq.n	8001122 <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 800111e:	f002 f91b 	bl	8003358 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8001122:	bf00      	nop
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	2000018c 	.word	0x2000018c
 800112c:	40006400 	.word	0x40006400

08001130 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b08a      	sub	sp, #40	; 0x28
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001138:	f107 0314 	add.w	r3, r7, #20
 800113c:	2200      	movs	r2, #0
 800113e:	601a      	str	r2, [r3, #0]
 8001140:	605a      	str	r2, [r3, #4]
 8001142:	609a      	str	r2, [r3, #8]
 8001144:	60da      	str	r2, [r3, #12]
 8001146:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	4a21      	ldr	r2, [pc, #132]	; (80011d4 <HAL_CAN_MspInit+0xa4>)
 800114e:	4293      	cmp	r3, r2
 8001150:	d13b      	bne.n	80011ca <HAL_CAN_MspInit+0x9a>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001152:	2300      	movs	r3, #0
 8001154:	613b      	str	r3, [r7, #16]
 8001156:	4b20      	ldr	r3, [pc, #128]	; (80011d8 <HAL_CAN_MspInit+0xa8>)
 8001158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800115a:	4a1f      	ldr	r2, [pc, #124]	; (80011d8 <HAL_CAN_MspInit+0xa8>)
 800115c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001160:	6413      	str	r3, [r2, #64]	; 0x40
 8001162:	4b1d      	ldr	r3, [pc, #116]	; (80011d8 <HAL_CAN_MspInit+0xa8>)
 8001164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001166:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800116a:	613b      	str	r3, [r7, #16]
 800116c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800116e:	2300      	movs	r3, #0
 8001170:	60fb      	str	r3, [r7, #12]
 8001172:	4b19      	ldr	r3, [pc, #100]	; (80011d8 <HAL_CAN_MspInit+0xa8>)
 8001174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001176:	4a18      	ldr	r2, [pc, #96]	; (80011d8 <HAL_CAN_MspInit+0xa8>)
 8001178:	f043 0308 	orr.w	r3, r3, #8
 800117c:	6313      	str	r3, [r2, #48]	; 0x30
 800117e:	4b16      	ldr	r3, [pc, #88]	; (80011d8 <HAL_CAN_MspInit+0xa8>)
 8001180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001182:	f003 0308 	and.w	r3, r3, #8
 8001186:	60fb      	str	r3, [r7, #12]
 8001188:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800118a:	2303      	movs	r3, #3
 800118c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800118e:	2302      	movs	r3, #2
 8001190:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001192:	2300      	movs	r3, #0
 8001194:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001196:	2303      	movs	r3, #3
 8001198:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800119a:	2309      	movs	r3, #9
 800119c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800119e:	f107 0314 	add.w	r3, r7, #20
 80011a2:	4619      	mov	r1, r3
 80011a4:	480d      	ldr	r0, [pc, #52]	; (80011dc <HAL_CAN_MspInit+0xac>)
 80011a6:	f005 f827 	bl	80061f8 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 80011aa:	2200      	movs	r2, #0
 80011ac:	2100      	movs	r1, #0
 80011ae:	2013      	movs	r0, #19
 80011b0:	f004 fbc3 	bl	800593a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 80011b4:	2013      	movs	r0, #19
 80011b6:	f004 fbdc 	bl	8005972 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 80011ba:	2200      	movs	r2, #0
 80011bc:	2100      	movs	r1, #0
 80011be:	2014      	movs	r0, #20
 80011c0:	f004 fbbb 	bl	800593a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80011c4:	2014      	movs	r0, #20
 80011c6:	f004 fbd4 	bl	8005972 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 80011ca:	bf00      	nop
 80011cc:	3728      	adds	r7, #40	; 0x28
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	40006400 	.word	0x40006400
 80011d8:	40023800 	.word	0x40023800
 80011dc:	40020c00 	.word	0x40020c00

080011e0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b082      	sub	sp, #8
 80011e4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80011e6:	2300      	movs	r3, #0
 80011e8:	607b      	str	r3, [r7, #4]
 80011ea:	4b10      	ldr	r3, [pc, #64]	; (800122c <MX_DMA_Init+0x4c>)
 80011ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ee:	4a0f      	ldr	r2, [pc, #60]	; (800122c <MX_DMA_Init+0x4c>)
 80011f0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80011f4:	6313      	str	r3, [r2, #48]	; 0x30
 80011f6:	4b0d      	ldr	r3, [pc, #52]	; (800122c <MX_DMA_Init+0x4c>)
 80011f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011fe:	607b      	str	r3, [r7, #4]
 8001200:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8001202:	2200      	movs	r2, #0
 8001204:	2100      	movs	r1, #0
 8001206:	203b      	movs	r0, #59	; 0x3b
 8001208:	f004 fb97 	bl	800593a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 800120c:	203b      	movs	r0, #59	; 0x3b
 800120e:	f004 fbb0 	bl	8005972 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8001212:	2200      	movs	r2, #0
 8001214:	2100      	movs	r1, #0
 8001216:	2045      	movs	r0, #69	; 0x45
 8001218:	f004 fb8f 	bl	800593a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 800121c:	2045      	movs	r0, #69	; 0x45
 800121e:	f004 fba8 	bl	8005972 <HAL_NVIC_EnableIRQ>

}
 8001222:	bf00      	nop
 8001224:	3708      	adds	r7, #8
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	40023800 	.word	0x40023800

08001230 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b08a      	sub	sp, #40	; 0x28
 8001234:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001236:	f107 0314 	add.w	r3, r7, #20
 800123a:	2200      	movs	r2, #0
 800123c:	601a      	str	r2, [r3, #0]
 800123e:	605a      	str	r2, [r3, #4]
 8001240:	609a      	str	r2, [r3, #8]
 8001242:	60da      	str	r2, [r3, #12]
 8001244:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001246:	2300      	movs	r3, #0
 8001248:	613b      	str	r3, [r7, #16]
 800124a:	4b45      	ldr	r3, [pc, #276]	; (8001360 <MX_GPIO_Init+0x130>)
 800124c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124e:	4a44      	ldr	r2, [pc, #272]	; (8001360 <MX_GPIO_Init+0x130>)
 8001250:	f043 0304 	orr.w	r3, r3, #4
 8001254:	6313      	str	r3, [r2, #48]	; 0x30
 8001256:	4b42      	ldr	r3, [pc, #264]	; (8001360 <MX_GPIO_Init+0x130>)
 8001258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125a:	f003 0304 	and.w	r3, r3, #4
 800125e:	613b      	str	r3, [r7, #16]
 8001260:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001262:	2300      	movs	r3, #0
 8001264:	60fb      	str	r3, [r7, #12]
 8001266:	4b3e      	ldr	r3, [pc, #248]	; (8001360 <MX_GPIO_Init+0x130>)
 8001268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126a:	4a3d      	ldr	r2, [pc, #244]	; (8001360 <MX_GPIO_Init+0x130>)
 800126c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001270:	6313      	str	r3, [r2, #48]	; 0x30
 8001272:	4b3b      	ldr	r3, [pc, #236]	; (8001360 <MX_GPIO_Init+0x130>)
 8001274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001276:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800127a:	60fb      	str	r3, [r7, #12]
 800127c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800127e:	2300      	movs	r3, #0
 8001280:	60bb      	str	r3, [r7, #8]
 8001282:	4b37      	ldr	r3, [pc, #220]	; (8001360 <MX_GPIO_Init+0x130>)
 8001284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001286:	4a36      	ldr	r2, [pc, #216]	; (8001360 <MX_GPIO_Init+0x130>)
 8001288:	f043 0301 	orr.w	r3, r3, #1
 800128c:	6313      	str	r3, [r2, #48]	; 0x30
 800128e:	4b34      	ldr	r3, [pc, #208]	; (8001360 <MX_GPIO_Init+0x130>)
 8001290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001292:	f003 0301 	and.w	r3, r3, #1
 8001296:	60bb      	str	r3, [r7, #8]
 8001298:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800129a:	2300      	movs	r3, #0
 800129c:	607b      	str	r3, [r7, #4]
 800129e:	4b30      	ldr	r3, [pc, #192]	; (8001360 <MX_GPIO_Init+0x130>)
 80012a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a2:	4a2f      	ldr	r2, [pc, #188]	; (8001360 <MX_GPIO_Init+0x130>)
 80012a4:	f043 0302 	orr.w	r3, r3, #2
 80012a8:	6313      	str	r3, [r2, #48]	; 0x30
 80012aa:	4b2d      	ldr	r3, [pc, #180]	; (8001360 <MX_GPIO_Init+0x130>)
 80012ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ae:	f003 0302 	and.w	r3, r3, #2
 80012b2:	607b      	str	r3, [r7, #4]
 80012b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012b6:	2300      	movs	r3, #0
 80012b8:	603b      	str	r3, [r7, #0]
 80012ba:	4b29      	ldr	r3, [pc, #164]	; (8001360 <MX_GPIO_Init+0x130>)
 80012bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012be:	4a28      	ldr	r2, [pc, #160]	; (8001360 <MX_GPIO_Init+0x130>)
 80012c0:	f043 0308 	orr.w	r3, r3, #8
 80012c4:	6313      	str	r3, [r2, #48]	; 0x30
 80012c6:	4b26      	ldr	r3, [pc, #152]	; (8001360 <MX_GPIO_Init+0x130>)
 80012c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ca:	f003 0308 	and.w	r3, r3, #8
 80012ce:	603b      	str	r3, [r7, #0]
 80012d0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED1_Pin|LED2_Pin|RTDS_Pin, GPIO_PIN_RESET);
 80012d2:	2200      	movs	r2, #0
 80012d4:	f248 01c0 	movw	r1, #32960	; 0x80c0
 80012d8:	4822      	ldr	r0, [pc, #136]	; (8001364 <MX_GPIO_Init+0x134>)
 80012da:	f005 f941 	bl	8006560 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RTD_ACTIVE_GPIO_Port, RTD_ACTIVE_Pin, GPIO_PIN_RESET);
 80012de:	2200      	movs	r2, #0
 80012e0:	2108      	movs	r1, #8
 80012e2:	4821      	ldr	r0, [pc, #132]	; (8001368 <MX_GPIO_Init+0x138>)
 80012e4:	f005 f93c 	bl	8006560 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin;
 80012e8:	23c0      	movs	r3, #192	; 0xc0
 80012ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012ec:	2301      	movs	r3, #1
 80012ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f0:	2300      	movs	r3, #0
 80012f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012f4:	2300      	movs	r3, #0
 80012f6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012f8:	f107 0314 	add.w	r3, r7, #20
 80012fc:	4619      	mov	r1, r3
 80012fe:	4819      	ldr	r0, [pc, #100]	; (8001364 <MX_GPIO_Init+0x134>)
 8001300:	f004 ff7a 	bl	80061f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = HVD_Pin|BSPD_Pin|BMS_Pin|IMD_Pin
 8001304:	f647 03e0 	movw	r3, #30944	; 0x78e0
 8001308:	617b      	str	r3, [r7, #20]
                          |BRAKE_Pin|RTD_Pin|LV_ACTIVE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800130a:	2300      	movs	r3, #0
 800130c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800130e:	2302      	movs	r3, #2
 8001310:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001312:	f107 0314 	add.w	r3, r7, #20
 8001316:	4619      	mov	r1, r3
 8001318:	4813      	ldr	r0, [pc, #76]	; (8001368 <MX_GPIO_Init+0x138>)
 800131a:	f004 ff6d 	bl	80061f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RTDS_Pin;
 800131e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001322:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001324:	2301      	movs	r3, #1
 8001326:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001328:	2302      	movs	r3, #2
 800132a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800132c:	2300      	movs	r3, #0
 800132e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(RTDS_GPIO_Port, &GPIO_InitStruct);
 8001330:	f107 0314 	add.w	r3, r7, #20
 8001334:	4619      	mov	r1, r3
 8001336:	480b      	ldr	r0, [pc, #44]	; (8001364 <MX_GPIO_Init+0x134>)
 8001338:	f004 ff5e 	bl	80061f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RTD_ACTIVE_Pin;
 800133c:	2308      	movs	r3, #8
 800133e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001340:	2301      	movs	r3, #1
 8001342:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001344:	2300      	movs	r3, #0
 8001346:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001348:	2300      	movs	r3, #0
 800134a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(RTD_ACTIVE_GPIO_Port, &GPIO_InitStruct);
 800134c:	f107 0314 	add.w	r3, r7, #20
 8001350:	4619      	mov	r1, r3
 8001352:	4805      	ldr	r0, [pc, #20]	; (8001368 <MX_GPIO_Init+0x138>)
 8001354:	f004 ff50 	bl	80061f8 <HAL_GPIO_Init>

}
 8001358:	bf00      	nop
 800135a:	3728      	adds	r7, #40	; 0x28
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}
 8001360:	40023800 	.word	0x40023800
 8001364:	40020000 	.word	0x40020000
 8001368:	40020c00 	.word	0x40020c00

0800136c <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001370:	4b12      	ldr	r3, [pc, #72]	; (80013bc <MX_I2C1_Init+0x50>)
 8001372:	4a13      	ldr	r2, [pc, #76]	; (80013c0 <MX_I2C1_Init+0x54>)
 8001374:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001376:	4b11      	ldr	r3, [pc, #68]	; (80013bc <MX_I2C1_Init+0x50>)
 8001378:	4a12      	ldr	r2, [pc, #72]	; (80013c4 <MX_I2C1_Init+0x58>)
 800137a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800137c:	4b0f      	ldr	r3, [pc, #60]	; (80013bc <MX_I2C1_Init+0x50>)
 800137e:	2200      	movs	r2, #0
 8001380:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001382:	4b0e      	ldr	r3, [pc, #56]	; (80013bc <MX_I2C1_Init+0x50>)
 8001384:	2200      	movs	r2, #0
 8001386:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001388:	4b0c      	ldr	r3, [pc, #48]	; (80013bc <MX_I2C1_Init+0x50>)
 800138a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800138e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001390:	4b0a      	ldr	r3, [pc, #40]	; (80013bc <MX_I2C1_Init+0x50>)
 8001392:	2200      	movs	r2, #0
 8001394:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001396:	4b09      	ldr	r3, [pc, #36]	; (80013bc <MX_I2C1_Init+0x50>)
 8001398:	2200      	movs	r2, #0
 800139a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800139c:	4b07      	ldr	r3, [pc, #28]	; (80013bc <MX_I2C1_Init+0x50>)
 800139e:	2200      	movs	r2, #0
 80013a0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80013a2:	4b06      	ldr	r3, [pc, #24]	; (80013bc <MX_I2C1_Init+0x50>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80013a8:	4804      	ldr	r0, [pc, #16]	; (80013bc <MX_I2C1_Init+0x50>)
 80013aa:	f005 f8f3 	bl	8006594 <HAL_I2C_Init>
 80013ae:	4603      	mov	r3, r0
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d001      	beq.n	80013b8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80013b4:	f001 ffd0 	bl	8003358 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80013b8:	bf00      	nop
 80013ba:	bd80      	pop	{r7, pc}
 80013bc:	200001b4 	.word	0x200001b4
 80013c0:	40005400 	.word	0x40005400
 80013c4:	00061a80 	.word	0x00061a80

080013c8 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80013cc:	4b12      	ldr	r3, [pc, #72]	; (8001418 <MX_I2C2_Init+0x50>)
 80013ce:	4a13      	ldr	r2, [pc, #76]	; (800141c <MX_I2C2_Init+0x54>)
 80013d0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 80013d2:	4b11      	ldr	r3, [pc, #68]	; (8001418 <MX_I2C2_Init+0x50>)
 80013d4:	4a12      	ldr	r2, [pc, #72]	; (8001420 <MX_I2C2_Init+0x58>)
 80013d6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80013d8:	4b0f      	ldr	r3, [pc, #60]	; (8001418 <MX_I2C2_Init+0x50>)
 80013da:	2200      	movs	r2, #0
 80013dc:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80013de:	4b0e      	ldr	r3, [pc, #56]	; (8001418 <MX_I2C2_Init+0x50>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80013e4:	4b0c      	ldr	r3, [pc, #48]	; (8001418 <MX_I2C2_Init+0x50>)
 80013e6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80013ea:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80013ec:	4b0a      	ldr	r3, [pc, #40]	; (8001418 <MX_I2C2_Init+0x50>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80013f2:	4b09      	ldr	r3, [pc, #36]	; (8001418 <MX_I2C2_Init+0x50>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80013f8:	4b07      	ldr	r3, [pc, #28]	; (8001418 <MX_I2C2_Init+0x50>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80013fe:	4b06      	ldr	r3, [pc, #24]	; (8001418 <MX_I2C2_Init+0x50>)
 8001400:	2200      	movs	r2, #0
 8001402:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001404:	4804      	ldr	r0, [pc, #16]	; (8001418 <MX_I2C2_Init+0x50>)
 8001406:	f005 f8c5 	bl	8006594 <HAL_I2C_Init>
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	d001      	beq.n	8001414 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001410:	f001 ffa2 	bl	8003358 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001414:	bf00      	nop
 8001416:	bd80      	pop	{r7, pc}
 8001418:	20000208 	.word	0x20000208
 800141c:	40005800 	.word	0x40005800
 8001420:	00061a80 	.word	0x00061a80

08001424 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b08c      	sub	sp, #48	; 0x30
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800142c:	f107 031c 	add.w	r3, r7, #28
 8001430:	2200      	movs	r2, #0
 8001432:	601a      	str	r2, [r3, #0]
 8001434:	605a      	str	r2, [r3, #4]
 8001436:	609a      	str	r2, [r3, #8]
 8001438:	60da      	str	r2, [r3, #12]
 800143a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4a3a      	ldr	r2, [pc, #232]	; (800152c <HAL_I2C_MspInit+0x108>)
 8001442:	4293      	cmp	r3, r2
 8001444:	d134      	bne.n	80014b0 <HAL_I2C_MspInit+0x8c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001446:	2300      	movs	r3, #0
 8001448:	61bb      	str	r3, [r7, #24]
 800144a:	4b39      	ldr	r3, [pc, #228]	; (8001530 <HAL_I2C_MspInit+0x10c>)
 800144c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800144e:	4a38      	ldr	r2, [pc, #224]	; (8001530 <HAL_I2C_MspInit+0x10c>)
 8001450:	f043 0302 	orr.w	r3, r3, #2
 8001454:	6313      	str	r3, [r2, #48]	; 0x30
 8001456:	4b36      	ldr	r3, [pc, #216]	; (8001530 <HAL_I2C_MspInit+0x10c>)
 8001458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145a:	f003 0302 	and.w	r3, r3, #2
 800145e:	61bb      	str	r3, [r7, #24]
 8001460:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001462:	23c0      	movs	r3, #192	; 0xc0
 8001464:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001466:	2312      	movs	r3, #18
 8001468:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800146a:	2300      	movs	r3, #0
 800146c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800146e:	2303      	movs	r3, #3
 8001470:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001472:	2304      	movs	r3, #4
 8001474:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001476:	f107 031c 	add.w	r3, r7, #28
 800147a:	4619      	mov	r1, r3
 800147c:	482d      	ldr	r0, [pc, #180]	; (8001534 <HAL_I2C_MspInit+0x110>)
 800147e:	f004 febb 	bl	80061f8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001482:	2300      	movs	r3, #0
 8001484:	617b      	str	r3, [r7, #20]
 8001486:	4b2a      	ldr	r3, [pc, #168]	; (8001530 <HAL_I2C_MspInit+0x10c>)
 8001488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800148a:	4a29      	ldr	r2, [pc, #164]	; (8001530 <HAL_I2C_MspInit+0x10c>)
 800148c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001490:	6413      	str	r3, [r2, #64]	; 0x40
 8001492:	4b27      	ldr	r3, [pc, #156]	; (8001530 <HAL_I2C_MspInit+0x10c>)
 8001494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001496:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800149a:	617b      	str	r3, [r7, #20]
 800149c:	697b      	ldr	r3, [r7, #20]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800149e:	2200      	movs	r2, #0
 80014a0:	2100      	movs	r1, #0
 80014a2:	201f      	movs	r0, #31
 80014a4:	f004 fa49 	bl	800593a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80014a8:	201f      	movs	r0, #31
 80014aa:	f004 fa62 	bl	8005972 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80014ae:	e039      	b.n	8001524 <HAL_I2C_MspInit+0x100>
  else if(i2cHandle->Instance==I2C2)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	4a20      	ldr	r2, [pc, #128]	; (8001538 <HAL_I2C_MspInit+0x114>)
 80014b6:	4293      	cmp	r3, r2
 80014b8:	d134      	bne.n	8001524 <HAL_I2C_MspInit+0x100>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014ba:	2300      	movs	r3, #0
 80014bc:	613b      	str	r3, [r7, #16]
 80014be:	4b1c      	ldr	r3, [pc, #112]	; (8001530 <HAL_I2C_MspInit+0x10c>)
 80014c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c2:	4a1b      	ldr	r2, [pc, #108]	; (8001530 <HAL_I2C_MspInit+0x10c>)
 80014c4:	f043 0302 	orr.w	r3, r3, #2
 80014c8:	6313      	str	r3, [r2, #48]	; 0x30
 80014ca:	4b19      	ldr	r3, [pc, #100]	; (8001530 <HAL_I2C_MspInit+0x10c>)
 80014cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ce:	f003 0302 	and.w	r3, r3, #2
 80014d2:	613b      	str	r3, [r7, #16]
 80014d4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80014d6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80014da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014dc:	2312      	movs	r3, #18
 80014de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e0:	2300      	movs	r3, #0
 80014e2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014e4:	2303      	movs	r3, #3
 80014e6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80014e8:	2304      	movs	r3, #4
 80014ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014ec:	f107 031c 	add.w	r3, r7, #28
 80014f0:	4619      	mov	r1, r3
 80014f2:	4810      	ldr	r0, [pc, #64]	; (8001534 <HAL_I2C_MspInit+0x110>)
 80014f4:	f004 fe80 	bl	80061f8 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80014f8:	2300      	movs	r3, #0
 80014fa:	60fb      	str	r3, [r7, #12]
 80014fc:	4b0c      	ldr	r3, [pc, #48]	; (8001530 <HAL_I2C_MspInit+0x10c>)
 80014fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001500:	4a0b      	ldr	r2, [pc, #44]	; (8001530 <HAL_I2C_MspInit+0x10c>)
 8001502:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001506:	6413      	str	r3, [r2, #64]	; 0x40
 8001508:	4b09      	ldr	r3, [pc, #36]	; (8001530 <HAL_I2C_MspInit+0x10c>)
 800150a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800150c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001510:	60fb      	str	r3, [r7, #12]
 8001512:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8001514:	2200      	movs	r2, #0
 8001516:	2100      	movs	r1, #0
 8001518:	2021      	movs	r0, #33	; 0x21
 800151a:	f004 fa0e 	bl	800593a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 800151e:	2021      	movs	r0, #33	; 0x21
 8001520:	f004 fa27 	bl	8005972 <HAL_NVIC_EnableIRQ>
}
 8001524:	bf00      	nop
 8001526:	3730      	adds	r7, #48	; 0x30
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}
 800152c:	40005400 	.word	0x40005400
 8001530:	40023800 	.word	0x40023800
 8001534:	40020400 	.word	0x40020400
 8001538:	40005800 	.word	0x40005800

0800153c <_write>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, uint8_t *ptr, int len) {
 800153c:	b580      	push	{r7, lr}
 800153e:	b084      	sub	sp, #16
 8001540:	af00      	add	r7, sp, #0
 8001542:	60f8      	str	r0, [r7, #12]
 8001544:	60b9      	str	r1, [r7, #8]
 8001546:	607a      	str	r2, [r7, #4]
   HAL_UART_Transmit(&huart1, (uint8_t *)ptr, (uint16_t)len, 100);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	b29a      	uxth	r2, r3
 800154c:	2364      	movs	r3, #100	; 0x64
 800154e:	68b9      	ldr	r1, [r7, #8]
 8001550:	4803      	ldr	r0, [pc, #12]	; (8001560 <_write+0x24>)
 8001552:	f00a fc94 	bl	800be7e <HAL_UART_Transmit>
   return (len);
 8001556:	687b      	ldr	r3, [r7, #4]
}
 8001558:	4618      	mov	r0, r3
 800155a:	3710      	adds	r7, #16
 800155c:	46bd      	mov	sp, r7
 800155e:	bd80      	pop	{r7, pc}
 8001560:	20011738 	.word	0x20011738

08001564 <getDateTimeBits>:

uint64_t getDateTimeBits() {
 8001564:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001568:	b0a0      	sub	sp, #128	; 0x80
 800156a:	af00      	add	r7, sp, #0
	uint64_t result = 0;
 800156c:	f04f 0200 	mov.w	r2, #0
 8001570:	f04f 0300 	mov.w	r3, #0
 8001574:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78

	RTC_DateTypeDef sDate;
	RTC_TimeTypeDef sTime;

	HAL_RTC_GetTime(&hrtc, &sTime, FORMAT_BIN);
 8001578:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800157c:	2200      	movs	r2, #0
 800157e:	4619      	mov	r1, r3
 8001580:	485d      	ldr	r0, [pc, #372]	; (80016f8 <getDateTimeBits+0x194>)
 8001582:	f008 fa2d 	bl	80099e0 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &sDate, FORMAT_BIN);
 8001586:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800158a:	2200      	movs	r2, #0
 800158c:	4619      	mov	r1, r3
 800158e:	485a      	ldr	r0, [pc, #360]	; (80016f8 <getDateTimeBits+0x194>)
 8001590:	f008 fb08 	bl	8009ba4 <HAL_RTC_GetDate>

	result |= (uint64_t)(sTime.SubSeconds);
 8001594:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001596:	2200      	movs	r2, #0
 8001598:	461c      	mov	r4, r3
 800159a:	4615      	mov	r5, r2
 800159c:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 80015a0:	ea42 0a04 	orr.w	sl, r2, r4
 80015a4:	ea43 0b05 	orr.w	fp, r3, r5
 80015a8:	e9c7 ab1e 	strd	sl, fp, [r7, #120]	; 0x78
	result |= (uint64_t)(sTime.Seconds) << 8;
 80015ac:	f897 3062 	ldrb.w	r3, [r7, #98]	; 0x62
 80015b0:	b2db      	uxtb	r3, r3
 80015b2:	2200      	movs	r2, #0
 80015b4:	4698      	mov	r8, r3
 80015b6:	4691      	mov	r9, r2
 80015b8:	f04f 0000 	mov.w	r0, #0
 80015bc:	f04f 0100 	mov.w	r1, #0
 80015c0:	ea4f 2109 	mov.w	r1, r9, lsl #8
 80015c4:	ea41 6118 	orr.w	r1, r1, r8, lsr #24
 80015c8:	ea4f 2008 	mov.w	r0, r8, lsl #8
 80015cc:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 80015d0:	ea42 0400 	orr.w	r4, r2, r0
 80015d4:	62bc      	str	r4, [r7, #40]	; 0x28
 80015d6:	430b      	orrs	r3, r1
 80015d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80015da:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 80015de:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
	result |= (uint64_t)(sTime.Minutes) << 16;
 80015e2:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
 80015e6:	b2db      	uxtb	r3, r3
 80015e8:	2200      	movs	r2, #0
 80015ea:	65bb      	str	r3, [r7, #88]	; 0x58
 80015ec:	65fa      	str	r2, [r7, #92]	; 0x5c
 80015ee:	f04f 0000 	mov.w	r0, #0
 80015f2:	f04f 0100 	mov.w	r1, #0
 80015f6:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 80015fa:	462b      	mov	r3, r5
 80015fc:	0419      	lsls	r1, r3, #16
 80015fe:	4623      	mov	r3, r4
 8001600:	ea41 4113 	orr.w	r1, r1, r3, lsr #16
 8001604:	4623      	mov	r3, r4
 8001606:	0418      	lsls	r0, r3, #16
 8001608:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 800160c:	ea42 0400 	orr.w	r4, r2, r0
 8001610:	623c      	str	r4, [r7, #32]
 8001612:	430b      	orrs	r3, r1
 8001614:	627b      	str	r3, [r7, #36]	; 0x24
 8001616:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800161a:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
	result |= (uint64_t)(sTime.Hours) << 24;
 800161e:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 8001622:	b2db      	uxtb	r3, r3
 8001624:	2200      	movs	r2, #0
 8001626:	653b      	str	r3, [r7, #80]	; 0x50
 8001628:	657a      	str	r2, [r7, #84]	; 0x54
 800162a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800162e:	460b      	mov	r3, r1
 8001630:	0a1b      	lsrs	r3, r3, #8
 8001632:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001634:	460b      	mov	r3, r1
 8001636:	061b      	lsls	r3, r3, #24
 8001638:	64bb      	str	r3, [r7, #72]	; 0x48
 800163a:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 800163e:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8001642:	4621      	mov	r1, r4
 8001644:	4311      	orrs	r1, r2
 8001646:	61b9      	str	r1, [r7, #24]
 8001648:	4629      	mov	r1, r5
 800164a:	4319      	orrs	r1, r3
 800164c:	61f9      	str	r1, [r7, #28]
 800164e:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8001652:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
	result |= (uint64_t)(sDate.Date) << 32;
 8001656:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 800165a:	b2db      	uxtb	r3, r3
 800165c:	2200      	movs	r2, #0
 800165e:	643b      	str	r3, [r7, #64]	; 0x40
 8001660:	647a      	str	r2, [r7, #68]	; 0x44
 8001662:	f04f 0200 	mov.w	r2, #0
 8001666:	f04f 0300 	mov.w	r3, #0
 800166a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800166c:	000b      	movs	r3, r1
 800166e:	2200      	movs	r2, #0
 8001670:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8001674:	ea40 0402 	orr.w	r4, r0, r2
 8001678:	613c      	str	r4, [r7, #16]
 800167a:	430b      	orrs	r3, r1
 800167c:	617b      	str	r3, [r7, #20]
 800167e:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8001682:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
	result |= (uint64_t)(sDate.Month) << 40;
 8001686:	f897 3075 	ldrb.w	r3, [r7, #117]	; 0x75
 800168a:	b2db      	uxtb	r3, r3
 800168c:	2200      	movs	r2, #0
 800168e:	63bb      	str	r3, [r7, #56]	; 0x38
 8001690:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001692:	f04f 0200 	mov.w	r2, #0
 8001696:	f04f 0300 	mov.w	r3, #0
 800169a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800169c:	020b      	lsls	r3, r1, #8
 800169e:	2200      	movs	r2, #0
 80016a0:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80016a4:	ea40 0402 	orr.w	r4, r0, r2
 80016a8:	60bc      	str	r4, [r7, #8]
 80016aa:	430b      	orrs	r3, r1
 80016ac:	60fb      	str	r3, [r7, #12]
 80016ae:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80016b2:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
	result |= (uint64_t)(sDate.Year) << 48;
 80016b6:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80016ba:	b2db      	uxtb	r3, r3
 80016bc:	2200      	movs	r2, #0
 80016be:	633b      	str	r3, [r7, #48]	; 0x30
 80016c0:	637a      	str	r2, [r7, #52]	; 0x34
 80016c2:	f04f 0200 	mov.w	r2, #0
 80016c6:	f04f 0300 	mov.w	r3, #0
 80016ca:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80016cc:	040b      	lsls	r3, r1, #16
 80016ce:	2200      	movs	r2, #0
 80016d0:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80016d4:	ea40 0402 	orr.w	r4, r0, r2
 80016d8:	603c      	str	r4, [r7, #0]
 80016da:	430b      	orrs	r3, r1
 80016dc:	607b      	str	r3, [r7, #4]
 80016de:	e9d7 3400 	ldrd	r3, r4, [r7]
 80016e2:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78

	return result;
 80016e6:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
}
 80016ea:	4610      	mov	r0, r2
 80016ec:	4619      	mov	r1, r3
 80016ee:	3780      	adds	r7, #128	; 0x80
 80016f0:	46bd      	mov	sp, r7
 80016f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80016f6:	bf00      	nop
 80016f8:	200114b0 	.word	0x200114b0

080016fc <SD_Setup>:


void SD_Setup() {
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b086      	sub	sp, #24
 8001700:	af00      	add	r7, sp, #0
	// INIT & MOUNT
	disk_initialize((BYTE) 0);
 8001702:	2000      	movs	r0, #0
 8001704:	f00c fb26 	bl	800dd54 <disk_initialize>
	uint32_t err = f_mount(&SDFatFs, "", 0);
 8001708:	2200      	movs	r2, #0
 800170a:	491f      	ldr	r1, [pc, #124]	; (8001788 <SD_Setup+0x8c>)
 800170c:	481f      	ldr	r0, [pc, #124]	; (800178c <SD_Setup+0x90>)
 800170e:	f00e fce1 	bl	80100d4 <f_mount>
 8001712:	4603      	mov	r3, r0
 8001714:	617b      	str	r3, [r7, #20]

	#if DEBUG_MODE
		printf("mount err: %d\n", err);
 8001716:	6979      	ldr	r1, [r7, #20]
 8001718:	481d      	ldr	r0, [pc, #116]	; (8001790 <SD_Setup+0x94>)
 800171a:	f00f fb6d 	bl	8010df8 <iprintf>
	#endif
	if(err != FR_OK) {
 800171e:	697b      	ldr	r3, [r7, #20]
 8001720:	2b00      	cmp	r3, #0
 8001722:	d01d      	beq.n	8001760 <SD_Setup+0x64>
		errlog.component = "ECU";
 8001724:	4b1b      	ldr	r3, [pc, #108]	; (8001794 <SD_Setup+0x98>)
 8001726:	4a1c      	ldr	r2, [pc, #112]	; (8001798 <SD_Setup+0x9c>)
 8001728:	601a      	str	r2, [r3, #0]
		errlog.level = "ERRR";
 800172a:	4b1a      	ldr	r3, [pc, #104]	; (8001794 <SD_Setup+0x98>)
 800172c:	4a1b      	ldr	r2, [pc, #108]	; (800179c <SD_Setup+0xa0>)
 800172e:	605a      	str	r2, [r3, #4]
		errlog.key = "SD";
 8001730:	4b18      	ldr	r3, [pc, #96]	; (8001794 <SD_Setup+0x98>)
 8001732:	4a1b      	ldr	r2, [pc, #108]	; (80017a0 <SD_Setup+0xa4>)
 8001734:	609a      	str	r2, [r3, #8]
		errlog.value = malloc(17);
 8001736:	2011      	movs	r0, #17
 8001738:	f00f fa66 	bl	8010c08 <malloc>
 800173c:	4603      	mov	r3, r0
 800173e:	461a      	mov	r2, r3
 8001740:	4b14      	ldr	r3, [pc, #80]	; (8001794 <SD_Setup+0x98>)
 8001742:	60da      	str	r2, [r3, #12]
		sprintf(errlog.value, "SD_MOUNT_ERR: %d", err);
 8001744:	4b13      	ldr	r3, [pc, #76]	; (8001794 <SD_Setup+0x98>)
 8001746:	68db      	ldr	r3, [r3, #12]
 8001748:	697a      	ldr	r2, [r7, #20]
 800174a:	4916      	ldr	r1, [pc, #88]	; (80017a4 <SD_Setup+0xa8>)
 800174c:	4618      	mov	r0, r3
 800174e:	f00f fbf1 	bl	8010f34 <siprintf>

		Error_Handler();
 8001752:	f001 fe01 	bl	8003358 <Error_Handler>
		free(errlog.value);
 8001756:	4b0f      	ldr	r3, [pc, #60]	; (8001794 <SD_Setup+0x98>)
 8001758:	68db      	ldr	r3, [r3, #12]
 800175a:	4618      	mov	r0, r3
 800175c:	f00f fa5c 	bl	8010c18 <free>
	}

	sd_valid = true;
 8001760:	4b11      	ldr	r3, [pc, #68]	; (80017a8 <SD_Setup+0xac>)
 8001762:	2201      	movs	r2, #1
 8001764:	601a      	str	r2, [r3, #0]

	log_t log;
	log.component = "ECU";
 8001766:	4b0c      	ldr	r3, [pc, #48]	; (8001798 <SD_Setup+0x9c>)
 8001768:	607b      	str	r3, [r7, #4]
	log.level = "INFO";
 800176a:	4b10      	ldr	r3, [pc, #64]	; (80017ac <SD_Setup+0xb0>)
 800176c:	60bb      	str	r3, [r7, #8]
	log.key = "SD";
 800176e:	4b0c      	ldr	r3, [pc, #48]	; (80017a0 <SD_Setup+0xa4>)
 8001770:	60fb      	str	r3, [r7, #12]
	log.value = "SD_MOUNTED";
 8001772:	4b0f      	ldr	r3, [pc, #60]	; (80017b0 <SD_Setup+0xb4>)
 8001774:	613b      	str	r3, [r7, #16]
	LOGGER(&log);
 8001776:	1d3b      	adds	r3, r7, #4
 8001778:	4618      	mov	r0, r3
 800177a:	f000 f8cb 	bl	8001914 <LOGGER>
}
 800177e:	bf00      	nop
 8001780:	3718      	adds	r7, #24
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}
 8001786:	bf00      	nop
 8001788:	080122a4 	.word	0x080122a4
 800178c:	2000026c 	.word	0x2000026c
 8001790:	080122a8 	.word	0x080122a8
 8001794:	2000025c 	.word	0x2000025c
 8001798:	080122b8 	.word	0x080122b8
 800179c:	080122bc 	.word	0x080122bc
 80017a0:	080122c4 	.word	0x080122c4
 80017a4:	080122c8 	.word	0x080122c8
 80017a8:	20011478 	.word	0x20011478
 80017ac:	080122dc 	.word	0x080122dc
 80017b0:	080122e4 	.word	0x080122e4
 80017b4:	00000000 	.word	0x00000000

080017b8 <log_string_generator>:


uint8_t* log_string_generator(log_t* log, uint8_t* str, uint32_t* logsize) {
 80017b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80017bc:	b094      	sub	sp, #80	; 0x50
 80017be:	af0a      	add	r7, sp, #40	; 0x28
 80017c0:	61f8      	str	r0, [r7, #28]
 80017c2:	61b9      	str	r1, [r7, #24]
 80017c4:	617a      	str	r2, [r7, #20]
	uint64_t timestamp = getDateTimeBits();
 80017c6:	f7ff fecd 	bl	8001564 <getDateTimeBits>
 80017ca:	e9c7 0108 	strd	r0, r1, [r7, #32]

	// set log content
	sprintf(str, "![%s]\t[20%d-%02d-%02d %02d:%02d:%02d.%03d]\t%s\t\t%s\t\t\t%s\n",
 80017ce:	69fb      	ldr	r3, [r7, #28]
 80017d0:	685e      	ldr	r6, [r3, #4]
			log->level,
			(uint32_t)(timestamp >> 48), (uint32_t)(timestamp << 16 >> 56), (uint32_t)(timestamp << 24 >> 56),
 80017d2:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80017d6:	f04f 0200 	mov.w	r2, #0
 80017da:	f04f 0300 	mov.w	r3, #0
 80017de:	0c0a      	lsrs	r2, r1, #16
 80017e0:	2300      	movs	r3, #0
	sprintf(str, "![%s]\t[20%d-%02d-%02d %02d:%02d:%02d.%03d]\t%s\t\t%s\t\t\t%s\n",
 80017e2:	4692      	mov	sl, r2
			(uint32_t)(timestamp >> 48), (uint32_t)(timestamp << 16 >> 56), (uint32_t)(timestamp << 24 >> 56),
 80017e4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80017e8:	f04f 0200 	mov.w	r2, #0
 80017ec:	f04f 0300 	mov.w	r3, #0
 80017f0:	040b      	lsls	r3, r1, #16
 80017f2:	ea43 4310 	orr.w	r3, r3, r0, lsr #16
 80017f6:	0402      	lsls	r2, r0, #16
 80017f8:	f04f 0000 	mov.w	r0, #0
 80017fc:	f04f 0100 	mov.w	r1, #0
 8001800:	0e18      	lsrs	r0, r3, #24
 8001802:	2100      	movs	r1, #0
	sprintf(str, "![%s]\t[20%d-%02d-%02d %02d:%02d:%02d.%03d]\t%s\t\t%s\t\t\t%s\n",
 8001804:	6138      	str	r0, [r7, #16]
			(uint32_t)(timestamp >> 48), (uint32_t)(timestamp << 16 >> 56), (uint32_t)(timestamp << 24 >> 56),
 8001806:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800180a:	f04f 0200 	mov.w	r2, #0
 800180e:	f04f 0300 	mov.w	r3, #0
 8001812:	060b      	lsls	r3, r1, #24
 8001814:	ea43 2310 	orr.w	r3, r3, r0, lsr #8
 8001818:	0602      	lsls	r2, r0, #24
 800181a:	f04f 0000 	mov.w	r0, #0
 800181e:	f04f 0100 	mov.w	r1, #0
 8001822:	0e18      	lsrs	r0, r3, #24
 8001824:	2100      	movs	r1, #0
	sprintf(str, "![%s]\t[20%d-%02d-%02d %02d:%02d:%02d.%03d]\t%s\t\t%s\t\t\t%s\n",
 8001826:	60f8      	str	r0, [r7, #12]
			(uint32_t)(timestamp << 32 >> 56), (uint32_t)(timestamp << 40 >> 56), (uint32_t)(timestamp << 48 >> 56), (int)(999.0 / 255.0 * (float)(255 - (timestamp << 56 >> 56))),
 8001828:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800182c:	f04f 0200 	mov.w	r2, #0
 8001830:	f04f 0300 	mov.w	r3, #0
 8001834:	0003      	movs	r3, r0
 8001836:	2200      	movs	r2, #0
 8001838:	f04f 0000 	mov.w	r0, #0
 800183c:	f04f 0100 	mov.w	r1, #0
 8001840:	0e18      	lsrs	r0, r3, #24
 8001842:	2100      	movs	r1, #0
	sprintf(str, "![%s]\t[20%d-%02d-%02d %02d:%02d:%02d.%03d]\t%s\t\t%s\t\t\t%s\n",
 8001844:	60b8      	str	r0, [r7, #8]
			(uint32_t)(timestamp << 32 >> 56), (uint32_t)(timestamp << 40 >> 56), (uint32_t)(timestamp << 48 >> 56), (int)(999.0 / 255.0 * (float)(255 - (timestamp << 56 >> 56))),
 8001846:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800184a:	f04f 0200 	mov.w	r2, #0
 800184e:	f04f 0300 	mov.w	r3, #0
 8001852:	0203      	lsls	r3, r0, #8
 8001854:	2200      	movs	r2, #0
 8001856:	f04f 0000 	mov.w	r0, #0
 800185a:	f04f 0100 	mov.w	r1, #0
 800185e:	0e18      	lsrs	r0, r3, #24
 8001860:	2100      	movs	r1, #0
	sprintf(str, "![%s]\t[20%d-%02d-%02d %02d:%02d:%02d.%03d]\t%s\t\t%s\t\t\t%s\n",
 8001862:	6078      	str	r0, [r7, #4]
			(uint32_t)(timestamp << 32 >> 56), (uint32_t)(timestamp << 40 >> 56), (uint32_t)(timestamp << 48 >> 56), (int)(999.0 / 255.0 * (float)(255 - (timestamp << 56 >> 56))),
 8001864:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001868:	f04f 0200 	mov.w	r2, #0
 800186c:	f04f 0300 	mov.w	r3, #0
 8001870:	0403      	lsls	r3, r0, #16
 8001872:	2200      	movs	r2, #0
 8001874:	f04f 0000 	mov.w	r0, #0
 8001878:	f04f 0100 	mov.w	r1, #0
 800187c:	0e18      	lsrs	r0, r3, #24
 800187e:	2100      	movs	r1, #0
	sprintf(str, "![%s]\t[20%d-%02d-%02d %02d:%02d:%02d.%03d]\t%s\t\t%s\t\t\t%s\n",
 8001880:	6038      	str	r0, [r7, #0]
			(uint32_t)(timestamp << 32 >> 56), (uint32_t)(timestamp << 40 >> 56), (uint32_t)(timestamp << 48 >> 56), (int)(999.0 / 255.0 * (float)(255 - (timestamp << 56 >> 56))),
 8001882:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001886:	43d4      	mvns	r4, r2
 8001888:	43dd      	mvns	r5, r3
 800188a:	f004 08ff 	and.w	r8, r4, #255	; 0xff
 800188e:	f04f 0900 	mov.w	r9, #0
 8001892:	4640      	mov	r0, r8
 8001894:	4649      	mov	r1, r9
 8001896:	f7ff f9d1 	bl	8000c3c <__aeabi_ul2f>
 800189a:	4603      	mov	r3, r0
 800189c:	4618      	mov	r0, r3
 800189e:	f7fe fe53 	bl	8000548 <__aeabi_f2d>
 80018a2:	a31a      	add	r3, pc, #104	; (adr r3, 800190c <log_string_generator+0x154>)
 80018a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018a8:	f7fe fea6 	bl	80005f8 <__aeabi_dmul>
 80018ac:	4602      	mov	r2, r0
 80018ae:	460b      	mov	r3, r1
	sprintf(str, "![%s]\t[20%d-%02d-%02d %02d:%02d:%02d.%03d]\t%s\t\t%s\t\t\t%s\n",
 80018b0:	4610      	mov	r0, r2
 80018b2:	4619      	mov	r1, r3
 80018b4:	f7ff f8b2 	bl	8000a1c <__aeabi_d2iz>
 80018b8:	69fb      	ldr	r3, [r7, #28]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	69fa      	ldr	r2, [r7, #28]
 80018be:	6892      	ldr	r2, [r2, #8]
 80018c0:	69f9      	ldr	r1, [r7, #28]
 80018c2:	68c9      	ldr	r1, [r1, #12]
 80018c4:	9108      	str	r1, [sp, #32]
 80018c6:	9207      	str	r2, [sp, #28]
 80018c8:	9306      	str	r3, [sp, #24]
 80018ca:	9005      	str	r0, [sp, #20]
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	9304      	str	r3, [sp, #16]
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	9303      	str	r3, [sp, #12]
 80018d4:	68bb      	ldr	r3, [r7, #8]
 80018d6:	9302      	str	r3, [sp, #8]
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	9301      	str	r3, [sp, #4]
 80018dc:	693b      	ldr	r3, [r7, #16]
 80018de:	9300      	str	r3, [sp, #0]
 80018e0:	4653      	mov	r3, sl
 80018e2:	4632      	mov	r2, r6
 80018e4:	4908      	ldr	r1, [pc, #32]	; (8001908 <log_string_generator+0x150>)
 80018e6:	69b8      	ldr	r0, [r7, #24]
 80018e8:	f00f fb24 	bl	8010f34 <siprintf>
			log->component, log->key, log->value);

	*logsize = strlen(str);
 80018ec:	69b8      	ldr	r0, [r7, #24]
 80018ee:	f7fe fc6f 	bl	80001d0 <strlen>
 80018f2:	4602      	mov	r2, r0
 80018f4:	697b      	ldr	r3, [r7, #20]
 80018f6:	601a      	str	r2, [r3, #0]
	return str;
 80018f8:	69bb      	ldr	r3, [r7, #24]
}
 80018fa:	4618      	mov	r0, r3
 80018fc:	3728      	adds	r7, #40	; 0x28
 80018fe:	46bd      	mov	sp, r7
 8001900:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001904:	f3af 8000 	nop.w
 8001908:	080122f0 	.word	0x080122f0
 800190c:	57575757 	.word	0x57575757
 8001910:	400f5757 	.word	0x400f5757

08001914 <LOGGER>:

void LOGGER(log_t* log) {
 8001914:	b580      	push	{r7, lr}
 8001916:	f5ad 5d82 	sub.w	sp, sp, #4160	; 0x1040
 800191a:	b082      	sub	sp, #8
 800191c:	af00      	add	r7, sp, #0
 800191e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001922:	f843 0c44 	str.w	r0, [r3, #-68]
	uint8_t* content = malloc(100);
 8001926:	2064      	movs	r0, #100	; 0x64
 8001928:	f00f f96e 	bl	8010c08 <malloc>
 800192c:	4603      	mov	r3, r0
 800192e:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8001932:	f102 0204 	add.w	r2, r2, #4
 8001936:	6013      	str	r3, [r2, #0]
	uint32_t logsize;

	log_string_generator(log, content, &logsize);
 8001938:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800193c:	f103 031c 	add.w	r3, r3, #28
 8001940:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8001944:	4610      	mov	r0, r2
 8001946:	461a      	mov	r2, r3
 8001948:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800194c:	f103 0304 	add.w	r3, r3, #4
 8001950:	6819      	ldr	r1, [r3, #0]
 8001952:	f850 0c44 	ldr.w	r0, [r0, #-68]
 8001956:	f7ff ff2f 	bl	80017b8 <log_string_generator>

	// append log to buffer
	ring_buffer_queue_arr(&logbuffer, content, logsize + 1);
 800195a:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800195e:	f103 031c 	add.w	r3, r3, #28
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	3301      	adds	r3, #1
 8001966:	461a      	mov	r2, r3
 8001968:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800196c:	f103 0304 	add.w	r3, r3, #4
 8001970:	6819      	ldr	r1, [r3, #0]
 8001972:	4868      	ldr	r0, [pc, #416]	; (8001b14 <LOGGER+0x200>)
 8001974:	f001 fd99 	bl	80034aa <ring_buffer_queue_arr>

	#if DEBUG_MODE
		printf("LOG: %s", content);
 8001978:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800197c:	f103 0304 	add.w	r3, r3, #4
 8001980:	6819      	ldr	r1, [r3, #0]
 8001982:	4865      	ldr	r0, [pc, #404]	; (8001b18 <LOGGER+0x204>)
 8001984:	f00f fa38 	bl	8010df8 <iprintf>
	#endif

	// mount SD
	if (!sd_valid) {
 8001988:	4b64      	ldr	r3, [pc, #400]	; (8001b1c <LOGGER+0x208>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	2b00      	cmp	r3, #0
 800198e:	d101      	bne.n	8001994 <LOGGER+0x80>
		SD_Setup();
 8001990:	f7ff feb4 	bl	80016fc <SD_Setup>
	// SAVE TO SD
	FIL file;
	uint32_t writtenBytesCount;

	// OPEN FILE
	uint32_t err = f_open(&file, logfile, FA_OPEN_APPEND | FA_WRITE);
 8001994:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001998:	3b1c      	subs	r3, #28
 800199a:	2232      	movs	r2, #50	; 0x32
 800199c:	4960      	ldr	r1, [pc, #384]	; (8001b20 <LOGGER+0x20c>)
 800199e:	4618      	mov	r0, r3
 80019a0:	f00e fbde 	bl	8010160 <f_open>
 80019a4:	4603      	mov	r3, r0
 80019a6:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80019aa:	6013      	str	r3, [r2, #0]
	#if DEBUG_MODE
		printf("sd open: %d, %s\n", err, logfile);
 80019ac:	4a5c      	ldr	r2, [pc, #368]	; (8001b20 <LOGGER+0x20c>)
 80019ae:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80019b2:	6819      	ldr	r1, [r3, #0]
 80019b4:	485b      	ldr	r0, [pc, #364]	; (8001b24 <LOGGER+0x210>)
 80019b6:	f00f fa1f 	bl	8010df8 <iprintf>
	#endif
	if (err != FR_OK) {
 80019ba:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d01f      	beq.n	8001a04 <LOGGER+0xf0>
		errlog.component = "ECU";
 80019c4:	4b58      	ldr	r3, [pc, #352]	; (8001b28 <LOGGER+0x214>)
 80019c6:	4a59      	ldr	r2, [pc, #356]	; (8001b2c <LOGGER+0x218>)
 80019c8:	601a      	str	r2, [r3, #0]
		errlog.level = "ERRR";
 80019ca:	4b57      	ldr	r3, [pc, #348]	; (8001b28 <LOGGER+0x214>)
 80019cc:	4a58      	ldr	r2, [pc, #352]	; (8001b30 <LOGGER+0x21c>)
 80019ce:	605a      	str	r2, [r3, #4]
		errlog.key = "SD";
 80019d0:	4b55      	ldr	r3, [pc, #340]	; (8001b28 <LOGGER+0x214>)
 80019d2:	4a58      	ldr	r2, [pc, #352]	; (8001b34 <LOGGER+0x220>)
 80019d4:	609a      	str	r2, [r3, #8]
		errlog.value = malloc(16);
 80019d6:	2010      	movs	r0, #16
 80019d8:	f00f f916 	bl	8010c08 <malloc>
 80019dc:	4603      	mov	r3, r0
 80019de:	461a      	mov	r2, r3
 80019e0:	4b51      	ldr	r3, [pc, #324]	; (8001b28 <LOGGER+0x214>)
 80019e2:	60da      	str	r2, [r3, #12]
		sprintf(errlog.value, "SD_OPEN_ERR: %d", err);
 80019e4:	4b50      	ldr	r3, [pc, #320]	; (8001b28 <LOGGER+0x214>)
 80019e6:	68db      	ldr	r3, [r3, #12]
 80019e8:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 80019ec:	6812      	ldr	r2, [r2, #0]
 80019ee:	4952      	ldr	r1, [pc, #328]	; (8001b38 <LOGGER+0x224>)
 80019f0:	4618      	mov	r0, r3
 80019f2:	f00f fa9f 	bl	8010f34 <siprintf>

		Error_Handler();
 80019f6:	f001 fcaf 	bl	8003358 <Error_Handler>
		free(errlog.value);
 80019fa:	4b4b      	ldr	r3, [pc, #300]	; (8001b28 <LOGGER+0x214>)
 80019fc:	68db      	ldr	r3, [r3, #12]
 80019fe:	4618      	mov	r0, r3
 8001a00:	f00f f90a 	bl	8010c18 <free>
	}

	// WRITE TO FILE
	err = f_write(&file, content, logsize, (void *)&writtenBytesCount);
 8001a04:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8001a08:	f103 031c 	add.w	r3, r3, #28
 8001a0c:	681a      	ldr	r2, [r3, #0]
 8001a0e:	f107 0308 	add.w	r3, r7, #8
 8001a12:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8001a16:	381c      	subs	r0, #28
 8001a18:	f507 5182 	add.w	r1, r7, #4160	; 0x1040
 8001a1c:	f101 0104 	add.w	r1, r1, #4
 8001a20:	6809      	ldr	r1, [r1, #0]
 8001a22:	f00e fd69 	bl	80104f8 <f_write>
 8001a26:	4603      	mov	r3, r0
 8001a28:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8001a2c:	6013      	str	r3, [r2, #0]
	#if DEBUG_MODE
		printf("sd write: %d, %s, %d\n", err, logfile, writtenBytesCount);
 8001a2e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001a32:	f853 3c40 	ldr.w	r3, [r3, #-64]
 8001a36:	4a3a      	ldr	r2, [pc, #232]	; (8001b20 <LOGGER+0x20c>)
 8001a38:	f507 5182 	add.w	r1, r7, #4160	; 0x1040
 8001a3c:	6809      	ldr	r1, [r1, #0]
 8001a3e:	483f      	ldr	r0, [pc, #252]	; (8001b3c <LOGGER+0x228>)
 8001a40:	f00f f9da 	bl	8010df8 <iprintf>
	#endif
	if (err != FR_OK) {
 8001a44:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d01f      	beq.n	8001a8e <LOGGER+0x17a>
		errlog.component = "ECU";
 8001a4e:	4b36      	ldr	r3, [pc, #216]	; (8001b28 <LOGGER+0x214>)
 8001a50:	4a36      	ldr	r2, [pc, #216]	; (8001b2c <LOGGER+0x218>)
 8001a52:	601a      	str	r2, [r3, #0]
		errlog.level = "ERRR";
 8001a54:	4b34      	ldr	r3, [pc, #208]	; (8001b28 <LOGGER+0x214>)
 8001a56:	4a36      	ldr	r2, [pc, #216]	; (8001b30 <LOGGER+0x21c>)
 8001a58:	605a      	str	r2, [r3, #4]
		errlog.key = "SD";
 8001a5a:	4b33      	ldr	r3, [pc, #204]	; (8001b28 <LOGGER+0x214>)
 8001a5c:	4a35      	ldr	r2, [pc, #212]	; (8001b34 <LOGGER+0x220>)
 8001a5e:	609a      	str	r2, [r3, #8]
		errlog.value = malloc(17);
 8001a60:	2011      	movs	r0, #17
 8001a62:	f00f f8d1 	bl	8010c08 <malloc>
 8001a66:	4603      	mov	r3, r0
 8001a68:	461a      	mov	r2, r3
 8001a6a:	4b2f      	ldr	r3, [pc, #188]	; (8001b28 <LOGGER+0x214>)
 8001a6c:	60da      	str	r2, [r3, #12]
		sprintf(errlog.value, "SD_WRITE_ERR: %d", err);
 8001a6e:	4b2e      	ldr	r3, [pc, #184]	; (8001b28 <LOGGER+0x214>)
 8001a70:	68db      	ldr	r3, [r3, #12]
 8001a72:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8001a76:	6812      	ldr	r2, [r2, #0]
 8001a78:	4931      	ldr	r1, [pc, #196]	; (8001b40 <LOGGER+0x22c>)
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f00f fa5a 	bl	8010f34 <siprintf>

		Error_Handler();
 8001a80:	f001 fc6a 	bl	8003358 <Error_Handler>
		free(errlog.value);
 8001a84:	4b28      	ldr	r3, [pc, #160]	; (8001b28 <LOGGER+0x214>)
 8001a86:	68db      	ldr	r3, [r3, #12]
 8001a88:	4618      	mov	r0, r3
 8001a8a:	f00f f8c5 	bl	8010c18 <free>
	}

	// CLOSE FILE
	err = f_close(&file);
 8001a8e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a92:	3b1c      	subs	r3, #28
 8001a94:	4618      	mov	r0, r3
 8001a96:	f00e ff41 	bl	801091c <f_close>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8001aa0:	6013      	str	r3, [r2, #0]
	#if DEBUG_MODE
		printf("sd close: %d\n\n", err);
 8001aa2:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8001aa6:	6819      	ldr	r1, [r3, #0]
 8001aa8:	4826      	ldr	r0, [pc, #152]	; (8001b44 <LOGGER+0x230>)
 8001aaa:	f00f f9a5 	bl	8010df8 <iprintf>
	#endif
	if(err != FR_OK) {
 8001aae:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d01f      	beq.n	8001af8 <LOGGER+0x1e4>
		errlog.component = "ECU";
 8001ab8:	4b1b      	ldr	r3, [pc, #108]	; (8001b28 <LOGGER+0x214>)
 8001aba:	4a1c      	ldr	r2, [pc, #112]	; (8001b2c <LOGGER+0x218>)
 8001abc:	601a      	str	r2, [r3, #0]
		errlog.level = "ERRR";
 8001abe:	4b1a      	ldr	r3, [pc, #104]	; (8001b28 <LOGGER+0x214>)
 8001ac0:	4a1b      	ldr	r2, [pc, #108]	; (8001b30 <LOGGER+0x21c>)
 8001ac2:	605a      	str	r2, [r3, #4]
		errlog.key = "SD";
 8001ac4:	4b18      	ldr	r3, [pc, #96]	; (8001b28 <LOGGER+0x214>)
 8001ac6:	4a1b      	ldr	r2, [pc, #108]	; (8001b34 <LOGGER+0x220>)
 8001ac8:	609a      	str	r2, [r3, #8]
		errlog.value = malloc(17);
 8001aca:	2011      	movs	r0, #17
 8001acc:	f00f f89c 	bl	8010c08 <malloc>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	461a      	mov	r2, r3
 8001ad4:	4b14      	ldr	r3, [pc, #80]	; (8001b28 <LOGGER+0x214>)
 8001ad6:	60da      	str	r2, [r3, #12]
		sprintf(errlog.value, "SD_CLOSE_ERR: %d", err);
 8001ad8:	4b13      	ldr	r3, [pc, #76]	; (8001b28 <LOGGER+0x214>)
 8001ada:	68db      	ldr	r3, [r3, #12]
 8001adc:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8001ae0:	6812      	ldr	r2, [r2, #0]
 8001ae2:	4919      	ldr	r1, [pc, #100]	; (8001b48 <LOGGER+0x234>)
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	f00f fa25 	bl	8010f34 <siprintf>

		Error_Handler();
 8001aea:	f001 fc35 	bl	8003358 <Error_Handler>
		free(errlog.value);
 8001aee:	4b0e      	ldr	r3, [pc, #56]	; (8001b28 <LOGGER+0x214>)
 8001af0:	68db      	ldr	r3, [r3, #12]
 8001af2:	4618      	mov	r0, r3
 8001af4:	f00f f890 	bl	8010c18 <free>
	}

	free(content);
 8001af8:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 8001afc:	f103 0304 	add.w	r3, r3, #4
 8001b00:	6818      	ldr	r0, [r3, #0]
 8001b02:	f00f f889 	bl	8010c18 <free>
}
 8001b06:	bf00      	nop
 8001b08:	f507 5782 	add.w	r7, r7, #4160	; 0x1040
 8001b0c:	3708      	adds	r7, #8
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}
 8001b12:	bf00      	nop
 8001b14:	200012d4 	.word	0x200012d4
 8001b18:	08012328 	.word	0x08012328
 8001b1c:	20011478 	.word	0x20011478
 8001b20:	200012b0 	.word	0x200012b0
 8001b24:	08012330 	.word	0x08012330
 8001b28:	2000025c 	.word	0x2000025c
 8001b2c:	080122b8 	.word	0x080122b8
 8001b30:	080122bc 	.word	0x080122bc
 8001b34:	080122c4 	.word	0x080122c4
 8001b38:	08012344 	.word	0x08012344
 8001b3c:	08012354 	.word	0x08012354
 8001b40:	0801236c 	.word	0x0801236c
 8001b44:	08012380 	.word	0x08012380
 8001b48:	08012390 	.word	0x08012390

08001b4c <Sensor_Setup>:


/* ========== GPIO START ========== */
void Sensor_Setup() {
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b086      	sub	sp, #24
 8001b50:	af00      	add	r7, sp, #0
	// internal temperature sensor time
	HAL_TIM_Base_Start_IT(&htim4);
 8001b52:	4830      	ldr	r0, [pc, #192]	; (8001c14 <Sensor_Setup+0xc8>)
 8001b54:	f009 fce6 	bl	800b524 <HAL_TIM_Base_Start_IT>

	// initialize APPS pin
	HAL_GPIO_WritePin(GPIOD, RTD_ACTIVE_Pin, GPIO_PIN_RESET);
 8001b58:	2200      	movs	r2, #0
 8001b5a:	2108      	movs	r1, #8
 8001b5c:	482e      	ldr	r0, [pc, #184]	; (8001c18 <Sensor_Setup+0xcc>)
 8001b5e:	f004 fcff 	bl	8006560 <HAL_GPIO_WritePin>

	// initialize RTDS pin
	HAL_GPIO_WritePin(GPIOA, RTDS_Pin, GPIO_PIN_SET);
 8001b62:	2201      	movs	r2, #1
 8001b64:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001b68:	482c      	ldr	r0, [pc, #176]	; (8001c1c <Sensor_Setup+0xd0>)
 8001b6a:	f004 fcf9 	bl	8006560 <HAL_GPIO_WritePin>

	// read initial GPIO states
	for (uint32_t i = 0; i < INPUT_GPIO_COUNT; i++) {
 8001b6e:	2300      	movs	r3, #0
 8001b70:	617b      	str	r3, [r7, #20]
 8001b72:	e046      	b.n	8001c02 <Sensor_Setup+0xb6>
		GPIO[i].value = HAL_GPIO_ReadPin(GPIO[i].port, GPIO[i].pin);
 8001b74:	4a2a      	ldr	r2, [pc, #168]	; (8001c20 <Sensor_Setup+0xd4>)
 8001b76:	697b      	ldr	r3, [r7, #20]
 8001b78:	011b      	lsls	r3, r3, #4
 8001b7a:	4413      	add	r3, r2
 8001b7c:	3308      	adds	r3, #8
 8001b7e:	681a      	ldr	r2, [r3, #0]
 8001b80:	4927      	ldr	r1, [pc, #156]	; (8001c20 <Sensor_Setup+0xd4>)
 8001b82:	697b      	ldr	r3, [r7, #20]
 8001b84:	011b      	lsls	r3, r3, #4
 8001b86:	440b      	add	r3, r1
 8001b88:	330c      	adds	r3, #12
 8001b8a:	881b      	ldrh	r3, [r3, #0]
 8001b8c:	4619      	mov	r1, r3
 8001b8e:	4610      	mov	r0, r2
 8001b90:	f004 fcce 	bl	8006530 <HAL_GPIO_ReadPin>
 8001b94:	4603      	mov	r3, r0
 8001b96:	4619      	mov	r1, r3
 8001b98:	4a21      	ldr	r2, [pc, #132]	; (8001c20 <Sensor_Setup+0xd4>)
 8001b9a:	697b      	ldr	r3, [r7, #20]
 8001b9c:	011b      	lsls	r3, r3, #4
 8001b9e:	4413      	add	r3, r2
 8001ba0:	3304      	adds	r3, #4
 8001ba2:	6019      	str	r1, [r3, #0]

		log_t log;
		log.component = "ECU";
 8001ba4:	4b1f      	ldr	r3, [pc, #124]	; (8001c24 <Sensor_Setup+0xd8>)
 8001ba6:	607b      	str	r3, [r7, #4]
		log.level = "INFO";
 8001ba8:	4b1f      	ldr	r3, [pc, #124]	; (8001c28 <Sensor_Setup+0xdc>)
 8001baa:	60bb      	str	r3, [r7, #8]
		log.key = "GPIO";
 8001bac:	4b1f      	ldr	r3, [pc, #124]	; (8001c2c <Sensor_Setup+0xe0>)
 8001bae:	60fb      	str	r3, [r7, #12]
		log.value = malloc(strlen(GPIO[i].name) + 3);
 8001bb0:	4a1b      	ldr	r2, [pc, #108]	; (8001c20 <Sensor_Setup+0xd4>)
 8001bb2:	697b      	ldr	r3, [r7, #20]
 8001bb4:	011b      	lsls	r3, r3, #4
 8001bb6:	4413      	add	r3, r2
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	4618      	mov	r0, r3
 8001bbc:	f7fe fb08 	bl	80001d0 <strlen>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	3303      	adds	r3, #3
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f00f f81f 	bl	8010c08 <malloc>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	613b      	str	r3, [r7, #16]
		sprintf(log.value, "%s %d", GPIO[i].name, (GPIO[i].value));
 8001bce:	6938      	ldr	r0, [r7, #16]
 8001bd0:	4a13      	ldr	r2, [pc, #76]	; (8001c20 <Sensor_Setup+0xd4>)
 8001bd2:	697b      	ldr	r3, [r7, #20]
 8001bd4:	011b      	lsls	r3, r3, #4
 8001bd6:	4413      	add	r3, r2
 8001bd8:	681a      	ldr	r2, [r3, #0]
 8001bda:	4911      	ldr	r1, [pc, #68]	; (8001c20 <Sensor_Setup+0xd4>)
 8001bdc:	697b      	ldr	r3, [r7, #20]
 8001bde:	011b      	lsls	r3, r3, #4
 8001be0:	440b      	add	r3, r1
 8001be2:	3304      	adds	r3, #4
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	4912      	ldr	r1, [pc, #72]	; (8001c30 <Sensor_Setup+0xe4>)
 8001be8:	f00f f9a4 	bl	8010f34 <siprintf>
		LOGGER(&log);
 8001bec:	1d3b      	adds	r3, r7, #4
 8001bee:	4618      	mov	r0, r3
 8001bf0:	f7ff fe90 	bl	8001914 <LOGGER>
		free(log.value);
 8001bf4:	693b      	ldr	r3, [r7, #16]
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	f00f f80e 	bl	8010c18 <free>
	for (uint32_t i = 0; i < INPUT_GPIO_COUNT; i++) {
 8001bfc:	697b      	ldr	r3, [r7, #20]
 8001bfe:	3301      	adds	r3, #1
 8001c00:	617b      	str	r3, [r7, #20]
 8001c02:	697b      	ldr	r3, [r7, #20]
 8001c04:	2b06      	cmp	r3, #6
 8001c06:	d9b5      	bls.n	8001b74 <Sensor_Setup+0x28>
	}
}
 8001c08:	bf00      	nop
 8001c0a:	bf00      	nop
 8001c0c:	3718      	adds	r7, #24
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd80      	pop	{r7, pc}
 8001c12:	bf00      	nop
 8001c14:	200116a8 	.word	0x200116a8
 8001c18:	40020c00 	.word	0x40020c00
 8001c1c:	40020000 	.word	0x40020000
 8001c20:	20000000 	.word	0x20000000
 8001c24:	080122b8 	.word	0x080122b8
 8001c28:	080122dc 	.word	0x080122dc
 8001c2c:	080123a4 	.word	0x080123a4
 8001c30:	080123ac 	.word	0x080123ac

08001c34 <Sensor_Manager>:

void Sensor_Manager() {
 8001c34:	b590      	push	{r4, r7, lr}
 8001c36:	b08f      	sub	sp, #60	; 0x3c
 8001c38:	af00      	add	r7, sp, #0
	// detect GPIO state change
	for (uint32_t i = 0; i < INPUT_GPIO_COUNT; i++) {
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	637b      	str	r3, [r7, #52]	; 0x34
 8001c3e:	e05f      	b.n	8001d00 <Sensor_Manager+0xcc>
		if (GPIO[i].value != HAL_GPIO_ReadPin(GPIO[i].port, GPIO[i].pin)) {
 8001c40:	4a7f      	ldr	r2, [pc, #508]	; (8001e40 <Sensor_Manager+0x20c>)
 8001c42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c44:	011b      	lsls	r3, r3, #4
 8001c46:	4413      	add	r3, r2
 8001c48:	3304      	adds	r3, #4
 8001c4a:	681c      	ldr	r4, [r3, #0]
 8001c4c:	4a7c      	ldr	r2, [pc, #496]	; (8001e40 <Sensor_Manager+0x20c>)
 8001c4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c50:	011b      	lsls	r3, r3, #4
 8001c52:	4413      	add	r3, r2
 8001c54:	3308      	adds	r3, #8
 8001c56:	681a      	ldr	r2, [r3, #0]
 8001c58:	4979      	ldr	r1, [pc, #484]	; (8001e40 <Sensor_Manager+0x20c>)
 8001c5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c5c:	011b      	lsls	r3, r3, #4
 8001c5e:	440b      	add	r3, r1
 8001c60:	330c      	adds	r3, #12
 8001c62:	881b      	ldrh	r3, [r3, #0]
 8001c64:	4619      	mov	r1, r3
 8001c66:	4610      	mov	r0, r2
 8001c68:	f004 fc62 	bl	8006530 <HAL_GPIO_ReadPin>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	429c      	cmp	r4, r3
 8001c70:	d043      	beq.n	8001cfa <Sensor_Manager+0xc6>
			log_t log;
			log.component = "ECU";
 8001c72:	4b74      	ldr	r3, [pc, #464]	; (8001e44 <Sensor_Manager+0x210>)
 8001c74:	627b      	str	r3, [r7, #36]	; 0x24
			log.level = "INFO";
 8001c76:	4b74      	ldr	r3, [pc, #464]	; (8001e48 <Sensor_Manager+0x214>)
 8001c78:	62bb      	str	r3, [r7, #40]	; 0x28
			log.key = "GPIO";
 8001c7a:	4b74      	ldr	r3, [pc, #464]	; (8001e4c <Sensor_Manager+0x218>)
 8001c7c:	62fb      	str	r3, [r7, #44]	; 0x2c
			log.value = malloc(strlen(GPIO[i].name) + 3);
 8001c7e:	4a70      	ldr	r2, [pc, #448]	; (8001e40 <Sensor_Manager+0x20c>)
 8001c80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c82:	011b      	lsls	r3, r3, #4
 8001c84:	4413      	add	r3, r2
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4618      	mov	r0, r3
 8001c8a:	f7fe faa1 	bl	80001d0 <strlen>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	3303      	adds	r3, #3
 8001c92:	4618      	mov	r0, r3
 8001c94:	f00e ffb8 	bl	8010c08 <malloc>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	633b      	str	r3, [r7, #48]	; 0x30
			sprintf(log.value, "%s %d", GPIO[i].name, !(GPIO[i].value));
 8001c9c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001c9e:	4a68      	ldr	r2, [pc, #416]	; (8001e40 <Sensor_Manager+0x20c>)
 8001ca0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ca2:	011b      	lsls	r3, r3, #4
 8001ca4:	4413      	add	r3, r2
 8001ca6:	681a      	ldr	r2, [r3, #0]
 8001ca8:	4965      	ldr	r1, [pc, #404]	; (8001e40 <Sensor_Manager+0x20c>)
 8001caa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001cac:	011b      	lsls	r3, r3, #4
 8001cae:	440b      	add	r3, r1
 8001cb0:	3304      	adds	r3, #4
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	bf0c      	ite	eq
 8001cb8:	2301      	moveq	r3, #1
 8001cba:	2300      	movne	r3, #0
 8001cbc:	b2db      	uxtb	r3, r3
 8001cbe:	4964      	ldr	r1, [pc, #400]	; (8001e50 <Sensor_Manager+0x21c>)
 8001cc0:	f00f f938 	bl	8010f34 <siprintf>
			LOGGER(&log);
 8001cc4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cc8:	4618      	mov	r0, r3
 8001cca:	f7ff fe23 	bl	8001914 <LOGGER>
			free(log.value);
 8001cce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	f00e ffa1 	bl	8010c18 <free>

			GPIO[i].value = !(GPIO[i].value);
 8001cd6:	4a5a      	ldr	r2, [pc, #360]	; (8001e40 <Sensor_Manager+0x20c>)
 8001cd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001cda:	011b      	lsls	r3, r3, #4
 8001cdc:	4413      	add	r3, r2
 8001cde:	3304      	adds	r3, #4
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	bf0c      	ite	eq
 8001ce6:	2301      	moveq	r3, #1
 8001ce8:	2300      	movne	r3, #0
 8001cea:	b2db      	uxtb	r3, r3
 8001cec:	4619      	mov	r1, r3
 8001cee:	4a54      	ldr	r2, [pc, #336]	; (8001e40 <Sensor_Manager+0x20c>)
 8001cf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001cf2:	011b      	lsls	r3, r3, #4
 8001cf4:	4413      	add	r3, r2
 8001cf6:	3304      	adds	r3, #4
 8001cf8:	6019      	str	r1, [r3, #0]
	for (uint32_t i = 0; i < INPUT_GPIO_COUNT; i++) {
 8001cfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001cfc:	3301      	adds	r3, #1
 8001cfe:	637b      	str	r3, [r7, #52]	; 0x34
 8001d00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d02:	2b06      	cmp	r3, #6
 8001d04:	d99c      	bls.n	8001c40 <Sensor_Manager+0xc>
		}
	}

	// log GPIO state
	if (gpio_valid) {
 8001d06:	4b53      	ldr	r3, [pc, #332]	; (8001e54 <Sensor_Manager+0x220>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d073      	beq.n	8001df6 <Sensor_Manager+0x1c2>
		static uint32_t checkedGPIOcount = 0;
		static uint32_t gpioCheckStartTime = 0;
		if (!gpioCheckStartTime) gpioCheckStartTime = HAL_GetTick();
 8001d0e:	4b52      	ldr	r3, [pc, #328]	; (8001e58 <Sensor_Manager+0x224>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d104      	bne.n	8001d20 <Sensor_Manager+0xec>
 8001d16:	f002 faef 	bl	80042f8 <HAL_GetTick>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	4a4e      	ldr	r2, [pc, #312]	; (8001e58 <Sensor_Manager+0x224>)
 8001d1e:	6013      	str	r3, [r2, #0]

		if (HAL_GetTick() > gpioCheckStartTime + 100 * checkedGPIOcount) {
 8001d20:	f002 faea 	bl	80042f8 <HAL_GetTick>
 8001d24:	4601      	mov	r1, r0
 8001d26:	4b4d      	ldr	r3, [pc, #308]	; (8001e5c <Sensor_Manager+0x228>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	2264      	movs	r2, #100	; 0x64
 8001d2c:	fb03 f202 	mul.w	r2, r3, r2
 8001d30:	4b49      	ldr	r3, [pc, #292]	; (8001e58 <Sensor_Manager+0x224>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4413      	add	r3, r2
 8001d36:	4299      	cmp	r1, r3
 8001d38:	d95d      	bls.n	8001df6 <Sensor_Manager+0x1c2>
			GPIO[checkedGPIOcount].value = HAL_GPIO_ReadPin(GPIO[checkedGPIOcount].port, GPIO[checkedGPIOcount].pin);
 8001d3a:	4b48      	ldr	r3, [pc, #288]	; (8001e5c <Sensor_Manager+0x228>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4a40      	ldr	r2, [pc, #256]	; (8001e40 <Sensor_Manager+0x20c>)
 8001d40:	011b      	lsls	r3, r3, #4
 8001d42:	4413      	add	r3, r2
 8001d44:	3308      	adds	r3, #8
 8001d46:	681a      	ldr	r2, [r3, #0]
 8001d48:	4b44      	ldr	r3, [pc, #272]	; (8001e5c <Sensor_Manager+0x228>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	493c      	ldr	r1, [pc, #240]	; (8001e40 <Sensor_Manager+0x20c>)
 8001d4e:	011b      	lsls	r3, r3, #4
 8001d50:	440b      	add	r3, r1
 8001d52:	330c      	adds	r3, #12
 8001d54:	881b      	ldrh	r3, [r3, #0]
 8001d56:	4619      	mov	r1, r3
 8001d58:	4610      	mov	r0, r2
 8001d5a:	f004 fbe9 	bl	8006530 <HAL_GPIO_ReadPin>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	461a      	mov	r2, r3
 8001d62:	4b3e      	ldr	r3, [pc, #248]	; (8001e5c <Sensor_Manager+0x228>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4611      	mov	r1, r2
 8001d68:	4a35      	ldr	r2, [pc, #212]	; (8001e40 <Sensor_Manager+0x20c>)
 8001d6a:	011b      	lsls	r3, r3, #4
 8001d6c:	4413      	add	r3, r2
 8001d6e:	3304      	adds	r3, #4
 8001d70:	6019      	str	r1, [r3, #0]

			log_t log;
			log.component = "ECU";
 8001d72:	4b34      	ldr	r3, [pc, #208]	; (8001e44 <Sensor_Manager+0x210>)
 8001d74:	617b      	str	r3, [r7, #20]
			log.level = "INFO";
 8001d76:	4b34      	ldr	r3, [pc, #208]	; (8001e48 <Sensor_Manager+0x214>)
 8001d78:	61bb      	str	r3, [r7, #24]
			log.key = "GPIO";
 8001d7a:	4b34      	ldr	r3, [pc, #208]	; (8001e4c <Sensor_Manager+0x218>)
 8001d7c:	61fb      	str	r3, [r7, #28]
			log.value = malloc(strlen(GPIO[checkedGPIOcount].name) + 3);
 8001d7e:	4b37      	ldr	r3, [pc, #220]	; (8001e5c <Sensor_Manager+0x228>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	4a2f      	ldr	r2, [pc, #188]	; (8001e40 <Sensor_Manager+0x20c>)
 8001d84:	011b      	lsls	r3, r3, #4
 8001d86:	4413      	add	r3, r2
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	f7fe fa20 	bl	80001d0 <strlen>
 8001d90:	4603      	mov	r3, r0
 8001d92:	3303      	adds	r3, #3
 8001d94:	4618      	mov	r0, r3
 8001d96:	f00e ff37 	bl	8010c08 <malloc>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	623b      	str	r3, [r7, #32]
			sprintf(log.value, "%s %d", GPIO[checkedGPIOcount].name, (GPIO[checkedGPIOcount].value));
 8001d9e:	6a38      	ldr	r0, [r7, #32]
 8001da0:	4b2e      	ldr	r3, [pc, #184]	; (8001e5c <Sensor_Manager+0x228>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4a26      	ldr	r2, [pc, #152]	; (8001e40 <Sensor_Manager+0x20c>)
 8001da6:	011b      	lsls	r3, r3, #4
 8001da8:	4413      	add	r3, r2
 8001daa:	681a      	ldr	r2, [r3, #0]
 8001dac:	4b2b      	ldr	r3, [pc, #172]	; (8001e5c <Sensor_Manager+0x228>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4923      	ldr	r1, [pc, #140]	; (8001e40 <Sensor_Manager+0x20c>)
 8001db2:	011b      	lsls	r3, r3, #4
 8001db4:	440b      	add	r3, r1
 8001db6:	3304      	adds	r3, #4
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4925      	ldr	r1, [pc, #148]	; (8001e50 <Sensor_Manager+0x21c>)
 8001dbc:	f00f f8ba 	bl	8010f34 <siprintf>
			LOGGER(&log);
 8001dc0:	f107 0314 	add.w	r3, r7, #20
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	f7ff fda5 	bl	8001914 <LOGGER>
			free(log.value);
 8001dca:	6a3b      	ldr	r3, [r7, #32]
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f00e ff23 	bl	8010c18 <free>

			checkedGPIOcount++;
 8001dd2:	4b22      	ldr	r3, [pc, #136]	; (8001e5c <Sensor_Manager+0x228>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	3301      	adds	r3, #1
 8001dd8:	4a20      	ldr	r2, [pc, #128]	; (8001e5c <Sensor_Manager+0x228>)
 8001dda:	6013      	str	r3, [r2, #0]

			if (checkedGPIOcount == INPUT_GPIO_COUNT) {
 8001ddc:	4b1f      	ldr	r3, [pc, #124]	; (8001e5c <Sensor_Manager+0x228>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	2b07      	cmp	r3, #7
 8001de2:	d108      	bne.n	8001df6 <Sensor_Manager+0x1c2>
				gpio_valid = false;
 8001de4:	4b1b      	ldr	r3, [pc, #108]	; (8001e54 <Sensor_Manager+0x220>)
 8001de6:	2200      	movs	r2, #0
 8001de8:	601a      	str	r2, [r3, #0]
				checkedGPIOcount = 0;
 8001dea:	4b1c      	ldr	r3, [pc, #112]	; (8001e5c <Sensor_Manager+0x228>)
 8001dec:	2200      	movs	r2, #0
 8001dee:	601a      	str	r2, [r3, #0]
				gpioCheckStartTime = 0;
 8001df0:	4b19      	ldr	r3, [pc, #100]	; (8001e58 <Sensor_Manager+0x224>)
 8001df2:	2200      	movs	r2, #0
 8001df4:	601a      	str	r2, [r3, #0]
			}
		}
	}

	// log internal temperature
	if (adc_valid) {
 8001df6:	4b1a      	ldr	r3, [pc, #104]	; (8001e60 <Sensor_Manager+0x22c>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d01c      	beq.n	8001e38 <Sensor_Manager+0x204>
		log_t log;
		log.component = "ECU";
 8001dfe:	4b11      	ldr	r3, [pc, #68]	; (8001e44 <Sensor_Manager+0x210>)
 8001e00:	607b      	str	r3, [r7, #4]
		log.level = "INFO";
 8001e02:	4b11      	ldr	r3, [pc, #68]	; (8001e48 <Sensor_Manager+0x214>)
 8001e04:	60bb      	str	r3, [r7, #8]
		log.key = "TEMPERATURE";
 8001e06:	4b17      	ldr	r3, [pc, #92]	; (8001e64 <Sensor_Manager+0x230>)
 8001e08:	60fb      	str	r3, [r7, #12]
		log.value = malloc(5);
 8001e0a:	2005      	movs	r0, #5
 8001e0c:	f00e fefc 	bl	8010c08 <malloc>
 8001e10:	4603      	mov	r3, r0
 8001e12:	613b      	str	r3, [r7, #16]
		sprintf(log.value, "%d", core_temperature);
 8001e14:	693b      	ldr	r3, [r7, #16]
 8001e16:	4a14      	ldr	r2, [pc, #80]	; (8001e68 <Sensor_Manager+0x234>)
 8001e18:	6812      	ldr	r2, [r2, #0]
 8001e1a:	4914      	ldr	r1, [pc, #80]	; (8001e6c <Sensor_Manager+0x238>)
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	f00f f889 	bl	8010f34 <siprintf>
		LOGGER(&log);
 8001e22:	1d3b      	adds	r3, r7, #4
 8001e24:	4618      	mov	r0, r3
 8001e26:	f7ff fd75 	bl	8001914 <LOGGER>
		free(log.value);
 8001e2a:	693b      	ldr	r3, [r7, #16]
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	f00e fef3 	bl	8010c18 <free>

		adc_valid = false;
 8001e32:	4b0b      	ldr	r3, [pc, #44]	; (8001e60 <Sensor_Manager+0x22c>)
 8001e34:	2200      	movs	r2, #0
 8001e36:	601a      	str	r2, [r3, #0]
	}
}
 8001e38:	bf00      	nop
 8001e3a:	373c      	adds	r7, #60	; 0x3c
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bd90      	pop	{r4, r7, pc}
 8001e40:	20000000 	.word	0x20000000
 8001e44:	080122b8 	.word	0x080122b8
 8001e48:	080122dc 	.word	0x080122dc
 8001e4c:	080123a4 	.word	0x080123a4
 8001e50:	080123ac 	.word	0x080123ac
 8001e54:	200113a0 	.word	0x200113a0
 8001e58:	20011484 	.word	0x20011484
 8001e5c:	20011488 	.word	0x20011488
 8001e60:	20011398 	.word	0x20011398
 8001e64:	080123b4 	.word	0x080123b4
 8001e68:	2001139c 	.word	0x2001139c
 8001e6c:	080123c0 	.word	0x080123c0

08001e70 <RTD_Manager>:
/* ========== GPIO END ========== */


void RTD_Manager() {
 8001e70:	b590      	push	{r4, r7, lr}
 8001e72:	b089      	sub	sp, #36	; 0x24
 8001e74:	af00      	add	r7, sp, #0
	static uint32_t RTD_COUNTER_ACTIVE = false;

	static uint32_t RTD_TIMER;

	// read RTD related GPIO state
	uint32_t LV_ACTIVE    = HAL_GPIO_ReadPin(GPIOD, LV_ACTIVE_Pin);
 8001e76:	2180      	movs	r1, #128	; 0x80
 8001e78:	4835      	ldr	r0, [pc, #212]	; (8001f50 <RTD_Manager+0xe0>)
 8001e7a:	f004 fb59 	bl	8006530 <HAL_GPIO_ReadPin>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	61fb      	str	r3, [r7, #28]
	uint32_t RTD       	  = HAL_GPIO_ReadPin(GPIOD, RTD_Pin);
 8001e82:	2140      	movs	r1, #64	; 0x40
 8001e84:	4832      	ldr	r0, [pc, #200]	; (8001f50 <RTD_Manager+0xe0>)
 8001e86:	f004 fb53 	bl	8006530 <HAL_GPIO_ReadPin>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	61bb      	str	r3, [r7, #24]
	uint32_t BRAKE        = HAL_GPIO_ReadPin(GPIOD, BRAKE_Pin);
 8001e8e:	2120      	movs	r1, #32
 8001e90:	482f      	ldr	r0, [pc, #188]	; (8001f50 <RTD_Manager+0xe0>)
 8001e92:	f004 fb4d 	bl	8006530 <HAL_GPIO_ReadPin>
 8001e96:	4603      	mov	r3, r0
 8001e98:	617b      	str	r3, [r7, #20]

	// on RTD condition
	if (!RTD_FLAG && LV_ACTIVE && RTD && BRAKE) {
 8001e9a:	4b2e      	ldr	r3, [pc, #184]	; (8001f54 <RTD_Manager+0xe4>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d14c      	bne.n	8001f3c <RTD_Manager+0xcc>
 8001ea2:	69fb      	ldr	r3, [r7, #28]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d049      	beq.n	8001f3c <RTD_Manager+0xcc>
 8001ea8:	69bb      	ldr	r3, [r7, #24]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d046      	beq.n	8001f3c <RTD_Manager+0xcc>
 8001eae:	697b      	ldr	r3, [r7, #20]
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d043      	beq.n	8001f3c <RTD_Manager+0xcc>
	  // START RTD ACTIVATION TIMER
	  if (!RTD_COUNTER_ACTIVE) {
 8001eb4:	4b28      	ldr	r3, [pc, #160]	; (8001f58 <RTD_Manager+0xe8>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d108      	bne.n	8001ece <RTD_Manager+0x5e>
		 RTD_COUNTER_ACTIVE = true;
 8001ebc:	4b26      	ldr	r3, [pc, #152]	; (8001f58 <RTD_Manager+0xe8>)
 8001ebe:	2201      	movs	r2, #1
 8001ec0:	601a      	str	r2, [r3, #0]
		 RTD_TIMER = HAL_GetTick();
 8001ec2:	f002 fa19 	bl	80042f8 <HAL_GetTick>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	4a24      	ldr	r2, [pc, #144]	; (8001f5c <RTD_Manager+0xec>)
 8001eca:	6013      	str	r3, [r2, #0]
	  if (!RTD_COUNTER_ACTIVE) {
 8001ecc:	e03a      	b.n	8001f44 <RTD_Manager+0xd4>
	  }

	  // RTD ACTIVATION SEQUENCE
	  else if (HAL_GetTick() - RTD_TIMER > 1000) {
 8001ece:	f002 fa13 	bl	80042f8 <HAL_GetTick>
 8001ed2:	4602      	mov	r2, r0
 8001ed4:	4b21      	ldr	r3, [pc, #132]	; (8001f5c <RTD_Manager+0xec>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	1ad3      	subs	r3, r2, r3
 8001eda:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001ede:	d931      	bls.n	8001f44 <RTD_Manager+0xd4>
		 // Mark RTD active
		 RTD_FLAG = true;
 8001ee0:	4b1c      	ldr	r3, [pc, #112]	; (8001f54 <RTD_Manager+0xe4>)
 8001ee2:	2201      	movs	r2, #1
 8001ee4:	601a      	str	r2, [r3, #0]

		 // Play RTDS
		 HAL_GPIO_WritePin(GPIOA, RTDS_Pin, GPIO_PIN_RESET);
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001eec:	481c      	ldr	r0, [pc, #112]	; (8001f60 <RTD_Manager+0xf0>)
 8001eee:	f004 fb37 	bl	8006560 <HAL_GPIO_WritePin>
		 HAL_TIM_Base_Start_IT(&htim2);
 8001ef2:	481c      	ldr	r0, [pc, #112]	; (8001f64 <RTD_Manager+0xf4>)
 8001ef4:	f009 fb16 	bl	800b524 <HAL_TIM_Base_Start_IT>

		 // Activate APPS relay and RTD indicator LED
		 HAL_GPIO_WritePin(GPIOD, RTD_ACTIVE_Pin, GPIO_PIN_SET);
 8001ef8:	2201      	movs	r2, #1
 8001efa:	2108      	movs	r1, #8
 8001efc:	4814      	ldr	r0, [pc, #80]	; (8001f50 <RTD_Manager+0xe0>)
 8001efe:	f004 fb2f 	bl	8006560 <HAL_GPIO_WritePin>

		 log_t log;
		 log.component = "ECU";
 8001f02:	4b19      	ldr	r3, [pc, #100]	; (8001f68 <RTD_Manager+0xf8>)
 8001f04:	607b      	str	r3, [r7, #4]
		 log.level = "INFO";
 8001f06:	4b19      	ldr	r3, [pc, #100]	; (8001f6c <RTD_Manager+0xfc>)
 8001f08:	60bb      	str	r3, [r7, #8]
		 log.key = "RTD";
 8001f0a:	4b19      	ldr	r3, [pc, #100]	; (8001f70 <RTD_Manager+0x100>)
 8001f0c:	60fb      	str	r3, [r7, #12]
		 log.value = malloc(10);
 8001f0e:	200a      	movs	r0, #10
 8001f10:	f00e fe7a 	bl	8010c08 <malloc>
 8001f14:	4603      	mov	r3, r0
 8001f16:	613b      	str	r3, [r7, #16]
		 sprintf(log.value, "%d", HAL_GetTick());
 8001f18:	693c      	ldr	r4, [r7, #16]
 8001f1a:	f002 f9ed 	bl	80042f8 <HAL_GetTick>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	461a      	mov	r2, r3
 8001f22:	4914      	ldr	r1, [pc, #80]	; (8001f74 <RTD_Manager+0x104>)
 8001f24:	4620      	mov	r0, r4
 8001f26:	f00f f805 	bl	8010f34 <siprintf>
		 LOGGER(&log);
 8001f2a:	1d3b      	adds	r3, r7, #4
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	f7ff fcf1 	bl	8001914 <LOGGER>
		 free(log.value);
 8001f32:	693b      	ldr	r3, [r7, #16]
 8001f34:	4618      	mov	r0, r3
 8001f36:	f00e fe6f 	bl	8010c18 <free>
	  if (!RTD_COUNTER_ACTIVE) {
 8001f3a:	e003      	b.n	8001f44 <RTD_Manager+0xd4>
	  }
	}
	// RTD abort
	else {
	  RTD_COUNTER_ACTIVE = false;
 8001f3c:	4b06      	ldr	r3, [pc, #24]	; (8001f58 <RTD_Manager+0xe8>)
 8001f3e:	2200      	movs	r2, #0
 8001f40:	601a      	str	r2, [r3, #0]
	}
}
 8001f42:	e000      	b.n	8001f46 <RTD_Manager+0xd6>
	  if (!RTD_COUNTER_ACTIVE) {
 8001f44:	bf00      	nop
}
 8001f46:	bf00      	nop
 8001f48:	3724      	adds	r7, #36	; 0x24
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd90      	pop	{r4, r7, pc}
 8001f4e:	bf00      	nop
 8001f50:	40020c00 	.word	0x40020c00
 8001f54:	2001148c 	.word	0x2001148c
 8001f58:	20011490 	.word	0x20011490
 8001f5c:	20011494 	.word	0x20011494
 8001f60:	40020000 	.word	0x40020000
 8001f64:	20011618 	.word	0x20011618
 8001f68:	080122b8 	.word	0x080122b8
 8001f6c:	080122dc 	.word	0x080122dc
 8001f70:	08012198 	.word	0x08012198
 8001f74:	080123c0 	.word	0x080123c0

08001f78 <CAN_Setup>:


/* ========== CAN RECEIVER START ========== */
void CAN_Setup() {
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b08a      	sub	sp, #40	; 0x28
 8001f7c:	af00      	add	r7, sp, #0
   CAN_FilterTypeDef CAN_Filter_Config;

   CAN_Filter_Config.FilterBank = 0;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	617b      	str	r3, [r7, #20]
   CAN_Filter_Config.FilterMode = CAN_FILTERMODE_IDMASK;
 8001f82:	2300      	movs	r3, #0
 8001f84:	61bb      	str	r3, [r7, #24]
   CAN_Filter_Config.FilterScale = CAN_FILTERSCALE_32BIT;
 8001f86:	2301      	movs	r3, #1
 8001f88:	61fb      	str	r3, [r7, #28]
   CAN_Filter_Config.FilterIdHigh = 0x0000;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	603b      	str	r3, [r7, #0]
   CAN_Filter_Config.FilterIdLow = 0x0000;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	607b      	str	r3, [r7, #4]
   CAN_Filter_Config.FilterMaskIdHigh = 0x0000;
 8001f92:	2300      	movs	r3, #0
 8001f94:	60bb      	str	r3, [r7, #8]
   CAN_Filter_Config.FilterMaskIdLow = 0x0000;
 8001f96:	2300      	movs	r3, #0
 8001f98:	60fb      	str	r3, [r7, #12]
   CAN_Filter_Config.FilterFIFOAssignment = CAN_RX_FIFO0;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	613b      	str	r3, [r7, #16]
   CAN_Filter_Config.FilterActivation = ENABLE;
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	623b      	str	r3, [r7, #32]
   CAN_Filter_Config.SlaveStartFilterBank = 14;
 8001fa2:	230e      	movs	r3, #14
 8001fa4:	627b      	str	r3, [r7, #36]	; 0x24

   // CAN configuration
   if (HAL_CAN_ConfigFilter(&hcan1, &CAN_Filter_Config) != HAL_OK) {
 8001fa6:	463b      	mov	r3, r7
 8001fa8:	4619      	mov	r1, r3
 8001faa:	484a      	ldr	r0, [pc, #296]	; (80020d4 <CAN_Setup+0x15c>)
 8001fac:	f002 ff4c 	bl	8004e48 <HAL_CAN_ConfigFilter>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d01c      	beq.n	8001ff0 <CAN_Setup+0x78>
		errlog.component = "ECU";
 8001fb6:	4b48      	ldr	r3, [pc, #288]	; (80020d8 <CAN_Setup+0x160>)
 8001fb8:	4a48      	ldr	r2, [pc, #288]	; (80020dc <CAN_Setup+0x164>)
 8001fba:	601a      	str	r2, [r3, #0]
		errlog.level = "ERRR";
 8001fbc:	4b46      	ldr	r3, [pc, #280]	; (80020d8 <CAN_Setup+0x160>)
 8001fbe:	4a48      	ldr	r2, [pc, #288]	; (80020e0 <CAN_Setup+0x168>)
 8001fc0:	605a      	str	r2, [r3, #4]
		errlog.key = "CAN";
 8001fc2:	4b45      	ldr	r3, [pc, #276]	; (80020d8 <CAN_Setup+0x160>)
 8001fc4:	4a47      	ldr	r2, [pc, #284]	; (80020e4 <CAN_Setup+0x16c>)
 8001fc6:	609a      	str	r2, [r3, #8]
		errlog.value = malloc(25);
 8001fc8:	2019      	movs	r0, #25
 8001fca:	f00e fe1d 	bl	8010c08 <malloc>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	461a      	mov	r2, r3
 8001fd2:	4b41      	ldr	r3, [pc, #260]	; (80020d8 <CAN_Setup+0x160>)
 8001fd4:	60da      	str	r2, [r3, #12]
		sprintf(errlog.value, "HAL_CAN_ConfigFilter_ERR");
 8001fd6:	4b40      	ldr	r3, [pc, #256]	; (80020d8 <CAN_Setup+0x160>)
 8001fd8:	68db      	ldr	r3, [r3, #12]
 8001fda:	4943      	ldr	r1, [pc, #268]	; (80020e8 <CAN_Setup+0x170>)
 8001fdc:	4618      	mov	r0, r3
 8001fde:	f00e ffa9 	bl	8010f34 <siprintf>

		Error_Handler();
 8001fe2:	f001 f9b9 	bl	8003358 <Error_Handler>
		free(errlog.value);
 8001fe6:	4b3c      	ldr	r3, [pc, #240]	; (80020d8 <CAN_Setup+0x160>)
 8001fe8:	68db      	ldr	r3, [r3, #12]
 8001fea:	4618      	mov	r0, r3
 8001fec:	f00e fe14 	bl	8010c18 <free>
   }

   // CAN start
   if (HAL_CAN_Start(&hcan1) != HAL_OK) {
 8001ff0:	4838      	ldr	r0, [pc, #224]	; (80020d4 <CAN_Setup+0x15c>)
 8001ff2:	f003 f809 	bl	8005008 <HAL_CAN_Start>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d01c      	beq.n	8002036 <CAN_Setup+0xbe>
		errlog.component = "ECU";
 8001ffc:	4b36      	ldr	r3, [pc, #216]	; (80020d8 <CAN_Setup+0x160>)
 8001ffe:	4a37      	ldr	r2, [pc, #220]	; (80020dc <CAN_Setup+0x164>)
 8002000:	601a      	str	r2, [r3, #0]
		errlog.level = "ERRR";
 8002002:	4b35      	ldr	r3, [pc, #212]	; (80020d8 <CAN_Setup+0x160>)
 8002004:	4a36      	ldr	r2, [pc, #216]	; (80020e0 <CAN_Setup+0x168>)
 8002006:	605a      	str	r2, [r3, #4]
		errlog.key = "CAN";
 8002008:	4b33      	ldr	r3, [pc, #204]	; (80020d8 <CAN_Setup+0x160>)
 800200a:	4a36      	ldr	r2, [pc, #216]	; (80020e4 <CAN_Setup+0x16c>)
 800200c:	609a      	str	r2, [r3, #8]
		errlog.value = malloc(18);
 800200e:	2012      	movs	r0, #18
 8002010:	f00e fdfa 	bl	8010c08 <malloc>
 8002014:	4603      	mov	r3, r0
 8002016:	461a      	mov	r2, r3
 8002018:	4b2f      	ldr	r3, [pc, #188]	; (80020d8 <CAN_Setup+0x160>)
 800201a:	60da      	str	r2, [r3, #12]
		sprintf(errlog.value, "HAL_CAN_Start_ERR");
 800201c:	4b2e      	ldr	r3, [pc, #184]	; (80020d8 <CAN_Setup+0x160>)
 800201e:	68db      	ldr	r3, [r3, #12]
 8002020:	4932      	ldr	r1, [pc, #200]	; (80020ec <CAN_Setup+0x174>)
 8002022:	4618      	mov	r0, r3
 8002024:	f00e ff86 	bl	8010f34 <siprintf>

		Error_Handler();
 8002028:	f001 f996 	bl	8003358 <Error_Handler>
		free(errlog.value);
 800202c:	4b2a      	ldr	r3, [pc, #168]	; (80020d8 <CAN_Setup+0x160>)
 800202e:	68db      	ldr	r3, [r3, #12]
 8002030:	4618      	mov	r0, r3
 8002032:	f00e fdf1 	bl	8010c18 <free>
   }

   // CAN RX notification activation
   if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK) {
 8002036:	2102      	movs	r1, #2
 8002038:	4826      	ldr	r0, [pc, #152]	; (80020d4 <CAN_Setup+0x15c>)
 800203a:	f003 f93b 	bl	80052b4 <HAL_CAN_ActivateNotification>
 800203e:	4603      	mov	r3, r0
 8002040:	2b00      	cmp	r3, #0
 8002042:	d01c      	beq.n	800207e <CAN_Setup+0x106>
		errlog.component = "ECU";
 8002044:	4b24      	ldr	r3, [pc, #144]	; (80020d8 <CAN_Setup+0x160>)
 8002046:	4a25      	ldr	r2, [pc, #148]	; (80020dc <CAN_Setup+0x164>)
 8002048:	601a      	str	r2, [r3, #0]
		errlog.level = "ERRR";
 800204a:	4b23      	ldr	r3, [pc, #140]	; (80020d8 <CAN_Setup+0x160>)
 800204c:	4a24      	ldr	r2, [pc, #144]	; (80020e0 <CAN_Setup+0x168>)
 800204e:	605a      	str	r2, [r3, #4]
		errlog.key = "CAN";
 8002050:	4b21      	ldr	r3, [pc, #132]	; (80020d8 <CAN_Setup+0x160>)
 8002052:	4a24      	ldr	r2, [pc, #144]	; (80020e4 <CAN_Setup+0x16c>)
 8002054:	609a      	str	r2, [r3, #8]
		errlog.value = malloc(61);
 8002056:	203d      	movs	r0, #61	; 0x3d
 8002058:	f00e fdd6 	bl	8010c08 <malloc>
 800205c:	4603      	mov	r3, r0
 800205e:	461a      	mov	r2, r3
 8002060:	4b1d      	ldr	r3, [pc, #116]	; (80020d8 <CAN_Setup+0x160>)
 8002062:	60da      	str	r2, [r3, #12]
		sprintf(errlog.value, "HAL_CAN_ActivateNotification_CAN_IT_RX_FIFO0_MSG_PENDING_ERR");
 8002064:	4b1c      	ldr	r3, [pc, #112]	; (80020d8 <CAN_Setup+0x160>)
 8002066:	68db      	ldr	r3, [r3, #12]
 8002068:	4921      	ldr	r1, [pc, #132]	; (80020f0 <CAN_Setup+0x178>)
 800206a:	4618      	mov	r0, r3
 800206c:	f00e ff62 	bl	8010f34 <siprintf>

		Error_Handler();
 8002070:	f001 f972 	bl	8003358 <Error_Handler>
		free(errlog.value);
 8002074:	4b18      	ldr	r3, [pc, #96]	; (80020d8 <CAN_Setup+0x160>)
 8002076:	68db      	ldr	r3, [r3, #12]
 8002078:	4618      	mov	r0, r3
 800207a:	f00e fdcd 	bl	8010c18 <free>
   }
   can_active = true;
 800207e:	4b1d      	ldr	r3, [pc, #116]	; (80020f4 <CAN_Setup+0x17c>)
 8002080:	2201      	movs	r2, #1
 8002082:	601a      	str	r2, [r3, #0]

   // CAN RX FULL notification activation
   if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_FULL) != HAL_OK) {
 8002084:	2104      	movs	r1, #4
 8002086:	4813      	ldr	r0, [pc, #76]	; (80020d4 <CAN_Setup+0x15c>)
 8002088:	f003 f914 	bl	80052b4 <HAL_CAN_ActivateNotification>
 800208c:	4603      	mov	r3, r0
 800208e:	2b00      	cmp	r3, #0
 8002090:	d01c      	beq.n	80020cc <CAN_Setup+0x154>
		errlog.component = "ECU";
 8002092:	4b11      	ldr	r3, [pc, #68]	; (80020d8 <CAN_Setup+0x160>)
 8002094:	4a11      	ldr	r2, [pc, #68]	; (80020dc <CAN_Setup+0x164>)
 8002096:	601a      	str	r2, [r3, #0]
		errlog.level = "ERRR";
 8002098:	4b0f      	ldr	r3, [pc, #60]	; (80020d8 <CAN_Setup+0x160>)
 800209a:	4a11      	ldr	r2, [pc, #68]	; (80020e0 <CAN_Setup+0x168>)
 800209c:	605a      	str	r2, [r3, #4]
		errlog.key = "CAN";
 800209e:	4b0e      	ldr	r3, [pc, #56]	; (80020d8 <CAN_Setup+0x160>)
 80020a0:	4a10      	ldr	r2, [pc, #64]	; (80020e4 <CAN_Setup+0x16c>)
 80020a2:	609a      	str	r2, [r3, #8]
		errlog.value = malloc(54);
 80020a4:	2036      	movs	r0, #54	; 0x36
 80020a6:	f00e fdaf 	bl	8010c08 <malloc>
 80020aa:	4603      	mov	r3, r0
 80020ac:	461a      	mov	r2, r3
 80020ae:	4b0a      	ldr	r3, [pc, #40]	; (80020d8 <CAN_Setup+0x160>)
 80020b0:	60da      	str	r2, [r3, #12]
		sprintf(errlog.value, "HAL_CAN_ActivateNotification_CAN_IT_RX_FIFO0_FULL_ERR");
 80020b2:	4b09      	ldr	r3, [pc, #36]	; (80020d8 <CAN_Setup+0x160>)
 80020b4:	68db      	ldr	r3, [r3, #12]
 80020b6:	4910      	ldr	r1, [pc, #64]	; (80020f8 <CAN_Setup+0x180>)
 80020b8:	4618      	mov	r0, r3
 80020ba:	f00e ff3b 	bl	8010f34 <siprintf>

		Error_Handler();
 80020be:	f001 f94b 	bl	8003358 <Error_Handler>
		free(errlog.value);
 80020c2:	4b05      	ldr	r3, [pc, #20]	; (80020d8 <CAN_Setup+0x160>)
 80020c4:	68db      	ldr	r3, [r3, #12]
 80020c6:	4618      	mov	r0, r3
 80020c8:	f00e fda6 	bl	8010c18 <free>
   }
}
 80020cc:	bf00      	nop
 80020ce:	3728      	adds	r7, #40	; 0x28
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bd80      	pop	{r7, pc}
 80020d4:	2000018c 	.word	0x2000018c
 80020d8:	2000025c 	.word	0x2000025c
 80020dc:	080122b8 	.word	0x080122b8
 80020e0:	080122bc 	.word	0x080122bc
 80020e4:	080123c4 	.word	0x080123c4
 80020e8:	080123c8 	.word	0x080123c8
 80020ec:	080123e4 	.word	0x080123e4
 80020f0:	080123f8 	.word	0x080123f8
 80020f4:	20011474 	.word	0x20011474
 80020f8:	08012438 	.word	0x08012438

080020fc <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *CAN_Handle) {
 80020fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020fe:	b089      	sub	sp, #36	; 0x24
 8002100:	af06      	add	r7, sp, #24
 8002102:	6078      	str	r0, [r7, #4]
	if (HAL_CAN_GetRxMessage(CAN_Handle, CAN_RX_FIFO0, &can_rxh, can_rxb) != HAL_OK) {
 8002104:	4b8f      	ldr	r3, [pc, #572]	; (8002344 <HAL_CAN_RxFifo0MsgPendingCallback+0x248>)
 8002106:	4a90      	ldr	r2, [pc, #576]	; (8002348 <HAL_CAN_RxFifo0MsgPendingCallback+0x24c>)
 8002108:	2100      	movs	r1, #0
 800210a:	6878      	ldr	r0, [r7, #4]
 800210c:	f002 ffc0 	bl	8005090 <HAL_CAN_GetRxMessage>
 8002110:	4603      	mov	r3, r0
 8002112:	2b00      	cmp	r3, #0
 8002114:	d01c      	beq.n	8002150 <HAL_CAN_RxFifo0MsgPendingCallback+0x54>
		errlog.component = "ECU";
 8002116:	4b8d      	ldr	r3, [pc, #564]	; (800234c <HAL_CAN_RxFifo0MsgPendingCallback+0x250>)
 8002118:	4a8d      	ldr	r2, [pc, #564]	; (8002350 <HAL_CAN_RxFifo0MsgPendingCallback+0x254>)
 800211a:	601a      	str	r2, [r3, #0]
		errlog.level = "ERRR";
 800211c:	4b8b      	ldr	r3, [pc, #556]	; (800234c <HAL_CAN_RxFifo0MsgPendingCallback+0x250>)
 800211e:	4a8d      	ldr	r2, [pc, #564]	; (8002354 <HAL_CAN_RxFifo0MsgPendingCallback+0x258>)
 8002120:	605a      	str	r2, [r3, #4]
		errlog.key = "CAN";
 8002122:	4b8a      	ldr	r3, [pc, #552]	; (800234c <HAL_CAN_RxFifo0MsgPendingCallback+0x250>)
 8002124:	4a8c      	ldr	r2, [pc, #560]	; (8002358 <HAL_CAN_RxFifo0MsgPendingCallback+0x25c>)
 8002126:	609a      	str	r2, [r3, #8]
		errlog.value = malloc(25);
 8002128:	2019      	movs	r0, #25
 800212a:	f00e fd6d 	bl	8010c08 <malloc>
 800212e:	4603      	mov	r3, r0
 8002130:	461a      	mov	r2, r3
 8002132:	4b86      	ldr	r3, [pc, #536]	; (800234c <HAL_CAN_RxFifo0MsgPendingCallback+0x250>)
 8002134:	60da      	str	r2, [r3, #12]
		sprintf(errlog.value, "HAL_CAN_GetRxMessage_ERR");
 8002136:	4b85      	ldr	r3, [pc, #532]	; (800234c <HAL_CAN_RxFifo0MsgPendingCallback+0x250>)
 8002138:	68db      	ldr	r3, [r3, #12]
 800213a:	4988      	ldr	r1, [pc, #544]	; (800235c <HAL_CAN_RxFifo0MsgPendingCallback+0x260>)
 800213c:	4618      	mov	r0, r3
 800213e:	f00e fef9 	bl	8010f34 <siprintf>

		Error_Handler();
 8002142:	f001 f909 	bl	8003358 <Error_Handler>
		free(errlog.value);
 8002146:	4b81      	ldr	r3, [pc, #516]	; (800234c <HAL_CAN_RxFifo0MsgPendingCallback+0x250>)
 8002148:	68db      	ldr	r3, [r3, #12]
 800214a:	4618      	mov	r0, r3
 800214c:	f00e fd64 	bl	8010c18 <free>
	}

#if DEBUG_MODE
	printf("CAN: %x 0x%02X 0x%02X 0x%02X 0x%02X 0x%02X 0x%02X 0x%02X 0x%02X\n", can_rxh.StdId, can_rxb[0], can_rxb[1], can_rxb[2], can_rxb[3], can_rxb[4], can_rxb[5], can_rxb[6], can_rxb[7]);
 8002150:	4b7d      	ldr	r3, [pc, #500]	; (8002348 <HAL_CAN_RxFifo0MsgPendingCallback+0x24c>)
 8002152:	6819      	ldr	r1, [r3, #0]
 8002154:	4b7b      	ldr	r3, [pc, #492]	; (8002344 <HAL_CAN_RxFifo0MsgPendingCallback+0x248>)
 8002156:	781b      	ldrb	r3, [r3, #0]
 8002158:	469c      	mov	ip, r3
 800215a:	4b7a      	ldr	r3, [pc, #488]	; (8002344 <HAL_CAN_RxFifo0MsgPendingCallback+0x248>)
 800215c:	785b      	ldrb	r3, [r3, #1]
 800215e:	469e      	mov	lr, r3
 8002160:	4b78      	ldr	r3, [pc, #480]	; (8002344 <HAL_CAN_RxFifo0MsgPendingCallback+0x248>)
 8002162:	789b      	ldrb	r3, [r3, #2]
 8002164:	461a      	mov	r2, r3
 8002166:	4b77      	ldr	r3, [pc, #476]	; (8002344 <HAL_CAN_RxFifo0MsgPendingCallback+0x248>)
 8002168:	78db      	ldrb	r3, [r3, #3]
 800216a:	4618      	mov	r0, r3
 800216c:	4b75      	ldr	r3, [pc, #468]	; (8002344 <HAL_CAN_RxFifo0MsgPendingCallback+0x248>)
 800216e:	791b      	ldrb	r3, [r3, #4]
 8002170:	461c      	mov	r4, r3
 8002172:	4b74      	ldr	r3, [pc, #464]	; (8002344 <HAL_CAN_RxFifo0MsgPendingCallback+0x248>)
 8002174:	795b      	ldrb	r3, [r3, #5]
 8002176:	461d      	mov	r5, r3
 8002178:	4b72      	ldr	r3, [pc, #456]	; (8002344 <HAL_CAN_RxFifo0MsgPendingCallback+0x248>)
 800217a:	799b      	ldrb	r3, [r3, #6]
 800217c:	461e      	mov	r6, r3
 800217e:	4b71      	ldr	r3, [pc, #452]	; (8002344 <HAL_CAN_RxFifo0MsgPendingCallback+0x248>)
 8002180:	79db      	ldrb	r3, [r3, #7]
 8002182:	9305      	str	r3, [sp, #20]
 8002184:	9604      	str	r6, [sp, #16]
 8002186:	9503      	str	r5, [sp, #12]
 8002188:	9402      	str	r4, [sp, #8]
 800218a:	9001      	str	r0, [sp, #4]
 800218c:	9200      	str	r2, [sp, #0]
 800218e:	4673      	mov	r3, lr
 8002190:	4662      	mov	r2, ip
 8002192:	4873      	ldr	r0, [pc, #460]	; (8002360 <HAL_CAN_RxFifo0MsgPendingCallback+0x264>)
 8002194:	f00e fe30 	bl	8010df8 <iprintf>
#endif

	switch (can_rxh.StdId) {
 8002198:	4b6b      	ldr	r3, [pc, #428]	; (8002348 <HAL_CAN_RxFifo0MsgPendingCallback+0x24c>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f240 62b1 	movw	r2, #1713	; 0x6b1
 80021a0:	4293      	cmp	r3, r2
 80021a2:	d03b      	beq.n	800221c <HAL_CAN_RxFifo0MsgPendingCallback+0x120>
 80021a4:	f240 62b1 	movw	r2, #1713	; 0x6b1
 80021a8:	4293      	cmp	r3, r2
 80021aa:	f200 80c6 	bhi.w	800233a <HAL_CAN_RxFifo0MsgPendingCallback+0x23e>
 80021ae:	2bad      	cmp	r3, #173	; 0xad
 80021b0:	d826      	bhi.n	8002200 <HAL_CAN_RxFifo0MsgPendingCallback+0x104>
 80021b2:	2ba0      	cmp	r3, #160	; 0xa0
 80021b4:	f0c0 80c1 	bcc.w	800233a <HAL_CAN_RxFifo0MsgPendingCallback+0x23e>
 80021b8:	3ba0      	subs	r3, #160	; 0xa0
 80021ba:	2b0d      	cmp	r3, #13
 80021bc:	f200 80bd 	bhi.w	800233a <HAL_CAN_RxFifo0MsgPendingCallback+0x23e>
 80021c0:	a201      	add	r2, pc, #4	; (adr r2, 80021c8 <HAL_CAN_RxFifo0MsgPendingCallback+0xcc>)
 80021c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021c6:	bf00      	nop
 80021c8:	08002233 	.word	0x08002233
 80021cc:	0800233b 	.word	0x0800233b
 80021d0:	08002249 	.word	0x08002249
 80021d4:	0800225f 	.word	0x0800225f
 80021d8:	0800233b 	.word	0x0800233b
 80021dc:	08002275 	.word	0x08002275
 80021e0:	0800228b 	.word	0x0800228b
 80021e4:	080022a1 	.word	0x080022a1
 80021e8:	080022b7 	.word	0x080022b7
 80021ec:	080022cd 	.word	0x080022cd
 80021f0:	080022e3 	.word	0x080022e3
 80021f4:	080022f9 	.word	0x080022f9
 80021f8:	0800230f 	.word	0x0800230f
 80021fc:	08002325 	.word	0x08002325
 8002200:	f5b3 6fd6 	cmp.w	r3, #1712	; 0x6b0
 8002204:	f040 8099 	bne.w	800233a <HAL_CAN_RxFifo0MsgPendingCallback+0x23e>
		case CAN_BMS_CORE_ID:
			memcpy(can_rxd[CAN_BMS_CORE], can_rxb, 8);
 8002208:	4b56      	ldr	r3, [pc, #344]	; (8002364 <HAL_CAN_RxFifo0MsgPendingCallback+0x268>)
 800220a:	4a4e      	ldr	r2, [pc, #312]	; (8002344 <HAL_CAN_RxFifo0MsgPendingCallback+0x248>)
 800220c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002210:	e883 0003 	stmia.w	r3, {r0, r1}
			can_valid[CAN_BMS_CORE] = true;
 8002214:	4b54      	ldr	r3, [pc, #336]	; (8002368 <HAL_CAN_RxFifo0MsgPendingCallback+0x26c>)
 8002216:	2201      	movs	r2, #1
 8002218:	601a      	str	r2, [r3, #0]
			break;
 800221a:	e08e      	b.n	800233a <HAL_CAN_RxFifo0MsgPendingCallback+0x23e>

		case CAN_BMS_TEMP_ID:
			memcpy(can_rxd[CAN_BMS_TEMP], can_rxb, 8);
 800221c:	4b51      	ldr	r3, [pc, #324]	; (8002364 <HAL_CAN_RxFifo0MsgPendingCallback+0x268>)
 800221e:	4a49      	ldr	r2, [pc, #292]	; (8002344 <HAL_CAN_RxFifo0MsgPendingCallback+0x248>)
 8002220:	3308      	adds	r3, #8
 8002222:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002226:	e883 0003 	stmia.w	r3, {r0, r1}
			can_valid[CAN_BMS_TEMP] = true;
 800222a:	4b4f      	ldr	r3, [pc, #316]	; (8002368 <HAL_CAN_RxFifo0MsgPendingCallback+0x26c>)
 800222c:	2201      	movs	r2, #1
 800222e:	605a      	str	r2, [r3, #4]
			break;
 8002230:	e083      	b.n	800233a <HAL_CAN_RxFifo0MsgPendingCallback+0x23e>

		case CAN_INV_TEMP_1_ID:
			memcpy(can_rxd[CAN_INV_TEMP_1], can_rxb, 8);
 8002232:	4b4c      	ldr	r3, [pc, #304]	; (8002364 <HAL_CAN_RxFifo0MsgPendingCallback+0x268>)
 8002234:	4a43      	ldr	r2, [pc, #268]	; (8002344 <HAL_CAN_RxFifo0MsgPendingCallback+0x248>)
 8002236:	3310      	adds	r3, #16
 8002238:	e892 0003 	ldmia.w	r2, {r0, r1}
 800223c:	e883 0003 	stmia.w	r3, {r0, r1}
			can_valid[CAN_INV_TEMP_1] = true;
 8002240:	4b49      	ldr	r3, [pc, #292]	; (8002368 <HAL_CAN_RxFifo0MsgPendingCallback+0x26c>)
 8002242:	2201      	movs	r2, #1
 8002244:	609a      	str	r2, [r3, #8]
			break;
 8002246:	e078      	b.n	800233a <HAL_CAN_RxFifo0MsgPendingCallback+0x23e>

		case CAN_INV_TEMP_3_ID:
			memcpy(can_rxd[CAN_INV_TEMP_3], can_rxb, 8);
 8002248:	4b46      	ldr	r3, [pc, #280]	; (8002364 <HAL_CAN_RxFifo0MsgPendingCallback+0x268>)
 800224a:	4a3e      	ldr	r2, [pc, #248]	; (8002344 <HAL_CAN_RxFifo0MsgPendingCallback+0x248>)
 800224c:	3318      	adds	r3, #24
 800224e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002252:	e883 0003 	stmia.w	r3, {r0, r1}
			can_valid[CAN_INV_TEMP_3] = true;
 8002256:	4b44      	ldr	r3, [pc, #272]	; (8002368 <HAL_CAN_RxFifo0MsgPendingCallback+0x26c>)
 8002258:	2201      	movs	r2, #1
 800225a:	60da      	str	r2, [r3, #12]
			break;
 800225c:	e06d      	b.n	800233a <HAL_CAN_RxFifo0MsgPendingCallback+0x23e>

		case CAN_INV_ANALOG_IN_ID:
			memcpy(can_rxd[CAN_INV_ANALOG_IN], can_rxb, 8);
 800225e:	4b41      	ldr	r3, [pc, #260]	; (8002364 <HAL_CAN_RxFifo0MsgPendingCallback+0x268>)
 8002260:	4a38      	ldr	r2, [pc, #224]	; (8002344 <HAL_CAN_RxFifo0MsgPendingCallback+0x248>)
 8002262:	3320      	adds	r3, #32
 8002264:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002268:	e883 0003 	stmia.w	r3, {r0, r1}
			can_valid[CAN_INV_ANALOG_IN] = true;
 800226c:	4b3e      	ldr	r3, [pc, #248]	; (8002368 <HAL_CAN_RxFifo0MsgPendingCallback+0x26c>)
 800226e:	2201      	movs	r2, #1
 8002270:	611a      	str	r2, [r3, #16]
			break;
 8002272:	e062      	b.n	800233a <HAL_CAN_RxFifo0MsgPendingCallback+0x23e>

		case CAN_INV_MOTOR_POS_ID:
			memcpy(can_rxd[CAN_INV_MOTOR_POS], can_rxb, 8);
 8002274:	4b3b      	ldr	r3, [pc, #236]	; (8002364 <HAL_CAN_RxFifo0MsgPendingCallback+0x268>)
 8002276:	4a33      	ldr	r2, [pc, #204]	; (8002344 <HAL_CAN_RxFifo0MsgPendingCallback+0x248>)
 8002278:	3328      	adds	r3, #40	; 0x28
 800227a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800227e:	e883 0003 	stmia.w	r3, {r0, r1}
			can_valid[CAN_INV_MOTOR_POS] = true;
 8002282:	4b39      	ldr	r3, [pc, #228]	; (8002368 <HAL_CAN_RxFifo0MsgPendingCallback+0x26c>)
 8002284:	2201      	movs	r2, #1
 8002286:	615a      	str	r2, [r3, #20]
			break;
 8002288:	e057      	b.n	800233a <HAL_CAN_RxFifo0MsgPendingCallback+0x23e>

		case CAN_INV_CURRENT_ID:
			memcpy(can_rxd[CAN_INV_CURRENT], can_rxb, 8);
 800228a:	4b36      	ldr	r3, [pc, #216]	; (8002364 <HAL_CAN_RxFifo0MsgPendingCallback+0x268>)
 800228c:	4a2d      	ldr	r2, [pc, #180]	; (8002344 <HAL_CAN_RxFifo0MsgPendingCallback+0x248>)
 800228e:	3330      	adds	r3, #48	; 0x30
 8002290:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002294:	e883 0003 	stmia.w	r3, {r0, r1}
			can_valid[CAN_INV_CURRENT] = true;
 8002298:	4b33      	ldr	r3, [pc, #204]	; (8002368 <HAL_CAN_RxFifo0MsgPendingCallback+0x26c>)
 800229a:	2201      	movs	r2, #1
 800229c:	619a      	str	r2, [r3, #24]
			break;
 800229e:	e04c      	b.n	800233a <HAL_CAN_RxFifo0MsgPendingCallback+0x23e>

		case CAN_INV_VOLTAGE_ID:
			memcpy(can_rxd[CAN_INV_VOLTAGE], can_rxb, 8);
 80022a0:	4b30      	ldr	r3, [pc, #192]	; (8002364 <HAL_CAN_RxFifo0MsgPendingCallback+0x268>)
 80022a2:	4a28      	ldr	r2, [pc, #160]	; (8002344 <HAL_CAN_RxFifo0MsgPendingCallback+0x248>)
 80022a4:	3338      	adds	r3, #56	; 0x38
 80022a6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80022aa:	e883 0003 	stmia.w	r3, {r0, r1}
			can_valid[CAN_INV_VOLTAGE] = true;
 80022ae:	4b2e      	ldr	r3, [pc, #184]	; (8002368 <HAL_CAN_RxFifo0MsgPendingCallback+0x26c>)
 80022b0:	2201      	movs	r2, #1
 80022b2:	61da      	str	r2, [r3, #28]
			break;
 80022b4:	e041      	b.n	800233a <HAL_CAN_RxFifo0MsgPendingCallback+0x23e>

		case CAN_INV_FLUX_ID:
			memcpy(can_rxd[CAN_INV_FLUX], can_rxb, 8);
 80022b6:	4b2b      	ldr	r3, [pc, #172]	; (8002364 <HAL_CAN_RxFifo0MsgPendingCallback+0x268>)
 80022b8:	4a22      	ldr	r2, [pc, #136]	; (8002344 <HAL_CAN_RxFifo0MsgPendingCallback+0x248>)
 80022ba:	3340      	adds	r3, #64	; 0x40
 80022bc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80022c0:	e883 0003 	stmia.w	r3, {r0, r1}
			can_valid[CAN_INV_FLUX] = true;
 80022c4:	4b28      	ldr	r3, [pc, #160]	; (8002368 <HAL_CAN_RxFifo0MsgPendingCallback+0x26c>)
 80022c6:	2201      	movs	r2, #1
 80022c8:	621a      	str	r2, [r3, #32]
			break;
 80022ca:	e036      	b.n	800233a <HAL_CAN_RxFifo0MsgPendingCallback+0x23e>

		case CAN_INV_REF_ID:
			memcpy(can_rxd[CAN_INV_REF], can_rxb, 8);
 80022cc:	4b25      	ldr	r3, [pc, #148]	; (8002364 <HAL_CAN_RxFifo0MsgPendingCallback+0x268>)
 80022ce:	4a1d      	ldr	r2, [pc, #116]	; (8002344 <HAL_CAN_RxFifo0MsgPendingCallback+0x248>)
 80022d0:	3348      	adds	r3, #72	; 0x48
 80022d2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80022d6:	e883 0003 	stmia.w	r3, {r0, r1}
			can_valid[CAN_INV_REF] = true;
 80022da:	4b23      	ldr	r3, [pc, #140]	; (8002368 <HAL_CAN_RxFifo0MsgPendingCallback+0x26c>)
 80022dc:	2201      	movs	r2, #1
 80022de:	625a      	str	r2, [r3, #36]	; 0x24
			break;
 80022e0:	e02b      	b.n	800233a <HAL_CAN_RxFifo0MsgPendingCallback+0x23e>

		case CAN_INV_STATE_ID:
			memcpy(can_rxd[CAN_INV_STATE], can_rxb, 8);
 80022e2:	4b20      	ldr	r3, [pc, #128]	; (8002364 <HAL_CAN_RxFifo0MsgPendingCallback+0x268>)
 80022e4:	4a17      	ldr	r2, [pc, #92]	; (8002344 <HAL_CAN_RxFifo0MsgPendingCallback+0x248>)
 80022e6:	3350      	adds	r3, #80	; 0x50
 80022e8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80022ec:	e883 0003 	stmia.w	r3, {r0, r1}
			can_valid[CAN_INV_STATE] = true;
 80022f0:	4b1d      	ldr	r3, [pc, #116]	; (8002368 <HAL_CAN_RxFifo0MsgPendingCallback+0x26c>)
 80022f2:	2201      	movs	r2, #1
 80022f4:	629a      	str	r2, [r3, #40]	; 0x28
			break;
 80022f6:	e020      	b.n	800233a <HAL_CAN_RxFifo0MsgPendingCallback+0x23e>

		case CAN_INV_FAULT_ID:
			memcpy(can_rxd[CAN_INV_FAULT], can_rxb, 8);
 80022f8:	4b1a      	ldr	r3, [pc, #104]	; (8002364 <HAL_CAN_RxFifo0MsgPendingCallback+0x268>)
 80022fa:	4a12      	ldr	r2, [pc, #72]	; (8002344 <HAL_CAN_RxFifo0MsgPendingCallback+0x248>)
 80022fc:	3358      	adds	r3, #88	; 0x58
 80022fe:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002302:	e883 0003 	stmia.w	r3, {r0, r1}
			can_valid[CAN_INV_FAULT] = true;
 8002306:	4b18      	ldr	r3, [pc, #96]	; (8002368 <HAL_CAN_RxFifo0MsgPendingCallback+0x26c>)
 8002308:	2201      	movs	r2, #1
 800230a:	62da      	str	r2, [r3, #44]	; 0x2c
			break;
 800230c:	e015      	b.n	800233a <HAL_CAN_RxFifo0MsgPendingCallback+0x23e>

		case CAN_INV_TORQUE_ID:
			memcpy(can_rxd[CAN_INV_TORQUE], can_rxb, 8);
 800230e:	4b15      	ldr	r3, [pc, #84]	; (8002364 <HAL_CAN_RxFifo0MsgPendingCallback+0x268>)
 8002310:	4a0c      	ldr	r2, [pc, #48]	; (8002344 <HAL_CAN_RxFifo0MsgPendingCallback+0x248>)
 8002312:	3360      	adds	r3, #96	; 0x60
 8002314:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002318:	e883 0003 	stmia.w	r3, {r0, r1}
			can_valid[CAN_INV_TORQUE] = true;
 800231c:	4b12      	ldr	r3, [pc, #72]	; (8002368 <HAL_CAN_RxFifo0MsgPendingCallback+0x26c>)
 800231e:	2201      	movs	r2, #1
 8002320:	631a      	str	r2, [r3, #48]	; 0x30
			break;
 8002322:	e00a      	b.n	800233a <HAL_CAN_RxFifo0MsgPendingCallback+0x23e>

		case CAN_INV_FLUX_WEAKING_ID:
			memcpy(can_rxd[CAN_INV_FLUX_WEAKING], can_rxb, 8);
 8002324:	4b0f      	ldr	r3, [pc, #60]	; (8002364 <HAL_CAN_RxFifo0MsgPendingCallback+0x268>)
 8002326:	4a07      	ldr	r2, [pc, #28]	; (8002344 <HAL_CAN_RxFifo0MsgPendingCallback+0x248>)
 8002328:	3368      	adds	r3, #104	; 0x68
 800232a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800232e:	e883 0003 	stmia.w	r3, {r0, r1}
			can_valid[CAN_INV_FLUX_WEAKING] = true;
 8002332:	4b0d      	ldr	r3, [pc, #52]	; (8002368 <HAL_CAN_RxFifo0MsgPendingCallback+0x26c>)
 8002334:	2201      	movs	r2, #1
 8002336:	635a      	str	r2, [r3, #52]	; 0x34
			break;
 8002338:	bf00      	nop
	}
}
 800233a:	bf00      	nop
 800233c:	370c      	adds	r7, #12
 800233e:	46bd      	mov	sp, r7
 8002340:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002342:	bf00      	nop
 8002344:	200113c4 	.word	0x200113c4
 8002348:	200113a8 	.word	0x200113a8
 800234c:	2000025c 	.word	0x2000025c
 8002350:	080122b8 	.word	0x080122b8
 8002354:	080122bc 	.word	0x080122bc
 8002358:	080123c4 	.word	0x080123c4
 800235c:	08012470 	.word	0x08012470
 8002360:	0801248c 	.word	0x0801248c
 8002364:	200113cc 	.word	0x200113cc
 8002368:	2001143c 	.word	0x2001143c

0800236c <HAL_CAN_RxFifo0FullCallback>:

void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *CAN_Handle) {
 800236c:	b580      	push	{r7, lr}
 800236e:	b082      	sub	sp, #8
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
	// deactivate CAN RX on FIFO FULL
	if (HAL_CAN_DeactivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK) {
 8002374:	2102      	movs	r1, #2
 8002376:	4815      	ldr	r0, [pc, #84]	; (80023cc <HAL_CAN_RxFifo0FullCallback+0x60>)
 8002378:	f002 ffc2 	bl	8005300 <HAL_CAN_DeactivateNotification>
 800237c:	4603      	mov	r3, r0
 800237e:	2b00      	cmp	r3, #0
 8002380:	d01c      	beq.n	80023bc <HAL_CAN_RxFifo0FullCallback+0x50>
		errlog.component = "ECU";
 8002382:	4b13      	ldr	r3, [pc, #76]	; (80023d0 <HAL_CAN_RxFifo0FullCallback+0x64>)
 8002384:	4a13      	ldr	r2, [pc, #76]	; (80023d4 <HAL_CAN_RxFifo0FullCallback+0x68>)
 8002386:	601a      	str	r2, [r3, #0]
		errlog.level = "ERRR";
 8002388:	4b11      	ldr	r3, [pc, #68]	; (80023d0 <HAL_CAN_RxFifo0FullCallback+0x64>)
 800238a:	4a13      	ldr	r2, [pc, #76]	; (80023d8 <HAL_CAN_RxFifo0FullCallback+0x6c>)
 800238c:	605a      	str	r2, [r3, #4]
		errlog.key = "CAN";
 800238e:	4b10      	ldr	r3, [pc, #64]	; (80023d0 <HAL_CAN_RxFifo0FullCallback+0x64>)
 8002390:	4a12      	ldr	r2, [pc, #72]	; (80023dc <HAL_CAN_RxFifo0FullCallback+0x70>)
 8002392:	609a      	str	r2, [r3, #8]
		errlog.value = malloc(63);
 8002394:	203f      	movs	r0, #63	; 0x3f
 8002396:	f00e fc37 	bl	8010c08 <malloc>
 800239a:	4603      	mov	r3, r0
 800239c:	461a      	mov	r2, r3
 800239e:	4b0c      	ldr	r3, [pc, #48]	; (80023d0 <HAL_CAN_RxFifo0FullCallback+0x64>)
 80023a0:	60da      	str	r2, [r3, #12]
		sprintf(errlog.value, "HAL_CAN_DeactivateNotification_CAN_IT_RX_FIFO0_MSG_PENDING_ERR");
 80023a2:	4b0b      	ldr	r3, [pc, #44]	; (80023d0 <HAL_CAN_RxFifo0FullCallback+0x64>)
 80023a4:	68db      	ldr	r3, [r3, #12]
 80023a6:	490e      	ldr	r1, [pc, #56]	; (80023e0 <HAL_CAN_RxFifo0FullCallback+0x74>)
 80023a8:	4618      	mov	r0, r3
 80023aa:	f00e fdc3 	bl	8010f34 <siprintf>

		Error_Handler();
 80023ae:	f000 ffd3 	bl	8003358 <Error_Handler>
		free(errlog.value);
 80023b2:	4b07      	ldr	r3, [pc, #28]	; (80023d0 <HAL_CAN_RxFifo0FullCallback+0x64>)
 80023b4:	68db      	ldr	r3, [r3, #12]
 80023b6:	4618      	mov	r0, r3
 80023b8:	f00e fc2e 	bl	8010c18 <free>
	}
	can_active = false;
 80023bc:	4b09      	ldr	r3, [pc, #36]	; (80023e4 <HAL_CAN_RxFifo0FullCallback+0x78>)
 80023be:	2200      	movs	r2, #0
 80023c0:	601a      	str	r2, [r3, #0]
}
 80023c2:	bf00      	nop
 80023c4:	3708      	adds	r7, #8
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bd80      	pop	{r7, pc}
 80023ca:	bf00      	nop
 80023cc:	2000018c 	.word	0x2000018c
 80023d0:	2000025c 	.word	0x2000025c
 80023d4:	080122b8 	.word	0x080122b8
 80023d8:	080122bc 	.word	0x080122bc
 80023dc:	080123c4 	.word	0x080123c4
 80023e0:	080124d0 	.word	0x080124d0
 80023e4:	20011474 	.word	0x20011474

080023e8 <CAN_Manager>:

void CAN_Manager() {
 80023e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80023ea:	b08f      	sub	sp, #60	; 0x3c
 80023ec:	af06      	add	r7, sp, #24
	for (uint32_t i = 0; i < CAN_MSG_COUNT; i++) {
 80023ee:	2300      	movs	r3, #0
 80023f0:	61fb      	str	r3, [r7, #28]
 80023f2:	e077      	b.n	80024e4 <CAN_Manager+0xfc>
		if (can_valid[i]) {
 80023f4:	4a53      	ldr	r2, [pc, #332]	; (8002544 <CAN_Manager+0x15c>)
 80023f6:	69fb      	ldr	r3, [r7, #28]
 80023f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d06e      	beq.n	80024de <CAN_Manager+0xf6>
			log_t log;
	        log.component = i < 2 ? "BMS" : "INV";
 8002400:	69fb      	ldr	r3, [r7, #28]
 8002402:	2b01      	cmp	r3, #1
 8002404:	d801      	bhi.n	800240a <CAN_Manager+0x22>
 8002406:	4b50      	ldr	r3, [pc, #320]	; (8002548 <CAN_Manager+0x160>)
 8002408:	e000      	b.n	800240c <CAN_Manager+0x24>
 800240a:	4b50      	ldr	r3, [pc, #320]	; (800254c <CAN_Manager+0x164>)
 800240c:	60fb      	str	r3, [r7, #12]
	        log.level = (i == 0 && (can_rxd[i][5] | can_rxd[i][6])) ? "ERRR" : "INFO";
 800240e:	69fb      	ldr	r3, [r7, #28]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d10f      	bne.n	8002434 <CAN_Manager+0x4c>
 8002414:	4a4e      	ldr	r2, [pc, #312]	; (8002550 <CAN_Manager+0x168>)
 8002416:	69fb      	ldr	r3, [r7, #28]
 8002418:	00db      	lsls	r3, r3, #3
 800241a:	4413      	add	r3, r2
 800241c:	795a      	ldrb	r2, [r3, #5]
 800241e:	494c      	ldr	r1, [pc, #304]	; (8002550 <CAN_Manager+0x168>)
 8002420:	69fb      	ldr	r3, [r7, #28]
 8002422:	00db      	lsls	r3, r3, #3
 8002424:	440b      	add	r3, r1
 8002426:	799b      	ldrb	r3, [r3, #6]
 8002428:	4313      	orrs	r3, r2
 800242a:	b2db      	uxtb	r3, r3
 800242c:	2b00      	cmp	r3, #0
 800242e:	d001      	beq.n	8002434 <CAN_Manager+0x4c>
 8002430:	4b48      	ldr	r3, [pc, #288]	; (8002554 <CAN_Manager+0x16c>)
 8002432:	e000      	b.n	8002436 <CAN_Manager+0x4e>
 8002434:	4b48      	ldr	r3, [pc, #288]	; (8002558 <CAN_Manager+0x170>)
 8002436:	613b      	str	r3, [r7, #16]
	        log.key = can_msg_id[i];
 8002438:	4a48      	ldr	r2, [pc, #288]	; (800255c <CAN_Manager+0x174>)
 800243a:	69fb      	ldr	r3, [r7, #28]
 800243c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002440:	617b      	str	r3, [r7, #20]
			log.value = malloc(40);
 8002442:	2028      	movs	r0, #40	; 0x28
 8002444:	f00e fbe0 	bl	8010c08 <malloc>
 8002448:	4603      	mov	r3, r0
 800244a:	61bb      	str	r3, [r7, #24]
			sprintf(log.value, "0x%02X 0x%02X 0x%02X 0x%02X 0x%02X 0x%02X 0x%02X 0x%02X", can_rxd[i][0], can_rxd[i][1], can_rxd[i][2], can_rxd[i][3], can_rxd[i][4], can_rxd[i][5], can_rxd[i][6], can_rxd[i][7]);
 800244c:	69b8      	ldr	r0, [r7, #24]
 800244e:	4a40      	ldr	r2, [pc, #256]	; (8002550 <CAN_Manager+0x168>)
 8002450:	69fb      	ldr	r3, [r7, #28]
 8002452:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 8002456:	469c      	mov	ip, r3
 8002458:	4a3d      	ldr	r2, [pc, #244]	; (8002550 <CAN_Manager+0x168>)
 800245a:	69fb      	ldr	r3, [r7, #28]
 800245c:	00db      	lsls	r3, r3, #3
 800245e:	4413      	add	r3, r2
 8002460:	785b      	ldrb	r3, [r3, #1]
 8002462:	469e      	mov	lr, r3
 8002464:	4a3a      	ldr	r2, [pc, #232]	; (8002550 <CAN_Manager+0x168>)
 8002466:	69fb      	ldr	r3, [r7, #28]
 8002468:	00db      	lsls	r3, r3, #3
 800246a:	4413      	add	r3, r2
 800246c:	789b      	ldrb	r3, [r3, #2]
 800246e:	4619      	mov	r1, r3
 8002470:	4a37      	ldr	r2, [pc, #220]	; (8002550 <CAN_Manager+0x168>)
 8002472:	69fb      	ldr	r3, [r7, #28]
 8002474:	00db      	lsls	r3, r3, #3
 8002476:	4413      	add	r3, r2
 8002478:	78db      	ldrb	r3, [r3, #3]
 800247a:	461c      	mov	r4, r3
 800247c:	4a34      	ldr	r2, [pc, #208]	; (8002550 <CAN_Manager+0x168>)
 800247e:	69fb      	ldr	r3, [r7, #28]
 8002480:	00db      	lsls	r3, r3, #3
 8002482:	4413      	add	r3, r2
 8002484:	791b      	ldrb	r3, [r3, #4]
 8002486:	461d      	mov	r5, r3
 8002488:	4a31      	ldr	r2, [pc, #196]	; (8002550 <CAN_Manager+0x168>)
 800248a:	69fb      	ldr	r3, [r7, #28]
 800248c:	00db      	lsls	r3, r3, #3
 800248e:	4413      	add	r3, r2
 8002490:	795b      	ldrb	r3, [r3, #5]
 8002492:	461e      	mov	r6, r3
 8002494:	4a2e      	ldr	r2, [pc, #184]	; (8002550 <CAN_Manager+0x168>)
 8002496:	69fb      	ldr	r3, [r7, #28]
 8002498:	00db      	lsls	r3, r3, #3
 800249a:	4413      	add	r3, r2
 800249c:	799b      	ldrb	r3, [r3, #6]
 800249e:	607b      	str	r3, [r7, #4]
 80024a0:	4a2b      	ldr	r2, [pc, #172]	; (8002550 <CAN_Manager+0x168>)
 80024a2:	69fb      	ldr	r3, [r7, #28]
 80024a4:	00db      	lsls	r3, r3, #3
 80024a6:	4413      	add	r3, r2
 80024a8:	79db      	ldrb	r3, [r3, #7]
 80024aa:	9305      	str	r3, [sp, #20]
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	9304      	str	r3, [sp, #16]
 80024b0:	9603      	str	r6, [sp, #12]
 80024b2:	9502      	str	r5, [sp, #8]
 80024b4:	9401      	str	r4, [sp, #4]
 80024b6:	9100      	str	r1, [sp, #0]
 80024b8:	4673      	mov	r3, lr
 80024ba:	4662      	mov	r2, ip
 80024bc:	4928      	ldr	r1, [pc, #160]	; (8002560 <CAN_Manager+0x178>)
 80024be:	f00e fd39 	bl	8010f34 <siprintf>
			LOGGER(&log);
 80024c2:	f107 030c 	add.w	r3, r7, #12
 80024c6:	4618      	mov	r0, r3
 80024c8:	f7ff fa24 	bl	8001914 <LOGGER>
			free(log.value);
 80024cc:	69bb      	ldr	r3, [r7, #24]
 80024ce:	4618      	mov	r0, r3
 80024d0:	f00e fba2 	bl	8010c18 <free>

			can_valid[i] = false;
 80024d4:	4a1b      	ldr	r2, [pc, #108]	; (8002544 <CAN_Manager+0x15c>)
 80024d6:	69fb      	ldr	r3, [r7, #28]
 80024d8:	2100      	movs	r1, #0
 80024da:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (uint32_t i = 0; i < CAN_MSG_COUNT; i++) {
 80024de:	69fb      	ldr	r3, [r7, #28]
 80024e0:	3301      	adds	r3, #1
 80024e2:	61fb      	str	r3, [r7, #28]
 80024e4:	69fb      	ldr	r3, [r7, #28]
 80024e6:	2b0d      	cmp	r3, #13
 80024e8:	d984      	bls.n	80023f4 <CAN_Manager+0xc>
		}
	}

	if (!can_active) {
 80024ea:	4b1e      	ldr	r3, [pc, #120]	; (8002564 <CAN_Manager+0x17c>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d123      	bne.n	800253a <CAN_Manager+0x152>
		// CAN RX notification activation
		if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK) {
 80024f2:	2102      	movs	r1, #2
 80024f4:	481c      	ldr	r0, [pc, #112]	; (8002568 <CAN_Manager+0x180>)
 80024f6:	f002 fedd 	bl	80052b4 <HAL_CAN_ActivateNotification>
 80024fa:	4603      	mov	r3, r0
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d01c      	beq.n	800253a <CAN_Manager+0x152>
			errlog.component = "ECU";
 8002500:	4b1a      	ldr	r3, [pc, #104]	; (800256c <CAN_Manager+0x184>)
 8002502:	4a1b      	ldr	r2, [pc, #108]	; (8002570 <CAN_Manager+0x188>)
 8002504:	601a      	str	r2, [r3, #0]
			errlog.level = "ERRR";
 8002506:	4b19      	ldr	r3, [pc, #100]	; (800256c <CAN_Manager+0x184>)
 8002508:	4a12      	ldr	r2, [pc, #72]	; (8002554 <CAN_Manager+0x16c>)
 800250a:	605a      	str	r2, [r3, #4]
			errlog.key = "CAN";
 800250c:	4b17      	ldr	r3, [pc, #92]	; (800256c <CAN_Manager+0x184>)
 800250e:	4a19      	ldr	r2, [pc, #100]	; (8002574 <CAN_Manager+0x18c>)
 8002510:	609a      	str	r2, [r3, #8]
			errlog.value = malloc(61);
 8002512:	203d      	movs	r0, #61	; 0x3d
 8002514:	f00e fb78 	bl	8010c08 <malloc>
 8002518:	4603      	mov	r3, r0
 800251a:	461a      	mov	r2, r3
 800251c:	4b13      	ldr	r3, [pc, #76]	; (800256c <CAN_Manager+0x184>)
 800251e:	60da      	str	r2, [r3, #12]
			sprintf(errlog.value, "HAL_CAN_ActivateNotification_CAN_IT_RX_FIFO0_MSG_PENDING_ERR");
 8002520:	4b12      	ldr	r3, [pc, #72]	; (800256c <CAN_Manager+0x184>)
 8002522:	68db      	ldr	r3, [r3, #12]
 8002524:	4914      	ldr	r1, [pc, #80]	; (8002578 <CAN_Manager+0x190>)
 8002526:	4618      	mov	r0, r3
 8002528:	f00e fd04 	bl	8010f34 <siprintf>

			Error_Handler();
 800252c:	f000 ff14 	bl	8003358 <Error_Handler>
			free(errlog.value);
 8002530:	4b0e      	ldr	r3, [pc, #56]	; (800256c <CAN_Manager+0x184>)
 8002532:	68db      	ldr	r3, [r3, #12]
 8002534:	4618      	mov	r0, r3
 8002536:	f00e fb6f 	bl	8010c18 <free>
		}
	}
}
 800253a:	bf00      	nop
 800253c:	3724      	adds	r7, #36	; 0x24
 800253e:	46bd      	mov	sp, r7
 8002540:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002542:	bf00      	nop
 8002544:	2001143c 	.word	0x2001143c
 8002548:	080121a8 	.word	0x080121a8
 800254c:	08012510 	.word	0x08012510
 8002550:	200113cc 	.word	0x200113cc
 8002554:	080122bc 	.word	0x080122bc
 8002558:	080122dc 	.word	0x080122dc
 800255c:	20000080 	.word	0x20000080
 8002560:	08012514 	.word	0x08012514
 8002564:	20011474 	.word	0x20011474
 8002568:	2000018c 	.word	0x2000018c
 800256c:	2000025c 	.word	0x2000025c
 8002570:	080122b8 	.word	0x080122b8
 8002574:	080123c4 	.word	0x080123c4
 8002578:	080123f8 	.word	0x080123f8

0800257c <HAL_CAN_ErrorCallback>:

void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan) {
 800257c:	b580      	push	{r7, lr}
 800257e:	b082      	sub	sp, #8
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
	errlog.component = "ECU";
 8002584:	4b10      	ldr	r3, [pc, #64]	; (80025c8 <HAL_CAN_ErrorCallback+0x4c>)
 8002586:	4a11      	ldr	r2, [pc, #68]	; (80025cc <HAL_CAN_ErrorCallback+0x50>)
 8002588:	601a      	str	r2, [r3, #0]
	errlog.level = "ERRR";
 800258a:	4b0f      	ldr	r3, [pc, #60]	; (80025c8 <HAL_CAN_ErrorCallback+0x4c>)
 800258c:	4a10      	ldr	r2, [pc, #64]	; (80025d0 <HAL_CAN_ErrorCallback+0x54>)
 800258e:	605a      	str	r2, [r3, #4]
	errlog.key = "CAN";
 8002590:	4b0d      	ldr	r3, [pc, #52]	; (80025c8 <HAL_CAN_ErrorCallback+0x4c>)
 8002592:	4a10      	ldr	r2, [pc, #64]	; (80025d4 <HAL_CAN_ErrorCallback+0x58>)
 8002594:	609a      	str	r2, [r3, #8]
	errlog.value = malloc(26);
 8002596:	201a      	movs	r0, #26
 8002598:	f00e fb36 	bl	8010c08 <malloc>
 800259c:	4603      	mov	r3, r0
 800259e:	461a      	mov	r2, r3
 80025a0:	4b09      	ldr	r3, [pc, #36]	; (80025c8 <HAL_CAN_ErrorCallback+0x4c>)
 80025a2:	60da      	str	r2, [r3, #12]
	sprintf(errlog.value, "HAL_CAN_ErrorCallback_ERR");
 80025a4:	4b08      	ldr	r3, [pc, #32]	; (80025c8 <HAL_CAN_ErrorCallback+0x4c>)
 80025a6:	68db      	ldr	r3, [r3, #12]
 80025a8:	490b      	ldr	r1, [pc, #44]	; (80025d8 <HAL_CAN_ErrorCallback+0x5c>)
 80025aa:	4618      	mov	r0, r3
 80025ac:	f00e fcc2 	bl	8010f34 <siprintf>

	Error_Handler();
 80025b0:	f000 fed2 	bl	8003358 <Error_Handler>
	free(errlog.value);
 80025b4:	4b04      	ldr	r3, [pc, #16]	; (80025c8 <HAL_CAN_ErrorCallback+0x4c>)
 80025b6:	68db      	ldr	r3, [r3, #12]
 80025b8:	4618      	mov	r0, r3
 80025ba:	f00e fb2d 	bl	8010c18 <free>
}
 80025be:	bf00      	nop
 80025c0:	3708      	adds	r7, #8
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd80      	pop	{r7, pc}
 80025c6:	bf00      	nop
 80025c8:	2000025c 	.word	0x2000025c
 80025cc:	080122b8 	.word	0x080122b8
 80025d0:	080122bc 	.word	0x080122bc
 80025d4:	080123c4 	.word	0x080123c4
 80025d8:	0801254c 	.word	0x0801254c

080025dc <HAL_UART_RxCpltCallback>:
/* ========== CAN RECEIVER END ========== */


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80025dc:	b580      	push	{r7, lr}
 80025de:	b082      	sub	sp, #8
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
	// for GPS
	if(huart->Instance == USART6) {
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4a34      	ldr	r2, [pc, #208]	; (80026bc <HAL_UART_RxCpltCallback+0xe0>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d129      	bne.n	8002642 <HAL_UART_RxCpltCallback+0x66>
		// process only if data is not ready
		if(gps_valid) return;
 80025ee:	4b34      	ldr	r3, [pc, #208]	; (80026c0 <HAL_UART_RxCpltCallback+0xe4>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d15b      	bne.n	80026ae <HAL_UART_RxCpltCallback+0xd2>
		else {
			// received character position
			static uint32_t len = 0;

			// if received data is line ending
			if(gps_rxd == '\n') {
 80025f6:	4b33      	ldr	r3, [pc, #204]	; (80026c4 <HAL_UART_RxCpltCallback+0xe8>)
 80025f8:	781b      	ldrb	r3, [r3, #0]
 80025fa:	2b0a      	cmp	r3, #10
 80025fc:	d112      	bne.n	8002624 <HAL_UART_RxCpltCallback+0x48>
				gps_rxs[len] = '\0';
 80025fe:	4b32      	ldr	r3, [pc, #200]	; (80026c8 <HAL_UART_RxCpltCallback+0xec>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4a32      	ldr	r2, [pc, #200]	; (80026cc <HAL_UART_RxCpltCallback+0xf0>)
 8002604:	2100      	movs	r1, #0
 8002606:	54d1      	strb	r1, [r2, r3]
				len = 0;
 8002608:	4b2f      	ldr	r3, [pc, #188]	; (80026c8 <HAL_UART_RxCpltCallback+0xec>)
 800260a:	2200      	movs	r2, #0
 800260c:	601a      	str	r2, [r3, #0]

				// process only if received line is GPRMC
				if(strstr(gps_rxs, "$GPRMC")) {
 800260e:	4930      	ldr	r1, [pc, #192]	; (80026d0 <HAL_UART_RxCpltCallback+0xf4>)
 8002610:	482e      	ldr	r0, [pc, #184]	; (80026cc <HAL_UART_RxCpltCallback+0xf0>)
 8002612:	f00e fccf 	bl	8010fb4 <strstr>
 8002616:	4603      	mov	r3, r0
 8002618:	2b00      	cmp	r3, #0
 800261a:	d00c      	beq.n	8002636 <HAL_UART_RxCpltCallback+0x5a>
					// set GPS data ready
					gps_valid = true;
 800261c:	4b28      	ldr	r3, [pc, #160]	; (80026c0 <HAL_UART_RxCpltCallback+0xe4>)
 800261e:	2201      	movs	r2, #1
 8002620:	601a      	str	r2, [r3, #0]
					return;
 8002622:	e047      	b.n	80026b4 <HAL_UART_RxCpltCallback+0xd8>
				}
			}

			// append received byte to receive buffer
			else gps_rxs[len++] = gps_rxd;
 8002624:	4b28      	ldr	r3, [pc, #160]	; (80026c8 <HAL_UART_RxCpltCallback+0xec>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	1c5a      	adds	r2, r3, #1
 800262a:	4927      	ldr	r1, [pc, #156]	; (80026c8 <HAL_UART_RxCpltCallback+0xec>)
 800262c:	600a      	str	r2, [r1, #0]
 800262e:	4a25      	ldr	r2, [pc, #148]	; (80026c4 <HAL_UART_RxCpltCallback+0xe8>)
 8002630:	7811      	ldrb	r1, [r2, #0]
 8002632:	4a26      	ldr	r2, [pc, #152]	; (80026cc <HAL_UART_RxCpltCallback+0xf0>)
 8002634:	54d1      	strb	r1, [r2, r3]

			// re-enable UART interrupt
			HAL_UART_Receive_IT(&huart6, &gps_rxd, 1);
 8002636:	2201      	movs	r2, #1
 8002638:	4922      	ldr	r1, [pc, #136]	; (80026c4 <HAL_UART_RxCpltCallback+0xe8>)
 800263a:	4826      	ldr	r0, [pc, #152]	; (80026d4 <HAL_UART_RxCpltCallback+0xf8>)
 800263c:	f009 fcb1 	bl	800bfa2 <HAL_UART_Receive_IT>
 8002640:	e038      	b.n	80026b4 <HAL_UART_RxCpltCallback+0xd8>
		}
	}

	// for WiFi
	else if(huart->Instance == USART3) {
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4a24      	ldr	r2, [pc, #144]	; (80026d8 <HAL_UART_RxCpltCallback+0xfc>)
 8002648:	4293      	cmp	r3, r2
 800264a:	d133      	bne.n	80026b4 <HAL_UART_RxCpltCallback+0xd8>
		// process only if data is ready to processed
		if(wifi_valid) return;
 800264c:	4b23      	ldr	r3, [pc, #140]	; (80026dc <HAL_UART_RxCpltCallback+0x100>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	2b00      	cmp	r3, #0
 8002652:	d12e      	bne.n	80026b2 <HAL_UART_RxCpltCallback+0xd6>
		else {
			static uint32_t len = 0;

			if(wifi_rxd == '\n') {
 8002654:	4b22      	ldr	r3, [pc, #136]	; (80026e0 <HAL_UART_RxCpltCallback+0x104>)
 8002656:	781b      	ldrb	r3, [r3, #0]
 8002658:	2b0a      	cmp	r3, #10
 800265a:	d112      	bne.n	8002682 <HAL_UART_RxCpltCallback+0xa6>
				wifi_rxs[len] = '\0';
 800265c:	4b21      	ldr	r3, [pc, #132]	; (80026e4 <HAL_UART_RxCpltCallback+0x108>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4a21      	ldr	r2, [pc, #132]	; (80026e8 <HAL_UART_RxCpltCallback+0x10c>)
 8002662:	2100      	movs	r1, #0
 8002664:	54d1      	strb	r1, [r2, r3]
				len = 0;
 8002666:	4b1f      	ldr	r3, [pc, #124]	; (80026e4 <HAL_UART_RxCpltCallback+0x108>)
 8002668:	2200      	movs	r2, #0
 800266a:	601a      	str	r2, [r3, #0]

				// set flag only if received line contains $ESP
				if(strstr(wifi_rxs, "$ESP")) {
 800266c:	491f      	ldr	r1, [pc, #124]	; (80026ec <HAL_UART_RxCpltCallback+0x110>)
 800266e:	481e      	ldr	r0, [pc, #120]	; (80026e8 <HAL_UART_RxCpltCallback+0x10c>)
 8002670:	f00e fca0 	bl	8010fb4 <strstr>
 8002674:	4603      	mov	r3, r0
 8002676:	2b00      	cmp	r3, #0
 8002678:	d013      	beq.n	80026a2 <HAL_UART_RxCpltCallback+0xc6>
					wifi_valid = true;
 800267a:	4b18      	ldr	r3, [pc, #96]	; (80026dc <HAL_UART_RxCpltCallback+0x100>)
 800267c:	2201      	movs	r2, #1
 800267e:	601a      	str	r2, [r3, #0]
					return;
 8002680:	e018      	b.n	80026b4 <HAL_UART_RxCpltCallback+0xd8>
				}
			}

			else {
				// cut received buffer if len > 50
				if (len == 50) len = 0;
 8002682:	4b18      	ldr	r3, [pc, #96]	; (80026e4 <HAL_UART_RxCpltCallback+0x108>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	2b32      	cmp	r3, #50	; 0x32
 8002688:	d102      	bne.n	8002690 <HAL_UART_RxCpltCallback+0xb4>
 800268a:	4b16      	ldr	r3, [pc, #88]	; (80026e4 <HAL_UART_RxCpltCallback+0x108>)
 800268c:	2200      	movs	r2, #0
 800268e:	601a      	str	r2, [r3, #0]
				wifi_rxs[len++] = wifi_rxd;
 8002690:	4b14      	ldr	r3, [pc, #80]	; (80026e4 <HAL_UART_RxCpltCallback+0x108>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	1c5a      	adds	r2, r3, #1
 8002696:	4913      	ldr	r1, [pc, #76]	; (80026e4 <HAL_UART_RxCpltCallback+0x108>)
 8002698:	600a      	str	r2, [r1, #0]
 800269a:	4a11      	ldr	r2, [pc, #68]	; (80026e0 <HAL_UART_RxCpltCallback+0x104>)
 800269c:	7811      	ldrb	r1, [r2, #0]
 800269e:	4a12      	ldr	r2, [pc, #72]	; (80026e8 <HAL_UART_RxCpltCallback+0x10c>)
 80026a0:	54d1      	strb	r1, [r2, r3]
			}

			// re-enable UART interrupt
			HAL_UART_Receive_IT(&huart3, &wifi_rxd, 1);
 80026a2:	2201      	movs	r2, #1
 80026a4:	490e      	ldr	r1, [pc, #56]	; (80026e0 <HAL_UART_RxCpltCallback+0x104>)
 80026a6:	4812      	ldr	r0, [pc, #72]	; (80026f0 <HAL_UART_RxCpltCallback+0x114>)
 80026a8:	f009 fc7b 	bl	800bfa2 <HAL_UART_Receive_IT>
 80026ac:	e002      	b.n	80026b4 <HAL_UART_RxCpltCallback+0xd8>
		if(gps_valid) return;
 80026ae:	bf00      	nop
 80026b0:	e000      	b.n	80026b4 <HAL_UART_RxCpltCallback+0xd8>
		if(wifi_valid) return;
 80026b2:	bf00      	nop
		}
	}
}
 80026b4:	3708      	adds	r7, #8
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bd80      	pop	{r7, pc}
 80026ba:	bf00      	nop
 80026bc:	40011400 	.word	0x40011400
 80026c0:	20011358 	.word	0x20011358
 80026c4:	200112dc 	.word	0x200112dc
 80026c8:	20011498 	.word	0x20011498
 80026cc:	200112e0 	.word	0x200112e0
 80026d0:	08012568 	.word	0x08012568
 80026d4:	200117c0 	.word	0x200117c0
 80026d8:	40004800 	.word	0x40004800
 80026dc:	20011394 	.word	0x20011394
 80026e0:	2001135c 	.word	0x2001135c
 80026e4:	2001149c 	.word	0x2001149c
 80026e8:	20011360 	.word	0x20011360
 80026ec:	08012570 	.word	0x08012570
 80026f0:	2001177c 	.word	0x2001177c

080026f4 <GPS_Setup>:


/* ========== GPS RECEIVER START ========== */
void GPS_Setup() {
 80026f4:	b590      	push	{r4, r7, lr}
 80026f6:	b089      	sub	sp, #36	; 0x24
 80026f8:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart6, NMEA_cmd[2], 16, 50);
	HAL_UART_Transmit(&huart6, NMEA_cmd[3], 16, 50);
	HAL_UART_Transmit(&huart6, NMEA_cmd[4], 16, 50);
	*/

	const uint8_t UBX_rate_cmd[14] = { 0xB5, 0x62, 0x06, 0x08, 0x06, 0x00, 0xC8, 0x00, 0x01, 0x00, 0x01, 0x00, 0xDE, 0x6A }; // set update rate 5Hz
 80026fa:	4b10      	ldr	r3, [pc, #64]	; (800273c <GPS_Setup+0x48>)
 80026fc:	f107 0410 	add.w	r4, r7, #16
 8002700:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002702:	c407      	stmia	r4!, {r0, r1, r2}
 8002704:	8023      	strh	r3, [r4, #0]
	const uint8_t UBX_power_cmd[16] = { 0xB5, 0x62, 0x06, 0x86, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x94, 0x5A }; // set full power
 8002706:	4b0e      	ldr	r3, [pc, #56]	; (8002740 <GPS_Setup+0x4c>)
 8002708:	463c      	mov	r4, r7
 800270a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800270c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	HAL_UART_Transmit(&huart6, UBX_rate_cmd, 14, 50);
 8002710:	f107 0110 	add.w	r1, r7, #16
 8002714:	2332      	movs	r3, #50	; 0x32
 8002716:	220e      	movs	r2, #14
 8002718:	480a      	ldr	r0, [pc, #40]	; (8002744 <GPS_Setup+0x50>)
 800271a:	f009 fbb0 	bl	800be7e <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart6, UBX_power_cmd, 16, 50);
 800271e:	4639      	mov	r1, r7
 8002720:	2332      	movs	r3, #50	; 0x32
 8002722:	2210      	movs	r2, #16
 8002724:	4807      	ldr	r0, [pc, #28]	; (8002744 <GPS_Setup+0x50>)
 8002726:	f009 fbaa 	bl	800be7e <HAL_UART_Transmit>

	// enable UART receive
	HAL_UART_Receive_IT(&huart6, &gps_rxd, 1);
 800272a:	2201      	movs	r2, #1
 800272c:	4906      	ldr	r1, [pc, #24]	; (8002748 <GPS_Setup+0x54>)
 800272e:	4805      	ldr	r0, [pc, #20]	; (8002744 <GPS_Setup+0x50>)
 8002730:	f009 fc37 	bl	800bfa2 <HAL_UART_Receive_IT>
}
 8002734:	bf00      	nop
 8002736:	3724      	adds	r7, #36	; 0x24
 8002738:	46bd      	mov	sp, r7
 800273a:	bd90      	pop	{r4, r7, pc}
 800273c:	08012578 	.word	0x08012578
 8002740:	08012588 	.word	0x08012588
 8002744:	200117c0 	.word	0x200117c0
 8002748:	200112dc 	.word	0x200112dc

0800274c <GPS_Manager>:


void GPS_Manager() {
 800274c:	b580      	push	{r7, lr}
 800274e:	b09c      	sub	sp, #112	; 0x70
 8002750:	af00      	add	r7, sp, #0
	// process only if received buffer data is ready
	if(gps_valid) {
 8002752:	4b5b      	ldr	r3, [pc, #364]	; (80028c0 <GPS_Manager+0x174>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	2b00      	cmp	r3, #0
 8002758:	f000 80ae 	beq.w	80028b8 <GPS_Manager+0x16c>
		printf("GPS: %s\n", gps_rxs);
#endif

	    // process received GPRMC string
		uint8_t *gps[11];
		uint8_t *ptr = strchr(gps_rxs, ',');
 800275c:	212c      	movs	r1, #44	; 0x2c
 800275e:	4859      	ldr	r0, [pc, #356]	; (80028c4 <GPS_Manager+0x178>)
 8002760:	f00e fc08 	bl	8010f74 <strchr>
 8002764:	66f8      	str	r0, [r7, #108]	; 0x6c

		uint32_t count = 0;
 8002766:	2300      	movs	r3, #0
 8002768:	66bb      	str	r3, [r7, #104]	; 0x68

		// store GPS data fields
		while (strchr(ptr + 1, ',')) {
 800276a:	e042      	b.n	80027f2 <GPS_Manager+0xa6>
			// calculate data field length
			uint32_t len = (uint8_t *)strchr(ptr + 1, ',') - ptr - 1;
 800276c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800276e:	3301      	adds	r3, #1
 8002770:	212c      	movs	r1, #44	; 0x2c
 8002772:	4618      	mov	r0, r3
 8002774:	f00e fbfe 	bl	8010f74 <strchr>
 8002778:	4602      	mov	r2, r0
 800277a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800277c:	1ad3      	subs	r3, r2, r3
 800277e:	3b01      	subs	r3, #1
 8002780:	663b      	str	r3, [r7, #96]	; 0x60

			// NULL if there is no data
			if (!len) {
 8002782:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002784:	2b00      	cmp	r3, #0
 8002786:	d107      	bne.n	8002798 <GPS_Manager+0x4c>
				gps[count] = NULL;
 8002788:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800278a:	009b      	lsls	r3, r3, #2
 800278c:	3370      	adds	r3, #112	; 0x70
 800278e:	443b      	add	r3, r7
 8002790:	2200      	movs	r2, #0
 8002792:	f843 2c6c 	str.w	r2, [r3, #-108]
 8002796:	e022      	b.n	80027de <GPS_Manager+0x92>
			}

			// allocate and store if data is present
			else {
				gps[count] = malloc(len + 1);
 8002798:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800279a:	3301      	adds	r3, #1
 800279c:	4618      	mov	r0, r3
 800279e:	f00e fa33 	bl	8010c08 <malloc>
 80027a2:	4603      	mov	r3, r0
 80027a4:	461a      	mov	r2, r3
 80027a6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80027a8:	009b      	lsls	r3, r3, #2
 80027aa:	3370      	adds	r3, #112	; 0x70
 80027ac:	443b      	add	r3, r7
 80027ae:	f843 2c6c 	str.w	r2, [r3, #-108]
				strncpy(gps[count], ptr + 1, len);
 80027b2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80027b4:	009b      	lsls	r3, r3, #2
 80027b6:	3370      	adds	r3, #112	; 0x70
 80027b8:	443b      	add	r3, r7
 80027ba:	f853 0c6c 	ldr.w	r0, [r3, #-108]
 80027be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027c0:	3301      	adds	r3, #1
 80027c2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80027c4:	4619      	mov	r1, r3
 80027c6:	f00e fbe2 	bl	8010f8e <strncpy>
				gps[count][len] = '\0';
 80027ca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80027cc:	009b      	lsls	r3, r3, #2
 80027ce:	3370      	adds	r3, #112	; 0x70
 80027d0:	443b      	add	r3, r7
 80027d2:	f853 2c6c 	ldr.w	r2, [r3, #-108]
 80027d6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80027d8:	4413      	add	r3, r2
 80027da:	2200      	movs	r2, #0
 80027dc:	701a      	strb	r2, [r3, #0]
			}

			// move to next data
			count++;
 80027de:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80027e0:	3301      	adds	r3, #1
 80027e2:	66bb      	str	r3, [r7, #104]	; 0x68
			ptr = strchr(ptr + 1, ',');
 80027e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027e6:	3301      	adds	r3, #1
 80027e8:	212c      	movs	r1, #44	; 0x2c
 80027ea:	4618      	mov	r0, r3
 80027ec:	f00e fbc2 	bl	8010f74 <strchr>
 80027f0:	66f8      	str	r0, [r7, #108]	; 0x6c
		while (strchr(ptr + 1, ',')) {
 80027f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027f4:	3301      	adds	r3, #1
 80027f6:	212c      	movs	r1, #44	; 0x2c
 80027f8:	4618      	mov	r0, r3
 80027fa:	f00e fbbb 	bl	8010f74 <strchr>
 80027fe:	4603      	mov	r3, r0
 8002800:	2b00      	cmp	r3, #0
 8002802:	d1b3      	bne.n	800276c <GPS_Manager+0x20>
		    isRTCFixed = true;
		}
		*/

		// on valid GPS fix
		if(gps[gps_valid][0] == 'A') {
 8002804:	4b2e      	ldr	r3, [pc, #184]	; (80028c0 <GPS_Manager+0x174>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	009b      	lsls	r3, r3, #2
 800280a:	3370      	adds	r3, #112	; 0x70
 800280c:	443b      	add	r3, r7
 800280e:	f853 3c6c 	ldr.w	r3, [r3, #-108]
 8002812:	781b      	ldrb	r3, [r3, #0]
 8002814:	2b41      	cmp	r3, #65	; 0x41
 8002816:	d121      	bne.n	800285c <GPS_Manager+0x110>
			// log if GPS got fix
			if(!isGPSFixed) {
 8002818:	4b2b      	ldr	r3, [pc, #172]	; (80028c8 <GPS_Manager+0x17c>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d10f      	bne.n	8002840 <GPS_Manager+0xf4>
				log_t log;
		        log.component = "ECU";
 8002820:	4b2a      	ldr	r3, [pc, #168]	; (80028cc <GPS_Manager+0x180>)
 8002822:	643b      	str	r3, [r7, #64]	; 0x40
		        log.level = "INFO";
 8002824:	4b2a      	ldr	r3, [pc, #168]	; (80028d0 <GPS_Manager+0x184>)
 8002826:	647b      	str	r3, [r7, #68]	; 0x44
		        log.key = "GPS_STATE";
 8002828:	4b2a      	ldr	r3, [pc, #168]	; (80028d4 <GPS_Manager+0x188>)
 800282a:	64bb      	str	r3, [r7, #72]	; 0x48
		        log.value = "1";
 800282c:	4b2a      	ldr	r3, [pc, #168]	; (80028d8 <GPS_Manager+0x18c>)
 800282e:	64fb      	str	r3, [r7, #76]	; 0x4c
		        LOGGER(&log);
 8002830:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002834:	4618      	mov	r0, r3
 8002836:	f7ff f86d 	bl	8001914 <LOGGER>
			    isGPSFixed = true;
 800283a:	4b23      	ldr	r3, [pc, #140]	; (80028c8 <GPS_Manager+0x17c>)
 800283c:	2201      	movs	r2, #1
 800283e:	601a      	str	r2, [r3, #0]
			}

		    // log GPS fix info
		    log_t log;
	        log.component = "ECU";
 8002840:	4b22      	ldr	r3, [pc, #136]	; (80028cc <GPS_Manager+0x180>)
 8002842:	653b      	str	r3, [r7, #80]	; 0x50
	        log.level = "INFO";
 8002844:	4b22      	ldr	r3, [pc, #136]	; (80028d0 <GPS_Manager+0x184>)
 8002846:	657b      	str	r3, [r7, #84]	; 0x54
	        log.key = "GPS_FIX";
 8002848:	4b24      	ldr	r3, [pc, #144]	; (80028dc <GPS_Manager+0x190>)
 800284a:	65bb      	str	r3, [r7, #88]	; 0x58
	        log.value = gps_rxs;
 800284c:	4b1d      	ldr	r3, [pc, #116]	; (80028c4 <GPS_Manager+0x178>)
 800284e:	65fb      	str	r3, [r7, #92]	; 0x5c
	        LOGGER(&log);
 8002850:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002854:	4618      	mov	r0, r3
 8002856:	f7ff f85d 	bl	8001914 <LOGGER>
 800285a:	e013      	b.n	8002884 <GPS_Manager+0x138>
		}
		// on invalid GPS fix
		else {
			// log if GPS lost fix
			if(isGPSFixed) {
 800285c:	4b1a      	ldr	r3, [pc, #104]	; (80028c8 <GPS_Manager+0x17c>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	2b00      	cmp	r3, #0
 8002862:	d00f      	beq.n	8002884 <GPS_Manager+0x138>
				log_t log;
		        log.component = "ECU";
 8002864:	4b19      	ldr	r3, [pc, #100]	; (80028cc <GPS_Manager+0x180>)
 8002866:	633b      	str	r3, [r7, #48]	; 0x30
		        log.level = "INFO";
 8002868:	4b19      	ldr	r3, [pc, #100]	; (80028d0 <GPS_Manager+0x184>)
 800286a:	637b      	str	r3, [r7, #52]	; 0x34
		        log.key = "GPS_STATE";
 800286c:	4b19      	ldr	r3, [pc, #100]	; (80028d4 <GPS_Manager+0x188>)
 800286e:	63bb      	str	r3, [r7, #56]	; 0x38
		        log.value = "0";
 8002870:	4b1b      	ldr	r3, [pc, #108]	; (80028e0 <GPS_Manager+0x194>)
 8002872:	63fb      	str	r3, [r7, #60]	; 0x3c
		        LOGGER(&log);
 8002874:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002878:	4618      	mov	r0, r3
 800287a:	f7ff f84b 	bl	8001914 <LOGGER>
			    isGPSFixed = false;
 800287e:	4b12      	ldr	r3, [pc, #72]	; (80028c8 <GPS_Manager+0x17c>)
 8002880:	2200      	movs	r2, #0
 8002882:	601a      	str	r2, [r3, #0]
			}
		}

		for(int i = 0; i < 11; i++) free(gps[i]);
 8002884:	2300      	movs	r3, #0
 8002886:	667b      	str	r3, [r7, #100]	; 0x64
 8002888:	e00b      	b.n	80028a2 <GPS_Manager+0x156>
 800288a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800288c:	009b      	lsls	r3, r3, #2
 800288e:	3370      	adds	r3, #112	; 0x70
 8002890:	443b      	add	r3, r7
 8002892:	f853 3c6c 	ldr.w	r3, [r3, #-108]
 8002896:	4618      	mov	r0, r3
 8002898:	f00e f9be 	bl	8010c18 <free>
 800289c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800289e:	3301      	adds	r3, #1
 80028a0:	667b      	str	r3, [r7, #100]	; 0x64
 80028a2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80028a4:	2b0a      	cmp	r3, #10
 80028a6:	ddf0      	ble.n	800288a <GPS_Manager+0x13e>

		// mark data used
		gps_valid = false;
 80028a8:	4b05      	ldr	r3, [pc, #20]	; (80028c0 <GPS_Manager+0x174>)
 80028aa:	2200      	movs	r2, #0
 80028ac:	601a      	str	r2, [r3, #0]

		// re-enable interrupt
		HAL_UART_Receive_IT(&huart6, &gps_rxd, 1);
 80028ae:	2201      	movs	r2, #1
 80028b0:	490c      	ldr	r1, [pc, #48]	; (80028e4 <GPS_Manager+0x198>)
 80028b2:	480d      	ldr	r0, [pc, #52]	; (80028e8 <GPS_Manager+0x19c>)
 80028b4:	f009 fb75 	bl	800bfa2 <HAL_UART_Receive_IT>
	}
}
 80028b8:	bf00      	nop
 80028ba:	3770      	adds	r7, #112	; 0x70
 80028bc:	46bd      	mov	sp, r7
 80028be:	bd80      	pop	{r7, pc}
 80028c0:	20011358 	.word	0x20011358
 80028c4:	200112e0 	.word	0x200112e0
 80028c8:	200012d0 	.word	0x200012d0
 80028cc:	080122b8 	.word	0x080122b8
 80028d0:	080122dc 	.word	0x080122dc
 80028d4:	08012598 	.word	0x08012598
 80028d8:	080125a4 	.word	0x080125a4
 80028dc:	080125a8 	.word	0x080125a8
 80028e0:	080125b0 	.word	0x080125b0
 80028e4:	200112dc 	.word	0x200112dc
 80028e8:	200117c0 	.word	0x200117c0

080028ec <WiFi_Manager>:
/* ========== GPS RECEIVER END ========== */


/* ========== WiFi START ========== */
void WiFi_Manager() {
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b09c      	sub	sp, #112	; 0x70
 80028f0:	af00      	add	r7, sp, #0
	static uint32_t wifiSocketConnectedTime = false;

	if (wifi_valid) {
 80028f2:	4ba2      	ldr	r3, [pc, #648]	; (8002b7c <WiFi_Manager+0x290>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	f000 80fb 	beq.w	8002af2 <WiFi_Manager+0x206>
#if DEBUG_MODE
				printf("WiFi: %s\n", wifi_rxs);
 80028fc:	49a0      	ldr	r1, [pc, #640]	; (8002b80 <WiFi_Manager+0x294>)
 80028fe:	48a1      	ldr	r0, [pc, #644]	; (8002b84 <WiFi_Manager+0x298>)
 8002900:	f00e fa7a 	bl	8010df8 <iprintf>
#endif

		// on ESP socket connection
		if (strstr(wifi_rxs, "SOCKET_CONNECTED")) {
 8002904:	49a0      	ldr	r1, [pc, #640]	; (8002b88 <WiFi_Manager+0x29c>)
 8002906:	489e      	ldr	r0, [pc, #632]	; (8002b80 <WiFi_Manager+0x294>)
 8002908:	f00e fb54 	bl	8010fb4 <strstr>
 800290c:	4603      	mov	r3, r0
 800290e:	2b00      	cmp	r3, #0
 8002910:	d012      	beq.n	8002938 <WiFi_Manager+0x4c>
			log_t log;
			log.component = "ECU";
 8002912:	4b9e      	ldr	r3, [pc, #632]	; (8002b8c <WiFi_Manager+0x2a0>)
 8002914:	64fb      	str	r3, [r7, #76]	; 0x4c
			log.level = "INFO";
 8002916:	4b9e      	ldr	r3, [pc, #632]	; (8002b90 <WiFi_Manager+0x2a4>)
 8002918:	653b      	str	r3, [r7, #80]	; 0x50
			log.key = "WIFI";
 800291a:	4b9e      	ldr	r3, [pc, #632]	; (8002b94 <WiFi_Manager+0x2a8>)
 800291c:	657b      	str	r3, [r7, #84]	; 0x54
			log.value = wifi_rxs;
 800291e:	4b98      	ldr	r3, [pc, #608]	; (8002b80 <WiFi_Manager+0x294>)
 8002920:	65bb      	str	r3, [r7, #88]	; 0x58
			LOGGER(&log);
 8002922:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002926:	4618      	mov	r0, r3
 8002928:	f7fe fff4 	bl	8001914 <LOGGER>

			wifiSocketConnectedTime = HAL_GetTick();
 800292c:	f001 fce4 	bl	80042f8 <HAL_GetTick>
 8002930:	4603      	mov	r3, r0
 8002932:	4a99      	ldr	r2, [pc, #612]	; (8002b98 <WiFi_Manager+0x2ac>)
 8002934:	6013      	str	r3, [r2, #0]
 8002936:	e0d4      	b.n	8002ae2 <WiFi_Manager+0x1f6>
		}

		// on ESP socket disconnection
		else if (strstr(wifi_rxs, "SOCKET_DISCONNECTED")) {
 8002938:	4998      	ldr	r1, [pc, #608]	; (8002b9c <WiFi_Manager+0x2b0>)
 800293a:	4891      	ldr	r0, [pc, #580]	; (8002b80 <WiFi_Manager+0x294>)
 800293c:	f00e fb3a 	bl	8010fb4 <strstr>
 8002940:	4603      	mov	r3, r0
 8002942:	2b00      	cmp	r3, #0
 8002944:	d014      	beq.n	8002970 <WiFi_Manager+0x84>
			if (wifiSocketConnectedTime) {
 8002946:	4b94      	ldr	r3, [pc, #592]	; (8002b98 <WiFi_Manager+0x2ac>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	2b00      	cmp	r3, #0
 800294c:	d00c      	beq.n	8002968 <WiFi_Manager+0x7c>
				log_t log;
				log.component = "ECU";
 800294e:	4b8f      	ldr	r3, [pc, #572]	; (8002b8c <WiFi_Manager+0x2a0>)
 8002950:	63fb      	str	r3, [r7, #60]	; 0x3c
				log.level = "INFO";
 8002952:	4b8f      	ldr	r3, [pc, #572]	; (8002b90 <WiFi_Manager+0x2a4>)
 8002954:	643b      	str	r3, [r7, #64]	; 0x40
				log.key = "WIFI";
 8002956:	4b8f      	ldr	r3, [pc, #572]	; (8002b94 <WiFi_Manager+0x2a8>)
 8002958:	647b      	str	r3, [r7, #68]	; 0x44
				log.value = wifi_rxs;
 800295a:	4b89      	ldr	r3, [pc, #548]	; (8002b80 <WiFi_Manager+0x294>)
 800295c:	64bb      	str	r3, [r7, #72]	; 0x48
				LOGGER(&log);
 800295e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002962:	4618      	mov	r0, r3
 8002964:	f7fe ffd6 	bl	8001914 <LOGGER>
			}

			wifiSocketConnectedTime = false;
 8002968:	4b8b      	ldr	r3, [pc, #556]	; (8002b98 <WiFi_Manager+0x2ac>)
 800296a:	2200      	movs	r2, #0
 800296c:	601a      	str	r2, [r3, #0]
 800296e:	e0b8      	b.n	8002ae2 <WiFi_Manager+0x1f6>
		}

		// on other ESP messages
		else {
			log_t log;
			log.component = "ECU";
 8002970:	4b86      	ldr	r3, [pc, #536]	; (8002b8c <WiFi_Manager+0x2a0>)
 8002972:	62fb      	str	r3, [r7, #44]	; 0x2c
			log.level = "INFO";
 8002974:	4b86      	ldr	r3, [pc, #536]	; (8002b90 <WiFi_Manager+0x2a4>)
 8002976:	633b      	str	r3, [r7, #48]	; 0x30
			log.key = "WIFI";
 8002978:	4b86      	ldr	r3, [pc, #536]	; (8002b94 <WiFi_Manager+0x2a8>)
 800297a:	637b      	str	r3, [r7, #52]	; 0x34
			log.value = wifi_rxs;
 800297c:	4b80      	ldr	r3, [pc, #512]	; (8002b80 <WiFi_Manager+0x294>)
 800297e:	63bb      	str	r3, [r7, #56]	; 0x38
			LOGGER(&log);
 8002980:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002984:	4618      	mov	r0, r3
 8002986:	f7fe ffc5 	bl	8001914 <LOGGER>

			// process if message is RTC_FIX
			if(strstr(wifi_rxs, "RTC_FIX")) {
 800298a:	4985      	ldr	r1, [pc, #532]	; (8002ba0 <WiFi_Manager+0x2b4>)
 800298c:	487c      	ldr	r0, [pc, #496]	; (8002b80 <WiFi_Manager+0x294>)
 800298e:	f00e fb11 	bl	8010fb4 <strstr>
 8002992:	4603      	mov	r3, r0
 8002994:	2b00      	cmp	r3, #0
 8002996:	f000 8098 	beq.w	8002aca <WiFi_Manager+0x1de>
				// datetime string start index
				uint8_t *index = strstr(wifi_rxs, "RTC_FIX") + 10;
 800299a:	4981      	ldr	r1, [pc, #516]	; (8002ba0 <WiFi_Manager+0x2b4>)
 800299c:	4878      	ldr	r0, [pc, #480]	; (8002b80 <WiFi_Manager+0x294>)
 800299e:	f00e fb09 	bl	8010fb4 <strstr>
 80029a2:	4603      	mov	r3, r0
 80029a4:	330a      	adds	r3, #10
 80029a6:	66fb      	str	r3, [r7, #108]	; 0x6c
				uint8_t temp[3];

				uint32_t cnt = 0;
 80029a8:	2300      	movs	r3, #0
 80029aa:	66bb      	str	r3, [r7, #104]	; 0x68

				if(*index) {
 80029ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029ae:	781b      	ldrb	r3, [r3, #0]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	f000 8096 	beq.w	8002ae2 <WiFi_Manager+0x1f6>
					RTC_DateTypeDef sDate;
					RTC_TimeTypeDef sTime;

					// process each date and time
					while (*index) {
 80029b6:	e066      	b.n	8002a86 <WiFi_Manager+0x19a>
						strncpy(temp, index, 3);
 80029b8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80029bc:	2203      	movs	r2, #3
 80029be:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80029c0:	4618      	mov	r0, r3
 80029c2:	f00e fae4 	bl	8010f8e <strncpy>
						temp[2] = '\0';
 80029c6:	2300      	movs	r3, #0
 80029c8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a

						switch (cnt) {
 80029cc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80029ce:	2b05      	cmp	r3, #5
 80029d0:	d853      	bhi.n	8002a7a <WiFi_Manager+0x18e>
 80029d2:	a201      	add	r2, pc, #4	; (adr r2, 80029d8 <WiFi_Manager+0xec>)
 80029d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029d8:	080029f1 	.word	0x080029f1
 80029dc:	08002a09 	.word	0x08002a09
 80029e0:	08002a21 	.word	0x08002a21
 80029e4:	08002a39 	.word	0x08002a39
 80029e8:	08002a4f 	.word	0x08002a4f
 80029ec:	08002a65 	.word	0x08002a65
							case 0: sDate.Year = (uint8_t)strtol(temp, NULL, 10); break;
 80029f0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80029f4:	220a      	movs	r2, #10
 80029f6:	2100      	movs	r1, #0
 80029f8:	4618      	mov	r0, r3
 80029fa:	f00e fb73 	bl	80110e4 <strtol>
 80029fe:	4603      	mov	r3, r0
 8002a00:	b2db      	uxtb	r3, r3
 8002a02:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002a06:	e038      	b.n	8002a7a <WiFi_Manager+0x18e>
							case 1: sDate.Month = (uint8_t)strtol(temp, NULL, 16); break;
 8002a08:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002a0c:	2210      	movs	r2, #16
 8002a0e:	2100      	movs	r1, #0
 8002a10:	4618      	mov	r0, r3
 8002a12:	f00e fb67 	bl	80110e4 <strtol>
 8002a16:	4603      	mov	r3, r0
 8002a18:	b2db      	uxtb	r3, r3
 8002a1a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8002a1e:	e02c      	b.n	8002a7a <WiFi_Manager+0x18e>
							case 2: sDate.Date = (uint8_t)strtol(temp, NULL, 10); break;
 8002a20:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002a24:	220a      	movs	r2, #10
 8002a26:	2100      	movs	r1, #0
 8002a28:	4618      	mov	r0, r3
 8002a2a:	f00e fb5b 	bl	80110e4 <strtol>
 8002a2e:	4603      	mov	r3, r0
 8002a30:	b2db      	uxtb	r3, r3
 8002a32:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8002a36:	e020      	b.n	8002a7a <WiFi_Manager+0x18e>
							case 3: sTime.Hours = (uint8_t)strtol(temp, NULL, 10); break;
 8002a38:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002a3c:	220a      	movs	r2, #10
 8002a3e:	2100      	movs	r1, #0
 8002a40:	4618      	mov	r0, r3
 8002a42:	f00e fb4f 	bl	80110e4 <strtol>
 8002a46:	4603      	mov	r3, r0
 8002a48:	b2db      	uxtb	r3, r3
 8002a4a:	743b      	strb	r3, [r7, #16]
 8002a4c:	e015      	b.n	8002a7a <WiFi_Manager+0x18e>
							case 4: sTime.Minutes = (uint8_t)strtol(temp, NULL, 10); break;
 8002a4e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002a52:	220a      	movs	r2, #10
 8002a54:	2100      	movs	r1, #0
 8002a56:	4618      	mov	r0, r3
 8002a58:	f00e fb44 	bl	80110e4 <strtol>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	b2db      	uxtb	r3, r3
 8002a60:	747b      	strb	r3, [r7, #17]
 8002a62:	e00a      	b.n	8002a7a <WiFi_Manager+0x18e>
							case 5: sTime.Seconds = (uint8_t)strtol(temp, NULL, 10); break;
 8002a64:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002a68:	220a      	movs	r2, #10
 8002a6a:	2100      	movs	r1, #0
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	f00e fb39 	bl	80110e4 <strtol>
 8002a72:	4603      	mov	r3, r0
 8002a74:	b2db      	uxtb	r3, r3
 8002a76:	74bb      	strb	r3, [r7, #18]
 8002a78:	bf00      	nop
						}

						// move to next date or time
						index += 3;
 8002a7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a7c:	3303      	adds	r3, #3
 8002a7e:	66fb      	str	r3, [r7, #108]	; 0x6c
						cnt++;
 8002a80:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002a82:	3301      	adds	r3, #1
 8002a84:	66bb      	str	r3, [r7, #104]	; 0x68
					while (*index) {
 8002a86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a88:	781b      	ldrb	r3, [r3, #0]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d194      	bne.n	80029b8 <WiFi_Manager+0xcc>
					}

					// set weekday to valid value: must required for accurate year
					sDate.WeekDay = 0;
 8002a8e:	2300      	movs	r3, #0
 8002a90:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

					// set RTC
					HAL_RTC_SetTime(&hrtc, &sTime, FORMAT_BIN);
 8002a94:	f107 0310 	add.w	r3, r7, #16
 8002a98:	2200      	movs	r2, #0
 8002a9a:	4619      	mov	r1, r3
 8002a9c:	4841      	ldr	r0, [pc, #260]	; (8002ba4 <WiFi_Manager+0x2b8>)
 8002a9e:	f006 ff05 	bl	80098ac <HAL_RTC_SetTime>
					HAL_RTC_SetDate(&hrtc, &sDate, FORMAT_BIN);
 8002aa2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	4619      	mov	r1, r3
 8002aaa:	483e      	ldr	r0, [pc, #248]	; (8002ba4 <WiFi_Manager+0x2b8>)
 8002aac:	f006 fff6 	bl	8009a9c <HAL_RTC_SetDate>

					log_t log;
					log.component = "ECU";
 8002ab0:	4b36      	ldr	r3, [pc, #216]	; (8002b8c <WiFi_Manager+0x2a0>)
 8002ab2:	603b      	str	r3, [r7, #0]
					log.level = "INFO";
 8002ab4:	4b36      	ldr	r3, [pc, #216]	; (8002b90 <WiFi_Manager+0x2a4>)
 8002ab6:	607b      	str	r3, [r7, #4]
					log.key = "RTC";
 8002ab8:	4b3b      	ldr	r3, [pc, #236]	; (8002ba8 <WiFi_Manager+0x2bc>)
 8002aba:	60bb      	str	r3, [r7, #8]
					log.value = "RTC_DATETIME_FIX_WIFI";
 8002abc:	4b3b      	ldr	r3, [pc, #236]	; (8002bac <WiFi_Manager+0x2c0>)
 8002abe:	60fb      	str	r3, [r7, #12]
					LOGGER(&log);
 8002ac0:	463b      	mov	r3, r7
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	f7fe ff26 	bl	8001914 <LOGGER>
 8002ac8:	e00b      	b.n	8002ae2 <WiFi_Manager+0x1f6>
				}
			}

			// check if ESP is online on ECU boot
			else if (strstr(wifi_rxs, "STANDBY")) {
 8002aca:	4939      	ldr	r1, [pc, #228]	; (8002bb0 <WiFi_Manager+0x2c4>)
 8002acc:	482c      	ldr	r0, [pc, #176]	; (8002b80 <WiFi_Manager+0x294>)
 8002ace:	f00e fa71 	bl	8010fb4 <strstr>
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d004      	beq.n	8002ae2 <WiFi_Manager+0x1f6>
				wifiSocketConnectedTime = HAL_GetTick();
 8002ad8:	f001 fc0e 	bl	80042f8 <HAL_GetTick>
 8002adc:	4603      	mov	r3, r0
 8002ade:	4a2e      	ldr	r2, [pc, #184]	; (8002b98 <WiFi_Manager+0x2ac>)
 8002ae0:	6013      	str	r3, [r2, #0]
			}
		}

		// mark process complete and re-enable UART interrupt
		wifi_valid = false;
 8002ae2:	4b26      	ldr	r3, [pc, #152]	; (8002b7c <WiFi_Manager+0x290>)
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	601a      	str	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart3, &wifi_rxd, 1);
 8002ae8:	2201      	movs	r2, #1
 8002aea:	4932      	ldr	r1, [pc, #200]	; (8002bb4 <WiFi_Manager+0x2c8>)
 8002aec:	4832      	ldr	r0, [pc, #200]	; (8002bb8 <WiFi_Manager+0x2cc>)
 8002aee:	f009 fa58 	bl	800bfa2 <HAL_UART_Receive_IT>
	}

	// flush ring buffer on ESP online, wait 5 seconds for stable transmission, send message every 10ms
	static uint32_t lastSentTime = 0;
	uint32_t currentTime = HAL_GetTick();
 8002af2:	f001 fc01 	bl	80042f8 <HAL_GetTick>
 8002af6:	6678      	str	r0, [r7, #100]	; 0x64
	if (wifiSocketConnectedTime && currentTime > wifiSocketConnectedTime + 5000 && !ring_buffer_is_empty(&logbuffer) && currentTime > lastSentTime + 10) {
 8002af8:	4b27      	ldr	r3, [pc, #156]	; (8002b98 <WiFi_Manager+0x2ac>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d038      	beq.n	8002b72 <WiFi_Manager+0x286>
 8002b00:	4b25      	ldr	r3, [pc, #148]	; (8002b98 <WiFi_Manager+0x2ac>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8002b08:	3308      	adds	r3, #8
 8002b0a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8002b0c:	429a      	cmp	r2, r3
 8002b0e:	d930      	bls.n	8002b72 <WiFi_Manager+0x286>
 8002b10:	482a      	ldr	r0, [pc, #168]	; (8002bbc <WiFi_Manager+0x2d0>)
 8002b12:	f000 fc57 	bl	80033c4 <ring_buffer_is_empty>
 8002b16:	4603      	mov	r3, r0
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d12a      	bne.n	8002b72 <WiFi_Manager+0x286>
 8002b1c:	4b28      	ldr	r3, [pc, #160]	; (8002bc0 <WiFi_Manager+0x2d4>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	330a      	adds	r3, #10
 8002b22:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8002b24:	429a      	cmp	r2, r3
 8002b26:	d924      	bls.n	8002b72 <WiFi_Manager+0x286>
		uint32_t size = strlen(logbuffer.buffer + logbuffer.tail_index) + 1;
 8002b28:	4b24      	ldr	r3, [pc, #144]	; (8002bbc <WiFi_Manager+0x2d0>)
 8002b2a:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4a22      	ldr	r2, [pc, #136]	; (8002bbc <WiFi_Manager+0x2d0>)
 8002b32:	4413      	add	r3, r2
 8002b34:	4618      	mov	r0, r3
 8002b36:	f7fd fb4b 	bl	80001d0 <strlen>
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	3301      	adds	r3, #1
 8002b3e:	663b      	str	r3, [r7, #96]	; 0x60
		uint8_t* buf = malloc(size);
 8002b40:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8002b42:	f00e f861 	bl	8010c08 <malloc>
 8002b46:	4603      	mov	r3, r0
 8002b48:	65fb      	str	r3, [r7, #92]	; 0x5c

		ring_buffer_dequeue_arr(&logbuffer, buf, size);
 8002b4a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002b4c:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8002b4e:	481b      	ldr	r0, [pc, #108]	; (8002bbc <WiFi_Manager+0x2d0>)
 8002b50:	f000 fcec 	bl	800352c <ring_buffer_dequeue_arr>

		HAL_UART_Transmit(&huart3, buf, size, 50);
 8002b54:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002b56:	b29a      	uxth	r2, r3
 8002b58:	2332      	movs	r3, #50	; 0x32
 8002b5a:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8002b5c:	4816      	ldr	r0, [pc, #88]	; (8002bb8 <WiFi_Manager+0x2cc>)
 8002b5e:	f009 f98e 	bl	800be7e <HAL_UART_Transmit>
		free(buf);
 8002b62:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8002b64:	f00e f858 	bl	8010c18 <free>
		lastSentTime = HAL_GetTick();
 8002b68:	f001 fbc6 	bl	80042f8 <HAL_GetTick>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	4a14      	ldr	r2, [pc, #80]	; (8002bc0 <WiFi_Manager+0x2d4>)
 8002b70:	6013      	str	r3, [r2, #0]
	}
}
 8002b72:	bf00      	nop
 8002b74:	3770      	adds	r7, #112	; 0x70
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bd80      	pop	{r7, pc}
 8002b7a:	bf00      	nop
 8002b7c:	20011394 	.word	0x20011394
 8002b80:	20011360 	.word	0x20011360
 8002b84:	080125b4 	.word	0x080125b4
 8002b88:	080125c0 	.word	0x080125c0
 8002b8c:	080122b8 	.word	0x080122b8
 8002b90:	080122dc 	.word	0x080122dc
 8002b94:	080125d4 	.word	0x080125d4
 8002b98:	200114a0 	.word	0x200114a0
 8002b9c:	080125dc 	.word	0x080125dc
 8002ba0:	080125f0 	.word	0x080125f0
 8002ba4:	200114b0 	.word	0x200114b0
 8002ba8:	080125f8 	.word	0x080125f8
 8002bac:	080125fc 	.word	0x080125fc
 8002bb0:	08012614 	.word	0x08012614
 8002bb4:	2001135c 	.word	0x2001135c
 8002bb8:	2001177c 	.word	0x2001177c
 8002bbc:	200012d4 	.word	0x200012d4
 8002bc0:	200114a4 	.word	0x200114a4

08002bc4 <HAL_TIM_PeriodElapsedCallback>:
/* ========== WiFi END ========== */


// TIMER configuration
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b082      	sub	sp, #8
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
	static uint32_t TIMER2_ENABLE = false;

	// RTDS button-press simulation for DFPlayer Mini
	if (htim->Instance == TIM2) { // 200ms
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bd4:	d111      	bne.n	8002bfa <HAL_TIM_PeriodElapsedCallback+0x36>
	  if (TIMER2_ENABLE) {
 8002bd6:	4b19      	ldr	r3, [pc, #100]	; (8002c3c <HAL_TIM_PeriodElapsedCallback+0x78>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d009      	beq.n	8002bf2 <HAL_TIM_PeriodElapsedCallback+0x2e>
		 HAL_GPIO_WritePin(GPIOA, RTDS_Pin, GPIO_PIN_SET);
 8002bde:	2201      	movs	r2, #1
 8002be0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002be4:	4816      	ldr	r0, [pc, #88]	; (8002c40 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8002be6:	f003 fcbb 	bl	8006560 <HAL_GPIO_WritePin>
		 HAL_TIM_Base_Stop_IT(&htim2);
 8002bea:	4816      	ldr	r0, [pc, #88]	; (8002c44 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8002bec:	f008 fd0a 	bl	800b604 <HAL_TIM_Base_Stop_IT>
 8002bf0:	e020      	b.n	8002c34 <HAL_TIM_PeriodElapsedCallback+0x70>
	  }
	  else {
		 TIMER2_ENABLE = true;
 8002bf2:	4b12      	ldr	r3, [pc, #72]	; (8002c3c <HAL_TIM_PeriodElapsedCallback+0x78>)
 8002bf4:	2201      	movs	r2, #1
 8002bf6:	601a      	str	r2, [r3, #0]
		 return;
 8002bf8:	e01c      	b.n	8002c34 <HAL_TIM_PeriodElapsedCallback+0x70>
	  }
	}

	// LCD
	else if (htim->Instance == TIM3) { // 100ms
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4a12      	ldr	r2, [pc, #72]	; (8002c48 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8002c00:	4293      	cmp	r3, r2
 8002c02:	d103      	bne.n	8002c0c <HAL_TIM_PeriodElapsedCallback+0x48>
		lcd_valid = true;
 8002c04:	4b11      	ldr	r3, [pc, #68]	; (8002c4c <HAL_TIM_PeriodElapsedCallback+0x88>)
 8002c06:	2201      	movs	r2, #1
 8002c08:	601a      	str	r2, [r3, #0]
 8002c0a:	e013      	b.n	8002c34 <HAL_TIM_PeriodElapsedCallback+0x70>
	}

	// internal temperature sensor & GPIO check
	else if (htim->Instance == TIM4) { // 5s
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4a0f      	ldr	r2, [pc, #60]	; (8002c50 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d106      	bne.n	8002c24 <HAL_TIM_PeriodElapsedCallback+0x60>
		HAL_ADC_Start_IT(&hadc1);
 8002c16:	480f      	ldr	r0, [pc, #60]	; (8002c54 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8002c18:	f001 fbe2 	bl	80043e0 <HAL_ADC_Start_IT>
		gpio_valid = true;
 8002c1c:	4b0e      	ldr	r3, [pc, #56]	; (8002c58 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8002c1e:	2201      	movs	r2, #1
 8002c20:	601a      	str	r2, [r3, #0]
 8002c22:	e007      	b.n	8002c34 <HAL_TIM_PeriodElapsedCallback+0x70>
	}

	// accelerometer
	else if (htim->Instance == TIM12) { // 200ms
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4a0c      	ldr	r2, [pc, #48]	; (8002c5c <HAL_TIM_PeriodElapsedCallback+0x98>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d102      	bne.n	8002c34 <HAL_TIM_PeriodElapsedCallback+0x70>
		acc_valid = true;
 8002c2e:	4b0c      	ldr	r3, [pc, #48]	; (8002c60 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8002c30:	2201      	movs	r2, #1
 8002c32:	701a      	strb	r2, [r3, #0]
	}
}
 8002c34:	3708      	adds	r7, #8
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bd80      	pop	{r7, pc}
 8002c3a:	bf00      	nop
 8002c3c:	200114a8 	.word	0x200114a8
 8002c40:	40020000 	.word	0x40020000
 8002c44:	20011618 	.word	0x20011618
 8002c48:	40000400 	.word	0x40000400
 8002c4c:	200113a4 	.word	0x200113a4
 8002c50:	40000800 	.word	0x40000800
 8002c54:	20000144 	.word	0x20000144
 8002c58:	200113a0 	.word	0x200113a0
 8002c5c:	40001800 	.word	0x40001800
 8002c60:	20011482 	.word	0x20011482

08002c64 <HAL_ADC_ConvCpltCallback>:

// TEMPERATURE SENSOR interrupt callback
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 8002c64:	b5b0      	push	{r4, r5, r7, lr}
 8002c66:	b082      	sub	sp, #8
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
	core_temperature = (uint32_t)(((110.0 - 30) * (HAL_ADC_GetValue(&hadc1) - TS_CAL1) / (TS_CAL2 - TS_CAL1) + 30) * 10);
 8002c6c:	4821      	ldr	r0, [pc, #132]	; (8002cf4 <HAL_ADC_ConvCpltCallback+0x90>)
 8002c6e:	f001 fda5 	bl	80047bc <HAL_ADC_GetValue>
 8002c72:	4603      	mov	r3, r0
 8002c74:	4a20      	ldr	r2, [pc, #128]	; (8002cf8 <HAL_ADC_ConvCpltCallback+0x94>)
 8002c76:	8812      	ldrh	r2, [r2, #0]
 8002c78:	1a9b      	subs	r3, r3, r2
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	f7fd fc42 	bl	8000504 <__aeabi_ui2d>
 8002c80:	f04f 0200 	mov.w	r2, #0
 8002c84:	4b1d      	ldr	r3, [pc, #116]	; (8002cfc <HAL_ADC_ConvCpltCallback+0x98>)
 8002c86:	f7fd fcb7 	bl	80005f8 <__aeabi_dmul>
 8002c8a:	4602      	mov	r2, r0
 8002c8c:	460b      	mov	r3, r1
 8002c8e:	4614      	mov	r4, r2
 8002c90:	461d      	mov	r5, r3
 8002c92:	4b1b      	ldr	r3, [pc, #108]	; (8002d00 <HAL_ADC_ConvCpltCallback+0x9c>)
 8002c94:	881b      	ldrh	r3, [r3, #0]
 8002c96:	461a      	mov	r2, r3
 8002c98:	4b17      	ldr	r3, [pc, #92]	; (8002cf8 <HAL_ADC_ConvCpltCallback+0x94>)
 8002c9a:	881b      	ldrh	r3, [r3, #0]
 8002c9c:	1ad3      	subs	r3, r2, r3
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	f7fd fc40 	bl	8000524 <__aeabi_i2d>
 8002ca4:	4602      	mov	r2, r0
 8002ca6:	460b      	mov	r3, r1
 8002ca8:	4620      	mov	r0, r4
 8002caa:	4629      	mov	r1, r5
 8002cac:	f7fd fdce 	bl	800084c <__aeabi_ddiv>
 8002cb0:	4602      	mov	r2, r0
 8002cb2:	460b      	mov	r3, r1
 8002cb4:	4610      	mov	r0, r2
 8002cb6:	4619      	mov	r1, r3
 8002cb8:	f04f 0200 	mov.w	r2, #0
 8002cbc:	4b11      	ldr	r3, [pc, #68]	; (8002d04 <HAL_ADC_ConvCpltCallback+0xa0>)
 8002cbe:	f7fd fae5 	bl	800028c <__adddf3>
 8002cc2:	4602      	mov	r2, r0
 8002cc4:	460b      	mov	r3, r1
 8002cc6:	4610      	mov	r0, r2
 8002cc8:	4619      	mov	r1, r3
 8002cca:	f04f 0200 	mov.w	r2, #0
 8002cce:	4b0e      	ldr	r3, [pc, #56]	; (8002d08 <HAL_ADC_ConvCpltCallback+0xa4>)
 8002cd0:	f7fd fc92 	bl	80005f8 <__aeabi_dmul>
 8002cd4:	4602      	mov	r2, r0
 8002cd6:	460b      	mov	r3, r1
 8002cd8:	4610      	mov	r0, r2
 8002cda:	4619      	mov	r1, r3
 8002cdc:	f7fd fec6 	bl	8000a6c <__aeabi_d2uiz>
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	4a0a      	ldr	r2, [pc, #40]	; (8002d0c <HAL_ADC_ConvCpltCallback+0xa8>)
 8002ce4:	6013      	str	r3, [r2, #0]
	adc_valid = true;
 8002ce6:	4b0a      	ldr	r3, [pc, #40]	; (8002d10 <HAL_ADC_ConvCpltCallback+0xac>)
 8002ce8:	2201      	movs	r2, #1
 8002cea:	601a      	str	r2, [r3, #0]
}
 8002cec:	bf00      	nop
 8002cee:	3708      	adds	r7, #8
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	bdb0      	pop	{r4, r5, r7, pc}
 8002cf4:	20000144 	.word	0x20000144
 8002cf8:	1fff7a2c 	.word	0x1fff7a2c
 8002cfc:	40540000 	.word	0x40540000
 8002d00:	1fff7a2e 	.word	0x1fff7a2e
 8002d04:	403e0000 	.word	0x403e0000
 8002d08:	40240000 	.word	0x40240000
 8002d0c:	2001139c 	.word	0x2001139c
 8002d10:	20011398 	.word	0x20011398

08002d14 <LCD_Send_CMD>:


/* ========== LCD START ========== */
void LCD_Send_CMD(uint8_t cmd) {
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b086      	sub	sp, #24
 8002d18:	af02      	add	r7, sp, #8
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	71fb      	strb	r3, [r7, #7]
	uint8_t data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd & 0xF0);
 8002d1e:	79fb      	ldrb	r3, [r7, #7]
 8002d20:	f023 030f 	bic.w	r3, r3, #15
 8002d24:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd << 4) & 0xF0);
 8002d26:	79fb      	ldrb	r3, [r7, #7]
 8002d28:	011b      	lsls	r3, r3, #4
 8002d2a:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u | 0x0C;
 8002d2c:	7bfb      	ldrb	r3, [r7, #15]
 8002d2e:	f043 030c 	orr.w	r3, r3, #12
 8002d32:	b2db      	uxtb	r3, r3
 8002d34:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u | 0x08;
 8002d36:	7bfb      	ldrb	r3, [r7, #15]
 8002d38:	f043 0308 	orr.w	r3, r3, #8
 8002d3c:	b2db      	uxtb	r3, r3
 8002d3e:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l | 0x0C;
 8002d40:	7bbb      	ldrb	r3, [r7, #14]
 8002d42:	f043 030c 	orr.w	r3, r3, #12
 8002d46:	b2db      	uxtb	r3, r3
 8002d48:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l | 0x08;
 8002d4a:	7bbb      	ldrb	r3, [r7, #14]
 8002d4c:	f043 0308 	orr.w	r3, r3, #8
 8002d50:	b2db      	uxtb	r3, r3
 8002d52:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit(&hi2c2, LCD_I2C_ADDRESS, (uint8_t *)data_t, 4, 50);
 8002d54:	f107 0208 	add.w	r2, r7, #8
 8002d58:	2332      	movs	r3, #50	; 0x32
 8002d5a:	9300      	str	r3, [sp, #0]
 8002d5c:	2304      	movs	r3, #4
 8002d5e:	214e      	movs	r1, #78	; 0x4e
 8002d60:	4803      	ldr	r0, [pc, #12]	; (8002d70 <LCD_Send_CMD+0x5c>)
 8002d62:	f003 fd5b 	bl	800681c <HAL_I2C_Master_Transmit>
}
 8002d66:	bf00      	nop
 8002d68:	3710      	adds	r7, #16
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bd80      	pop	{r7, pc}
 8002d6e:	bf00      	nop
 8002d70:	20000208 	.word	0x20000208

08002d74 <LCD_Send_DATA>:

void LCD_Send_DATA(uint8_t data) {
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b086      	sub	sp, #24
 8002d78:	af02      	add	r7, sp, #8
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	71fb      	strb	r3, [r7, #7]
	uint8_t data_u, data_l;
	uint8_t data_t[4];
	data_u = (data & 0xF0);
 8002d7e:	79fb      	ldrb	r3, [r7, #7]
 8002d80:	f023 030f 	bic.w	r3, r3, #15
 8002d84:	73fb      	strb	r3, [r7, #15]
	data_l = ((data << 4) & 0xF0);
 8002d86:	79fb      	ldrb	r3, [r7, #7]
 8002d88:	011b      	lsls	r3, r3, #4
 8002d8a:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u | 0x0D;
 8002d8c:	7bfb      	ldrb	r3, [r7, #15]
 8002d8e:	f043 030d 	orr.w	r3, r3, #13
 8002d92:	b2db      	uxtb	r3, r3
 8002d94:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u | 0x09;
 8002d96:	7bfb      	ldrb	r3, [r7, #15]
 8002d98:	f043 0309 	orr.w	r3, r3, #9
 8002d9c:	b2db      	uxtb	r3, r3
 8002d9e:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l | 0x0D;
 8002da0:	7bbb      	ldrb	r3, [r7, #14]
 8002da2:	f043 030d 	orr.w	r3, r3, #13
 8002da6:	b2db      	uxtb	r3, r3
 8002da8:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l | 0x09;
 8002daa:	7bbb      	ldrb	r3, [r7, #14]
 8002dac:	f043 0309 	orr.w	r3, r3, #9
 8002db0:	b2db      	uxtb	r3, r3
 8002db2:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit(&hi2c2, LCD_I2C_ADDRESS, (uint8_t *)data_t, 4, 50);
 8002db4:	f107 0208 	add.w	r2, r7, #8
 8002db8:	2332      	movs	r3, #50	; 0x32
 8002dba:	9300      	str	r3, [sp, #0]
 8002dbc:	2304      	movs	r3, #4
 8002dbe:	214e      	movs	r1, #78	; 0x4e
 8002dc0:	4803      	ldr	r0, [pc, #12]	; (8002dd0 <LCD_Send_DATA+0x5c>)
 8002dc2:	f003 fd2b 	bl	800681c <HAL_I2C_Master_Transmit>
}
 8002dc6:	bf00      	nop
 8002dc8:	3710      	adds	r7, #16
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bd80      	pop	{r7, pc}
 8002dce:	bf00      	nop
 8002dd0:	20000208 	.word	0x20000208

08002dd4 <LCD_Write>:

void LCD_Write(uint8_t *str, uint8_t col, uint8_t row) {
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b082      	sub	sp, #8
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
 8002ddc:	460b      	mov	r3, r1
 8002dde:	70fb      	strb	r3, [r7, #3]
 8002de0:	4613      	mov	r3, r2
 8002de2:	70bb      	strb	r3, [r7, #2]
    switch (row) {
 8002de4:	78bb      	ldrb	r3, [r7, #2]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d002      	beq.n	8002df0 <LCD_Write+0x1c>
 8002dea:	2b01      	cmp	r3, #1
 8002dec:	d005      	beq.n	8002dfa <LCD_Write+0x26>
 8002dee:	e009      	b.n	8002e04 <LCD_Write+0x30>
        case 0:
            col |= 0x80;
 8002df0:	78fb      	ldrb	r3, [r7, #3]
 8002df2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002df6:	70fb      	strb	r3, [r7, #3]
            break;
 8002df8:	e004      	b.n	8002e04 <LCD_Write+0x30>
        case 1:
            col |= 0xC0;
 8002dfa:	78fb      	ldrb	r3, [r7, #3]
 8002dfc:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8002e00:	70fb      	strb	r3, [r7, #3]
            break;
 8002e02:	bf00      	nop
    }
    LCD_Send_CMD(col);
 8002e04:	78fb      	ldrb	r3, [r7, #3]
 8002e06:	4618      	mov	r0, r3
 8002e08:	f7ff ff84 	bl	8002d14 <LCD_Send_CMD>

	while (*str) LCD_Send_DATA(*str++);
 8002e0c:	e006      	b.n	8002e1c <LCD_Write+0x48>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	1c5a      	adds	r2, r3, #1
 8002e12:	607a      	str	r2, [r7, #4]
 8002e14:	781b      	ldrb	r3, [r3, #0]
 8002e16:	4618      	mov	r0, r3
 8002e18:	f7ff ffac 	bl	8002d74 <LCD_Send_DATA>
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	781b      	ldrb	r3, [r3, #0]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d1f4      	bne.n	8002e0e <LCD_Write+0x3a>
}
 8002e24:	bf00      	nop
 8002e26:	bf00      	nop
 8002e28:	3708      	adds	r7, #8
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bd80      	pop	{r7, pc}
	...

08002e30 <LCD_Setup>:

void LCD_Setup() {
 8002e30:	b580      	push	{r7, lr}
 8002e32:	af00      	add	r7, sp, #0
	// LCD initialization sequence
	HAL_Delay(10);
 8002e34:	200a      	movs	r0, #10
 8002e36:	f001 fa6b 	bl	8004310 <HAL_Delay>
	LCD_Send_CMD(0x30);
 8002e3a:	2030      	movs	r0, #48	; 0x30
 8002e3c:	f7ff ff6a 	bl	8002d14 <LCD_Send_CMD>
	HAL_Delay(5);
 8002e40:	2005      	movs	r0, #5
 8002e42:	f001 fa65 	bl	8004310 <HAL_Delay>
	LCD_Send_CMD(0x30);
 8002e46:	2030      	movs	r0, #48	; 0x30
 8002e48:	f7ff ff64 	bl	8002d14 <LCD_Send_CMD>
	HAL_Delay(1);
 8002e4c:	2001      	movs	r0, #1
 8002e4e:	f001 fa5f 	bl	8004310 <HAL_Delay>
	LCD_Send_CMD(0x30);
 8002e52:	2030      	movs	r0, #48	; 0x30
 8002e54:	f7ff ff5e 	bl	8002d14 <LCD_Send_CMD>
	LCD_Send_CMD(0x20);
 8002e58:	2020      	movs	r0, #32
 8002e5a:	f7ff ff5b 	bl	8002d14 <LCD_Send_CMD>

	HAL_Delay(1);
 8002e5e:	2001      	movs	r0, #1
 8002e60:	f001 fa56 	bl	8004310 <HAL_Delay>
	LCD_Send_CMD(0x28); // FUNCTION SET: DL=0, N=1, F=0
 8002e64:	2028      	movs	r0, #40	; 0x28
 8002e66:	f7ff ff55 	bl	8002d14 <LCD_Send_CMD>
	LCD_Send_CMD(0x08); // DISPLAY SWITCH: D=0, C=0, B=0
 8002e6a:	2008      	movs	r0, #8
 8002e6c:	f7ff ff52 	bl	8002d14 <LCD_Send_CMD>
	LCD_Send_CMD(0x01); // SCREEN CLEAR
 8002e70:	2001      	movs	r0, #1
 8002e72:	f7ff ff4f 	bl	8002d14 <LCD_Send_CMD>
	HAL_Delay(2);
 8002e76:	2002      	movs	r0, #2
 8002e78:	f001 fa4a 	bl	8004310 <HAL_Delay>
	LCD_Send_CMD(0x0C); // DISPLAY SWITCH: D=1, C=0, B=0
 8002e7c:	200c      	movs	r0, #12
 8002e7e:	f7ff ff49 	bl	8002d14 <LCD_Send_CMD>

	// display initial screen
    LCD_Write("V:", 12, 0);
 8002e82:	2200      	movs	r2, #0
 8002e84:	210c      	movs	r1, #12
 8002e86:	4806      	ldr	r0, [pc, #24]	; (8002ea0 <LCD_Setup+0x70>)
 8002e88:	f7ff ffa4 	bl	8002dd4 <LCD_Write>
    LCD_Write("T:", 12, 1);
 8002e8c:	2201      	movs	r2, #1
 8002e8e:	210c      	movs	r1, #12
 8002e90:	4804      	ldr	r0, [pc, #16]	; (8002ea4 <LCD_Setup+0x74>)
 8002e92:	f7ff ff9f 	bl	8002dd4 <LCD_Write>

    // LCD update rate: 100ms
	HAL_TIM_Base_Start_IT(&htim3);
 8002e96:	4804      	ldr	r0, [pc, #16]	; (8002ea8 <LCD_Setup+0x78>)
 8002e98:	f008 fb44 	bl	800b524 <HAL_TIM_Base_Start_IT>
}
 8002e9c:	bf00      	nop
 8002e9e:	bd80      	pop	{r7, pc}
 8002ea0:	0801261c 	.word	0x0801261c
 8002ea4:	08012620 	.word	0x08012620
 8002ea8:	20011660 	.word	0x20011660

08002eac <LCD_Manager>:

void LCD_Manager() {
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b086      	sub	sp, #24
 8002eb0:	af00      	add	r7, sp, #0
	if (lcd_valid) {
 8002eb2:	4b2c      	ldr	r3, [pc, #176]	; (8002f64 <LCD_Manager+0xb8>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d04f      	beq.n	8002f5a <LCD_Manager+0xae>
		// update LCD integer value
		uint8_t core_temp_display[3];
		uint32_t core_temp_display_value = (core_temperature + 5) / 10; // +5 for rounding
 8002eba:	4b2b      	ldr	r3, [pc, #172]	; (8002f68 <LCD_Manager+0xbc>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	3305      	adds	r3, #5
 8002ec0:	4a2a      	ldr	r2, [pc, #168]	; (8002f6c <LCD_Manager+0xc0>)
 8002ec2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ec6:	08db      	lsrs	r3, r3, #3
 8002ec8:	60fb      	str	r3, [r7, #12]
		sprintf(core_temp_display, "%d", core_temp_display_value);
 8002eca:	463b      	mov	r3, r7
 8002ecc:	68fa      	ldr	r2, [r7, #12]
 8002ece:	4928      	ldr	r1, [pc, #160]	; (8002f70 <LCD_Manager+0xc4>)
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	f00e f82f 	bl	8010f34 <siprintf>
	    LCD_Write(core_temp_display, 14, 1);
 8002ed6:	463b      	mov	r3, r7
 8002ed8:	2201      	movs	r2, #1
 8002eda:	210e      	movs	r1, #14
 8002edc:	4618      	mov	r0, r3
 8002ede:	f7ff ff79 	bl	8002dd4 <LCD_Write>

	    // update LCD block indicator
		static int32_t display_prev_block_count = 0;
		int32_t display_block_count = core_temp_display_value - 35;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	3b23      	subs	r3, #35	; 0x23
 8002ee6:	60bb      	str	r3, [r7, #8]
		int32_t display_block_variance = display_block_count - display_prev_block_count;
 8002ee8:	4b22      	ldr	r3, [pc, #136]	; (8002f74 <LCD_Manager+0xc8>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	68ba      	ldr	r2, [r7, #8]
 8002eee:	1ad3      	subs	r3, r2, r3
 8002ef0:	617b      	str	r3, [r7, #20]
		uint8_t fill;

		if (display_block_variance > 0) {
 8002ef2:	697b      	ldr	r3, [r7, #20]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	dd02      	ble.n	8002efe <LCD_Manager+0x52>
			fill = 0xFF;
 8002ef8:	23ff      	movs	r3, #255	; 0xff
 8002efa:	74fb      	strb	r3, [r7, #19]
 8002efc:	e004      	b.n	8002f08 <LCD_Manager+0x5c>
		}
		else {
			fill = ' ';
 8002efe:	2320      	movs	r3, #32
 8002f00:	74fb      	strb	r3, [r7, #19]
			display_block_variance = -display_block_variance;
 8002f02:	697b      	ldr	r3, [r7, #20]
 8002f04:	425b      	negs	r3, r3
 8002f06:	617b      	str	r3, [r7, #20]
		}

		uint8_t* display_blocks = malloc(display_block_variance + 1);
 8002f08:	697b      	ldr	r3, [r7, #20]
 8002f0a:	3301      	adds	r3, #1
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	f00d fe7b 	bl	8010c08 <malloc>
 8002f12:	4603      	mov	r3, r0
 8002f14:	607b      	str	r3, [r7, #4]
		memset(display_blocks, fill, display_block_variance);
 8002f16:	7cfb      	ldrb	r3, [r7, #19]
 8002f18:	697a      	ldr	r2, [r7, #20]
 8002f1a:	4619      	mov	r1, r3
 8002f1c:	6878      	ldr	r0, [r7, #4]
 8002f1e:	f00d fe83 	bl	8010c28 <memset>
		display_blocks[display_block_variance] = '\0';
 8002f22:	697b      	ldr	r3, [r7, #20]
 8002f24:	687a      	ldr	r2, [r7, #4]
 8002f26:	4413      	add	r3, r2
 8002f28:	2200      	movs	r2, #0
 8002f2a:	701a      	strb	r2, [r3, #0]

	    LCD_Write(display_blocks, fill == 0xFF ? display_prev_block_count : display_block_count, 1);
 8002f2c:	7cfb      	ldrb	r3, [r7, #19]
 8002f2e:	2bff      	cmp	r3, #255	; 0xff
 8002f30:	d103      	bne.n	8002f3a <LCD_Manager+0x8e>
 8002f32:	4b10      	ldr	r3, [pc, #64]	; (8002f74 <LCD_Manager+0xc8>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	b2db      	uxtb	r3, r3
 8002f38:	e001      	b.n	8002f3e <LCD_Manager+0x92>
 8002f3a:	68bb      	ldr	r3, [r7, #8]
 8002f3c:	b2db      	uxtb	r3, r3
 8002f3e:	2201      	movs	r2, #1
 8002f40:	4619      	mov	r1, r3
 8002f42:	6878      	ldr	r0, [r7, #4]
 8002f44:	f7ff ff46 	bl	8002dd4 <LCD_Write>
	    display_prev_block_count = display_block_count;
 8002f48:	4a0a      	ldr	r2, [pc, #40]	; (8002f74 <LCD_Manager+0xc8>)
 8002f4a:	68bb      	ldr	r3, [r7, #8]
 8002f4c:	6013      	str	r3, [r2, #0]

	    free(display_blocks);
 8002f4e:	6878      	ldr	r0, [r7, #4]
 8002f50:	f00d fe62 	bl	8010c18 <free>

		lcd_valid = false;
 8002f54:	4b03      	ldr	r3, [pc, #12]	; (8002f64 <LCD_Manager+0xb8>)
 8002f56:	2200      	movs	r2, #0
 8002f58:	601a      	str	r2, [r3, #0]
	}
}
 8002f5a:	bf00      	nop
 8002f5c:	3718      	adds	r7, #24
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bd80      	pop	{r7, pc}
 8002f62:	bf00      	nop
 8002f64:	200113a4 	.word	0x200113a4
 8002f68:	2001139c 	.word	0x2001139c
 8002f6c:	cccccccd 	.word	0xcccccccd
 8002f70:	080123c0 	.word	0x080123c0
 8002f74:	200114ac 	.word	0x200114ac

08002f78 <ACC_Send>:
/* ========== LCD END ========== */


/* ========== Accelerometer START ========== */
void ACC_Send(uint8_t reg, uint8_t value) {
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b086      	sub	sp, #24
 8002f7c:	af02      	add	r7, sp, #8
 8002f7e:	4603      	mov	r3, r0
 8002f80:	460a      	mov	r2, r1
 8002f82:	71fb      	strb	r3, [r7, #7]
 8002f84:	4613      	mov	r3, r2
 8002f86:	71bb      	strb	r3, [r7, #6]
	uint8_t data[2] = { reg, value };
 8002f88:	79fb      	ldrb	r3, [r7, #7]
 8002f8a:	733b      	strb	r3, [r7, #12]
 8002f8c:	79bb      	ldrb	r3, [r7, #6]
 8002f8e:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, ACC_I2C_ADDRESS, data, 2, 10);
 8002f90:	f107 020c 	add.w	r2, r7, #12
 8002f94:	230a      	movs	r3, #10
 8002f96:	9300      	str	r3, [sp, #0]
 8002f98:	2302      	movs	r3, #2
 8002f9a:	21a6      	movs	r1, #166	; 0xa6
 8002f9c:	4803      	ldr	r0, [pc, #12]	; (8002fac <ACC_Send+0x34>)
 8002f9e:	f003 fc3d 	bl	800681c <HAL_I2C_Master_Transmit>
}
 8002fa2:	bf00      	nop
 8002fa4:	3710      	adds	r7, #16
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bd80      	pop	{r7, pc}
 8002faa:	bf00      	nop
 8002fac:	200001b4 	.word	0x200001b4

08002fb0 <ACC_Read>:

void ACC_Read(uint8_t reg) {
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b086      	sub	sp, #24
 8002fb4:	af04      	add	r7, sp, #16
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Read(&hi2c1, ACC_I2C_ADDRESS, reg, 1, (uint8_t *)acc_rxd, 6, 10);
 8002fba:	79fb      	ldrb	r3, [r7, #7]
 8002fbc:	b29a      	uxth	r2, r3
 8002fbe:	230a      	movs	r3, #10
 8002fc0:	9302      	str	r3, [sp, #8]
 8002fc2:	2306      	movs	r3, #6
 8002fc4:	9301      	str	r3, [sp, #4]
 8002fc6:	4b05      	ldr	r3, [pc, #20]	; (8002fdc <ACC_Read+0x2c>)
 8002fc8:	9300      	str	r3, [sp, #0]
 8002fca:	2301      	movs	r3, #1
 8002fcc:	21a6      	movs	r1, #166	; 0xa6
 8002fce:	4804      	ldr	r0, [pc, #16]	; (8002fe0 <ACC_Read+0x30>)
 8002fd0:	f003 fd22 	bl	8006a18 <HAL_I2C_Mem_Read>
}
 8002fd4:	bf00      	nop
 8002fd6:	3708      	adds	r7, #8
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	bd80      	pop	{r7, pc}
 8002fdc:	2001147c 	.word	0x2001147c
 8002fe0:	200001b4 	.word	0x200001b4

08002fe4 <ACC_Setup>:

void ACC_Setup() {
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	af00      	add	r7, sp, #0
	ACC_Send(0x31, 0x01);  // DATA_FORMAT range +-4g
 8002fe8:	2101      	movs	r1, #1
 8002fea:	2031      	movs	r0, #49	; 0x31
 8002fec:	f7ff ffc4 	bl	8002f78 <ACC_Send>
	ACC_Send(0x2D, 0x00);  // POWER_CTL bit reset
 8002ff0:	2100      	movs	r1, #0
 8002ff2:	202d      	movs	r0, #45	; 0x2d
 8002ff4:	f7ff ffc0 	bl	8002f78 <ACC_Send>
	ACC_Send(0x2D, 0x08);  // POWER_CTL set measure mode. 100hz default rate
 8002ff8:	2108      	movs	r1, #8
 8002ffa:	202d      	movs	r0, #45	; 0x2d
 8002ffc:	f7ff ffbc 	bl	8002f78 <ACC_Send>

	// start 200ms timer
	HAL_TIM_Base_Start_IT(&htim12);
 8003000:	4802      	ldr	r0, [pc, #8]	; (800300c <ACC_Setup+0x28>)
 8003002:	f008 fa8f 	bl	800b524 <HAL_TIM_Base_Start_IT>
}
 8003006:	bf00      	nop
 8003008:	bd80      	pop	{r7, pc}
 800300a:	bf00      	nop
 800300c:	200116f0 	.word	0x200116f0

08003010 <ACC_Manager>:

void ACC_Manager() {
 8003010:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003012:	b089      	sub	sp, #36	; 0x24
 8003014:	af04      	add	r7, sp, #16
	if (acc_valid) {
 8003016:	4b1e      	ldr	r3, [pc, #120]	; (8003090 <ACC_Manager+0x80>)
 8003018:	781b      	ldrb	r3, [r3, #0]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d033      	beq.n	8003086 <ACC_Manager+0x76>
		ACC_Read(0x32);
 800301e:	2032      	movs	r0, #50	; 0x32
 8003020:	f7ff ffc6 	bl	8002fb0 <ACC_Read>

		log_t log;
		log.component = "ECU";
 8003024:	4b1b      	ldr	r3, [pc, #108]	; (8003094 <ACC_Manager+0x84>)
 8003026:	603b      	str	r3, [r7, #0]
		log.level = "INFO";
 8003028:	4b1b      	ldr	r3, [pc, #108]	; (8003098 <ACC_Manager+0x88>)
 800302a:	607b      	str	r3, [r7, #4]
		log.key = "ACC";
 800302c:	4b1b      	ldr	r3, [pc, #108]	; (800309c <ACC_Manager+0x8c>)
 800302e:	60bb      	str	r3, [r7, #8]
		log.value = malloc(30);
 8003030:	201e      	movs	r0, #30
 8003032:	f00d fde9 	bl	8010c08 <malloc>
 8003036:	4603      	mov	r3, r0
 8003038:	60fb      	str	r3, [r7, #12]
		sprintf(log.value, "0x%02X 0x%02X 0x%02X 0x%02X 0x%02X 0x%02X", acc_rxd[0], acc_rxd[1], acc_rxd[2], acc_rxd[3], acc_rxd[4], acc_rxd[5]);
 800303a:	68f8      	ldr	r0, [r7, #12]
 800303c:	4b18      	ldr	r3, [pc, #96]	; (80030a0 <ACC_Manager+0x90>)
 800303e:	781b      	ldrb	r3, [r3, #0]
 8003040:	461d      	mov	r5, r3
 8003042:	4b17      	ldr	r3, [pc, #92]	; (80030a0 <ACC_Manager+0x90>)
 8003044:	785b      	ldrb	r3, [r3, #1]
 8003046:	461e      	mov	r6, r3
 8003048:	4b15      	ldr	r3, [pc, #84]	; (80030a0 <ACC_Manager+0x90>)
 800304a:	789b      	ldrb	r3, [r3, #2]
 800304c:	461a      	mov	r2, r3
 800304e:	4b14      	ldr	r3, [pc, #80]	; (80030a0 <ACC_Manager+0x90>)
 8003050:	78db      	ldrb	r3, [r3, #3]
 8003052:	4619      	mov	r1, r3
 8003054:	4b12      	ldr	r3, [pc, #72]	; (80030a0 <ACC_Manager+0x90>)
 8003056:	791b      	ldrb	r3, [r3, #4]
 8003058:	461c      	mov	r4, r3
 800305a:	4b11      	ldr	r3, [pc, #68]	; (80030a0 <ACC_Manager+0x90>)
 800305c:	795b      	ldrb	r3, [r3, #5]
 800305e:	9303      	str	r3, [sp, #12]
 8003060:	9402      	str	r4, [sp, #8]
 8003062:	9101      	str	r1, [sp, #4]
 8003064:	9200      	str	r2, [sp, #0]
 8003066:	4633      	mov	r3, r6
 8003068:	462a      	mov	r2, r5
 800306a:	490e      	ldr	r1, [pc, #56]	; (80030a4 <ACC_Manager+0x94>)
 800306c:	f00d ff62 	bl	8010f34 <siprintf>
		LOGGER(&log);
 8003070:	463b      	mov	r3, r7
 8003072:	4618      	mov	r0, r3
 8003074:	f7fe fc4e 	bl	8001914 <LOGGER>
		free(log.value);
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	4618      	mov	r0, r3
 800307c:	f00d fdcc 	bl	8010c18 <free>
		acc_valid = false;
 8003080:	4b03      	ldr	r3, [pc, #12]	; (8003090 <ACC_Manager+0x80>)
 8003082:	2200      	movs	r2, #0
 8003084:	701a      	strb	r2, [r3, #0]

	}
}
 8003086:	bf00      	nop
 8003088:	3714      	adds	r7, #20
 800308a:	46bd      	mov	sp, r7
 800308c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800308e:	bf00      	nop
 8003090:	20011482 	.word	0x20011482
 8003094:	080122b8 	.word	0x080122b8
 8003098:	080122dc 	.word	0x080122dc
 800309c:	08012624 	.word	0x08012624
 80030a0:	2001147c 	.word	0x2001147c
 80030a4:	08012628 	.word	0x08012628

080030a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80030a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80030aa:	b089      	sub	sp, #36	; 0x24
 80030ac:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80030ae:	f001 f8bd 	bl	800422c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80030b2:	f000 f8e3 	bl	800327c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80030b6:	f7fe f8bb 	bl	8001230 <MX_GPIO_Init>
  MX_DMA_Init();
 80030ba:	f7fe f891 	bl	80011e0 <MX_DMA_Init>
  MX_TIM2_Init();
 80030be:	f000 fda3 	bl	8003c08 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 80030c2:	f000 ff45 	bl	8003f50 <MX_USART1_UART_Init>
  MX_I2C2_Init();
 80030c6:	f7fe f97f 	bl	80013c8 <MX_I2C2_Init>
  MX_SDIO_SD_Init();
 80030ca:	f000 faed 	bl	80036a8 <MX_SDIO_SD_Init>
  MX_RTC_Init();
 80030ce:	f000 fa57 	bl	8003580 <MX_RTC_Init>
  MX_FATFS_Init();
 80030d2:	f00a fc73 	bl	800d9bc <MX_FATFS_Init>
  MX_USART6_UART_Init();
 80030d6:	f000 ff8f 	bl	8003ff8 <MX_USART6_UART_Init>
  MX_USART3_UART_Init();
 80030da:	f000 ff63 	bl	8003fa4 <MX_USART3_UART_Init>
  MX_ADC1_Init();
 80030de:	f7fd ff75 	bl	8000fcc <MX_ADC1_Init>
  MX_TIM4_Init();
 80030e2:	f000 fe2d 	bl	8003d40 <MX_TIM4_Init>
  MX_I2C1_Init();
 80030e6:	f7fe f941 	bl	800136c <MX_I2C1_Init>
  MX_TIM3_Init();
 80030ea:	f000 fddb 	bl	8003ca4 <MX_TIM3_Init>
  MX_TIM12_Init();
 80030ee:	f000 fe75 	bl	8003ddc <MX_TIM12_Init>
  MX_CAN1_Init();
 80030f2:	f7fd ffe5 	bl	80010c0 <MX_CAN1_Init>
  /* USER CODE BEGIN 2 */

  // set boot time and log file name
  boot = getDateTimeBits();
 80030f6:	f7fe fa35 	bl	8001564 <getDateTimeBits>
 80030fa:	4602      	mov	r2, r0
 80030fc:	460b      	mov	r3, r1
 80030fe:	4954      	ldr	r1, [pc, #336]	; (8003250 <main+0x1a8>)
 8003100:	e9c1 2300 	strd	r2, r3, [r1]
  sprintf(logfile, "A-FA 20%d-%02d-%02d %02d-%02d-%02d.log",
		(uint32_t)(boot >> 48), (uint32_t)(boot << 16 >> 56), (uint32_t)(boot << 24 >> 56),
 8003104:	4b52      	ldr	r3, [pc, #328]	; (8003250 <main+0x1a8>)
 8003106:	e9d3 0100 	ldrd	r0, r1, [r3]
 800310a:	f04f 0200 	mov.w	r2, #0
 800310e:	f04f 0300 	mov.w	r3, #0
 8003112:	0c0a      	lsrs	r2, r1, #16
 8003114:	2300      	movs	r3, #0
  sprintf(logfile, "A-FA 20%d-%02d-%02d %02d-%02d-%02d.log",
 8003116:	4694      	mov	ip, r2
		(uint32_t)(boot >> 48), (uint32_t)(boot << 16 >> 56), (uint32_t)(boot << 24 >> 56),
 8003118:	4b4d      	ldr	r3, [pc, #308]	; (8003250 <main+0x1a8>)
 800311a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800311e:	f04f 0200 	mov.w	r2, #0
 8003122:	f04f 0300 	mov.w	r3, #0
 8003126:	040b      	lsls	r3, r1, #16
 8003128:	ea43 4310 	orr.w	r3, r3, r0, lsr #16
 800312c:	0402      	lsls	r2, r0, #16
 800312e:	f04f 0000 	mov.w	r0, #0
 8003132:	f04f 0100 	mov.w	r1, #0
 8003136:	0e18      	lsrs	r0, r3, #24
 8003138:	2100      	movs	r1, #0
  sprintf(logfile, "A-FA 20%d-%02d-%02d %02d-%02d-%02d.log",
 800313a:	4686      	mov	lr, r0
		(uint32_t)(boot >> 48), (uint32_t)(boot << 16 >> 56), (uint32_t)(boot << 24 >> 56),
 800313c:	4b44      	ldr	r3, [pc, #272]	; (8003250 <main+0x1a8>)
 800313e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003142:	f04f 0200 	mov.w	r2, #0
 8003146:	f04f 0300 	mov.w	r3, #0
 800314a:	060b      	lsls	r3, r1, #24
 800314c:	ea43 2310 	orr.w	r3, r3, r0, lsr #8
 8003150:	0602      	lsls	r2, r0, #24
 8003152:	f04f 0000 	mov.w	r0, #0
 8003156:	f04f 0100 	mov.w	r1, #0
 800315a:	0e18      	lsrs	r0, r3, #24
 800315c:	2100      	movs	r1, #0
  sprintf(logfile, "A-FA 20%d-%02d-%02d %02d-%02d-%02d.log",
 800315e:	4604      	mov	r4, r0
		(uint32_t)(boot << 32 >> 56), (uint32_t)(boot << 40 >> 56), (uint32_t)(boot << 48 >> 56));
 8003160:	4b3b      	ldr	r3, [pc, #236]	; (8003250 <main+0x1a8>)
 8003162:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003166:	f04f 0200 	mov.w	r2, #0
 800316a:	f04f 0300 	mov.w	r3, #0
 800316e:	0003      	movs	r3, r0
 8003170:	2200      	movs	r2, #0
 8003172:	f04f 0000 	mov.w	r0, #0
 8003176:	f04f 0100 	mov.w	r1, #0
 800317a:	0e18      	lsrs	r0, r3, #24
 800317c:	2100      	movs	r1, #0
  sprintf(logfile, "A-FA 20%d-%02d-%02d %02d-%02d-%02d.log",
 800317e:	4605      	mov	r5, r0
		(uint32_t)(boot << 32 >> 56), (uint32_t)(boot << 40 >> 56), (uint32_t)(boot << 48 >> 56));
 8003180:	4b33      	ldr	r3, [pc, #204]	; (8003250 <main+0x1a8>)
 8003182:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003186:	f04f 0200 	mov.w	r2, #0
 800318a:	f04f 0300 	mov.w	r3, #0
 800318e:	0203      	lsls	r3, r0, #8
 8003190:	2200      	movs	r2, #0
 8003192:	f04f 0000 	mov.w	r0, #0
 8003196:	f04f 0100 	mov.w	r1, #0
 800319a:	0e18      	lsrs	r0, r3, #24
 800319c:	2100      	movs	r1, #0
  sprintf(logfile, "A-FA 20%d-%02d-%02d %02d-%02d-%02d.log",
 800319e:	4606      	mov	r6, r0
		(uint32_t)(boot << 32 >> 56), (uint32_t)(boot << 40 >> 56), (uint32_t)(boot << 48 >> 56));
 80031a0:	4b2b      	ldr	r3, [pc, #172]	; (8003250 <main+0x1a8>)
 80031a2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80031a6:	f04f 0200 	mov.w	r2, #0
 80031aa:	f04f 0300 	mov.w	r3, #0
 80031ae:	0403      	lsls	r3, r0, #16
 80031b0:	2200      	movs	r2, #0
 80031b2:	f04f 0000 	mov.w	r0, #0
 80031b6:	f04f 0100 	mov.w	r1, #0
 80031ba:	0e18      	lsrs	r0, r3, #24
 80031bc:	2100      	movs	r1, #0
  sprintf(logfile, "A-FA 20%d-%02d-%02d %02d-%02d-%02d.log",
 80031be:	4603      	mov	r3, r0
 80031c0:	9303      	str	r3, [sp, #12]
 80031c2:	9602      	str	r6, [sp, #8]
 80031c4:	9501      	str	r5, [sp, #4]
 80031c6:	9400      	str	r4, [sp, #0]
 80031c8:	4673      	mov	r3, lr
 80031ca:	4662      	mov	r2, ip
 80031cc:	4921      	ldr	r1, [pc, #132]	; (8003254 <main+0x1ac>)
 80031ce:	4822      	ldr	r0, [pc, #136]	; (8003258 <main+0x1b0>)
 80031d0:	f00d feb0 	bl	8010f34 <siprintf>

  // initialize 32KB log buffer
  ring_buffer_init(&logbuffer);
 80031d4:	4821      	ldr	r0, [pc, #132]	; (800325c <main+0x1b4>)
 80031d6:	f000 f927 	bl	8003428 <ring_buffer_init>

  // set onboard LED active
  HAL_GPIO_WritePin(GPIOA, LED1_Pin, GPIO_PIN_RESET);
 80031da:	2200      	movs	r2, #0
 80031dc:	2140      	movs	r1, #64	; 0x40
 80031de:	4820      	ldr	r0, [pc, #128]	; (8003260 <main+0x1b8>)
 80031e0:	f003 f9be 	bl	8006560 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, LED2_Pin, GPIO_PIN_SET);
 80031e4:	2201      	movs	r2, #1
 80031e6:	2180      	movs	r1, #128	; 0x80
 80031e8:	481d      	ldr	r0, [pc, #116]	; (8003260 <main+0x1b8>)
 80031ea:	f003 f9b9 	bl	8006560 <HAL_GPIO_WritePin>

  // log system startup
  log_t log;
  log.component = "ECU";
 80031ee:	4b1d      	ldr	r3, [pc, #116]	; (8003264 <main+0x1bc>)
 80031f0:	603b      	str	r3, [r7, #0]
  log.level = "INFO";
 80031f2:	4b1d      	ldr	r3, [pc, #116]	; (8003268 <main+0x1c0>)
 80031f4:	607b      	str	r3, [r7, #4]
  log.key = "STARTUP";
 80031f6:	4b1d      	ldr	r3, [pc, #116]	; (800326c <main+0x1c4>)
 80031f8:	60bb      	str	r3, [r7, #8]
  log.value = "STARTUP";
 80031fa:	4b1c      	ldr	r3, [pc, #112]	; (800326c <main+0x1c4>)
 80031fc:	60fb      	str	r3, [r7, #12]
  LOGGER(&log);
 80031fe:	463b      	mov	r3, r7
 8003200:	4618      	mov	r0, r3
 8003202:	f7fe fb87 	bl	8001914 <LOGGER>

  // set LCD
  LCD_Setup();
 8003206:	f7ff fe13 	bl	8002e30 <LCD_Setup>

  // set WiFi
  HAL_UART_Receive_IT(&huart3, &wifi_rxd, 1);
 800320a:	2201      	movs	r2, #1
 800320c:	4918      	ldr	r1, [pc, #96]	; (8003270 <main+0x1c8>)
 800320e:	4819      	ldr	r0, [pc, #100]	; (8003274 <main+0x1cc>)
 8003210:	f008 fec7 	bl	800bfa2 <HAL_UART_Receive_IT>
  HAL_UART_Transmit(&huart3, "ESP CHECK", 10, 10);
 8003214:	230a      	movs	r3, #10
 8003216:	220a      	movs	r2, #10
 8003218:	4917      	ldr	r1, [pc, #92]	; (8003278 <main+0x1d0>)
 800321a:	4816      	ldr	r0, [pc, #88]	; (8003274 <main+0x1cc>)
 800321c:	f008 fe2f 	bl	800be7e <HAL_UART_Transmit>

  // initialize GPIOs
  Sensor_Setup();
 8003220:	f7fe fc94 	bl	8001b4c <Sensor_Setup>

  // set CAN
  CAN_Setup();
 8003224:	f7fe fea8 	bl	8001f78 <CAN_Setup>

  // set accelerometer
  ACC_Setup();
 8003228:	f7ff fedc 	bl	8002fe4 <ACC_Setup>

  // set GPS
  GPS_Setup();
 800322c:	f7ff fa62 	bl	80026f4 <GPS_Setup>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
	RTD_Manager();
 8003230:	f7fe fe1e 	bl	8001e70 <RTD_Manager>
	Sensor_Manager();
 8003234:	f7fe fcfe 	bl	8001c34 <Sensor_Manager>
	CAN_Manager();
 8003238:	f7ff f8d6 	bl	80023e8 <CAN_Manager>
	GPS_Manager();
 800323c:	f7ff fa86 	bl	800274c <GPS_Manager>
	WiFi_Manager();
 8003240:	f7ff fb54 	bl	80028ec <WiFi_Manager>
	LCD_Manager();
 8003244:	f7ff fe32 	bl	8002eac <LCD_Manager>
	ACC_Manager();
 8003248:	f7ff fee2 	bl	8003010 <ACC_Manager>
	RTD_Manager();
 800324c:	e7f0      	b.n	8003230 <main+0x188>
 800324e:	bf00      	nop
 8003250:	200012a8 	.word	0x200012a8
 8003254:	08012654 	.word	0x08012654
 8003258:	200012b0 	.word	0x200012b0
 800325c:	200012d4 	.word	0x200012d4
 8003260:	40020000 	.word	0x40020000
 8003264:	080122b8 	.word	0x080122b8
 8003268:	080122dc 	.word	0x080122dc
 800326c:	0801267c 	.word	0x0801267c
 8003270:	2001135c 	.word	0x2001135c
 8003274:	2001177c 	.word	0x2001177c
 8003278:	08012684 	.word	0x08012684

0800327c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b094      	sub	sp, #80	; 0x50
 8003280:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003282:	f107 0320 	add.w	r3, r7, #32
 8003286:	2230      	movs	r2, #48	; 0x30
 8003288:	2100      	movs	r1, #0
 800328a:	4618      	mov	r0, r3
 800328c:	f00d fccc 	bl	8010c28 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003290:	f107 030c 	add.w	r3, r7, #12
 8003294:	2200      	movs	r2, #0
 8003296:	601a      	str	r2, [r3, #0]
 8003298:	605a      	str	r2, [r3, #4]
 800329a:	609a      	str	r2, [r3, #8]
 800329c:	60da      	str	r2, [r3, #12]
 800329e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80032a0:	2300      	movs	r3, #0
 80032a2:	60bb      	str	r3, [r7, #8]
 80032a4:	4b2a      	ldr	r3, [pc, #168]	; (8003350 <SystemClock_Config+0xd4>)
 80032a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032a8:	4a29      	ldr	r2, [pc, #164]	; (8003350 <SystemClock_Config+0xd4>)
 80032aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032ae:	6413      	str	r3, [r2, #64]	; 0x40
 80032b0:	4b27      	ldr	r3, [pc, #156]	; (8003350 <SystemClock_Config+0xd4>)
 80032b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032b8:	60bb      	str	r3, [r7, #8]
 80032ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80032bc:	2300      	movs	r3, #0
 80032be:	607b      	str	r3, [r7, #4]
 80032c0:	4b24      	ldr	r3, [pc, #144]	; (8003354 <SystemClock_Config+0xd8>)
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4a23      	ldr	r2, [pc, #140]	; (8003354 <SystemClock_Config+0xd8>)
 80032c6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80032ca:	6013      	str	r3, [r2, #0]
 80032cc:	4b21      	ldr	r3, [pc, #132]	; (8003354 <SystemClock_Config+0xd8>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80032d4:	607b      	str	r3, [r7, #4]
 80032d6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 80032d8:	2305      	movs	r3, #5
 80032da:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80032dc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80032e0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80032e2:	2301      	movs	r3, #1
 80032e4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80032e6:	2302      	movs	r3, #2
 80032e8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80032ea:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80032ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80032f0:	2304      	movs	r3, #4
 80032f2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80032f4:	23a8      	movs	r3, #168	; 0xa8
 80032f6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80032f8:	2302      	movs	r3, #2
 80032fa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80032fc:	2307      	movs	r3, #7
 80032fe:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003300:	f107 0320 	add.w	r3, r7, #32
 8003304:	4618      	mov	r0, r3
 8003306:	f005 fcb9 	bl	8008c7c <HAL_RCC_OscConfig>
 800330a:	4603      	mov	r3, r0
 800330c:	2b00      	cmp	r3, #0
 800330e:	d001      	beq.n	8003314 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8003310:	f000 f822 	bl	8003358 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003314:	230f      	movs	r3, #15
 8003316:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003318:	2302      	movs	r3, #2
 800331a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800331c:	2300      	movs	r3, #0
 800331e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003320:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003324:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003326:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800332a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800332c:	f107 030c 	add.w	r3, r7, #12
 8003330:	2105      	movs	r1, #5
 8003332:	4618      	mov	r0, r3
 8003334:	f005 ff1a 	bl	800916c <HAL_RCC_ClockConfig>
 8003338:	4603      	mov	r3, r0
 800333a:	2b00      	cmp	r3, #0
 800333c:	d001      	beq.n	8003342 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800333e:	f000 f80b 	bl	8003358 <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8003342:	f005 fff9 	bl	8009338 <HAL_RCC_EnableCSS>
}
 8003346:	bf00      	nop
 8003348:	3750      	adds	r7, #80	; 0x50
 800334a:	46bd      	mov	sp, r7
 800334c:	bd80      	pop	{r7, pc}
 800334e:	bf00      	nop
 8003350:	40023800 	.word	0x40023800
 8003354:	40007000 	.word	0x40007000

08003358 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b082      	sub	sp, #8
 800335c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	//__disable_irq();
	HAL_GPIO_WritePin(GPIOA, LED1_Pin, GPIO_PIN_SET);
 800335e:	2201      	movs	r2, #1
 8003360:	2140      	movs	r1, #64	; 0x40
 8003362:	4814      	ldr	r0, [pc, #80]	; (80033b4 <Error_Handler+0x5c>)
 8003364:	f003 f8fc 	bl	8006560 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, LED2_Pin, GPIO_PIN_RESET);
 8003368:	2200      	movs	r2, #0
 800336a:	2180      	movs	r1, #128	; 0x80
 800336c:	4811      	ldr	r0, [pc, #68]	; (80033b4 <Error_Handler+0x5c>)
 800336e:	f003 f8f7 	bl	8006560 <HAL_GPIO_WritePin>

	uint8_t* errstr = malloc(100);
 8003372:	2064      	movs	r0, #100	; 0x64
 8003374:	f00d fc48 	bl	8010c08 <malloc>
 8003378:	4603      	mov	r3, r0
 800337a:	607b      	str	r3, [r7, #4]
	uint32_t errsize;
	log_string_generator(&errlog, errstr, &errsize);
 800337c:	463b      	mov	r3, r7
 800337e:	461a      	mov	r2, r3
 8003380:	6879      	ldr	r1, [r7, #4]
 8003382:	480d      	ldr	r0, [pc, #52]	; (80033b8 <Error_Handler+0x60>)
 8003384:	f7fe fa18 	bl	80017b8 <log_string_generator>
	ring_buffer_queue_arr(&logbuffer, errstr, errsize + 1);
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	3301      	adds	r3, #1
 800338c:	461a      	mov	r2, r3
 800338e:	6879      	ldr	r1, [r7, #4]
 8003390:	480a      	ldr	r0, [pc, #40]	; (80033bc <Error_Handler+0x64>)
 8003392:	f000 f88a 	bl	80034aa <ring_buffer_queue_arr>
	free(errstr);
 8003396:	6878      	ldr	r0, [r7, #4]
 8003398:	f00d fc3e 	bl	8010c18 <free>

	printf("ERROR: %s\n", errlog.value);
 800339c:	4b06      	ldr	r3, [pc, #24]	; (80033b8 <Error_Handler+0x60>)
 800339e:	68db      	ldr	r3, [r3, #12]
 80033a0:	4619      	mov	r1, r3
 80033a2:	4807      	ldr	r0, [pc, #28]	; (80033c0 <Error_Handler+0x68>)
 80033a4:	f00d fd28 	bl	8010df8 <iprintf>

	while (1) {
	  break;
 80033a8:	bf00      	nop
	}
  /* USER CODE END Error_Handler_Debug */
}
 80033aa:	bf00      	nop
 80033ac:	3708      	adds	r7, #8
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bd80      	pop	{r7, pc}
 80033b2:	bf00      	nop
 80033b4:	40020000 	.word	0x40020000
 80033b8:	2000025c 	.word	0x2000025c
 80033bc:	200012d4 	.word	0x200012d4
 80033c0:	08012690 	.word	0x08012690

080033c4 <ring_buffer_is_empty>:
/**
 * Returns whether a ring buffer is empty.
 * @param buffer The buffer for which it should be returned whether it is empty.
 * @return 1 if empty; 0 otherwise.
 */
inline uint8_t ring_buffer_is_empty(ring_buffer_t *buffer) {
 80033c4:	b480      	push	{r7}
 80033c6:	b083      	sub	sp, #12
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
  return (buffer->head_index == buffer->tail_index);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 80033d2:	685a      	ldr	r2, [r3, #4]
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	429a      	cmp	r2, r3
 80033de:	bf0c      	ite	eq
 80033e0:	2301      	moveq	r3, #1
 80033e2:	2300      	movne	r3, #0
 80033e4:	b2db      	uxtb	r3, r3
}
 80033e6:	4618      	mov	r0, r3
 80033e8:	370c      	adds	r7, #12
 80033ea:	46bd      	mov	sp, r7
 80033ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f0:	4770      	bx	lr

080033f2 <ring_buffer_is_full>:
/**
 * Returns whether a ring buffer is full.
 * @param buffer The buffer for which it should be returned whether it is full.
 * @return 1 if full; 0 otherwise.
 */
inline uint8_t ring_buffer_is_full(ring_buffer_t *buffer) {
 80033f2:	b480      	push	{r7}
 80033f4:	b083      	sub	sp, #12
 80033f6:	af00      	add	r7, sp, #0
 80033f8:	6078      	str	r0, [r7, #4]
  return ((buffer->head_index - buffer->tail_index) & RING_BUFFER_MASK) == RING_BUFFER_MASK;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8003400:	685a      	ldr	r2, [r3, #4]
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	1ad3      	subs	r3, r2, r3
 800340c:	b29b      	uxth	r3, r3
 800340e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003412:	4293      	cmp	r3, r2
 8003414:	bf0c      	ite	eq
 8003416:	2301      	moveq	r3, #1
 8003418:	2300      	movne	r3, #0
 800341a:	b2db      	uxtb	r3, r3
}
 800341c:	4618      	mov	r0, r3
 800341e:	370c      	adds	r7, #12
 8003420:	46bd      	mov	sp, r7
 8003422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003426:	4770      	bx	lr

08003428 <ring_buffer_init>:
/**
 * @file
 * Implementation of ring buffer functions.
 */

void ring_buffer_init(ring_buffer_t *buffer) {
 8003428:	b480      	push	{r7}
 800342a:	b083      	sub	sp, #12
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
  buffer->tail_index = 0;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8003436:	461a      	mov	r2, r3
 8003438:	2300      	movs	r3, #0
 800343a:	6013      	str	r3, [r2, #0]
  buffer->head_index = 0;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8003442:	461a      	mov	r2, r3
 8003444:	2300      	movs	r3, #0
 8003446:	6053      	str	r3, [r2, #4]
}
 8003448:	bf00      	nop
 800344a:	370c      	adds	r7, #12
 800344c:	46bd      	mov	sp, r7
 800344e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003452:	4770      	bx	lr

08003454 <ring_buffer_queue>:

void ring_buffer_queue(ring_buffer_t *buffer, char data) {
 8003454:	b580      	push	{r7, lr}
 8003456:	b082      	sub	sp, #8
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
 800345c:	460b      	mov	r3, r1
 800345e:	70fb      	strb	r3, [r7, #3]
  /* Is buffer full? */
  if(ring_buffer_is_full(buffer)) {
 8003460:	6878      	ldr	r0, [r7, #4]
 8003462:	f7ff ffc6 	bl	80033f2 <ring_buffer_is_full>
 8003466:	4603      	mov	r3, r0
 8003468:	2b00      	cmp	r3, #0
 800346a:	d009      	beq.n	8003480 <ring_buffer_queue+0x2c>
    /* Is going to overwrite the oldest byte */
    /* Increase tail index */
    buffer->tail_index = ((buffer->tail_index + 1) & RING_BUFFER_MASK);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	3301      	adds	r3, #1
 8003476:	b29b      	uxth	r3, r3
 8003478:	687a      	ldr	r2, [r7, #4]
 800347a:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 800347e:	6013      	str	r3, [r2, #0]
  }

  /* Place data in buffer */
  buffer->buffer[buffer->head_index] = data;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	687a      	ldr	r2, [r7, #4]
 800348a:	78f9      	ldrb	r1, [r7, #3]
 800348c:	54d1      	strb	r1, [r2, r3]
  buffer->head_index = ((buffer->head_index + 1) & RING_BUFFER_MASK);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8003494:	685b      	ldr	r3, [r3, #4]
 8003496:	3301      	adds	r3, #1
 8003498:	b29b      	uxth	r3, r3
 800349a:	687a      	ldr	r2, [r7, #4]
 800349c:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 80034a0:	6053      	str	r3, [r2, #4]
}
 80034a2:	bf00      	nop
 80034a4:	3708      	adds	r7, #8
 80034a6:	46bd      	mov	sp, r7
 80034a8:	bd80      	pop	{r7, pc}

080034aa <ring_buffer_queue_arr>:

void ring_buffer_queue_arr(ring_buffer_t *buffer, const char *data, ring_buffer_size_t size) {
 80034aa:	b580      	push	{r7, lr}
 80034ac:	b086      	sub	sp, #24
 80034ae:	af00      	add	r7, sp, #0
 80034b0:	60f8      	str	r0, [r7, #12]
 80034b2:	60b9      	str	r1, [r7, #8]
 80034b4:	607a      	str	r2, [r7, #4]
  /* Add bytes; one by one */
  ring_buffer_size_t i;
  for(i = 0; i < size; i++) {
 80034b6:	2300      	movs	r3, #0
 80034b8:	617b      	str	r3, [r7, #20]
 80034ba:	e00a      	b.n	80034d2 <ring_buffer_queue_arr+0x28>
    ring_buffer_queue(buffer, data[i]);
 80034bc:	68ba      	ldr	r2, [r7, #8]
 80034be:	697b      	ldr	r3, [r7, #20]
 80034c0:	4413      	add	r3, r2
 80034c2:	781b      	ldrb	r3, [r3, #0]
 80034c4:	4619      	mov	r1, r3
 80034c6:	68f8      	ldr	r0, [r7, #12]
 80034c8:	f7ff ffc4 	bl	8003454 <ring_buffer_queue>
  for(i = 0; i < size; i++) {
 80034cc:	697b      	ldr	r3, [r7, #20]
 80034ce:	3301      	adds	r3, #1
 80034d0:	617b      	str	r3, [r7, #20]
 80034d2:	697a      	ldr	r2, [r7, #20]
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	429a      	cmp	r2, r3
 80034d8:	d3f0      	bcc.n	80034bc <ring_buffer_queue_arr+0x12>
  }
}
 80034da:	bf00      	nop
 80034dc:	bf00      	nop
 80034de:	3718      	adds	r7, #24
 80034e0:	46bd      	mov	sp, r7
 80034e2:	bd80      	pop	{r7, pc}

080034e4 <ring_buffer_dequeue>:

uint8_t ring_buffer_dequeue(ring_buffer_t *buffer, char *data) {
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b082      	sub	sp, #8
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
 80034ec:	6039      	str	r1, [r7, #0]
  if(ring_buffer_is_empty(buffer)) {
 80034ee:	6878      	ldr	r0, [r7, #4]
 80034f0:	f7ff ff68 	bl	80033c4 <ring_buffer_is_empty>
 80034f4:	4603      	mov	r3, r0
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d001      	beq.n	80034fe <ring_buffer_dequeue+0x1a>
    /* No items */
    return 0;
 80034fa:	2300      	movs	r3, #0
 80034fc:	e012      	b.n	8003524 <ring_buffer_dequeue+0x40>
  }
  
  *data = buffer->buffer[buffer->tail_index];
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	687a      	ldr	r2, [r7, #4]
 8003508:	5cd2      	ldrb	r2, [r2, r3]
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	701a      	strb	r2, [r3, #0]
  buffer->tail_index = ((buffer->tail_index + 1) & RING_BUFFER_MASK);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	3301      	adds	r3, #1
 8003518:	b29b      	uxth	r3, r3
 800351a:	687a      	ldr	r2, [r7, #4]
 800351c:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 8003520:	6013      	str	r3, [r2, #0]
  return 1;
 8003522:	2301      	movs	r3, #1
}
 8003524:	4618      	mov	r0, r3
 8003526:	3708      	adds	r7, #8
 8003528:	46bd      	mov	sp, r7
 800352a:	bd80      	pop	{r7, pc}

0800352c <ring_buffer_dequeue_arr>:

ring_buffer_size_t ring_buffer_dequeue_arr(ring_buffer_t *buffer, char *data, ring_buffer_size_t len) {
 800352c:	b580      	push	{r7, lr}
 800352e:	b086      	sub	sp, #24
 8003530:	af00      	add	r7, sp, #0
 8003532:	60f8      	str	r0, [r7, #12]
 8003534:	60b9      	str	r1, [r7, #8]
 8003536:	607a      	str	r2, [r7, #4]
  if(ring_buffer_is_empty(buffer)) {
 8003538:	68f8      	ldr	r0, [r7, #12]
 800353a:	f7ff ff43 	bl	80033c4 <ring_buffer_is_empty>
 800353e:	4603      	mov	r3, r0
 8003540:	2b00      	cmp	r3, #0
 8003542:	d001      	beq.n	8003548 <ring_buffer_dequeue_arr+0x1c>
    /* No items */
    return 0;
 8003544:	2300      	movs	r3, #0
 8003546:	e016      	b.n	8003576 <ring_buffer_dequeue_arr+0x4a>
  }

  char *data_ptr = data;
 8003548:	68bb      	ldr	r3, [r7, #8]
 800354a:	617b      	str	r3, [r7, #20]
  ring_buffer_size_t cnt = 0;
 800354c:	2300      	movs	r3, #0
 800354e:	613b      	str	r3, [r7, #16]
  while((cnt < len) && ring_buffer_dequeue(buffer, data_ptr)) {
 8003550:	e005      	b.n	800355e <ring_buffer_dequeue_arr+0x32>
    cnt++;
 8003552:	693b      	ldr	r3, [r7, #16]
 8003554:	3301      	adds	r3, #1
 8003556:	613b      	str	r3, [r7, #16]
    data_ptr++;
 8003558:	697b      	ldr	r3, [r7, #20]
 800355a:	3301      	adds	r3, #1
 800355c:	617b      	str	r3, [r7, #20]
  while((cnt < len) && ring_buffer_dequeue(buffer, data_ptr)) {
 800355e:	693a      	ldr	r2, [r7, #16]
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	429a      	cmp	r2, r3
 8003564:	d206      	bcs.n	8003574 <ring_buffer_dequeue_arr+0x48>
 8003566:	6979      	ldr	r1, [r7, #20]
 8003568:	68f8      	ldr	r0, [r7, #12]
 800356a:	f7ff ffbb 	bl	80034e4 <ring_buffer_dequeue>
 800356e:	4603      	mov	r3, r0
 8003570:	2b00      	cmp	r3, #0
 8003572:	d1ee      	bne.n	8003552 <ring_buffer_dequeue_arr+0x26>
  }
  return cnt;
 8003574:	693b      	ldr	r3, [r7, #16]
}
 8003576:	4618      	mov	r0, r3
 8003578:	3718      	adds	r7, #24
 800357a:	46bd      	mov	sp, r7
 800357c:	bd80      	pop	{r7, pc}
	...

08003580 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b086      	sub	sp, #24
 8003584:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8003586:	1d3b      	adds	r3, r7, #4
 8003588:	2200      	movs	r2, #0
 800358a:	601a      	str	r2, [r3, #0]
 800358c:	605a      	str	r2, [r3, #4]
 800358e:	609a      	str	r2, [r3, #8]
 8003590:	60da      	str	r2, [r3, #12]
 8003592:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8003594:	2300      	movs	r3, #0
 8003596:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8003598:	4b2c      	ldr	r3, [pc, #176]	; (800364c <MX_RTC_Init+0xcc>)
 800359a:	4a2d      	ldr	r2, [pc, #180]	; (8003650 <MX_RTC_Init+0xd0>)
 800359c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800359e:	4b2b      	ldr	r3, [pc, #172]	; (800364c <MX_RTC_Init+0xcc>)
 80035a0:	2200      	movs	r2, #0
 80035a2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80035a4:	4b29      	ldr	r3, [pc, #164]	; (800364c <MX_RTC_Init+0xcc>)
 80035a6:	227f      	movs	r2, #127	; 0x7f
 80035a8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80035aa:	4b28      	ldr	r3, [pc, #160]	; (800364c <MX_RTC_Init+0xcc>)
 80035ac:	22ff      	movs	r2, #255	; 0xff
 80035ae:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80035b0:	4b26      	ldr	r3, [pc, #152]	; (800364c <MX_RTC_Init+0xcc>)
 80035b2:	2200      	movs	r2, #0
 80035b4:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80035b6:	4b25      	ldr	r3, [pc, #148]	; (800364c <MX_RTC_Init+0xcc>)
 80035b8:	2200      	movs	r2, #0
 80035ba:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80035bc:	4b23      	ldr	r3, [pc, #140]	; (800364c <MX_RTC_Init+0xcc>)
 80035be:	2200      	movs	r2, #0
 80035c0:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80035c2:	4822      	ldr	r0, [pc, #136]	; (800364c <MX_RTC_Init+0xcc>)
 80035c4:	f006 f8fc 	bl	80097c0 <HAL_RTC_Init>
 80035c8:	4603      	mov	r3, r0
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d001      	beq.n	80035d2 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 80035ce:	f7ff fec3 	bl	8003358 <Error_Handler>
  }

  /* USER CODE BEGIN Check_RTC_BKUP */
	if (HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR0) == 0xCAFE) {
 80035d2:	2100      	movs	r1, #0
 80035d4:	481d      	ldr	r0, [pc, #116]	; (800364c <MX_RTC_Init+0xcc>)
 80035d6:	f006 fc0b 	bl	8009df0 <HAL_RTCEx_BKUPRead>
 80035da:	4603      	mov	r3, r0
 80035dc:	f64c 22fe 	movw	r2, #51966	; 0xcafe
 80035e0:	4293      	cmp	r3, r2
 80035e2:	d02e      	beq.n	8003642 <MX_RTC_Init+0xc2>
		return;
	}
	HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR0, 0xCAFE);
 80035e4:	f64c 22fe 	movw	r2, #51966	; 0xcafe
 80035e8:	2100      	movs	r1, #0
 80035ea:	4818      	ldr	r0, [pc, #96]	; (800364c <MX_RTC_Init+0xcc>)
 80035ec:	f006 fbe6 	bl	8009dbc <HAL_RTCEx_BKUPWrite>
  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x1;
 80035f0:	2301      	movs	r3, #1
 80035f2:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x2;
 80035f4:	2302      	movs	r3, #2
 80035f6:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x3;
 80035f8:	2303      	movs	r3, #3
 80035fa:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80035fc:	2300      	movs	r3, #0
 80035fe:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8003600:	2300      	movs	r3, #0
 8003602:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8003604:	1d3b      	adds	r3, r7, #4
 8003606:	2201      	movs	r2, #1
 8003608:	4619      	mov	r1, r3
 800360a:	4810      	ldr	r0, [pc, #64]	; (800364c <MX_RTC_Init+0xcc>)
 800360c:	f006 f94e 	bl	80098ac <HAL_RTC_SetTime>
 8003610:	4603      	mov	r3, r0
 8003612:	2b00      	cmp	r3, #0
 8003614:	d001      	beq.n	800361a <MX_RTC_Init+0x9a>
  {
    Error_Handler();
 8003616:	f7ff fe9f 	bl	8003358 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_FRIDAY;
 800361a:	2305      	movs	r3, #5
 800361c:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JULY;
 800361e:	2307      	movs	r3, #7
 8003620:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x15;
 8003622:	2315      	movs	r3, #21
 8003624:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x22;
 8003626:	2322      	movs	r3, #34	; 0x22
 8003628:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800362a:	463b      	mov	r3, r7
 800362c:	2201      	movs	r2, #1
 800362e:	4619      	mov	r1, r3
 8003630:	4806      	ldr	r0, [pc, #24]	; (800364c <MX_RTC_Init+0xcc>)
 8003632:	f006 fa33 	bl	8009a9c <HAL_RTC_SetDate>
 8003636:	4603      	mov	r3, r0
 8003638:	2b00      	cmp	r3, #0
 800363a:	d003      	beq.n	8003644 <MX_RTC_Init+0xc4>
  {
    Error_Handler();
 800363c:	f7ff fe8c 	bl	8003358 <Error_Handler>
 8003640:	e000      	b.n	8003644 <MX_RTC_Init+0xc4>
		return;
 8003642:	bf00      	nop
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8003644:	3718      	adds	r7, #24
 8003646:	46bd      	mov	sp, r7
 8003648:	bd80      	pop	{r7, pc}
 800364a:	bf00      	nop
 800364c:	200114b0 	.word	0x200114b0
 8003650:	40002800 	.word	0x40002800

08003654 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b086      	sub	sp, #24
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800365c:	f107 0308 	add.w	r3, r7, #8
 8003660:	2200      	movs	r2, #0
 8003662:	601a      	str	r2, [r3, #0]
 8003664:	605a      	str	r2, [r3, #4]
 8003666:	609a      	str	r2, [r3, #8]
 8003668:	60da      	str	r2, [r3, #12]
  if(rtcHandle->Instance==RTC)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	4a0c      	ldr	r2, [pc, #48]	; (80036a0 <HAL_RTC_MspInit+0x4c>)
 8003670:	4293      	cmp	r3, r2
 8003672:	d111      	bne.n	8003698 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8003674:	2302      	movs	r3, #2
 8003676:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8003678:	f44f 7380 	mov.w	r3, #256	; 0x100
 800367c:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800367e:	f107 0308 	add.w	r3, r7, #8
 8003682:	4618      	mov	r0, r3
 8003684:	f005 ffba 	bl	80095fc <HAL_RCCEx_PeriphCLKConfig>
 8003688:	4603      	mov	r3, r0
 800368a:	2b00      	cmp	r3, #0
 800368c:	d001      	beq.n	8003692 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 800368e:	f7ff fe63 	bl	8003358 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003692:	4b04      	ldr	r3, [pc, #16]	; (80036a4 <HAL_RTC_MspInit+0x50>)
 8003694:	2201      	movs	r2, #1
 8003696:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8003698:	bf00      	nop
 800369a:	3718      	adds	r7, #24
 800369c:	46bd      	mov	sp, r7
 800369e:	bd80      	pop	{r7, pc}
 80036a0:	40002800 	.word	0x40002800
 80036a4:	42470e3c 	.word	0x42470e3c

080036a8 <MX_SDIO_SD_Init>:
DMA_HandleTypeDef hdma_sdio_tx;

/* SDIO init function */

void MX_SDIO_SD_Init(void)
{
 80036a8:	b480      	push	{r7}
 80036aa:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 80036ac:	4b0d      	ldr	r3, [pc, #52]	; (80036e4 <MX_SDIO_SD_Init+0x3c>)
 80036ae:	4a0e      	ldr	r2, [pc, #56]	; (80036e8 <MX_SDIO_SD_Init+0x40>)
 80036b0:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 80036b2:	4b0c      	ldr	r3, [pc, #48]	; (80036e4 <MX_SDIO_SD_Init+0x3c>)
 80036b4:	2200      	movs	r2, #0
 80036b6:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 80036b8:	4b0a      	ldr	r3, [pc, #40]	; (80036e4 <MX_SDIO_SD_Init+0x3c>)
 80036ba:	2200      	movs	r2, #0
 80036bc:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80036be:	4b09      	ldr	r3, [pc, #36]	; (80036e4 <MX_SDIO_SD_Init+0x3c>)
 80036c0:	2200      	movs	r2, #0
 80036c2:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 80036c4:	4b07      	ldr	r3, [pc, #28]	; (80036e4 <MX_SDIO_SD_Init+0x3c>)
 80036c6:	2200      	movs	r2, #0
 80036c8:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_ENABLE;
 80036ca:	4b06      	ldr	r3, [pc, #24]	; (80036e4 <MX_SDIO_SD_Init+0x3c>)
 80036cc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80036d0:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 12;
 80036d2:	4b04      	ldr	r3, [pc, #16]	; (80036e4 <MX_SDIO_SD_Init+0x3c>)
 80036d4:	220c      	movs	r2, #12
 80036d6:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 80036d8:	bf00      	nop
 80036da:	46bd      	mov	sp, r7
 80036dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e0:	4770      	bx	lr
 80036e2:	bf00      	nop
 80036e4:	200114d0 	.word	0x200114d0
 80036e8:	40012c00 	.word	0x40012c00

080036ec <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b08a      	sub	sp, #40	; 0x28
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036f4:	f107 0314 	add.w	r3, r7, #20
 80036f8:	2200      	movs	r2, #0
 80036fa:	601a      	str	r2, [r3, #0]
 80036fc:	605a      	str	r2, [r3, #4]
 80036fe:	609a      	str	r2, [r3, #8]
 8003700:	60da      	str	r2, [r3, #12]
 8003702:	611a      	str	r2, [r3, #16]
  if(sdHandle->Instance==SDIO)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4a70      	ldr	r2, [pc, #448]	; (80038cc <HAL_SD_MspInit+0x1e0>)
 800370a:	4293      	cmp	r3, r2
 800370c:	f040 80da 	bne.w	80038c4 <HAL_SD_MspInit+0x1d8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* SDIO clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8003710:	2300      	movs	r3, #0
 8003712:	613b      	str	r3, [r7, #16]
 8003714:	4b6e      	ldr	r3, [pc, #440]	; (80038d0 <HAL_SD_MspInit+0x1e4>)
 8003716:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003718:	4a6d      	ldr	r2, [pc, #436]	; (80038d0 <HAL_SD_MspInit+0x1e4>)
 800371a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800371e:	6453      	str	r3, [r2, #68]	; 0x44
 8003720:	4b6b      	ldr	r3, [pc, #428]	; (80038d0 <HAL_SD_MspInit+0x1e4>)
 8003722:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003724:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003728:	613b      	str	r3, [r7, #16]
 800372a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800372c:	2300      	movs	r3, #0
 800372e:	60fb      	str	r3, [r7, #12]
 8003730:	4b67      	ldr	r3, [pc, #412]	; (80038d0 <HAL_SD_MspInit+0x1e4>)
 8003732:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003734:	4a66      	ldr	r2, [pc, #408]	; (80038d0 <HAL_SD_MspInit+0x1e4>)
 8003736:	f043 0304 	orr.w	r3, r3, #4
 800373a:	6313      	str	r3, [r2, #48]	; 0x30
 800373c:	4b64      	ldr	r3, [pc, #400]	; (80038d0 <HAL_SD_MspInit+0x1e4>)
 800373e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003740:	f003 0304 	and.w	r3, r3, #4
 8003744:	60fb      	str	r3, [r7, #12]
 8003746:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003748:	2300      	movs	r3, #0
 800374a:	60bb      	str	r3, [r7, #8]
 800374c:	4b60      	ldr	r3, [pc, #384]	; (80038d0 <HAL_SD_MspInit+0x1e4>)
 800374e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003750:	4a5f      	ldr	r2, [pc, #380]	; (80038d0 <HAL_SD_MspInit+0x1e4>)
 8003752:	f043 0308 	orr.w	r3, r3, #8
 8003756:	6313      	str	r3, [r2, #48]	; 0x30
 8003758:	4b5d      	ldr	r3, [pc, #372]	; (80038d0 <HAL_SD_MspInit+0x1e4>)
 800375a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800375c:	f003 0308 	and.w	r3, r3, #8
 8003760:	60bb      	str	r3, [r7, #8]
 8003762:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8003764:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8003768:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800376a:	2302      	movs	r3, #2
 800376c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800376e:	2301      	movs	r3, #1
 8003770:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003772:	2303      	movs	r3, #3
 8003774:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8003776:	230c      	movs	r3, #12
 8003778:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800377a:	f107 0314 	add.w	r3, r7, #20
 800377e:	4619      	mov	r1, r3
 8003780:	4854      	ldr	r0, [pc, #336]	; (80038d4 <HAL_SD_MspInit+0x1e8>)
 8003782:	f002 fd39 	bl	80061f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8003786:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800378a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800378c:	2302      	movs	r3, #2
 800378e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003790:	2300      	movs	r3, #0
 8003792:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003794:	2303      	movs	r3, #3
 8003796:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8003798:	230c      	movs	r3, #12
 800379a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800379c:	f107 0314 	add.w	r3, r7, #20
 80037a0:	4619      	mov	r1, r3
 80037a2:	484c      	ldr	r0, [pc, #304]	; (80038d4 <HAL_SD_MspInit+0x1e8>)
 80037a4:	f002 fd28 	bl	80061f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80037a8:	2304      	movs	r3, #4
 80037aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037ac:	2302      	movs	r3, #2
 80037ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80037b0:	2301      	movs	r3, #1
 80037b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80037b4:	2303      	movs	r3, #3
 80037b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80037b8:	230c      	movs	r3, #12
 80037ba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80037bc:	f107 0314 	add.w	r3, r7, #20
 80037c0:	4619      	mov	r1, r3
 80037c2:	4845      	ldr	r0, [pc, #276]	; (80038d8 <HAL_SD_MspInit+0x1ec>)
 80037c4:	f002 fd18 	bl	80061f8 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 80037c8:	4b44      	ldr	r3, [pc, #272]	; (80038dc <HAL_SD_MspInit+0x1f0>)
 80037ca:	4a45      	ldr	r2, [pc, #276]	; (80038e0 <HAL_SD_MspInit+0x1f4>)
 80037cc:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 80037ce:	4b43      	ldr	r3, [pc, #268]	; (80038dc <HAL_SD_MspInit+0x1f0>)
 80037d0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80037d4:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80037d6:	4b41      	ldr	r3, [pc, #260]	; (80038dc <HAL_SD_MspInit+0x1f0>)
 80037d8:	2200      	movs	r2, #0
 80037da:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80037dc:	4b3f      	ldr	r3, [pc, #252]	; (80038dc <HAL_SD_MspInit+0x1f0>)
 80037de:	2200      	movs	r2, #0
 80037e0:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 80037e2:	4b3e      	ldr	r3, [pc, #248]	; (80038dc <HAL_SD_MspInit+0x1f0>)
 80037e4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80037e8:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80037ea:	4b3c      	ldr	r3, [pc, #240]	; (80038dc <HAL_SD_MspInit+0x1f0>)
 80037ec:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80037f0:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80037f2:	4b3a      	ldr	r3, [pc, #232]	; (80038dc <HAL_SD_MspInit+0x1f0>)
 80037f4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80037f8:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 80037fa:	4b38      	ldr	r3, [pc, #224]	; (80038dc <HAL_SD_MspInit+0x1f0>)
 80037fc:	2220      	movs	r2, #32
 80037fe:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003800:	4b36      	ldr	r3, [pc, #216]	; (80038dc <HAL_SD_MspInit+0x1f0>)
 8003802:	2200      	movs	r2, #0
 8003804:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8003806:	4b35      	ldr	r3, [pc, #212]	; (80038dc <HAL_SD_MspInit+0x1f0>)
 8003808:	2204      	movs	r2, #4
 800380a:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800380c:	4b33      	ldr	r3, [pc, #204]	; (80038dc <HAL_SD_MspInit+0x1f0>)
 800380e:	2203      	movs	r2, #3
 8003810:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 8003812:	4b32      	ldr	r3, [pc, #200]	; (80038dc <HAL_SD_MspInit+0x1f0>)
 8003814:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8003818:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 800381a:	4b30      	ldr	r3, [pc, #192]	; (80038dc <HAL_SD_MspInit+0x1f0>)
 800381c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8003820:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 8003822:	482e      	ldr	r0, [pc, #184]	; (80038dc <HAL_SD_MspInit+0x1f0>)
 8003824:	f002 f8cc 	bl	80059c0 <HAL_DMA_Init>
 8003828:	4603      	mov	r3, r0
 800382a:	2b00      	cmp	r3, #0
 800382c:	d001      	beq.n	8003832 <HAL_SD_MspInit+0x146>
    {
      Error_Handler();
 800382e:	f7ff fd93 	bl	8003358 <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmarx,hdma_sdio_rx);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	4a29      	ldr	r2, [pc, #164]	; (80038dc <HAL_SD_MspInit+0x1f0>)
 8003836:	641a      	str	r2, [r3, #64]	; 0x40
 8003838:	4a28      	ldr	r2, [pc, #160]	; (80038dc <HAL_SD_MspInit+0x1f0>)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 800383e:	4b29      	ldr	r3, [pc, #164]	; (80038e4 <HAL_SD_MspInit+0x1f8>)
 8003840:	4a29      	ldr	r2, [pc, #164]	; (80038e8 <HAL_SD_MspInit+0x1fc>)
 8003842:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 8003844:	4b27      	ldr	r3, [pc, #156]	; (80038e4 <HAL_SD_MspInit+0x1f8>)
 8003846:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800384a:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800384c:	4b25      	ldr	r3, [pc, #148]	; (80038e4 <HAL_SD_MspInit+0x1f8>)
 800384e:	2240      	movs	r2, #64	; 0x40
 8003850:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003852:	4b24      	ldr	r3, [pc, #144]	; (80038e4 <HAL_SD_MspInit+0x1f8>)
 8003854:	2200      	movs	r2, #0
 8003856:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003858:	4b22      	ldr	r3, [pc, #136]	; (80038e4 <HAL_SD_MspInit+0x1f8>)
 800385a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800385e:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003860:	4b20      	ldr	r3, [pc, #128]	; (80038e4 <HAL_SD_MspInit+0x1f8>)
 8003862:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003866:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003868:	4b1e      	ldr	r3, [pc, #120]	; (80038e4 <HAL_SD_MspInit+0x1f8>)
 800386a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800386e:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 8003870:	4b1c      	ldr	r3, [pc, #112]	; (80038e4 <HAL_SD_MspInit+0x1f8>)
 8003872:	2220      	movs	r2, #32
 8003874:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003876:	4b1b      	ldr	r3, [pc, #108]	; (80038e4 <HAL_SD_MspInit+0x1f8>)
 8003878:	2200      	movs	r2, #0
 800387a:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800387c:	4b19      	ldr	r3, [pc, #100]	; (80038e4 <HAL_SD_MspInit+0x1f8>)
 800387e:	2204      	movs	r2, #4
 8003880:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8003882:	4b18      	ldr	r3, [pc, #96]	; (80038e4 <HAL_SD_MspInit+0x1f8>)
 8003884:	2203      	movs	r2, #3
 8003886:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 8003888:	4b16      	ldr	r3, [pc, #88]	; (80038e4 <HAL_SD_MspInit+0x1f8>)
 800388a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800388e:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8003890:	4b14      	ldr	r3, [pc, #80]	; (80038e4 <HAL_SD_MspInit+0x1f8>)
 8003892:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8003896:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 8003898:	4812      	ldr	r0, [pc, #72]	; (80038e4 <HAL_SD_MspInit+0x1f8>)
 800389a:	f002 f891 	bl	80059c0 <HAL_DMA_Init>
 800389e:	4603      	mov	r3, r0
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d001      	beq.n	80038a8 <HAL_SD_MspInit+0x1bc>
    {
      Error_Handler();
 80038a4:	f7ff fd58 	bl	8003358 <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmatx,hdma_sdio_tx);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	4a0e      	ldr	r2, [pc, #56]	; (80038e4 <HAL_SD_MspInit+0x1f8>)
 80038ac:	63da      	str	r2, [r3, #60]	; 0x3c
 80038ae:	4a0d      	ldr	r2, [pc, #52]	; (80038e4 <HAL_SD_MspInit+0x1f8>)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 80038b4:	2200      	movs	r2, #0
 80038b6:	2100      	movs	r1, #0
 80038b8:	2031      	movs	r0, #49	; 0x31
 80038ba:	f002 f83e 	bl	800593a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 80038be:	2031      	movs	r0, #49	; 0x31
 80038c0:	f002 f857 	bl	8005972 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }
}
 80038c4:	bf00      	nop
 80038c6:	3728      	adds	r7, #40	; 0x28
 80038c8:	46bd      	mov	sp, r7
 80038ca:	bd80      	pop	{r7, pc}
 80038cc:	40012c00 	.word	0x40012c00
 80038d0:	40023800 	.word	0x40023800
 80038d4:	40020800 	.word	0x40020800
 80038d8:	40020c00 	.word	0x40020c00
 80038dc:	20011554 	.word	0x20011554
 80038e0:	40026458 	.word	0x40026458
 80038e4:	200115b4 	.word	0x200115b4
 80038e8:	400264a0 	.word	0x400264a0

080038ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80038ec:	b480      	push	{r7}
 80038ee:	b083      	sub	sp, #12
 80038f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80038f2:	2300      	movs	r3, #0
 80038f4:	607b      	str	r3, [r7, #4]
 80038f6:	4b10      	ldr	r3, [pc, #64]	; (8003938 <HAL_MspInit+0x4c>)
 80038f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038fa:	4a0f      	ldr	r2, [pc, #60]	; (8003938 <HAL_MspInit+0x4c>)
 80038fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003900:	6453      	str	r3, [r2, #68]	; 0x44
 8003902:	4b0d      	ldr	r3, [pc, #52]	; (8003938 <HAL_MspInit+0x4c>)
 8003904:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003906:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800390a:	607b      	str	r3, [r7, #4]
 800390c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800390e:	2300      	movs	r3, #0
 8003910:	603b      	str	r3, [r7, #0]
 8003912:	4b09      	ldr	r3, [pc, #36]	; (8003938 <HAL_MspInit+0x4c>)
 8003914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003916:	4a08      	ldr	r2, [pc, #32]	; (8003938 <HAL_MspInit+0x4c>)
 8003918:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800391c:	6413      	str	r3, [r2, #64]	; 0x40
 800391e:	4b06      	ldr	r3, [pc, #24]	; (8003938 <HAL_MspInit+0x4c>)
 8003920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003922:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003926:	603b      	str	r3, [r7, #0]
 8003928:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800392a:	bf00      	nop
 800392c:	370c      	adds	r7, #12
 800392e:	46bd      	mov	sp, r7
 8003930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003934:	4770      	bx	lr
 8003936:	bf00      	nop
 8003938:	40023800 	.word	0x40023800

0800393c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8003940:	f005 fe40 	bl	80095c4 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003944:	e7fe      	b.n	8003944 <NMI_Handler+0x8>
	...

08003948 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

	HAL_GPIO_WritePin(GPIOA, LED1_Pin, GPIO_PIN_SET);
 800394c:	2201      	movs	r2, #1
 800394e:	2140      	movs	r1, #64	; 0x40
 8003950:	4805      	ldr	r0, [pc, #20]	; (8003968 <HardFault_Handler+0x20>)
 8003952:	f002 fe05 	bl	8006560 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, LED2_Pin, GPIO_PIN_SET);
 8003956:	2201      	movs	r2, #1
 8003958:	2180      	movs	r1, #128	; 0x80
 800395a:	4803      	ldr	r0, [pc, #12]	; (8003968 <HardFault_Handler+0x20>)
 800395c:	f002 fe00 	bl	8006560 <HAL_GPIO_WritePin>

	printf("!!!!! HARD FAULT !!!!!\n");
 8003960:	4802      	ldr	r0, [pc, #8]	; (800396c <HardFault_Handler+0x24>)
 8003962:	f00d facf 	bl	8010f04 <puts>

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003966:	e7fe      	b.n	8003966 <HardFault_Handler+0x1e>
 8003968:	40020000 	.word	0x40020000
 800396c:	0801269c 	.word	0x0801269c

08003970 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003970:	b480      	push	{r7}
 8003972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003974:	e7fe      	b.n	8003974 <MemManage_Handler+0x4>

08003976 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003976:	b480      	push	{r7}
 8003978:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800397a:	e7fe      	b.n	800397a <BusFault_Handler+0x4>

0800397c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800397c:	b480      	push	{r7}
 800397e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003980:	e7fe      	b.n	8003980 <UsageFault_Handler+0x4>

08003982 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003982:	b480      	push	{r7}
 8003984:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003986:	bf00      	nop
 8003988:	46bd      	mov	sp, r7
 800398a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398e:	4770      	bx	lr

08003990 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003990:	b480      	push	{r7}
 8003992:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003994:	bf00      	nop
 8003996:	46bd      	mov	sp, r7
 8003998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399c:	4770      	bx	lr

0800399e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800399e:	b480      	push	{r7}
 80039a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80039a2:	bf00      	nop
 80039a4:	46bd      	mov	sp, r7
 80039a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039aa:	4770      	bx	lr

080039ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80039b0:	f000 fc8e 	bl	80042d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  HAL_SYSTICK_IRQHandler();
 80039b4:	f001 fff7 	bl	80059a6 <HAL_SYSTICK_IRQHandler>

  /* USER CODE END SysTick_IRQn 1 */
}
 80039b8:	bf00      	nop
 80039ba:	bd80      	pop	{r7, pc}

080039bc <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80039c0:	4802      	ldr	r0, [pc, #8]	; (80039cc <ADC_IRQHandler+0x10>)
 80039c2:	f000 fdeb 	bl	800459c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80039c6:	bf00      	nop
 80039c8:	bd80      	pop	{r7, pc}
 80039ca:	bf00      	nop
 80039cc:	20000144 	.word	0x20000144

080039d0 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80039d4:	4802      	ldr	r0, [pc, #8]	; (80039e0 <CAN1_TX_IRQHandler+0x10>)
 80039d6:	f001 fcba 	bl	800534e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 80039da:	bf00      	nop
 80039dc:	bd80      	pop	{r7, pc}
 80039de:	bf00      	nop
 80039e0:	2000018c 	.word	0x2000018c

080039e4 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80039e8:	4802      	ldr	r0, [pc, #8]	; (80039f4 <CAN1_RX0_IRQHandler+0x10>)
 80039ea:	f001 fcb0 	bl	800534e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80039ee:	bf00      	nop
 80039f0:	bd80      	pop	{r7, pc}
 80039f2:	bf00      	nop
 80039f4:	2000018c 	.word	0x2000018c

080039f8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80039fc:	4802      	ldr	r0, [pc, #8]	; (8003a08 <TIM2_IRQHandler+0x10>)
 80039fe:	f007 fe30 	bl	800b662 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003a02:	bf00      	nop
 8003a04:	bd80      	pop	{r7, pc}
 8003a06:	bf00      	nop
 8003a08:	20011618 	.word	0x20011618

08003a0c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003a10:	4802      	ldr	r0, [pc, #8]	; (8003a1c <TIM3_IRQHandler+0x10>)
 8003a12:	f007 fe26 	bl	800b662 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003a16:	bf00      	nop
 8003a18:	bd80      	pop	{r7, pc}
 8003a1a:	bf00      	nop
 8003a1c:	20011660 	.word	0x20011660

08003a20 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003a24:	4802      	ldr	r0, [pc, #8]	; (8003a30 <TIM4_IRQHandler+0x10>)
 8003a26:	f007 fe1c 	bl	800b662 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8003a2a:	bf00      	nop
 8003a2c:	bd80      	pop	{r7, pc}
 8003a2e:	bf00      	nop
 8003a30:	200116a8 	.word	0x200116a8

08003a34 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8003a38:	4802      	ldr	r0, [pc, #8]	; (8003a44 <I2C1_EV_IRQHandler+0x10>)
 8003a3a:	f003 fa13 	bl	8006e64 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8003a3e:	bf00      	nop
 8003a40:	bd80      	pop	{r7, pc}
 8003a42:	bf00      	nop
 8003a44:	200001b4 	.word	0x200001b4

08003a48 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8003a4c:	4802      	ldr	r0, [pc, #8]	; (8003a58 <I2C2_EV_IRQHandler+0x10>)
 8003a4e:	f003 fa09 	bl	8006e64 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8003a52:	bf00      	nop
 8003a54:	bd80      	pop	{r7, pc}
 8003a56:	bf00      	nop
 8003a58:	20000208 	.word	0x20000208

08003a5c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003a60:	4802      	ldr	r0, [pc, #8]	; (8003a6c <USART3_IRQHandler+0x10>)
 8003a62:	f008 facf 	bl	800c004 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8003a66:	bf00      	nop
 8003a68:	bd80      	pop	{r7, pc}
 8003a6a:	bf00      	nop
 8003a6c:	2001177c 	.word	0x2001177c

08003a70 <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim12);
 8003a74:	4802      	ldr	r0, [pc, #8]	; (8003a80 <TIM8_BRK_TIM12_IRQHandler+0x10>)
 8003a76:	f007 fdf4 	bl	800b662 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 8003a7a:	bf00      	nop
 8003a7c:	bd80      	pop	{r7, pc}
 8003a7e:	bf00      	nop
 8003a80:	200116f0 	.word	0x200116f0

08003a84 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8003a88:	4802      	ldr	r0, [pc, #8]	; (8003a94 <SDIO_IRQHandler+0x10>)
 8003a8a:	f006 fc41 	bl	800a310 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 8003a8e:	bf00      	nop
 8003a90:	bd80      	pop	{r7, pc}
 8003a92:	bf00      	nop
 8003a94:	200114d0 	.word	0x200114d0

08003a98 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 8003a9c:	4802      	ldr	r0, [pc, #8]	; (8003aa8 <DMA2_Stream3_IRQHandler+0x10>)
 8003a9e:	f002 f927 	bl	8005cf0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8003aa2:	bf00      	nop
 8003aa4:	bd80      	pop	{r7, pc}
 8003aa6:	bf00      	nop
 8003aa8:	20011554 	.word	0x20011554

08003aac <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8003ab0:	4802      	ldr	r0, [pc, #8]	; (8003abc <DMA2_Stream6_IRQHandler+0x10>)
 8003ab2:	f002 f91d 	bl	8005cf0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8003ab6:	bf00      	nop
 8003ab8:	bd80      	pop	{r7, pc}
 8003aba:	bf00      	nop
 8003abc:	200115b4 	.word	0x200115b4

08003ac0 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8003ac4:	4802      	ldr	r0, [pc, #8]	; (8003ad0 <USART6_IRQHandler+0x10>)
 8003ac6:	f008 fa9d 	bl	800c004 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8003aca:	bf00      	nop
 8003acc:	bd80      	pop	{r7, pc}
 8003ace:	bf00      	nop
 8003ad0:	200117c0 	.word	0x200117c0

08003ad4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b086      	sub	sp, #24
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	60f8      	str	r0, [r7, #12]
 8003adc:	60b9      	str	r1, [r7, #8]
 8003ade:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	617b      	str	r3, [r7, #20]
 8003ae4:	e00a      	b.n	8003afc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003ae6:	f3af 8000 	nop.w
 8003aea:	4601      	mov	r1, r0
 8003aec:	68bb      	ldr	r3, [r7, #8]
 8003aee:	1c5a      	adds	r2, r3, #1
 8003af0:	60ba      	str	r2, [r7, #8]
 8003af2:	b2ca      	uxtb	r2, r1
 8003af4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003af6:	697b      	ldr	r3, [r7, #20]
 8003af8:	3301      	adds	r3, #1
 8003afa:	617b      	str	r3, [r7, #20]
 8003afc:	697a      	ldr	r2, [r7, #20]
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	429a      	cmp	r2, r3
 8003b02:	dbf0      	blt.n	8003ae6 <_read+0x12>
	}

return len;
 8003b04:	687b      	ldr	r3, [r7, #4]
}
 8003b06:	4618      	mov	r0, r3
 8003b08:	3718      	adds	r7, #24
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	bd80      	pop	{r7, pc}

08003b0e <_close>:
	}
	return len;
}

int _close(int file)
{
 8003b0e:	b480      	push	{r7}
 8003b10:	b083      	sub	sp, #12
 8003b12:	af00      	add	r7, sp, #0
 8003b14:	6078      	str	r0, [r7, #4]
	return -1;
 8003b16:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	370c      	adds	r7, #12
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b24:	4770      	bx	lr

08003b26 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003b26:	b480      	push	{r7}
 8003b28:	b083      	sub	sp, #12
 8003b2a:	af00      	add	r7, sp, #0
 8003b2c:	6078      	str	r0, [r7, #4]
 8003b2e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003b36:	605a      	str	r2, [r3, #4]
	return 0;
 8003b38:	2300      	movs	r3, #0
}
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	370c      	adds	r7, #12
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b44:	4770      	bx	lr

08003b46 <_isatty>:

int _isatty(int file)
{
 8003b46:	b480      	push	{r7}
 8003b48:	b083      	sub	sp, #12
 8003b4a:	af00      	add	r7, sp, #0
 8003b4c:	6078      	str	r0, [r7, #4]
	return 1;
 8003b4e:	2301      	movs	r3, #1
}
 8003b50:	4618      	mov	r0, r3
 8003b52:	370c      	adds	r7, #12
 8003b54:	46bd      	mov	sp, r7
 8003b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5a:	4770      	bx	lr

08003b5c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003b5c:	b480      	push	{r7}
 8003b5e:	b085      	sub	sp, #20
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	60f8      	str	r0, [r7, #12]
 8003b64:	60b9      	str	r1, [r7, #8]
 8003b66:	607a      	str	r2, [r7, #4]
	return 0;
 8003b68:	2300      	movs	r3, #0
}
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	3714      	adds	r7, #20
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b74:	4770      	bx	lr
	...

08003b78 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b086      	sub	sp, #24
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003b80:	4a14      	ldr	r2, [pc, #80]	; (8003bd4 <_sbrk+0x5c>)
 8003b82:	4b15      	ldr	r3, [pc, #84]	; (8003bd8 <_sbrk+0x60>)
 8003b84:	1ad3      	subs	r3, r2, r3
 8003b86:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003b88:	697b      	ldr	r3, [r7, #20]
 8003b8a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003b8c:	4b13      	ldr	r3, [pc, #76]	; (8003bdc <_sbrk+0x64>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d102      	bne.n	8003b9a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003b94:	4b11      	ldr	r3, [pc, #68]	; (8003bdc <_sbrk+0x64>)
 8003b96:	4a12      	ldr	r2, [pc, #72]	; (8003be0 <_sbrk+0x68>)
 8003b98:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003b9a:	4b10      	ldr	r3, [pc, #64]	; (8003bdc <_sbrk+0x64>)
 8003b9c:	681a      	ldr	r2, [r3, #0]
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	4413      	add	r3, r2
 8003ba2:	693a      	ldr	r2, [r7, #16]
 8003ba4:	429a      	cmp	r2, r3
 8003ba6:	d207      	bcs.n	8003bb8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003ba8:	f00d f804 	bl	8010bb4 <__errno>
 8003bac:	4603      	mov	r3, r0
 8003bae:	220c      	movs	r2, #12
 8003bb0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003bb2:	f04f 33ff 	mov.w	r3, #4294967295
 8003bb6:	e009      	b.n	8003bcc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003bb8:	4b08      	ldr	r3, [pc, #32]	; (8003bdc <_sbrk+0x64>)
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003bbe:	4b07      	ldr	r3, [pc, #28]	; (8003bdc <_sbrk+0x64>)
 8003bc0:	681a      	ldr	r2, [r3, #0]
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	4413      	add	r3, r2
 8003bc6:	4a05      	ldr	r2, [pc, #20]	; (8003bdc <_sbrk+0x64>)
 8003bc8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003bca:	68fb      	ldr	r3, [r7, #12]
}
 8003bcc:	4618      	mov	r0, r3
 8003bce:	3718      	adds	r7, #24
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	bd80      	pop	{r7, pc}
 8003bd4:	20020000 	.word	0x20020000
 8003bd8:	00000400 	.word	0x00000400
 8003bdc:	20011614 	.word	0x20011614
 8003be0:	20011a58 	.word	0x20011a58

08003be4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003be4:	b480      	push	{r7}
 8003be6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003be8:	4b06      	ldr	r3, [pc, #24]	; (8003c04 <SystemInit+0x20>)
 8003bea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bee:	4a05      	ldr	r2, [pc, #20]	; (8003c04 <SystemInit+0x20>)
 8003bf0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003bf4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003bf8:	bf00      	nop
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c00:	4770      	bx	lr
 8003c02:	bf00      	nop
 8003c04:	e000ed00 	.word	0xe000ed00

08003c08 <MX_TIM2_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim12;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b086      	sub	sp, #24
 8003c0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003c0e:	f107 0308 	add.w	r3, r7, #8
 8003c12:	2200      	movs	r2, #0
 8003c14:	601a      	str	r2, [r3, #0]
 8003c16:	605a      	str	r2, [r3, #4]
 8003c18:	609a      	str	r2, [r3, #8]
 8003c1a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003c1c:	463b      	mov	r3, r7
 8003c1e:	2200      	movs	r2, #0
 8003c20:	601a      	str	r2, [r3, #0]
 8003c22:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003c24:	4b1e      	ldr	r3, [pc, #120]	; (8003ca0 <MX_TIM2_Init+0x98>)
 8003c26:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003c2a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8400 - 1;
 8003c2c:	4b1c      	ldr	r3, [pc, #112]	; (8003ca0 <MX_TIM2_Init+0x98>)
 8003c2e:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8003c32:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003c34:	4b1a      	ldr	r3, [pc, #104]	; (8003ca0 <MX_TIM2_Init+0x98>)
 8003c36:	2200      	movs	r2, #0
 8003c38:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2000 - 1;
 8003c3a:	4b19      	ldr	r3, [pc, #100]	; (8003ca0 <MX_TIM2_Init+0x98>)
 8003c3c:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8003c40:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003c42:	4b17      	ldr	r3, [pc, #92]	; (8003ca0 <MX_TIM2_Init+0x98>)
 8003c44:	2200      	movs	r2, #0
 8003c46:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003c48:	4b15      	ldr	r3, [pc, #84]	; (8003ca0 <MX_TIM2_Init+0x98>)
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003c4e:	4814      	ldr	r0, [pc, #80]	; (8003ca0 <MX_TIM2_Init+0x98>)
 8003c50:	f007 fc19 	bl	800b486 <HAL_TIM_Base_Init>
 8003c54:	4603      	mov	r3, r0
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d001      	beq.n	8003c5e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8003c5a:	f7ff fb7d 	bl	8003358 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003c5e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003c62:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003c64:	f107 0308 	add.w	r3, r7, #8
 8003c68:	4619      	mov	r1, r3
 8003c6a:	480d      	ldr	r0, [pc, #52]	; (8003ca0 <MX_TIM2_Init+0x98>)
 8003c6c:	f007 fe01 	bl	800b872 <HAL_TIM_ConfigClockSource>
 8003c70:	4603      	mov	r3, r0
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d001      	beq.n	8003c7a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8003c76:	f7ff fb6f 	bl	8003358 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003c7e:	2300      	movs	r3, #0
 8003c80:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003c82:	463b      	mov	r3, r7
 8003c84:	4619      	mov	r1, r3
 8003c86:	4806      	ldr	r0, [pc, #24]	; (8003ca0 <MX_TIM2_Init+0x98>)
 8003c88:	f008 f81c 	bl	800bcc4 <HAL_TIMEx_MasterConfigSynchronization>
 8003c8c:	4603      	mov	r3, r0
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d001      	beq.n	8003c96 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8003c92:	f7ff fb61 	bl	8003358 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003c96:	bf00      	nop
 8003c98:	3718      	adds	r7, #24
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	bd80      	pop	{r7, pc}
 8003c9e:	bf00      	nop
 8003ca0:	20011618 	.word	0x20011618

08003ca4 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b086      	sub	sp, #24
 8003ca8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003caa:	f107 0308 	add.w	r3, r7, #8
 8003cae:	2200      	movs	r2, #0
 8003cb0:	601a      	str	r2, [r3, #0]
 8003cb2:	605a      	str	r2, [r3, #4]
 8003cb4:	609a      	str	r2, [r3, #8]
 8003cb6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003cb8:	463b      	mov	r3, r7
 8003cba:	2200      	movs	r2, #0
 8003cbc:	601a      	str	r2, [r3, #0]
 8003cbe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003cc0:	4b1d      	ldr	r3, [pc, #116]	; (8003d38 <MX_TIM3_Init+0x94>)
 8003cc2:	4a1e      	ldr	r2, [pc, #120]	; (8003d3c <MX_TIM3_Init+0x98>)
 8003cc4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 8400 - 1;
 8003cc6:	4b1c      	ldr	r3, [pc, #112]	; (8003d38 <MX_TIM3_Init+0x94>)
 8003cc8:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8003ccc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003cce:	4b1a      	ldr	r3, [pc, #104]	; (8003d38 <MX_TIM3_Init+0x94>)
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000 - 1;
 8003cd4:	4b18      	ldr	r3, [pc, #96]	; (8003d38 <MX_TIM3_Init+0x94>)
 8003cd6:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003cda:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003cdc:	4b16      	ldr	r3, [pc, #88]	; (8003d38 <MX_TIM3_Init+0x94>)
 8003cde:	2200      	movs	r2, #0
 8003ce0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003ce2:	4b15      	ldr	r3, [pc, #84]	; (8003d38 <MX_TIM3_Init+0x94>)
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003ce8:	4813      	ldr	r0, [pc, #76]	; (8003d38 <MX_TIM3_Init+0x94>)
 8003cea:	f007 fbcc 	bl	800b486 <HAL_TIM_Base_Init>
 8003cee:	4603      	mov	r3, r0
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d001      	beq.n	8003cf8 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8003cf4:	f7ff fb30 	bl	8003358 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003cf8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003cfc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003cfe:	f107 0308 	add.w	r3, r7, #8
 8003d02:	4619      	mov	r1, r3
 8003d04:	480c      	ldr	r0, [pc, #48]	; (8003d38 <MX_TIM3_Init+0x94>)
 8003d06:	f007 fdb4 	bl	800b872 <HAL_TIM_ConfigClockSource>
 8003d0a:	4603      	mov	r3, r0
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d001      	beq.n	8003d14 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8003d10:	f7ff fb22 	bl	8003358 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003d14:	2300      	movs	r3, #0
 8003d16:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003d18:	2300      	movs	r3, #0
 8003d1a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003d1c:	463b      	mov	r3, r7
 8003d1e:	4619      	mov	r1, r3
 8003d20:	4805      	ldr	r0, [pc, #20]	; (8003d38 <MX_TIM3_Init+0x94>)
 8003d22:	f007 ffcf 	bl	800bcc4 <HAL_TIMEx_MasterConfigSynchronization>
 8003d26:	4603      	mov	r3, r0
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d001      	beq.n	8003d30 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8003d2c:	f7ff fb14 	bl	8003358 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8003d30:	bf00      	nop
 8003d32:	3718      	adds	r7, #24
 8003d34:	46bd      	mov	sp, r7
 8003d36:	bd80      	pop	{r7, pc}
 8003d38:	20011660 	.word	0x20011660
 8003d3c:	40000400 	.word	0x40000400

08003d40 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b086      	sub	sp, #24
 8003d44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003d46:	f107 0308 	add.w	r3, r7, #8
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	601a      	str	r2, [r3, #0]
 8003d4e:	605a      	str	r2, [r3, #4]
 8003d50:	609a      	str	r2, [r3, #8]
 8003d52:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003d54:	463b      	mov	r3, r7
 8003d56:	2200      	movs	r2, #0
 8003d58:	601a      	str	r2, [r3, #0]
 8003d5a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003d5c:	4b1d      	ldr	r3, [pc, #116]	; (8003dd4 <MX_TIM4_Init+0x94>)
 8003d5e:	4a1e      	ldr	r2, [pc, #120]	; (8003dd8 <MX_TIM4_Init+0x98>)
 8003d60:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 8400 - 1;
 8003d62:	4b1c      	ldr	r3, [pc, #112]	; (8003dd4 <MX_TIM4_Init+0x94>)
 8003d64:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8003d68:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003d6a:	4b1a      	ldr	r3, [pc, #104]	; (8003dd4 <MX_TIM4_Init+0x94>)
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 50000 - 1;
 8003d70:	4b18      	ldr	r3, [pc, #96]	; (8003dd4 <MX_TIM4_Init+0x94>)
 8003d72:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8003d76:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003d78:	4b16      	ldr	r3, [pc, #88]	; (8003dd4 <MX_TIM4_Init+0x94>)
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003d7e:	4b15      	ldr	r3, [pc, #84]	; (8003dd4 <MX_TIM4_Init+0x94>)
 8003d80:	2200      	movs	r2, #0
 8003d82:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8003d84:	4813      	ldr	r0, [pc, #76]	; (8003dd4 <MX_TIM4_Init+0x94>)
 8003d86:	f007 fb7e 	bl	800b486 <HAL_TIM_Base_Init>
 8003d8a:	4603      	mov	r3, r0
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d001      	beq.n	8003d94 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8003d90:	f7ff fae2 	bl	8003358 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003d94:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003d98:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8003d9a:	f107 0308 	add.w	r3, r7, #8
 8003d9e:	4619      	mov	r1, r3
 8003da0:	480c      	ldr	r0, [pc, #48]	; (8003dd4 <MX_TIM4_Init+0x94>)
 8003da2:	f007 fd66 	bl	800b872 <HAL_TIM_ConfigClockSource>
 8003da6:	4603      	mov	r3, r0
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d001      	beq.n	8003db0 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8003dac:	f7ff fad4 	bl	8003358 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003db0:	2300      	movs	r3, #0
 8003db2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003db4:	2300      	movs	r3, #0
 8003db6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003db8:	463b      	mov	r3, r7
 8003dba:	4619      	mov	r1, r3
 8003dbc:	4805      	ldr	r0, [pc, #20]	; (8003dd4 <MX_TIM4_Init+0x94>)
 8003dbe:	f007 ff81 	bl	800bcc4 <HAL_TIMEx_MasterConfigSynchronization>
 8003dc2:	4603      	mov	r3, r0
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d001      	beq.n	8003dcc <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8003dc8:	f7ff fac6 	bl	8003358 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8003dcc:	bf00      	nop
 8003dce:	3718      	adds	r7, #24
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	bd80      	pop	{r7, pc}
 8003dd4:	200116a8 	.word	0x200116a8
 8003dd8:	40000800 	.word	0x40000800

08003ddc <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b084      	sub	sp, #16
 8003de0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003de2:	463b      	mov	r3, r7
 8003de4:	2200      	movs	r2, #0
 8003de6:	601a      	str	r2, [r3, #0]
 8003de8:	605a      	str	r2, [r3, #4]
 8003dea:	609a      	str	r2, [r3, #8]
 8003dec:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8003dee:	4b16      	ldr	r3, [pc, #88]	; (8003e48 <MX_TIM12_Init+0x6c>)
 8003df0:	4a16      	ldr	r2, [pc, #88]	; (8003e4c <MX_TIM12_Init+0x70>)
 8003df2:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 8400 - 1;
 8003df4:	4b14      	ldr	r3, [pc, #80]	; (8003e48 <MX_TIM12_Init+0x6c>)
 8003df6:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8003dfa:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003dfc:	4b12      	ldr	r3, [pc, #72]	; (8003e48 <MX_TIM12_Init+0x6c>)
 8003dfe:	2200      	movs	r2, #0
 8003e00:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 2000 - 1;
 8003e02:	4b11      	ldr	r3, [pc, #68]	; (8003e48 <MX_TIM12_Init+0x6c>)
 8003e04:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8003e08:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003e0a:	4b0f      	ldr	r3, [pc, #60]	; (8003e48 <MX_TIM12_Init+0x6c>)
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003e10:	4b0d      	ldr	r3, [pc, #52]	; (8003e48 <MX_TIM12_Init+0x6c>)
 8003e12:	2200      	movs	r2, #0
 8003e14:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8003e16:	480c      	ldr	r0, [pc, #48]	; (8003e48 <MX_TIM12_Init+0x6c>)
 8003e18:	f007 fb35 	bl	800b486 <HAL_TIM_Base_Init>
 8003e1c:	4603      	mov	r3, r0
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d001      	beq.n	8003e26 <MX_TIM12_Init+0x4a>
  {
    Error_Handler();
 8003e22:	f7ff fa99 	bl	8003358 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003e26:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003e2a:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 8003e2c:	463b      	mov	r3, r7
 8003e2e:	4619      	mov	r1, r3
 8003e30:	4805      	ldr	r0, [pc, #20]	; (8003e48 <MX_TIM12_Init+0x6c>)
 8003e32:	f007 fd1e 	bl	800b872 <HAL_TIM_ConfigClockSource>
 8003e36:	4603      	mov	r3, r0
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d001      	beq.n	8003e40 <MX_TIM12_Init+0x64>
  {
    Error_Handler();
 8003e3c:	f7ff fa8c 	bl	8003358 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */

}
 8003e40:	bf00      	nop
 8003e42:	3710      	adds	r7, #16
 8003e44:	46bd      	mov	sp, r7
 8003e46:	bd80      	pop	{r7, pc}
 8003e48:	200116f0 	.word	0x200116f0
 8003e4c:	40001800 	.word	0x40001800

08003e50 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b086      	sub	sp, #24
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e60:	d116      	bne.n	8003e90 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003e62:	2300      	movs	r3, #0
 8003e64:	617b      	str	r3, [r7, #20]
 8003e66:	4b36      	ldr	r3, [pc, #216]	; (8003f40 <HAL_TIM_Base_MspInit+0xf0>)
 8003e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e6a:	4a35      	ldr	r2, [pc, #212]	; (8003f40 <HAL_TIM_Base_MspInit+0xf0>)
 8003e6c:	f043 0301 	orr.w	r3, r3, #1
 8003e70:	6413      	str	r3, [r2, #64]	; 0x40
 8003e72:	4b33      	ldr	r3, [pc, #204]	; (8003f40 <HAL_TIM_Base_MspInit+0xf0>)
 8003e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e76:	f003 0301 	and.w	r3, r3, #1
 8003e7a:	617b      	str	r3, [r7, #20]
 8003e7c:	697b      	ldr	r3, [r7, #20]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003e7e:	2200      	movs	r2, #0
 8003e80:	2100      	movs	r1, #0
 8003e82:	201c      	movs	r0, #28
 8003e84:	f001 fd59 	bl	800593a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003e88:	201c      	movs	r0, #28
 8003e8a:	f001 fd72 	bl	8005972 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }
}
 8003e8e:	e052      	b.n	8003f36 <HAL_TIM_Base_MspInit+0xe6>
  else if(tim_baseHandle->Instance==TIM3)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	4a2b      	ldr	r2, [pc, #172]	; (8003f44 <HAL_TIM_Base_MspInit+0xf4>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d116      	bne.n	8003ec8 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	613b      	str	r3, [r7, #16]
 8003e9e:	4b28      	ldr	r3, [pc, #160]	; (8003f40 <HAL_TIM_Base_MspInit+0xf0>)
 8003ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ea2:	4a27      	ldr	r2, [pc, #156]	; (8003f40 <HAL_TIM_Base_MspInit+0xf0>)
 8003ea4:	f043 0302 	orr.w	r3, r3, #2
 8003ea8:	6413      	str	r3, [r2, #64]	; 0x40
 8003eaa:	4b25      	ldr	r3, [pc, #148]	; (8003f40 <HAL_TIM_Base_MspInit+0xf0>)
 8003eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eae:	f003 0302 	and.w	r3, r3, #2
 8003eb2:	613b      	str	r3, [r7, #16]
 8003eb4:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	2100      	movs	r1, #0
 8003eba:	201d      	movs	r0, #29
 8003ebc:	f001 fd3d 	bl	800593a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003ec0:	201d      	movs	r0, #29
 8003ec2:	f001 fd56 	bl	8005972 <HAL_NVIC_EnableIRQ>
}
 8003ec6:	e036      	b.n	8003f36 <HAL_TIM_Base_MspInit+0xe6>
  else if(tim_baseHandle->Instance==TIM4)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	4a1e      	ldr	r2, [pc, #120]	; (8003f48 <HAL_TIM_Base_MspInit+0xf8>)
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d116      	bne.n	8003f00 <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	60fb      	str	r3, [r7, #12]
 8003ed6:	4b1a      	ldr	r3, [pc, #104]	; (8003f40 <HAL_TIM_Base_MspInit+0xf0>)
 8003ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eda:	4a19      	ldr	r2, [pc, #100]	; (8003f40 <HAL_TIM_Base_MspInit+0xf0>)
 8003edc:	f043 0304 	orr.w	r3, r3, #4
 8003ee0:	6413      	str	r3, [r2, #64]	; 0x40
 8003ee2:	4b17      	ldr	r3, [pc, #92]	; (8003f40 <HAL_TIM_Base_MspInit+0xf0>)
 8003ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ee6:	f003 0304 	and.w	r3, r3, #4
 8003eea:	60fb      	str	r3, [r7, #12]
 8003eec:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8003eee:	2200      	movs	r2, #0
 8003ef0:	2100      	movs	r1, #0
 8003ef2:	201e      	movs	r0, #30
 8003ef4:	f001 fd21 	bl	800593a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003ef8:	201e      	movs	r0, #30
 8003efa:	f001 fd3a 	bl	8005972 <HAL_NVIC_EnableIRQ>
}
 8003efe:	e01a      	b.n	8003f36 <HAL_TIM_Base_MspInit+0xe6>
  else if(tim_baseHandle->Instance==TIM12)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	4a11      	ldr	r2, [pc, #68]	; (8003f4c <HAL_TIM_Base_MspInit+0xfc>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d115      	bne.n	8003f36 <HAL_TIM_Base_MspInit+0xe6>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	60bb      	str	r3, [r7, #8]
 8003f0e:	4b0c      	ldr	r3, [pc, #48]	; (8003f40 <HAL_TIM_Base_MspInit+0xf0>)
 8003f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f12:	4a0b      	ldr	r2, [pc, #44]	; (8003f40 <HAL_TIM_Base_MspInit+0xf0>)
 8003f14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003f18:	6413      	str	r3, [r2, #64]	; 0x40
 8003f1a:	4b09      	ldr	r3, [pc, #36]	; (8003f40 <HAL_TIM_Base_MspInit+0xf0>)
 8003f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f22:	60bb      	str	r3, [r7, #8]
 8003f24:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 8003f26:	2200      	movs	r2, #0
 8003f28:	2100      	movs	r1, #0
 8003f2a:	202b      	movs	r0, #43	; 0x2b
 8003f2c:	f001 fd05 	bl	800593a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8003f30:	202b      	movs	r0, #43	; 0x2b
 8003f32:	f001 fd1e 	bl	8005972 <HAL_NVIC_EnableIRQ>
}
 8003f36:	bf00      	nop
 8003f38:	3718      	adds	r7, #24
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	bd80      	pop	{r7, pc}
 8003f3e:	bf00      	nop
 8003f40:	40023800 	.word	0x40023800
 8003f44:	40000400 	.word	0x40000400
 8003f48:	40000800 	.word	0x40000800
 8003f4c:	40001800 	.word	0x40001800

08003f50 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart6;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003f54:	4b11      	ldr	r3, [pc, #68]	; (8003f9c <MX_USART1_UART_Init+0x4c>)
 8003f56:	4a12      	ldr	r2, [pc, #72]	; (8003fa0 <MX_USART1_UART_Init+0x50>)
 8003f58:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003f5a:	4b10      	ldr	r3, [pc, #64]	; (8003f9c <MX_USART1_UART_Init+0x4c>)
 8003f5c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003f60:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003f62:	4b0e      	ldr	r3, [pc, #56]	; (8003f9c <MX_USART1_UART_Init+0x4c>)
 8003f64:	2200      	movs	r2, #0
 8003f66:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003f68:	4b0c      	ldr	r3, [pc, #48]	; (8003f9c <MX_USART1_UART_Init+0x4c>)
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003f6e:	4b0b      	ldr	r3, [pc, #44]	; (8003f9c <MX_USART1_UART_Init+0x4c>)
 8003f70:	2200      	movs	r2, #0
 8003f72:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003f74:	4b09      	ldr	r3, [pc, #36]	; (8003f9c <MX_USART1_UART_Init+0x4c>)
 8003f76:	220c      	movs	r2, #12
 8003f78:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003f7a:	4b08      	ldr	r3, [pc, #32]	; (8003f9c <MX_USART1_UART_Init+0x4c>)
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003f80:	4b06      	ldr	r3, [pc, #24]	; (8003f9c <MX_USART1_UART_Init+0x4c>)
 8003f82:	2200      	movs	r2, #0
 8003f84:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003f86:	4805      	ldr	r0, [pc, #20]	; (8003f9c <MX_USART1_UART_Init+0x4c>)
 8003f88:	f007 ff2c 	bl	800bde4 <HAL_UART_Init>
 8003f8c:	4603      	mov	r3, r0
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d001      	beq.n	8003f96 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8003f92:	f7ff f9e1 	bl	8003358 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003f96:	bf00      	nop
 8003f98:	bd80      	pop	{r7, pc}
 8003f9a:	bf00      	nop
 8003f9c:	20011738 	.word	0x20011738
 8003fa0:	40011000 	.word	0x40011000

08003fa4 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003fa8:	4b10      	ldr	r3, [pc, #64]	; (8003fec <MX_USART3_UART_Init+0x48>)
 8003faa:	4a11      	ldr	r2, [pc, #68]	; (8003ff0 <MX_USART3_UART_Init+0x4c>)
 8003fac:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 74880;
 8003fae:	4b0f      	ldr	r3, [pc, #60]	; (8003fec <MX_USART3_UART_Init+0x48>)
 8003fb0:	4a10      	ldr	r2, [pc, #64]	; (8003ff4 <MX_USART3_UART_Init+0x50>)
 8003fb2:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003fb4:	4b0d      	ldr	r3, [pc, #52]	; (8003fec <MX_USART3_UART_Init+0x48>)
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003fba:	4b0c      	ldr	r3, [pc, #48]	; (8003fec <MX_USART3_UART_Init+0x48>)
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8003fc0:	4b0a      	ldr	r3, [pc, #40]	; (8003fec <MX_USART3_UART_Init+0x48>)
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003fc6:	4b09      	ldr	r3, [pc, #36]	; (8003fec <MX_USART3_UART_Init+0x48>)
 8003fc8:	220c      	movs	r2, #12
 8003fca:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003fcc:	4b07      	ldr	r3, [pc, #28]	; (8003fec <MX_USART3_UART_Init+0x48>)
 8003fce:	2200      	movs	r2, #0
 8003fd0:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003fd2:	4b06      	ldr	r3, [pc, #24]	; (8003fec <MX_USART3_UART_Init+0x48>)
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8003fd8:	4804      	ldr	r0, [pc, #16]	; (8003fec <MX_USART3_UART_Init+0x48>)
 8003fda:	f007 ff03 	bl	800bde4 <HAL_UART_Init>
 8003fde:	4603      	mov	r3, r0
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d001      	beq.n	8003fe8 <MX_USART3_UART_Init+0x44>
  {
    Error_Handler();
 8003fe4:	f7ff f9b8 	bl	8003358 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8003fe8:	bf00      	nop
 8003fea:	bd80      	pop	{r7, pc}
 8003fec:	2001177c 	.word	0x2001177c
 8003ff0:	40004800 	.word	0x40004800
 8003ff4:	00012480 	.word	0x00012480

08003ff8 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8003ffc:	4b11      	ldr	r3, [pc, #68]	; (8004044 <MX_USART6_UART_Init+0x4c>)
 8003ffe:	4a12      	ldr	r2, [pc, #72]	; (8004048 <MX_USART6_UART_Init+0x50>)
 8004000:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8004002:	4b10      	ldr	r3, [pc, #64]	; (8004044 <MX_USART6_UART_Init+0x4c>)
 8004004:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8004008:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800400a:	4b0e      	ldr	r3, [pc, #56]	; (8004044 <MX_USART6_UART_Init+0x4c>)
 800400c:	2200      	movs	r2, #0
 800400e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8004010:	4b0c      	ldr	r3, [pc, #48]	; (8004044 <MX_USART6_UART_Init+0x4c>)
 8004012:	2200      	movs	r2, #0
 8004014:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8004016:	4b0b      	ldr	r3, [pc, #44]	; (8004044 <MX_USART6_UART_Init+0x4c>)
 8004018:	2200      	movs	r2, #0
 800401a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800401c:	4b09      	ldr	r3, [pc, #36]	; (8004044 <MX_USART6_UART_Init+0x4c>)
 800401e:	220c      	movs	r2, #12
 8004020:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004022:	4b08      	ldr	r3, [pc, #32]	; (8004044 <MX_USART6_UART_Init+0x4c>)
 8004024:	2200      	movs	r2, #0
 8004026:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8004028:	4b06      	ldr	r3, [pc, #24]	; (8004044 <MX_USART6_UART_Init+0x4c>)
 800402a:	2200      	movs	r2, #0
 800402c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800402e:	4805      	ldr	r0, [pc, #20]	; (8004044 <MX_USART6_UART_Init+0x4c>)
 8004030:	f007 fed8 	bl	800bde4 <HAL_UART_Init>
 8004034:	4603      	mov	r3, r0
 8004036:	2b00      	cmp	r3, #0
 8004038:	d001      	beq.n	800403e <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800403a:	f7ff f98d 	bl	8003358 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800403e:	bf00      	nop
 8004040:	bd80      	pop	{r7, pc}
 8004042:	bf00      	nop
 8004044:	200117c0 	.word	0x200117c0
 8004048:	40011400 	.word	0x40011400

0800404c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800404c:	b580      	push	{r7, lr}
 800404e:	b08e      	sub	sp, #56	; 0x38
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004054:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004058:	2200      	movs	r2, #0
 800405a:	601a      	str	r2, [r3, #0]
 800405c:	605a      	str	r2, [r3, #4]
 800405e:	609a      	str	r2, [r3, #8]
 8004060:	60da      	str	r2, [r3, #12]
 8004062:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	4a54      	ldr	r2, [pc, #336]	; (80041bc <HAL_UART_MspInit+0x170>)
 800406a:	4293      	cmp	r3, r2
 800406c:	d12d      	bne.n	80040ca <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800406e:	2300      	movs	r3, #0
 8004070:	623b      	str	r3, [r7, #32]
 8004072:	4b53      	ldr	r3, [pc, #332]	; (80041c0 <HAL_UART_MspInit+0x174>)
 8004074:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004076:	4a52      	ldr	r2, [pc, #328]	; (80041c0 <HAL_UART_MspInit+0x174>)
 8004078:	f043 0310 	orr.w	r3, r3, #16
 800407c:	6453      	str	r3, [r2, #68]	; 0x44
 800407e:	4b50      	ldr	r3, [pc, #320]	; (80041c0 <HAL_UART_MspInit+0x174>)
 8004080:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004082:	f003 0310 	and.w	r3, r3, #16
 8004086:	623b      	str	r3, [r7, #32]
 8004088:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800408a:	2300      	movs	r3, #0
 800408c:	61fb      	str	r3, [r7, #28]
 800408e:	4b4c      	ldr	r3, [pc, #304]	; (80041c0 <HAL_UART_MspInit+0x174>)
 8004090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004092:	4a4b      	ldr	r2, [pc, #300]	; (80041c0 <HAL_UART_MspInit+0x174>)
 8004094:	f043 0301 	orr.w	r3, r3, #1
 8004098:	6313      	str	r3, [r2, #48]	; 0x30
 800409a:	4b49      	ldr	r3, [pc, #292]	; (80041c0 <HAL_UART_MspInit+0x174>)
 800409c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800409e:	f003 0301 	and.w	r3, r3, #1
 80040a2:	61fb      	str	r3, [r7, #28]
 80040a4:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80040a6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80040aa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040ac:	2302      	movs	r3, #2
 80040ae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040b0:	2300      	movs	r3, #0
 80040b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80040b4:	2303      	movs	r3, #3
 80040b6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80040b8:	2307      	movs	r3, #7
 80040ba:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80040bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80040c0:	4619      	mov	r1, r3
 80040c2:	4840      	ldr	r0, [pc, #256]	; (80041c4 <HAL_UART_MspInit+0x178>)
 80040c4:	f002 f898 	bl	80061f8 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 80040c8:	e073      	b.n	80041b2 <HAL_UART_MspInit+0x166>
  else if(uartHandle->Instance==USART3)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	4a3e      	ldr	r2, [pc, #248]	; (80041c8 <HAL_UART_MspInit+0x17c>)
 80040d0:	4293      	cmp	r3, r2
 80040d2:	d135      	bne.n	8004140 <HAL_UART_MspInit+0xf4>
    __HAL_RCC_USART3_CLK_ENABLE();
 80040d4:	2300      	movs	r3, #0
 80040d6:	61bb      	str	r3, [r7, #24]
 80040d8:	4b39      	ldr	r3, [pc, #228]	; (80041c0 <HAL_UART_MspInit+0x174>)
 80040da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040dc:	4a38      	ldr	r2, [pc, #224]	; (80041c0 <HAL_UART_MspInit+0x174>)
 80040de:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80040e2:	6413      	str	r3, [r2, #64]	; 0x40
 80040e4:	4b36      	ldr	r3, [pc, #216]	; (80041c0 <HAL_UART_MspInit+0x174>)
 80040e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040e8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80040ec:	61bb      	str	r3, [r7, #24]
 80040ee:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80040f0:	2300      	movs	r3, #0
 80040f2:	617b      	str	r3, [r7, #20]
 80040f4:	4b32      	ldr	r3, [pc, #200]	; (80041c0 <HAL_UART_MspInit+0x174>)
 80040f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040f8:	4a31      	ldr	r2, [pc, #196]	; (80041c0 <HAL_UART_MspInit+0x174>)
 80040fa:	f043 0308 	orr.w	r3, r3, #8
 80040fe:	6313      	str	r3, [r2, #48]	; 0x30
 8004100:	4b2f      	ldr	r3, [pc, #188]	; (80041c0 <HAL_UART_MspInit+0x174>)
 8004102:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004104:	f003 0308 	and.w	r3, r3, #8
 8004108:	617b      	str	r3, [r7, #20]
 800410a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800410c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004110:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004112:	2302      	movs	r3, #2
 8004114:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004116:	2300      	movs	r3, #0
 8004118:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800411a:	2303      	movs	r3, #3
 800411c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800411e:	2307      	movs	r3, #7
 8004120:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004122:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004126:	4619      	mov	r1, r3
 8004128:	4828      	ldr	r0, [pc, #160]	; (80041cc <HAL_UART_MspInit+0x180>)
 800412a:	f002 f865 	bl	80061f8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800412e:	2200      	movs	r2, #0
 8004130:	2100      	movs	r1, #0
 8004132:	2027      	movs	r0, #39	; 0x27
 8004134:	f001 fc01 	bl	800593a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8004138:	2027      	movs	r0, #39	; 0x27
 800413a:	f001 fc1a 	bl	8005972 <HAL_NVIC_EnableIRQ>
}
 800413e:	e038      	b.n	80041b2 <HAL_UART_MspInit+0x166>
  else if(uartHandle->Instance==USART6)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	4a22      	ldr	r2, [pc, #136]	; (80041d0 <HAL_UART_MspInit+0x184>)
 8004146:	4293      	cmp	r3, r2
 8004148:	d133      	bne.n	80041b2 <HAL_UART_MspInit+0x166>
    __HAL_RCC_USART6_CLK_ENABLE();
 800414a:	2300      	movs	r3, #0
 800414c:	613b      	str	r3, [r7, #16]
 800414e:	4b1c      	ldr	r3, [pc, #112]	; (80041c0 <HAL_UART_MspInit+0x174>)
 8004150:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004152:	4a1b      	ldr	r2, [pc, #108]	; (80041c0 <HAL_UART_MspInit+0x174>)
 8004154:	f043 0320 	orr.w	r3, r3, #32
 8004158:	6453      	str	r3, [r2, #68]	; 0x44
 800415a:	4b19      	ldr	r3, [pc, #100]	; (80041c0 <HAL_UART_MspInit+0x174>)
 800415c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800415e:	f003 0320 	and.w	r3, r3, #32
 8004162:	613b      	str	r3, [r7, #16]
 8004164:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004166:	2300      	movs	r3, #0
 8004168:	60fb      	str	r3, [r7, #12]
 800416a:	4b15      	ldr	r3, [pc, #84]	; (80041c0 <HAL_UART_MspInit+0x174>)
 800416c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800416e:	4a14      	ldr	r2, [pc, #80]	; (80041c0 <HAL_UART_MspInit+0x174>)
 8004170:	f043 0304 	orr.w	r3, r3, #4
 8004174:	6313      	str	r3, [r2, #48]	; 0x30
 8004176:	4b12      	ldr	r3, [pc, #72]	; (80041c0 <HAL_UART_MspInit+0x174>)
 8004178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800417a:	f003 0304 	and.w	r3, r3, #4
 800417e:	60fb      	str	r3, [r7, #12]
 8004180:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004182:	23c0      	movs	r3, #192	; 0xc0
 8004184:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004186:	2302      	movs	r3, #2
 8004188:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800418a:	2300      	movs	r3, #0
 800418c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800418e:	2303      	movs	r3, #3
 8004190:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8004192:	2308      	movs	r3, #8
 8004194:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004196:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800419a:	4619      	mov	r1, r3
 800419c:	480d      	ldr	r0, [pc, #52]	; (80041d4 <HAL_UART_MspInit+0x188>)
 800419e:	f002 f82b 	bl	80061f8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 80041a2:	2200      	movs	r2, #0
 80041a4:	2100      	movs	r1, #0
 80041a6:	2047      	movs	r0, #71	; 0x47
 80041a8:	f001 fbc7 	bl	800593a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80041ac:	2047      	movs	r0, #71	; 0x47
 80041ae:	f001 fbe0 	bl	8005972 <HAL_NVIC_EnableIRQ>
}
 80041b2:	bf00      	nop
 80041b4:	3738      	adds	r7, #56	; 0x38
 80041b6:	46bd      	mov	sp, r7
 80041b8:	bd80      	pop	{r7, pc}
 80041ba:	bf00      	nop
 80041bc:	40011000 	.word	0x40011000
 80041c0:	40023800 	.word	0x40023800
 80041c4:	40020000 	.word	0x40020000
 80041c8:	40004800 	.word	0x40004800
 80041cc:	40020c00 	.word	0x40020c00
 80041d0:	40011400 	.word	0x40011400
 80041d4:	40020800 	.word	0x40020800

080041d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80041d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004210 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80041dc:	480d      	ldr	r0, [pc, #52]	; (8004214 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80041de:	490e      	ldr	r1, [pc, #56]	; (8004218 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80041e0:	4a0e      	ldr	r2, [pc, #56]	; (800421c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80041e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80041e4:	e002      	b.n	80041ec <LoopCopyDataInit>

080041e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80041e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80041e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80041ea:	3304      	adds	r3, #4

080041ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80041ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80041ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80041f0:	d3f9      	bcc.n	80041e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80041f2:	4a0b      	ldr	r2, [pc, #44]	; (8004220 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80041f4:	4c0b      	ldr	r4, [pc, #44]	; (8004224 <LoopFillZerobss+0x26>)
  movs r3, #0
 80041f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80041f8:	e001      	b.n	80041fe <LoopFillZerobss>

080041fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80041fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80041fc:	3204      	adds	r2, #4

080041fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80041fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004200:	d3fb      	bcc.n	80041fa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004202:	f7ff fcef 	bl	8003be4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004206:	f00c fcdb 	bl	8010bc0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800420a:	f7fe ff4d 	bl	80030a8 <main>
  bx  lr    
 800420e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8004210:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004214:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004218:	20000128 	.word	0x20000128
  ldr r2, =_sidata
 800421c:	08012d1c 	.word	0x08012d1c
  ldr r2, =_sbss
 8004220:	20000128 	.word	0x20000128
  ldr r4, =_ebss
 8004224:	20011a54 	.word	0x20011a54

08004228 <CAN1_RX1_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004228:	e7fe      	b.n	8004228 <CAN1_RX1_IRQHandler>
	...

0800422c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800422c:	b580      	push	{r7, lr}
 800422e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004230:	4b0e      	ldr	r3, [pc, #56]	; (800426c <HAL_Init+0x40>)
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	4a0d      	ldr	r2, [pc, #52]	; (800426c <HAL_Init+0x40>)
 8004236:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800423a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800423c:	4b0b      	ldr	r3, [pc, #44]	; (800426c <HAL_Init+0x40>)
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	4a0a      	ldr	r2, [pc, #40]	; (800426c <HAL_Init+0x40>)
 8004242:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004246:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004248:	4b08      	ldr	r3, [pc, #32]	; (800426c <HAL_Init+0x40>)
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	4a07      	ldr	r2, [pc, #28]	; (800426c <HAL_Init+0x40>)
 800424e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004252:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004254:	2003      	movs	r0, #3
 8004256:	f001 fb65 	bl	8005924 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800425a:	2000      	movs	r0, #0
 800425c:	f000 f808 	bl	8004270 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004260:	f7ff fb44 	bl	80038ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004264:	2300      	movs	r3, #0
}
 8004266:	4618      	mov	r0, r3
 8004268:	bd80      	pop	{r7, pc}
 800426a:	bf00      	nop
 800426c:	40023c00 	.word	0x40023c00

08004270 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004270:	b580      	push	{r7, lr}
 8004272:	b082      	sub	sp, #8
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004278:	4b12      	ldr	r3, [pc, #72]	; (80042c4 <HAL_InitTick+0x54>)
 800427a:	681a      	ldr	r2, [r3, #0]
 800427c:	4b12      	ldr	r3, [pc, #72]	; (80042c8 <HAL_InitTick+0x58>)
 800427e:	781b      	ldrb	r3, [r3, #0]
 8004280:	4619      	mov	r1, r3
 8004282:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004286:	fbb3 f3f1 	udiv	r3, r3, r1
 800428a:	fbb2 f3f3 	udiv	r3, r2, r3
 800428e:	4618      	mov	r0, r3
 8004290:	f001 fb7d 	bl	800598e <HAL_SYSTICK_Config>
 8004294:	4603      	mov	r3, r0
 8004296:	2b00      	cmp	r3, #0
 8004298:	d001      	beq.n	800429e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800429a:	2301      	movs	r3, #1
 800429c:	e00e      	b.n	80042bc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	2b0f      	cmp	r3, #15
 80042a2:	d80a      	bhi.n	80042ba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80042a4:	2200      	movs	r2, #0
 80042a6:	6879      	ldr	r1, [r7, #4]
 80042a8:	f04f 30ff 	mov.w	r0, #4294967295
 80042ac:	f001 fb45 	bl	800593a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80042b0:	4a06      	ldr	r2, [pc, #24]	; (80042cc <HAL_InitTick+0x5c>)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80042b6:	2300      	movs	r3, #0
 80042b8:	e000      	b.n	80042bc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80042ba:	2301      	movs	r3, #1
}
 80042bc:	4618      	mov	r0, r3
 80042be:	3708      	adds	r7, #8
 80042c0:	46bd      	mov	sp, r7
 80042c2:	bd80      	pop	{r7, pc}
 80042c4:	200000b8 	.word	0x200000b8
 80042c8:	200000c0 	.word	0x200000c0
 80042cc:	200000bc 	.word	0x200000bc

080042d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80042d0:	b480      	push	{r7}
 80042d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80042d4:	4b06      	ldr	r3, [pc, #24]	; (80042f0 <HAL_IncTick+0x20>)
 80042d6:	781b      	ldrb	r3, [r3, #0]
 80042d8:	461a      	mov	r2, r3
 80042da:	4b06      	ldr	r3, [pc, #24]	; (80042f4 <HAL_IncTick+0x24>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	4413      	add	r3, r2
 80042e0:	4a04      	ldr	r2, [pc, #16]	; (80042f4 <HAL_IncTick+0x24>)
 80042e2:	6013      	str	r3, [r2, #0]
}
 80042e4:	bf00      	nop
 80042e6:	46bd      	mov	sp, r7
 80042e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ec:	4770      	bx	lr
 80042ee:	bf00      	nop
 80042f0:	200000c0 	.word	0x200000c0
 80042f4:	20011804 	.word	0x20011804

080042f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80042f8:	b480      	push	{r7}
 80042fa:	af00      	add	r7, sp, #0
  return uwTick;
 80042fc:	4b03      	ldr	r3, [pc, #12]	; (800430c <HAL_GetTick+0x14>)
 80042fe:	681b      	ldr	r3, [r3, #0]
}
 8004300:	4618      	mov	r0, r3
 8004302:	46bd      	mov	sp, r7
 8004304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004308:	4770      	bx	lr
 800430a:	bf00      	nop
 800430c:	20011804 	.word	0x20011804

08004310 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b084      	sub	sp, #16
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004318:	f7ff ffee 	bl	80042f8 <HAL_GetTick>
 800431c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004328:	d005      	beq.n	8004336 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800432a:	4b0a      	ldr	r3, [pc, #40]	; (8004354 <HAL_Delay+0x44>)
 800432c:	781b      	ldrb	r3, [r3, #0]
 800432e:	461a      	mov	r2, r3
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	4413      	add	r3, r2
 8004334:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004336:	bf00      	nop
 8004338:	f7ff ffde 	bl	80042f8 <HAL_GetTick>
 800433c:	4602      	mov	r2, r0
 800433e:	68bb      	ldr	r3, [r7, #8]
 8004340:	1ad3      	subs	r3, r2, r3
 8004342:	68fa      	ldr	r2, [r7, #12]
 8004344:	429a      	cmp	r2, r3
 8004346:	d8f7      	bhi.n	8004338 <HAL_Delay+0x28>
  {
  }
}
 8004348:	bf00      	nop
 800434a:	bf00      	nop
 800434c:	3710      	adds	r7, #16
 800434e:	46bd      	mov	sp, r7
 8004350:	bd80      	pop	{r7, pc}
 8004352:	bf00      	nop
 8004354:	200000c0 	.word	0x200000c0

08004358 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004358:	b580      	push	{r7, lr}
 800435a:	b084      	sub	sp, #16
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004360:	2300      	movs	r3, #0
 8004362:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2b00      	cmp	r3, #0
 8004368:	d101      	bne.n	800436e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800436a:	2301      	movs	r3, #1
 800436c:	e033      	b.n	80043d6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004372:	2b00      	cmp	r3, #0
 8004374:	d109      	bne.n	800438a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004376:	6878      	ldr	r0, [r7, #4]
 8004378:	f7fc fe7a 	bl	8001070 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2200      	movs	r2, #0
 8004380:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	2200      	movs	r2, #0
 8004386:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800438e:	f003 0310 	and.w	r3, r3, #16
 8004392:	2b00      	cmp	r3, #0
 8004394:	d118      	bne.n	80043c8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800439a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800439e:	f023 0302 	bic.w	r3, r3, #2
 80043a2:	f043 0202 	orr.w	r2, r3, #2
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80043aa:	6878      	ldr	r0, [r7, #4]
 80043ac:	f000 fb4a 	bl	8004a44 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2200      	movs	r2, #0
 80043b4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ba:	f023 0303 	bic.w	r3, r3, #3
 80043be:	f043 0201 	orr.w	r2, r3, #1
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	641a      	str	r2, [r3, #64]	; 0x40
 80043c6:	e001      	b.n	80043cc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80043c8:	2301      	movs	r3, #1
 80043ca:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2200      	movs	r2, #0
 80043d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80043d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80043d6:	4618      	mov	r0, r3
 80043d8:	3710      	adds	r7, #16
 80043da:	46bd      	mov	sp, r7
 80043dc:	bd80      	pop	{r7, pc}
	...

080043e0 <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 80043e0:	b480      	push	{r7}
 80043e2:	b085      	sub	sp, #20
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80043e8:	2300      	movs	r3, #0
 80043ea:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80043f2:	2b01      	cmp	r3, #1
 80043f4:	d101      	bne.n	80043fa <HAL_ADC_Start_IT+0x1a>
 80043f6:	2302      	movs	r3, #2
 80043f8:	e0bd      	b.n	8004576 <HAL_ADC_Start_IT+0x196>
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	2201      	movs	r2, #1
 80043fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	689b      	ldr	r3, [r3, #8]
 8004408:	f003 0301 	and.w	r3, r3, #1
 800440c:	2b01      	cmp	r3, #1
 800440e:	d018      	beq.n	8004442 <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	689a      	ldr	r2, [r3, #8]
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f042 0201 	orr.w	r2, r2, #1
 800441e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004420:	4b58      	ldr	r3, [pc, #352]	; (8004584 <HAL_ADC_Start_IT+0x1a4>)
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	4a58      	ldr	r2, [pc, #352]	; (8004588 <HAL_ADC_Start_IT+0x1a8>)
 8004426:	fba2 2303 	umull	r2, r3, r2, r3
 800442a:	0c9a      	lsrs	r2, r3, #18
 800442c:	4613      	mov	r3, r2
 800442e:	005b      	lsls	r3, r3, #1
 8004430:	4413      	add	r3, r2
 8004432:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8004434:	e002      	b.n	800443c <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 8004436:	68bb      	ldr	r3, [r7, #8]
 8004438:	3b01      	subs	r3, #1
 800443a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800443c:	68bb      	ldr	r3, [r7, #8]
 800443e:	2b00      	cmp	r3, #0
 8004440:	d1f9      	bne.n	8004436 <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	689b      	ldr	r3, [r3, #8]
 8004448:	f003 0301 	and.w	r3, r3, #1
 800444c:	2b01      	cmp	r3, #1
 800444e:	f040 8085 	bne.w	800455c <HAL_ADC_Start_IT+0x17c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004456:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800445a:	f023 0301 	bic.w	r3, r3, #1
 800445e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	685b      	ldr	r3, [r3, #4]
 800446c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004470:	2b00      	cmp	r3, #0
 8004472:	d007      	beq.n	8004484 <HAL_ADC_Start_IT+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004478:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800447c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004488:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800448c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004490:	d106      	bne.n	80044a0 <HAL_ADC_Start_IT+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004496:	f023 0206 	bic.w	r2, r3, #6
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	645a      	str	r2, [r3, #68]	; 0x44
 800449e:	e002      	b.n	80044a6 <HAL_ADC_Start_IT+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2200      	movs	r2, #0
 80044a4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	2200      	movs	r2, #0
 80044aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80044ae:	4b37      	ldr	r3, [pc, #220]	; (800458c <HAL_ADC_Start_IT+0x1ac>)
 80044b0:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80044ba:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	685b      	ldr	r3, [r3, #4]
 80044c2:	687a      	ldr	r2, [r7, #4]
 80044c4:	6812      	ldr	r2, [r2, #0]
 80044c6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80044ca:	f043 0320 	orr.w	r3, r3, #32
 80044ce:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	685b      	ldr	r3, [r3, #4]
 80044d4:	f003 031f 	and.w	r3, r3, #31
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d12a      	bne.n	8004532 <HAL_ADC_Start_IT+0x152>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	4a2b      	ldr	r2, [pc, #172]	; (8004590 <HAL_ADC_Start_IT+0x1b0>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d015      	beq.n	8004512 <HAL_ADC_Start_IT+0x132>
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	4a2a      	ldr	r2, [pc, #168]	; (8004594 <HAL_ADC_Start_IT+0x1b4>)
 80044ec:	4293      	cmp	r3, r2
 80044ee:	d105      	bne.n	80044fc <HAL_ADC_Start_IT+0x11c>
 80044f0:	4b26      	ldr	r3, [pc, #152]	; (800458c <HAL_ADC_Start_IT+0x1ac>)
 80044f2:	685b      	ldr	r3, [r3, #4]
 80044f4:	f003 031f 	and.w	r3, r3, #31
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d00a      	beq.n	8004512 <HAL_ADC_Start_IT+0x132>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	4a25      	ldr	r2, [pc, #148]	; (8004598 <HAL_ADC_Start_IT+0x1b8>)
 8004502:	4293      	cmp	r3, r2
 8004504:	d136      	bne.n	8004574 <HAL_ADC_Start_IT+0x194>
 8004506:	4b21      	ldr	r3, [pc, #132]	; (800458c <HAL_ADC_Start_IT+0x1ac>)
 8004508:	685b      	ldr	r3, [r3, #4]
 800450a:	f003 0310 	and.w	r3, r3, #16
 800450e:	2b00      	cmp	r3, #0
 8004510:	d130      	bne.n	8004574 <HAL_ADC_Start_IT+0x194>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	689b      	ldr	r3, [r3, #8]
 8004518:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800451c:	2b00      	cmp	r3, #0
 800451e:	d129      	bne.n	8004574 <HAL_ADC_Start_IT+0x194>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	689a      	ldr	r2, [r3, #8]
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800452e:	609a      	str	r2, [r3, #8]
 8004530:	e020      	b.n	8004574 <HAL_ADC_Start_IT+0x194>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	4a16      	ldr	r2, [pc, #88]	; (8004590 <HAL_ADC_Start_IT+0x1b0>)
 8004538:	4293      	cmp	r3, r2
 800453a:	d11b      	bne.n	8004574 <HAL_ADC_Start_IT+0x194>
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	689b      	ldr	r3, [r3, #8]
 8004542:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004546:	2b00      	cmp	r3, #0
 8004548:	d114      	bne.n	8004574 <HAL_ADC_Start_IT+0x194>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	689a      	ldr	r2, [r3, #8]
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004558:	609a      	str	r2, [r3, #8]
 800455a:	e00b      	b.n	8004574 <HAL_ADC_Start_IT+0x194>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004560:	f043 0210 	orr.w	r2, r3, #16
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800456c:	f043 0201 	orr.w	r2, r3, #1
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8004574:	2300      	movs	r3, #0
}
 8004576:	4618      	mov	r0, r3
 8004578:	3714      	adds	r7, #20
 800457a:	46bd      	mov	sp, r7
 800457c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004580:	4770      	bx	lr
 8004582:	bf00      	nop
 8004584:	200000b8 	.word	0x200000b8
 8004588:	431bde83 	.word	0x431bde83
 800458c:	40012300 	.word	0x40012300
 8004590:	40012000 	.word	0x40012000
 8004594:	40012100 	.word	0x40012100
 8004598:	40012200 	.word	0x40012200

0800459c <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 800459c:	b580      	push	{r7, lr}
 800459e:	b086      	sub	sp, #24
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 80045a4:	2300      	movs	r3, #0
 80045a6:	617b      	str	r3, [r7, #20]
 80045a8:	2300      	movs	r3, #0
 80045aa:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	685b      	ldr	r3, [r3, #4]
 80045ba:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	f003 0302 	and.w	r3, r3, #2
 80045c2:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 80045c4:	68bb      	ldr	r3, [r7, #8]
 80045c6:	f003 0320 	and.w	r3, r3, #32
 80045ca:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 80045cc:	697b      	ldr	r3, [r7, #20]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d049      	beq.n	8004666 <HAL_ADC_IRQHandler+0xca>
 80045d2:	693b      	ldr	r3, [r7, #16]
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d046      	beq.n	8004666 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045dc:	f003 0310 	and.w	r3, r3, #16
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d105      	bne.n	80045f0 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045e8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	689b      	ldr	r3, [r3, #8]
 80045f6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d12b      	bne.n	8004656 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004602:	2b00      	cmp	r3, #0
 8004604:	d127      	bne.n	8004656 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800460c:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004610:	2b00      	cmp	r3, #0
 8004612:	d006      	beq.n	8004622 <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	689b      	ldr	r3, [r3, #8]
 800461a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800461e:	2b00      	cmp	r3, #0
 8004620:	d119      	bne.n	8004656 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	685a      	ldr	r2, [r3, #4]
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f022 0220 	bic.w	r2, r2, #32
 8004630:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004636:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004642:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004646:	2b00      	cmp	r3, #0
 8004648:	d105      	bne.n	8004656 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800464e:	f043 0201 	orr.w	r2, r3, #1
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004656:	6878      	ldr	r0, [r7, #4]
 8004658:	f7fe fb04 	bl	8002c64 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f06f 0212 	mvn.w	r2, #18
 8004664:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	f003 0304 	and.w	r3, r3, #4
 800466c:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 800466e:	68bb      	ldr	r3, [r7, #8]
 8004670:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004674:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8004676:	697b      	ldr	r3, [r7, #20]
 8004678:	2b00      	cmp	r3, #0
 800467a:	d057      	beq.n	800472c <HAL_ADC_IRQHandler+0x190>
 800467c:	693b      	ldr	r3, [r7, #16]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d054      	beq.n	800472c <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004686:	f003 0310 	and.w	r3, r3, #16
 800468a:	2b00      	cmp	r3, #0
 800468c:	d105      	bne.n	800469a <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004692:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	689b      	ldr	r3, [r3, #8]
 80046a0:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d139      	bne.n	800471c <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046ae:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d006      	beq.n	80046c4 <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	689b      	ldr	r3, [r3, #8]
 80046bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d12b      	bne.n	800471c <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	685b      	ldr	r3, [r3, #4]
 80046ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d124      	bne.n	800471c <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	689b      	ldr	r3, [r3, #8]
 80046d8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d11d      	bne.n	800471c <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d119      	bne.n	800471c <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	685a      	ldr	r2, [r3, #4]
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80046f6:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046fc:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004708:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800470c:	2b00      	cmp	r3, #0
 800470e:	d105      	bne.n	800471c <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004714:	f043 0201 	orr.w	r2, r3, #1
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800471c:	6878      	ldr	r0, [r7, #4]
 800471e:	f000 fa8d 	bl	8004c3c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f06f 020c 	mvn.w	r2, #12
 800472a:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	f003 0301 	and.w	r3, r3, #1
 8004732:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8004734:	68bb      	ldr	r3, [r7, #8]
 8004736:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800473a:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 800473c:	697b      	ldr	r3, [r7, #20]
 800473e:	2b00      	cmp	r3, #0
 8004740:	d017      	beq.n	8004772 <HAL_ADC_IRQHandler+0x1d6>
 8004742:	693b      	ldr	r3, [r7, #16]
 8004744:	2b00      	cmp	r3, #0
 8004746:	d014      	beq.n	8004772 <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f003 0301 	and.w	r3, r3, #1
 8004752:	2b01      	cmp	r3, #1
 8004754:	d10d      	bne.n	8004772 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800475a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8004762:	6878      	ldr	r0, [r7, #4]
 8004764:	f000 f837 	bl	80047d6 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f06f 0201 	mvn.w	r2, #1
 8004770:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	f003 0320 	and.w	r3, r3, #32
 8004778:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 800477a:	68bb      	ldr	r3, [r7, #8]
 800477c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004780:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8004782:	697b      	ldr	r3, [r7, #20]
 8004784:	2b00      	cmp	r3, #0
 8004786:	d015      	beq.n	80047b4 <HAL_ADC_IRQHandler+0x218>
 8004788:	693b      	ldr	r3, [r7, #16]
 800478a:	2b00      	cmp	r3, #0
 800478c:	d012      	beq.n	80047b4 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004792:	f043 0202 	orr.w	r2, r3, #2
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f06f 0220 	mvn.w	r2, #32
 80047a2:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80047a4:	6878      	ldr	r0, [r7, #4]
 80047a6:	f000 f820 	bl	80047ea <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f06f 0220 	mvn.w	r2, #32
 80047b2:	601a      	str	r2, [r3, #0]
  }
}
 80047b4:	bf00      	nop
 80047b6:	3718      	adds	r7, #24
 80047b8:	46bd      	mov	sp, r7
 80047ba:	bd80      	pop	{r7, pc}

080047bc <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80047bc:	b480      	push	{r7}
 80047be:	b083      	sub	sp, #12
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80047ca:	4618      	mov	r0, r3
 80047cc:	370c      	adds	r7, #12
 80047ce:	46bd      	mov	sp, r7
 80047d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d4:	4770      	bx	lr

080047d6 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80047d6:	b480      	push	{r7}
 80047d8:	b083      	sub	sp, #12
 80047da:	af00      	add	r7, sp, #0
 80047dc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80047de:	bf00      	nop
 80047e0:	370c      	adds	r7, #12
 80047e2:	46bd      	mov	sp, r7
 80047e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e8:	4770      	bx	lr

080047ea <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80047ea:	b480      	push	{r7}
 80047ec:	b083      	sub	sp, #12
 80047ee:	af00      	add	r7, sp, #0
 80047f0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80047f2:	bf00      	nop
 80047f4:	370c      	adds	r7, #12
 80047f6:	46bd      	mov	sp, r7
 80047f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fc:	4770      	bx	lr
	...

08004800 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004800:	b480      	push	{r7}
 8004802:	b085      	sub	sp, #20
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
 8004808:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800480a:	2300      	movs	r3, #0
 800480c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004814:	2b01      	cmp	r3, #1
 8004816:	d101      	bne.n	800481c <HAL_ADC_ConfigChannel+0x1c>
 8004818:	2302      	movs	r3, #2
 800481a:	e105      	b.n	8004a28 <HAL_ADC_ConfigChannel+0x228>
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2201      	movs	r2, #1
 8004820:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	2b09      	cmp	r3, #9
 800482a:	d925      	bls.n	8004878 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	68d9      	ldr	r1, [r3, #12]
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	b29b      	uxth	r3, r3
 8004838:	461a      	mov	r2, r3
 800483a:	4613      	mov	r3, r2
 800483c:	005b      	lsls	r3, r3, #1
 800483e:	4413      	add	r3, r2
 8004840:	3b1e      	subs	r3, #30
 8004842:	2207      	movs	r2, #7
 8004844:	fa02 f303 	lsl.w	r3, r2, r3
 8004848:	43da      	mvns	r2, r3
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	400a      	ands	r2, r1
 8004850:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	68d9      	ldr	r1, [r3, #12]
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	689a      	ldr	r2, [r3, #8]
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	b29b      	uxth	r3, r3
 8004862:	4618      	mov	r0, r3
 8004864:	4603      	mov	r3, r0
 8004866:	005b      	lsls	r3, r3, #1
 8004868:	4403      	add	r3, r0
 800486a:	3b1e      	subs	r3, #30
 800486c:	409a      	lsls	r2, r3
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	430a      	orrs	r2, r1
 8004874:	60da      	str	r2, [r3, #12]
 8004876:	e022      	b.n	80048be <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	6919      	ldr	r1, [r3, #16]
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	b29b      	uxth	r3, r3
 8004884:	461a      	mov	r2, r3
 8004886:	4613      	mov	r3, r2
 8004888:	005b      	lsls	r3, r3, #1
 800488a:	4413      	add	r3, r2
 800488c:	2207      	movs	r2, #7
 800488e:	fa02 f303 	lsl.w	r3, r2, r3
 8004892:	43da      	mvns	r2, r3
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	400a      	ands	r2, r1
 800489a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	6919      	ldr	r1, [r3, #16]
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	689a      	ldr	r2, [r3, #8]
 80048a6:	683b      	ldr	r3, [r7, #0]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	b29b      	uxth	r3, r3
 80048ac:	4618      	mov	r0, r3
 80048ae:	4603      	mov	r3, r0
 80048b0:	005b      	lsls	r3, r3, #1
 80048b2:	4403      	add	r3, r0
 80048b4:	409a      	lsls	r2, r3
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	430a      	orrs	r2, r1
 80048bc:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80048be:	683b      	ldr	r3, [r7, #0]
 80048c0:	685b      	ldr	r3, [r3, #4]
 80048c2:	2b06      	cmp	r3, #6
 80048c4:	d824      	bhi.n	8004910 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	685a      	ldr	r2, [r3, #4]
 80048d0:	4613      	mov	r3, r2
 80048d2:	009b      	lsls	r3, r3, #2
 80048d4:	4413      	add	r3, r2
 80048d6:	3b05      	subs	r3, #5
 80048d8:	221f      	movs	r2, #31
 80048da:	fa02 f303 	lsl.w	r3, r2, r3
 80048de:	43da      	mvns	r2, r3
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	400a      	ands	r2, r1
 80048e6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	b29b      	uxth	r3, r3
 80048f4:	4618      	mov	r0, r3
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	685a      	ldr	r2, [r3, #4]
 80048fa:	4613      	mov	r3, r2
 80048fc:	009b      	lsls	r3, r3, #2
 80048fe:	4413      	add	r3, r2
 8004900:	3b05      	subs	r3, #5
 8004902:	fa00 f203 	lsl.w	r2, r0, r3
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	430a      	orrs	r2, r1
 800490c:	635a      	str	r2, [r3, #52]	; 0x34
 800490e:	e04c      	b.n	80049aa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	685b      	ldr	r3, [r3, #4]
 8004914:	2b0c      	cmp	r3, #12
 8004916:	d824      	bhi.n	8004962 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800491e:	683b      	ldr	r3, [r7, #0]
 8004920:	685a      	ldr	r2, [r3, #4]
 8004922:	4613      	mov	r3, r2
 8004924:	009b      	lsls	r3, r3, #2
 8004926:	4413      	add	r3, r2
 8004928:	3b23      	subs	r3, #35	; 0x23
 800492a:	221f      	movs	r2, #31
 800492c:	fa02 f303 	lsl.w	r3, r2, r3
 8004930:	43da      	mvns	r2, r3
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	400a      	ands	r2, r1
 8004938:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	b29b      	uxth	r3, r3
 8004946:	4618      	mov	r0, r3
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	685a      	ldr	r2, [r3, #4]
 800494c:	4613      	mov	r3, r2
 800494e:	009b      	lsls	r3, r3, #2
 8004950:	4413      	add	r3, r2
 8004952:	3b23      	subs	r3, #35	; 0x23
 8004954:	fa00 f203 	lsl.w	r2, r0, r3
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	430a      	orrs	r2, r1
 800495e:	631a      	str	r2, [r3, #48]	; 0x30
 8004960:	e023      	b.n	80049aa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	685a      	ldr	r2, [r3, #4]
 800496c:	4613      	mov	r3, r2
 800496e:	009b      	lsls	r3, r3, #2
 8004970:	4413      	add	r3, r2
 8004972:	3b41      	subs	r3, #65	; 0x41
 8004974:	221f      	movs	r2, #31
 8004976:	fa02 f303 	lsl.w	r3, r2, r3
 800497a:	43da      	mvns	r2, r3
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	400a      	ands	r2, r1
 8004982:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	b29b      	uxth	r3, r3
 8004990:	4618      	mov	r0, r3
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	685a      	ldr	r2, [r3, #4]
 8004996:	4613      	mov	r3, r2
 8004998:	009b      	lsls	r3, r3, #2
 800499a:	4413      	add	r3, r2
 800499c:	3b41      	subs	r3, #65	; 0x41
 800499e:	fa00 f203 	lsl.w	r2, r0, r3
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	430a      	orrs	r2, r1
 80049a8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80049aa:	4b22      	ldr	r3, [pc, #136]	; (8004a34 <HAL_ADC_ConfigChannel+0x234>)
 80049ac:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	4a21      	ldr	r2, [pc, #132]	; (8004a38 <HAL_ADC_ConfigChannel+0x238>)
 80049b4:	4293      	cmp	r3, r2
 80049b6:	d109      	bne.n	80049cc <HAL_ADC_ConfigChannel+0x1cc>
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	2b12      	cmp	r3, #18
 80049be:	d105      	bne.n	80049cc <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	685b      	ldr	r3, [r3, #4]
 80049c4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	4a19      	ldr	r2, [pc, #100]	; (8004a38 <HAL_ADC_ConfigChannel+0x238>)
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d123      	bne.n	8004a1e <HAL_ADC_ConfigChannel+0x21e>
 80049d6:	683b      	ldr	r3, [r7, #0]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	2b10      	cmp	r3, #16
 80049dc:	d003      	beq.n	80049e6 <HAL_ADC_ConfigChannel+0x1e6>
 80049de:	683b      	ldr	r3, [r7, #0]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	2b11      	cmp	r3, #17
 80049e4:	d11b      	bne.n	8004a1e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	685b      	ldr	r3, [r3, #4]
 80049ea:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	2b10      	cmp	r3, #16
 80049f8:	d111      	bne.n	8004a1e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80049fa:	4b10      	ldr	r3, [pc, #64]	; (8004a3c <HAL_ADC_ConfigChannel+0x23c>)
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	4a10      	ldr	r2, [pc, #64]	; (8004a40 <HAL_ADC_ConfigChannel+0x240>)
 8004a00:	fba2 2303 	umull	r2, r3, r2, r3
 8004a04:	0c9a      	lsrs	r2, r3, #18
 8004a06:	4613      	mov	r3, r2
 8004a08:	009b      	lsls	r3, r3, #2
 8004a0a:	4413      	add	r3, r2
 8004a0c:	005b      	lsls	r3, r3, #1
 8004a0e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004a10:	e002      	b.n	8004a18 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8004a12:	68bb      	ldr	r3, [r7, #8]
 8004a14:	3b01      	subs	r3, #1
 8004a16:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004a18:	68bb      	ldr	r3, [r7, #8]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d1f9      	bne.n	8004a12 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2200      	movs	r2, #0
 8004a22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8004a26:	2300      	movs	r3, #0
}
 8004a28:	4618      	mov	r0, r3
 8004a2a:	3714      	adds	r7, #20
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a32:	4770      	bx	lr
 8004a34:	40012300 	.word	0x40012300
 8004a38:	40012000 	.word	0x40012000
 8004a3c:	200000b8 	.word	0x200000b8
 8004a40:	431bde83 	.word	0x431bde83

08004a44 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004a44:	b480      	push	{r7}
 8004a46:	b085      	sub	sp, #20
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004a4c:	4b79      	ldr	r3, [pc, #484]	; (8004c34 <ADC_Init+0x1f0>)
 8004a4e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	685b      	ldr	r3, [r3, #4]
 8004a54:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	685a      	ldr	r2, [r3, #4]
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	685b      	ldr	r3, [r3, #4]
 8004a64:	431a      	orrs	r2, r3
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	685a      	ldr	r2, [r3, #4]
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004a78:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	6859      	ldr	r1, [r3, #4]
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	691b      	ldr	r3, [r3, #16]
 8004a84:	021a      	lsls	r2, r3, #8
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	430a      	orrs	r2, r1
 8004a8c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	685a      	ldr	r2, [r3, #4]
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004a9c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	6859      	ldr	r1, [r3, #4]
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	689a      	ldr	r2, [r3, #8]
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	430a      	orrs	r2, r1
 8004aae:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	689a      	ldr	r2, [r3, #8]
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004abe:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	6899      	ldr	r1, [r3, #8]
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	68da      	ldr	r2, [r3, #12]
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	430a      	orrs	r2, r1
 8004ad0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ad6:	4a58      	ldr	r2, [pc, #352]	; (8004c38 <ADC_Init+0x1f4>)
 8004ad8:	4293      	cmp	r3, r2
 8004ada:	d022      	beq.n	8004b22 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	689a      	ldr	r2, [r3, #8]
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004aea:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	6899      	ldr	r1, [r3, #8]
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	430a      	orrs	r2, r1
 8004afc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	689a      	ldr	r2, [r3, #8]
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004b0c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	6899      	ldr	r1, [r3, #8]
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	430a      	orrs	r2, r1
 8004b1e:	609a      	str	r2, [r3, #8]
 8004b20:	e00f      	b.n	8004b42 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	689a      	ldr	r2, [r3, #8]
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004b30:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	689a      	ldr	r2, [r3, #8]
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004b40:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	689a      	ldr	r2, [r3, #8]
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f022 0202 	bic.w	r2, r2, #2
 8004b50:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	6899      	ldr	r1, [r3, #8]
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	7e1b      	ldrb	r3, [r3, #24]
 8004b5c:	005a      	lsls	r2, r3, #1
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	430a      	orrs	r2, r1
 8004b64:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d01b      	beq.n	8004ba8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	685a      	ldr	r2, [r3, #4]
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004b7e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	685a      	ldr	r2, [r3, #4]
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8004b8e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	6859      	ldr	r1, [r3, #4]
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b9a:	3b01      	subs	r3, #1
 8004b9c:	035a      	lsls	r2, r3, #13
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	430a      	orrs	r2, r1
 8004ba4:	605a      	str	r2, [r3, #4]
 8004ba6:	e007      	b.n	8004bb8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	685a      	ldr	r2, [r3, #4]
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004bb6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8004bc6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	69db      	ldr	r3, [r3, #28]
 8004bd2:	3b01      	subs	r3, #1
 8004bd4:	051a      	lsls	r2, r3, #20
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	430a      	orrs	r2, r1
 8004bdc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	689a      	ldr	r2, [r3, #8]
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004bec:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	6899      	ldr	r1, [r3, #8]
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004bfa:	025a      	lsls	r2, r3, #9
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	430a      	orrs	r2, r1
 8004c02:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	689a      	ldr	r2, [r3, #8]
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c12:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	6899      	ldr	r1, [r3, #8]
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	695b      	ldr	r3, [r3, #20]
 8004c1e:	029a      	lsls	r2, r3, #10
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	430a      	orrs	r2, r1
 8004c26:	609a      	str	r2, [r3, #8]
}
 8004c28:	bf00      	nop
 8004c2a:	3714      	adds	r7, #20
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c32:	4770      	bx	lr
 8004c34:	40012300 	.word	0x40012300
 8004c38:	0f000001 	.word	0x0f000001

08004c3c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004c3c:	b480      	push	{r7}
 8004c3e:	b083      	sub	sp, #12
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8004c44:	bf00      	nop
 8004c46:	370c      	adds	r7, #12
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4e:	4770      	bx	lr

08004c50 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b084      	sub	sp, #16
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d101      	bne.n	8004c62 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8004c5e:	2301      	movs	r3, #1
 8004c60:	e0ed      	b.n	8004e3e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004c68:	b2db      	uxtb	r3, r3
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d102      	bne.n	8004c74 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8004c6e:	6878      	ldr	r0, [r7, #4]
 8004c70:	f7fc fa5e 	bl	8001130 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	681a      	ldr	r2, [r3, #0]
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f042 0201 	orr.w	r2, r2, #1
 8004c82:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004c84:	f7ff fb38 	bl	80042f8 <HAL_GetTick>
 8004c88:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004c8a:	e012      	b.n	8004cb2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004c8c:	f7ff fb34 	bl	80042f8 <HAL_GetTick>
 8004c90:	4602      	mov	r2, r0
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	1ad3      	subs	r3, r2, r3
 8004c96:	2b0a      	cmp	r3, #10
 8004c98:	d90b      	bls.n	8004cb2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c9e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	2205      	movs	r2, #5
 8004caa:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8004cae:	2301      	movs	r3, #1
 8004cb0:	e0c5      	b.n	8004e3e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	685b      	ldr	r3, [r3, #4]
 8004cb8:	f003 0301 	and.w	r3, r3, #1
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d0e5      	beq.n	8004c8c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	681a      	ldr	r2, [r3, #0]
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f022 0202 	bic.w	r2, r2, #2
 8004cce:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004cd0:	f7ff fb12 	bl	80042f8 <HAL_GetTick>
 8004cd4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8004cd6:	e012      	b.n	8004cfe <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004cd8:	f7ff fb0e 	bl	80042f8 <HAL_GetTick>
 8004cdc:	4602      	mov	r2, r0
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	1ad3      	subs	r3, r2, r3
 8004ce2:	2b0a      	cmp	r3, #10
 8004ce4:	d90b      	bls.n	8004cfe <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cea:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	2205      	movs	r2, #5
 8004cf6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8004cfa:	2301      	movs	r3, #1
 8004cfc:	e09f      	b.n	8004e3e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	685b      	ldr	r3, [r3, #4]
 8004d04:	f003 0302 	and.w	r3, r3, #2
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d1e5      	bne.n	8004cd8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	7e1b      	ldrb	r3, [r3, #24]
 8004d10:	2b01      	cmp	r3, #1
 8004d12:	d108      	bne.n	8004d26 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	681a      	ldr	r2, [r3, #0]
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004d22:	601a      	str	r2, [r3, #0]
 8004d24:	e007      	b.n	8004d36 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	681a      	ldr	r2, [r3, #0]
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004d34:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	7e5b      	ldrb	r3, [r3, #25]
 8004d3a:	2b01      	cmp	r3, #1
 8004d3c:	d108      	bne.n	8004d50 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	681a      	ldr	r2, [r3, #0]
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004d4c:	601a      	str	r2, [r3, #0]
 8004d4e:	e007      	b.n	8004d60 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	681a      	ldr	r2, [r3, #0]
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d5e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	7e9b      	ldrb	r3, [r3, #26]
 8004d64:	2b01      	cmp	r3, #1
 8004d66:	d108      	bne.n	8004d7a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	681a      	ldr	r2, [r3, #0]
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f042 0220 	orr.w	r2, r2, #32
 8004d76:	601a      	str	r2, [r3, #0]
 8004d78:	e007      	b.n	8004d8a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	681a      	ldr	r2, [r3, #0]
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f022 0220 	bic.w	r2, r2, #32
 8004d88:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	7edb      	ldrb	r3, [r3, #27]
 8004d8e:	2b01      	cmp	r3, #1
 8004d90:	d108      	bne.n	8004da4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	681a      	ldr	r2, [r3, #0]
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f022 0210 	bic.w	r2, r2, #16
 8004da0:	601a      	str	r2, [r3, #0]
 8004da2:	e007      	b.n	8004db4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	681a      	ldr	r2, [r3, #0]
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f042 0210 	orr.w	r2, r2, #16
 8004db2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	7f1b      	ldrb	r3, [r3, #28]
 8004db8:	2b01      	cmp	r3, #1
 8004dba:	d108      	bne.n	8004dce <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	681a      	ldr	r2, [r3, #0]
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f042 0208 	orr.w	r2, r2, #8
 8004dca:	601a      	str	r2, [r3, #0]
 8004dcc:	e007      	b.n	8004dde <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	681a      	ldr	r2, [r3, #0]
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f022 0208 	bic.w	r2, r2, #8
 8004ddc:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	7f5b      	ldrb	r3, [r3, #29]
 8004de2:	2b01      	cmp	r3, #1
 8004de4:	d108      	bne.n	8004df8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	681a      	ldr	r2, [r3, #0]
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f042 0204 	orr.w	r2, r2, #4
 8004df4:	601a      	str	r2, [r3, #0]
 8004df6:	e007      	b.n	8004e08 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	681a      	ldr	r2, [r3, #0]
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f022 0204 	bic.w	r2, r2, #4
 8004e06:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	689a      	ldr	r2, [r3, #8]
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	68db      	ldr	r3, [r3, #12]
 8004e10:	431a      	orrs	r2, r3
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	691b      	ldr	r3, [r3, #16]
 8004e16:	431a      	orrs	r2, r3
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	695b      	ldr	r3, [r3, #20]
 8004e1c:	ea42 0103 	orr.w	r1, r2, r3
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	685b      	ldr	r3, [r3, #4]
 8004e24:	1e5a      	subs	r2, r3, #1
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	430a      	orrs	r2, r1
 8004e2c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	2200      	movs	r2, #0
 8004e32:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2201      	movs	r2, #1
 8004e38:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8004e3c:	2300      	movs	r3, #0
}
 8004e3e:	4618      	mov	r0, r3
 8004e40:	3710      	adds	r7, #16
 8004e42:	46bd      	mov	sp, r7
 8004e44:	bd80      	pop	{r7, pc}
	...

08004e48 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8004e48:	b480      	push	{r7}
 8004e4a:	b087      	sub	sp, #28
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
 8004e50:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004e5e:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8004e60:	7cfb      	ldrb	r3, [r7, #19]
 8004e62:	2b01      	cmp	r3, #1
 8004e64:	d003      	beq.n	8004e6e <HAL_CAN_ConfigFilter+0x26>
 8004e66:	7cfb      	ldrb	r3, [r7, #19]
 8004e68:	2b02      	cmp	r3, #2
 8004e6a:	f040 80be 	bne.w	8004fea <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8004e6e:	4b65      	ldr	r3, [pc, #404]	; (8005004 <HAL_CAN_ConfigFilter+0x1bc>)
 8004e70:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8004e72:	697b      	ldr	r3, [r7, #20]
 8004e74:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004e78:	f043 0201 	orr.w	r2, r3, #1
 8004e7c:	697b      	ldr	r3, [r7, #20]
 8004e7e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8004e82:	697b      	ldr	r3, [r7, #20]
 8004e84:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004e88:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8004e8c:	697b      	ldr	r3, [r7, #20]
 8004e8e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8004e92:	697b      	ldr	r3, [r7, #20]
 8004e94:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e9c:	021b      	lsls	r3, r3, #8
 8004e9e:	431a      	orrs	r2, r3
 8004ea0:	697b      	ldr	r3, [r7, #20]
 8004ea2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	695b      	ldr	r3, [r3, #20]
 8004eaa:	f003 031f 	and.w	r3, r3, #31
 8004eae:	2201      	movs	r2, #1
 8004eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8004eb4:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8004eb6:	697b      	ldr	r3, [r7, #20]
 8004eb8:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	43db      	mvns	r3, r3
 8004ec0:	401a      	ands	r2, r3
 8004ec2:	697b      	ldr	r3, [r7, #20]
 8004ec4:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	69db      	ldr	r3, [r3, #28]
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d123      	bne.n	8004f18 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8004ed0:	697b      	ldr	r3, [r7, #20]
 8004ed2:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	43db      	mvns	r3, r3
 8004eda:	401a      	ands	r2, r3
 8004edc:	697b      	ldr	r3, [r7, #20]
 8004ede:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8004ee2:	683b      	ldr	r3, [r7, #0]
 8004ee4:	68db      	ldr	r3, [r3, #12]
 8004ee6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	685b      	ldr	r3, [r3, #4]
 8004eec:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004eee:	683a      	ldr	r2, [r7, #0]
 8004ef0:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8004ef2:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004ef4:	697b      	ldr	r3, [r7, #20]
 8004ef6:	3248      	adds	r2, #72	; 0x48
 8004ef8:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	689b      	ldr	r3, [r3, #8]
 8004f00:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8004f02:	683b      	ldr	r3, [r7, #0]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004f0c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004f0e:	6979      	ldr	r1, [r7, #20]
 8004f10:	3348      	adds	r3, #72	; 0x48
 8004f12:	00db      	lsls	r3, r3, #3
 8004f14:	440b      	add	r3, r1
 8004f16:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8004f18:	683b      	ldr	r3, [r7, #0]
 8004f1a:	69db      	ldr	r3, [r3, #28]
 8004f1c:	2b01      	cmp	r3, #1
 8004f1e:	d122      	bne.n	8004f66 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8004f20:	697b      	ldr	r3, [r7, #20]
 8004f22:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	431a      	orrs	r2, r3
 8004f2a:	697b      	ldr	r3, [r7, #20]
 8004f2c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	685b      	ldr	r3, [r3, #4]
 8004f3a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004f3c:	683a      	ldr	r2, [r7, #0]
 8004f3e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8004f40:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004f42:	697b      	ldr	r3, [r7, #20]
 8004f44:	3248      	adds	r2, #72	; 0x48
 8004f46:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004f4a:	683b      	ldr	r3, [r7, #0]
 8004f4c:	689b      	ldr	r3, [r3, #8]
 8004f4e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	68db      	ldr	r3, [r3, #12]
 8004f54:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004f56:	683b      	ldr	r3, [r7, #0]
 8004f58:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004f5a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004f5c:	6979      	ldr	r1, [r7, #20]
 8004f5e:	3348      	adds	r3, #72	; 0x48
 8004f60:	00db      	lsls	r3, r3, #3
 8004f62:	440b      	add	r3, r1
 8004f64:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	699b      	ldr	r3, [r3, #24]
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d109      	bne.n	8004f82 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8004f6e:	697b      	ldr	r3, [r7, #20]
 8004f70:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	43db      	mvns	r3, r3
 8004f78:	401a      	ands	r2, r3
 8004f7a:	697b      	ldr	r3, [r7, #20]
 8004f7c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8004f80:	e007      	b.n	8004f92 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8004f82:	697b      	ldr	r3, [r7, #20]
 8004f84:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	431a      	orrs	r2, r3
 8004f8c:	697b      	ldr	r3, [r7, #20]
 8004f8e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8004f92:	683b      	ldr	r3, [r7, #0]
 8004f94:	691b      	ldr	r3, [r3, #16]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d109      	bne.n	8004fae <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8004f9a:	697b      	ldr	r3, [r7, #20]
 8004f9c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	43db      	mvns	r3, r3
 8004fa4:	401a      	ands	r2, r3
 8004fa6:	697b      	ldr	r3, [r7, #20]
 8004fa8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8004fac:	e007      	b.n	8004fbe <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8004fae:	697b      	ldr	r3, [r7, #20]
 8004fb0:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	431a      	orrs	r2, r3
 8004fb8:	697b      	ldr	r3, [r7, #20]
 8004fba:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	6a1b      	ldr	r3, [r3, #32]
 8004fc2:	2b01      	cmp	r3, #1
 8004fc4:	d107      	bne.n	8004fd6 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8004fc6:	697b      	ldr	r3, [r7, #20]
 8004fc8:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	431a      	orrs	r2, r3
 8004fd0:	697b      	ldr	r3, [r7, #20]
 8004fd2:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8004fd6:	697b      	ldr	r3, [r7, #20]
 8004fd8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004fdc:	f023 0201 	bic.w	r2, r3, #1
 8004fe0:	697b      	ldr	r3, [r7, #20]
 8004fe2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	e006      	b.n	8004ff8 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fee:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004ff6:	2301      	movs	r3, #1
  }
}
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	371c      	adds	r7, #28
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005002:	4770      	bx	lr
 8005004:	40006400 	.word	0x40006400

08005008 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8005008:	b580      	push	{r7, lr}
 800500a:	b084      	sub	sp, #16
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005016:	b2db      	uxtb	r3, r3
 8005018:	2b01      	cmp	r3, #1
 800501a:	d12e      	bne.n	800507a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2202      	movs	r2, #2
 8005020:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	681a      	ldr	r2, [r3, #0]
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f022 0201 	bic.w	r2, r2, #1
 8005032:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005034:	f7ff f960 	bl	80042f8 <HAL_GetTick>
 8005038:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800503a:	e012      	b.n	8005062 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800503c:	f7ff f95c 	bl	80042f8 <HAL_GetTick>
 8005040:	4602      	mov	r2, r0
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	1ad3      	subs	r3, r2, r3
 8005046:	2b0a      	cmp	r3, #10
 8005048:	d90b      	bls.n	8005062 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800504e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	2205      	movs	r2, #5
 800505a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800505e:	2301      	movs	r3, #1
 8005060:	e012      	b.n	8005088 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	685b      	ldr	r3, [r3, #4]
 8005068:	f003 0301 	and.w	r3, r3, #1
 800506c:	2b00      	cmp	r3, #0
 800506e:	d1e5      	bne.n	800503c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2200      	movs	r2, #0
 8005074:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8005076:	2300      	movs	r3, #0
 8005078:	e006      	b.n	8005088 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800507e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005086:	2301      	movs	r3, #1
  }
}
 8005088:	4618      	mov	r0, r3
 800508a:	3710      	adds	r7, #16
 800508c:	46bd      	mov	sp, r7
 800508e:	bd80      	pop	{r7, pc}

08005090 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8005090:	b480      	push	{r7}
 8005092:	b087      	sub	sp, #28
 8005094:	af00      	add	r7, sp, #0
 8005096:	60f8      	str	r0, [r7, #12]
 8005098:	60b9      	str	r1, [r7, #8]
 800509a:	607a      	str	r2, [r7, #4]
 800509c:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80050a4:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80050a6:	7dfb      	ldrb	r3, [r7, #23]
 80050a8:	2b01      	cmp	r3, #1
 80050aa:	d003      	beq.n	80050b4 <HAL_CAN_GetRxMessage+0x24>
 80050ac:	7dfb      	ldrb	r3, [r7, #23]
 80050ae:	2b02      	cmp	r3, #2
 80050b0:	f040 80f3 	bne.w	800529a <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80050b4:	68bb      	ldr	r3, [r7, #8]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d10e      	bne.n	80050d8 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	68db      	ldr	r3, [r3, #12]
 80050c0:	f003 0303 	and.w	r3, r3, #3
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d116      	bne.n	80050f6 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050cc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80050d4:	2301      	movs	r3, #1
 80050d6:	e0e7      	b.n	80052a8 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	691b      	ldr	r3, [r3, #16]
 80050de:	f003 0303 	and.w	r3, r3, #3
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d107      	bne.n	80050f6 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ea:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80050f2:	2301      	movs	r3, #1
 80050f4:	e0d8      	b.n	80052a8 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	681a      	ldr	r2, [r3, #0]
 80050fa:	68bb      	ldr	r3, [r7, #8]
 80050fc:	331b      	adds	r3, #27
 80050fe:	011b      	lsls	r3, r3, #4
 8005100:	4413      	add	r3, r2
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f003 0204 	and.w	r2, r3, #4
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	689b      	ldr	r3, [r3, #8]
 8005110:	2b00      	cmp	r3, #0
 8005112:	d10c      	bne.n	800512e <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	681a      	ldr	r2, [r3, #0]
 8005118:	68bb      	ldr	r3, [r7, #8]
 800511a:	331b      	adds	r3, #27
 800511c:	011b      	lsls	r3, r3, #4
 800511e:	4413      	add	r3, r2
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	0d5b      	lsrs	r3, r3, #21
 8005124:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	601a      	str	r2, [r3, #0]
 800512c:	e00b      	b.n	8005146 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	681a      	ldr	r2, [r3, #0]
 8005132:	68bb      	ldr	r3, [r7, #8]
 8005134:	331b      	adds	r3, #27
 8005136:	011b      	lsls	r3, r3, #4
 8005138:	4413      	add	r3, r2
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	08db      	lsrs	r3, r3, #3
 800513e:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	681a      	ldr	r2, [r3, #0]
 800514a:	68bb      	ldr	r3, [r7, #8]
 800514c:	331b      	adds	r3, #27
 800514e:	011b      	lsls	r3, r3, #4
 8005150:	4413      	add	r3, r2
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f003 0202 	and.w	r2, r3, #2
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	681a      	ldr	r2, [r3, #0]
 8005160:	68bb      	ldr	r3, [r7, #8]
 8005162:	331b      	adds	r3, #27
 8005164:	011b      	lsls	r3, r3, #4
 8005166:	4413      	add	r3, r2
 8005168:	3304      	adds	r3, #4
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f003 020f 	and.w	r2, r3, #15
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	681a      	ldr	r2, [r3, #0]
 8005178:	68bb      	ldr	r3, [r7, #8]
 800517a:	331b      	adds	r3, #27
 800517c:	011b      	lsls	r3, r3, #4
 800517e:	4413      	add	r3, r2
 8005180:	3304      	adds	r3, #4
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	0a1b      	lsrs	r3, r3, #8
 8005186:	b2da      	uxtb	r2, r3
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	681a      	ldr	r2, [r3, #0]
 8005190:	68bb      	ldr	r3, [r7, #8]
 8005192:	331b      	adds	r3, #27
 8005194:	011b      	lsls	r3, r3, #4
 8005196:	4413      	add	r3, r2
 8005198:	3304      	adds	r3, #4
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	0c1b      	lsrs	r3, r3, #16
 800519e:	b29a      	uxth	r2, r3
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	681a      	ldr	r2, [r3, #0]
 80051a8:	68bb      	ldr	r3, [r7, #8]
 80051aa:	011b      	lsls	r3, r3, #4
 80051ac:	4413      	add	r3, r2
 80051ae:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	b2da      	uxtb	r2, r3
 80051b6:	683b      	ldr	r3, [r7, #0]
 80051b8:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	681a      	ldr	r2, [r3, #0]
 80051be:	68bb      	ldr	r3, [r7, #8]
 80051c0:	011b      	lsls	r3, r3, #4
 80051c2:	4413      	add	r3, r2
 80051c4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	0a1a      	lsrs	r2, r3, #8
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	3301      	adds	r3, #1
 80051d0:	b2d2      	uxtb	r2, r2
 80051d2:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	681a      	ldr	r2, [r3, #0]
 80051d8:	68bb      	ldr	r3, [r7, #8]
 80051da:	011b      	lsls	r3, r3, #4
 80051dc:	4413      	add	r3, r2
 80051de:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	0c1a      	lsrs	r2, r3, #16
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	3302      	adds	r3, #2
 80051ea:	b2d2      	uxtb	r2, r2
 80051ec:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	681a      	ldr	r2, [r3, #0]
 80051f2:	68bb      	ldr	r3, [r7, #8]
 80051f4:	011b      	lsls	r3, r3, #4
 80051f6:	4413      	add	r3, r2
 80051f8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	0e1a      	lsrs	r2, r3, #24
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	3303      	adds	r3, #3
 8005204:	b2d2      	uxtb	r2, r2
 8005206:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	681a      	ldr	r2, [r3, #0]
 800520c:	68bb      	ldr	r3, [r7, #8]
 800520e:	011b      	lsls	r3, r3, #4
 8005210:	4413      	add	r3, r2
 8005212:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8005216:	681a      	ldr	r2, [r3, #0]
 8005218:	683b      	ldr	r3, [r7, #0]
 800521a:	3304      	adds	r3, #4
 800521c:	b2d2      	uxtb	r2, r2
 800521e:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	681a      	ldr	r2, [r3, #0]
 8005224:	68bb      	ldr	r3, [r7, #8]
 8005226:	011b      	lsls	r3, r3, #4
 8005228:	4413      	add	r3, r2
 800522a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	0a1a      	lsrs	r2, r3, #8
 8005232:	683b      	ldr	r3, [r7, #0]
 8005234:	3305      	adds	r3, #5
 8005236:	b2d2      	uxtb	r2, r2
 8005238:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	681a      	ldr	r2, [r3, #0]
 800523e:	68bb      	ldr	r3, [r7, #8]
 8005240:	011b      	lsls	r3, r3, #4
 8005242:	4413      	add	r3, r2
 8005244:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	0c1a      	lsrs	r2, r3, #16
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	3306      	adds	r3, #6
 8005250:	b2d2      	uxtb	r2, r2
 8005252:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	681a      	ldr	r2, [r3, #0]
 8005258:	68bb      	ldr	r3, [r7, #8]
 800525a:	011b      	lsls	r3, r3, #4
 800525c:	4413      	add	r3, r2
 800525e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	0e1a      	lsrs	r2, r3, #24
 8005266:	683b      	ldr	r3, [r7, #0]
 8005268:	3307      	adds	r3, #7
 800526a:	b2d2      	uxtb	r2, r2
 800526c:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800526e:	68bb      	ldr	r3, [r7, #8]
 8005270:	2b00      	cmp	r3, #0
 8005272:	d108      	bne.n	8005286 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	68da      	ldr	r2, [r3, #12]
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f042 0220 	orr.w	r2, r2, #32
 8005282:	60da      	str	r2, [r3, #12]
 8005284:	e007      	b.n	8005296 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	691a      	ldr	r2, [r3, #16]
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f042 0220 	orr.w	r2, r2, #32
 8005294:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8005296:	2300      	movs	r3, #0
 8005298:	e006      	b.n	80052a8 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800529e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80052a6:	2301      	movs	r3, #1
  }
}
 80052a8:	4618      	mov	r0, r3
 80052aa:	371c      	adds	r7, #28
 80052ac:	46bd      	mov	sp, r7
 80052ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b2:	4770      	bx	lr

080052b4 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80052b4:	b480      	push	{r7}
 80052b6:	b085      	sub	sp, #20
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
 80052bc:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80052c4:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80052c6:	7bfb      	ldrb	r3, [r7, #15]
 80052c8:	2b01      	cmp	r3, #1
 80052ca:	d002      	beq.n	80052d2 <HAL_CAN_ActivateNotification+0x1e>
 80052cc:	7bfb      	ldrb	r3, [r7, #15]
 80052ce:	2b02      	cmp	r3, #2
 80052d0:	d109      	bne.n	80052e6 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	6959      	ldr	r1, [r3, #20]
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	683a      	ldr	r2, [r7, #0]
 80052de:	430a      	orrs	r2, r1
 80052e0:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80052e2:	2300      	movs	r3, #0
 80052e4:	e006      	b.n	80052f4 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052ea:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80052f2:	2301      	movs	r3, #1
  }
}
 80052f4:	4618      	mov	r0, r3
 80052f6:	3714      	adds	r7, #20
 80052f8:	46bd      	mov	sp, r7
 80052fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fe:	4770      	bx	lr

08005300 <HAL_CAN_DeactivateNotification>:
  * @param  InactiveITs indicates which interrupts will be disabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_DeactivateNotification(CAN_HandleTypeDef *hcan, uint32_t InactiveITs)
{
 8005300:	b480      	push	{r7}
 8005302:	b085      	sub	sp, #20
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
 8005308:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005310:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(InactiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8005312:	7bfb      	ldrb	r3, [r7, #15]
 8005314:	2b01      	cmp	r3, #1
 8005316:	d002      	beq.n	800531e <HAL_CAN_DeactivateNotification+0x1e>
 8005318:	7bfb      	ldrb	r3, [r7, #15]
 800531a:	2b02      	cmp	r3, #2
 800531c:	d10a      	bne.n	8005334 <HAL_CAN_DeactivateNotification+0x34>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Disable the selected interrupts */
    __HAL_CAN_DISABLE_IT(hcan, InactiveITs);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	6959      	ldr	r1, [r3, #20]
 8005324:	683b      	ldr	r3, [r7, #0]
 8005326:	43da      	mvns	r2, r3
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	400a      	ands	r2, r1
 800532e:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8005330:	2300      	movs	r3, #0
 8005332:	e006      	b.n	8005342 <HAL_CAN_DeactivateNotification+0x42>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005338:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005340:	2301      	movs	r3, #1
  }
}
 8005342:	4618      	mov	r0, r3
 8005344:	3714      	adds	r7, #20
 8005346:	46bd      	mov	sp, r7
 8005348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534c:	4770      	bx	lr

0800534e <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800534e:	b580      	push	{r7, lr}
 8005350:	b08a      	sub	sp, #40	; 0x28
 8005352:	af00      	add	r7, sp, #0
 8005354:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8005356:	2300      	movs	r3, #0
 8005358:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	695b      	ldr	r3, [r3, #20]
 8005360:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	685b      	ldr	r3, [r3, #4]
 8005368:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	689b      	ldr	r3, [r3, #8]
 8005370:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	68db      	ldr	r3, [r3, #12]
 8005378:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	691b      	ldr	r3, [r3, #16]
 8005380:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	699b      	ldr	r3, [r3, #24]
 8005388:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800538a:	6a3b      	ldr	r3, [r7, #32]
 800538c:	f003 0301 	and.w	r3, r3, #1
 8005390:	2b00      	cmp	r3, #0
 8005392:	d07c      	beq.n	800548e <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8005394:	69bb      	ldr	r3, [r7, #24]
 8005396:	f003 0301 	and.w	r3, r3, #1
 800539a:	2b00      	cmp	r3, #0
 800539c:	d023      	beq.n	80053e6 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	2201      	movs	r2, #1
 80053a4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80053a6:	69bb      	ldr	r3, [r7, #24]
 80053a8:	f003 0302 	and.w	r3, r3, #2
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d003      	beq.n	80053b8 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80053b0:	6878      	ldr	r0, [r7, #4]
 80053b2:	f000 f983 	bl	80056bc <HAL_CAN_TxMailbox0CompleteCallback>
 80053b6:	e016      	b.n	80053e6 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80053b8:	69bb      	ldr	r3, [r7, #24]
 80053ba:	f003 0304 	and.w	r3, r3, #4
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d004      	beq.n	80053cc <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80053c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053c4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80053c8:	627b      	str	r3, [r7, #36]	; 0x24
 80053ca:	e00c      	b.n	80053e6 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80053cc:	69bb      	ldr	r3, [r7, #24]
 80053ce:	f003 0308 	and.w	r3, r3, #8
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d004      	beq.n	80053e0 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80053d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053d8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80053dc:	627b      	str	r3, [r7, #36]	; 0x24
 80053de:	e002      	b.n	80053e6 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80053e0:	6878      	ldr	r0, [r7, #4]
 80053e2:	f000 f989 	bl	80056f8 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80053e6:	69bb      	ldr	r3, [r7, #24]
 80053e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d024      	beq.n	800543a <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80053f8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80053fa:	69bb      	ldr	r3, [r7, #24]
 80053fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005400:	2b00      	cmp	r3, #0
 8005402:	d003      	beq.n	800540c <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8005404:	6878      	ldr	r0, [r7, #4]
 8005406:	f000 f963 	bl	80056d0 <HAL_CAN_TxMailbox1CompleteCallback>
 800540a:	e016      	b.n	800543a <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800540c:	69bb      	ldr	r3, [r7, #24]
 800540e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005412:	2b00      	cmp	r3, #0
 8005414:	d004      	beq.n	8005420 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8005416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005418:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800541c:	627b      	str	r3, [r7, #36]	; 0x24
 800541e:	e00c      	b.n	800543a <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8005420:	69bb      	ldr	r3, [r7, #24]
 8005422:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005426:	2b00      	cmp	r3, #0
 8005428:	d004      	beq.n	8005434 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800542a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800542c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005430:	627b      	str	r3, [r7, #36]	; 0x24
 8005432:	e002      	b.n	800543a <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8005434:	6878      	ldr	r0, [r7, #4]
 8005436:	f000 f969 	bl	800570c <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800543a:	69bb      	ldr	r3, [r7, #24]
 800543c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005440:	2b00      	cmp	r3, #0
 8005442:	d024      	beq.n	800548e <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800544c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800544e:	69bb      	ldr	r3, [r7, #24]
 8005450:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005454:	2b00      	cmp	r3, #0
 8005456:	d003      	beq.n	8005460 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8005458:	6878      	ldr	r0, [r7, #4]
 800545a:	f000 f943 	bl	80056e4 <HAL_CAN_TxMailbox2CompleteCallback>
 800545e:	e016      	b.n	800548e <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8005460:	69bb      	ldr	r3, [r7, #24]
 8005462:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005466:	2b00      	cmp	r3, #0
 8005468:	d004      	beq.n	8005474 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800546a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800546c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005470:	627b      	str	r3, [r7, #36]	; 0x24
 8005472:	e00c      	b.n	800548e <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8005474:	69bb      	ldr	r3, [r7, #24]
 8005476:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800547a:	2b00      	cmp	r3, #0
 800547c:	d004      	beq.n	8005488 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800547e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005480:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005484:	627b      	str	r3, [r7, #36]	; 0x24
 8005486:	e002      	b.n	800548e <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8005488:	6878      	ldr	r0, [r7, #4]
 800548a:	f000 f949 	bl	8005720 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800548e:	6a3b      	ldr	r3, [r7, #32]
 8005490:	f003 0308 	and.w	r3, r3, #8
 8005494:	2b00      	cmp	r3, #0
 8005496:	d00c      	beq.n	80054b2 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8005498:	697b      	ldr	r3, [r7, #20]
 800549a:	f003 0310 	and.w	r3, r3, #16
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d007      	beq.n	80054b2 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80054a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054a4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80054a8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	2210      	movs	r2, #16
 80054b0:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80054b2:	6a3b      	ldr	r3, [r7, #32]
 80054b4:	f003 0304 	and.w	r3, r3, #4
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d00b      	beq.n	80054d4 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80054bc:	697b      	ldr	r3, [r7, #20]
 80054be:	f003 0308 	and.w	r3, r3, #8
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d006      	beq.n	80054d4 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	2208      	movs	r2, #8
 80054cc:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80054ce:	6878      	ldr	r0, [r7, #4]
 80054d0:	f7fc ff4c 	bl	800236c <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80054d4:	6a3b      	ldr	r3, [r7, #32]
 80054d6:	f003 0302 	and.w	r3, r3, #2
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d009      	beq.n	80054f2 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	68db      	ldr	r3, [r3, #12]
 80054e4:	f003 0303 	and.w	r3, r3, #3
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d002      	beq.n	80054f2 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80054ec:	6878      	ldr	r0, [r7, #4]
 80054ee:	f7fc fe05 	bl	80020fc <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80054f2:	6a3b      	ldr	r3, [r7, #32]
 80054f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d00c      	beq.n	8005516 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80054fc:	693b      	ldr	r3, [r7, #16]
 80054fe:	f003 0310 	and.w	r3, r3, #16
 8005502:	2b00      	cmp	r3, #0
 8005504:	d007      	beq.n	8005516 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8005506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005508:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800550c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	2210      	movs	r2, #16
 8005514:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8005516:	6a3b      	ldr	r3, [r7, #32]
 8005518:	f003 0320 	and.w	r3, r3, #32
 800551c:	2b00      	cmp	r3, #0
 800551e:	d00b      	beq.n	8005538 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8005520:	693b      	ldr	r3, [r7, #16]
 8005522:	f003 0308 	and.w	r3, r3, #8
 8005526:	2b00      	cmp	r3, #0
 8005528:	d006      	beq.n	8005538 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	2208      	movs	r2, #8
 8005530:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8005532:	6878      	ldr	r0, [r7, #4]
 8005534:	f000 f908 	bl	8005748 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8005538:	6a3b      	ldr	r3, [r7, #32]
 800553a:	f003 0310 	and.w	r3, r3, #16
 800553e:	2b00      	cmp	r3, #0
 8005540:	d009      	beq.n	8005556 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	691b      	ldr	r3, [r3, #16]
 8005548:	f003 0303 	and.w	r3, r3, #3
 800554c:	2b00      	cmp	r3, #0
 800554e:	d002      	beq.n	8005556 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8005550:	6878      	ldr	r0, [r7, #4]
 8005552:	f000 f8ef 	bl	8005734 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8005556:	6a3b      	ldr	r3, [r7, #32]
 8005558:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800555c:	2b00      	cmp	r3, #0
 800555e:	d00b      	beq.n	8005578 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8005560:	69fb      	ldr	r3, [r7, #28]
 8005562:	f003 0310 	and.w	r3, r3, #16
 8005566:	2b00      	cmp	r3, #0
 8005568:	d006      	beq.n	8005578 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	2210      	movs	r2, #16
 8005570:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8005572:	6878      	ldr	r0, [r7, #4]
 8005574:	f000 f8f2 	bl	800575c <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8005578:	6a3b      	ldr	r3, [r7, #32]
 800557a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800557e:	2b00      	cmp	r3, #0
 8005580:	d00b      	beq.n	800559a <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8005582:	69fb      	ldr	r3, [r7, #28]
 8005584:	f003 0308 	and.w	r3, r3, #8
 8005588:	2b00      	cmp	r3, #0
 800558a:	d006      	beq.n	800559a <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	2208      	movs	r2, #8
 8005592:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8005594:	6878      	ldr	r0, [r7, #4]
 8005596:	f000 f8eb 	bl	8005770 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800559a:	6a3b      	ldr	r3, [r7, #32]
 800559c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d07b      	beq.n	800569c <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80055a4:	69fb      	ldr	r3, [r7, #28]
 80055a6:	f003 0304 	and.w	r3, r3, #4
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d072      	beq.n	8005694 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80055ae:	6a3b      	ldr	r3, [r7, #32]
 80055b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d008      	beq.n	80055ca <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d003      	beq.n	80055ca <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80055c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055c4:	f043 0301 	orr.w	r3, r3, #1
 80055c8:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80055ca:	6a3b      	ldr	r3, [r7, #32]
 80055cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d008      	beq.n	80055e6 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d003      	beq.n	80055e6 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80055de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055e0:	f043 0302 	orr.w	r3, r3, #2
 80055e4:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80055e6:	6a3b      	ldr	r3, [r7, #32]
 80055e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d008      	beq.n	8005602 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d003      	beq.n	8005602 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80055fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055fc:	f043 0304 	orr.w	r3, r3, #4
 8005600:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8005602:	6a3b      	ldr	r3, [r7, #32]
 8005604:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005608:	2b00      	cmp	r3, #0
 800560a:	d043      	beq.n	8005694 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8005612:	2b00      	cmp	r3, #0
 8005614:	d03e      	beq.n	8005694 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800561c:	2b60      	cmp	r3, #96	; 0x60
 800561e:	d02b      	beq.n	8005678 <HAL_CAN_IRQHandler+0x32a>
 8005620:	2b60      	cmp	r3, #96	; 0x60
 8005622:	d82e      	bhi.n	8005682 <HAL_CAN_IRQHandler+0x334>
 8005624:	2b50      	cmp	r3, #80	; 0x50
 8005626:	d022      	beq.n	800566e <HAL_CAN_IRQHandler+0x320>
 8005628:	2b50      	cmp	r3, #80	; 0x50
 800562a:	d82a      	bhi.n	8005682 <HAL_CAN_IRQHandler+0x334>
 800562c:	2b40      	cmp	r3, #64	; 0x40
 800562e:	d019      	beq.n	8005664 <HAL_CAN_IRQHandler+0x316>
 8005630:	2b40      	cmp	r3, #64	; 0x40
 8005632:	d826      	bhi.n	8005682 <HAL_CAN_IRQHandler+0x334>
 8005634:	2b30      	cmp	r3, #48	; 0x30
 8005636:	d010      	beq.n	800565a <HAL_CAN_IRQHandler+0x30c>
 8005638:	2b30      	cmp	r3, #48	; 0x30
 800563a:	d822      	bhi.n	8005682 <HAL_CAN_IRQHandler+0x334>
 800563c:	2b10      	cmp	r3, #16
 800563e:	d002      	beq.n	8005646 <HAL_CAN_IRQHandler+0x2f8>
 8005640:	2b20      	cmp	r3, #32
 8005642:	d005      	beq.n	8005650 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8005644:	e01d      	b.n	8005682 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8005646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005648:	f043 0308 	orr.w	r3, r3, #8
 800564c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800564e:	e019      	b.n	8005684 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8005650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005652:	f043 0310 	orr.w	r3, r3, #16
 8005656:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005658:	e014      	b.n	8005684 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800565a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800565c:	f043 0320 	orr.w	r3, r3, #32
 8005660:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005662:	e00f      	b.n	8005684 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8005664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005666:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800566a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800566c:	e00a      	b.n	8005684 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800566e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005670:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005674:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005676:	e005      	b.n	8005684 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8005678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800567a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800567e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005680:	e000      	b.n	8005684 <HAL_CAN_IRQHandler+0x336>
            break;
 8005682:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	699a      	ldr	r2, [r3, #24]
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8005692:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	2204      	movs	r2, #4
 800569a:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800569c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d008      	beq.n	80056b4 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80056a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056a8:	431a      	orrs	r2, r3
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80056ae:	6878      	ldr	r0, [r7, #4]
 80056b0:	f7fc ff64 	bl	800257c <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80056b4:	bf00      	nop
 80056b6:	3728      	adds	r7, #40	; 0x28
 80056b8:	46bd      	mov	sp, r7
 80056ba:	bd80      	pop	{r7, pc}

080056bc <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80056bc:	b480      	push	{r7}
 80056be:	b083      	sub	sp, #12
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80056c4:	bf00      	nop
 80056c6:	370c      	adds	r7, #12
 80056c8:	46bd      	mov	sp, r7
 80056ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ce:	4770      	bx	lr

080056d0 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80056d0:	b480      	push	{r7}
 80056d2:	b083      	sub	sp, #12
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80056d8:	bf00      	nop
 80056da:	370c      	adds	r7, #12
 80056dc:	46bd      	mov	sp, r7
 80056de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e2:	4770      	bx	lr

080056e4 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80056e4:	b480      	push	{r7}
 80056e6:	b083      	sub	sp, #12
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80056ec:	bf00      	nop
 80056ee:	370c      	adds	r7, #12
 80056f0:	46bd      	mov	sp, r7
 80056f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f6:	4770      	bx	lr

080056f8 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80056f8:	b480      	push	{r7}
 80056fa:	b083      	sub	sp, #12
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8005700:	bf00      	nop
 8005702:	370c      	adds	r7, #12
 8005704:	46bd      	mov	sp, r7
 8005706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570a:	4770      	bx	lr

0800570c <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800570c:	b480      	push	{r7}
 800570e:	b083      	sub	sp, #12
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8005714:	bf00      	nop
 8005716:	370c      	adds	r7, #12
 8005718:	46bd      	mov	sp, r7
 800571a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571e:	4770      	bx	lr

08005720 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8005720:	b480      	push	{r7}
 8005722:	b083      	sub	sp, #12
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8005728:	bf00      	nop
 800572a:	370c      	adds	r7, #12
 800572c:	46bd      	mov	sp, r7
 800572e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005732:	4770      	bx	lr

08005734 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8005734:	b480      	push	{r7}
 8005736:	b083      	sub	sp, #12
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800573c:	bf00      	nop
 800573e:	370c      	adds	r7, #12
 8005740:	46bd      	mov	sp, r7
 8005742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005746:	4770      	bx	lr

08005748 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8005748:	b480      	push	{r7}
 800574a:	b083      	sub	sp, #12
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8005750:	bf00      	nop
 8005752:	370c      	adds	r7, #12
 8005754:	46bd      	mov	sp, r7
 8005756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575a:	4770      	bx	lr

0800575c <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800575c:	b480      	push	{r7}
 800575e:	b083      	sub	sp, #12
 8005760:	af00      	add	r7, sp, #0
 8005762:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8005764:	bf00      	nop
 8005766:	370c      	adds	r7, #12
 8005768:	46bd      	mov	sp, r7
 800576a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576e:	4770      	bx	lr

08005770 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8005770:	b480      	push	{r7}
 8005772:	b083      	sub	sp, #12
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8005778:	bf00      	nop
 800577a:	370c      	adds	r7, #12
 800577c:	46bd      	mov	sp, r7
 800577e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005782:	4770      	bx	lr

08005784 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005784:	b480      	push	{r7}
 8005786:	b085      	sub	sp, #20
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	f003 0307 	and.w	r3, r3, #7
 8005792:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005794:	4b0c      	ldr	r3, [pc, #48]	; (80057c8 <__NVIC_SetPriorityGrouping+0x44>)
 8005796:	68db      	ldr	r3, [r3, #12]
 8005798:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800579a:	68ba      	ldr	r2, [r7, #8]
 800579c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80057a0:	4013      	ands	r3, r2
 80057a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80057a8:	68bb      	ldr	r3, [r7, #8]
 80057aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80057ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80057b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80057b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80057b6:	4a04      	ldr	r2, [pc, #16]	; (80057c8 <__NVIC_SetPriorityGrouping+0x44>)
 80057b8:	68bb      	ldr	r3, [r7, #8]
 80057ba:	60d3      	str	r3, [r2, #12]
}
 80057bc:	bf00      	nop
 80057be:	3714      	adds	r7, #20
 80057c0:	46bd      	mov	sp, r7
 80057c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c6:	4770      	bx	lr
 80057c8:	e000ed00 	.word	0xe000ed00

080057cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80057cc:	b480      	push	{r7}
 80057ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80057d0:	4b04      	ldr	r3, [pc, #16]	; (80057e4 <__NVIC_GetPriorityGrouping+0x18>)
 80057d2:	68db      	ldr	r3, [r3, #12]
 80057d4:	0a1b      	lsrs	r3, r3, #8
 80057d6:	f003 0307 	and.w	r3, r3, #7
}
 80057da:	4618      	mov	r0, r3
 80057dc:	46bd      	mov	sp, r7
 80057de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e2:	4770      	bx	lr
 80057e4:	e000ed00 	.word	0xe000ed00

080057e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80057e8:	b480      	push	{r7}
 80057ea:	b083      	sub	sp, #12
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	4603      	mov	r3, r0
 80057f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80057f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	db0b      	blt.n	8005812 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80057fa:	79fb      	ldrb	r3, [r7, #7]
 80057fc:	f003 021f 	and.w	r2, r3, #31
 8005800:	4907      	ldr	r1, [pc, #28]	; (8005820 <__NVIC_EnableIRQ+0x38>)
 8005802:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005806:	095b      	lsrs	r3, r3, #5
 8005808:	2001      	movs	r0, #1
 800580a:	fa00 f202 	lsl.w	r2, r0, r2
 800580e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005812:	bf00      	nop
 8005814:	370c      	adds	r7, #12
 8005816:	46bd      	mov	sp, r7
 8005818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581c:	4770      	bx	lr
 800581e:	bf00      	nop
 8005820:	e000e100 	.word	0xe000e100

08005824 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005824:	b480      	push	{r7}
 8005826:	b083      	sub	sp, #12
 8005828:	af00      	add	r7, sp, #0
 800582a:	4603      	mov	r3, r0
 800582c:	6039      	str	r1, [r7, #0]
 800582e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005830:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005834:	2b00      	cmp	r3, #0
 8005836:	db0a      	blt.n	800584e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	b2da      	uxtb	r2, r3
 800583c:	490c      	ldr	r1, [pc, #48]	; (8005870 <__NVIC_SetPriority+0x4c>)
 800583e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005842:	0112      	lsls	r2, r2, #4
 8005844:	b2d2      	uxtb	r2, r2
 8005846:	440b      	add	r3, r1
 8005848:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800584c:	e00a      	b.n	8005864 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	b2da      	uxtb	r2, r3
 8005852:	4908      	ldr	r1, [pc, #32]	; (8005874 <__NVIC_SetPriority+0x50>)
 8005854:	79fb      	ldrb	r3, [r7, #7]
 8005856:	f003 030f 	and.w	r3, r3, #15
 800585a:	3b04      	subs	r3, #4
 800585c:	0112      	lsls	r2, r2, #4
 800585e:	b2d2      	uxtb	r2, r2
 8005860:	440b      	add	r3, r1
 8005862:	761a      	strb	r2, [r3, #24]
}
 8005864:	bf00      	nop
 8005866:	370c      	adds	r7, #12
 8005868:	46bd      	mov	sp, r7
 800586a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586e:	4770      	bx	lr
 8005870:	e000e100 	.word	0xe000e100
 8005874:	e000ed00 	.word	0xe000ed00

08005878 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005878:	b480      	push	{r7}
 800587a:	b089      	sub	sp, #36	; 0x24
 800587c:	af00      	add	r7, sp, #0
 800587e:	60f8      	str	r0, [r7, #12]
 8005880:	60b9      	str	r1, [r7, #8]
 8005882:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	f003 0307 	and.w	r3, r3, #7
 800588a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800588c:	69fb      	ldr	r3, [r7, #28]
 800588e:	f1c3 0307 	rsb	r3, r3, #7
 8005892:	2b04      	cmp	r3, #4
 8005894:	bf28      	it	cs
 8005896:	2304      	movcs	r3, #4
 8005898:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800589a:	69fb      	ldr	r3, [r7, #28]
 800589c:	3304      	adds	r3, #4
 800589e:	2b06      	cmp	r3, #6
 80058a0:	d902      	bls.n	80058a8 <NVIC_EncodePriority+0x30>
 80058a2:	69fb      	ldr	r3, [r7, #28]
 80058a4:	3b03      	subs	r3, #3
 80058a6:	e000      	b.n	80058aa <NVIC_EncodePriority+0x32>
 80058a8:	2300      	movs	r3, #0
 80058aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80058ac:	f04f 32ff 	mov.w	r2, #4294967295
 80058b0:	69bb      	ldr	r3, [r7, #24]
 80058b2:	fa02 f303 	lsl.w	r3, r2, r3
 80058b6:	43da      	mvns	r2, r3
 80058b8:	68bb      	ldr	r3, [r7, #8]
 80058ba:	401a      	ands	r2, r3
 80058bc:	697b      	ldr	r3, [r7, #20]
 80058be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80058c0:	f04f 31ff 	mov.w	r1, #4294967295
 80058c4:	697b      	ldr	r3, [r7, #20]
 80058c6:	fa01 f303 	lsl.w	r3, r1, r3
 80058ca:	43d9      	mvns	r1, r3
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80058d0:	4313      	orrs	r3, r2
         );
}
 80058d2:	4618      	mov	r0, r3
 80058d4:	3724      	adds	r7, #36	; 0x24
 80058d6:	46bd      	mov	sp, r7
 80058d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058dc:	4770      	bx	lr
	...

080058e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80058e0:	b580      	push	{r7, lr}
 80058e2:	b082      	sub	sp, #8
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	3b01      	subs	r3, #1
 80058ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80058f0:	d301      	bcc.n	80058f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80058f2:	2301      	movs	r3, #1
 80058f4:	e00f      	b.n	8005916 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80058f6:	4a0a      	ldr	r2, [pc, #40]	; (8005920 <SysTick_Config+0x40>)
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	3b01      	subs	r3, #1
 80058fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80058fe:	210f      	movs	r1, #15
 8005900:	f04f 30ff 	mov.w	r0, #4294967295
 8005904:	f7ff ff8e 	bl	8005824 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005908:	4b05      	ldr	r3, [pc, #20]	; (8005920 <SysTick_Config+0x40>)
 800590a:	2200      	movs	r2, #0
 800590c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800590e:	4b04      	ldr	r3, [pc, #16]	; (8005920 <SysTick_Config+0x40>)
 8005910:	2207      	movs	r2, #7
 8005912:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005914:	2300      	movs	r3, #0
}
 8005916:	4618      	mov	r0, r3
 8005918:	3708      	adds	r7, #8
 800591a:	46bd      	mov	sp, r7
 800591c:	bd80      	pop	{r7, pc}
 800591e:	bf00      	nop
 8005920:	e000e010 	.word	0xe000e010

08005924 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005924:	b580      	push	{r7, lr}
 8005926:	b082      	sub	sp, #8
 8005928:	af00      	add	r7, sp, #0
 800592a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800592c:	6878      	ldr	r0, [r7, #4]
 800592e:	f7ff ff29 	bl	8005784 <__NVIC_SetPriorityGrouping>
}
 8005932:	bf00      	nop
 8005934:	3708      	adds	r7, #8
 8005936:	46bd      	mov	sp, r7
 8005938:	bd80      	pop	{r7, pc}

0800593a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800593a:	b580      	push	{r7, lr}
 800593c:	b086      	sub	sp, #24
 800593e:	af00      	add	r7, sp, #0
 8005940:	4603      	mov	r3, r0
 8005942:	60b9      	str	r1, [r7, #8]
 8005944:	607a      	str	r2, [r7, #4]
 8005946:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005948:	2300      	movs	r3, #0
 800594a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800594c:	f7ff ff3e 	bl	80057cc <__NVIC_GetPriorityGrouping>
 8005950:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005952:	687a      	ldr	r2, [r7, #4]
 8005954:	68b9      	ldr	r1, [r7, #8]
 8005956:	6978      	ldr	r0, [r7, #20]
 8005958:	f7ff ff8e 	bl	8005878 <NVIC_EncodePriority>
 800595c:	4602      	mov	r2, r0
 800595e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005962:	4611      	mov	r1, r2
 8005964:	4618      	mov	r0, r3
 8005966:	f7ff ff5d 	bl	8005824 <__NVIC_SetPriority>
}
 800596a:	bf00      	nop
 800596c:	3718      	adds	r7, #24
 800596e:	46bd      	mov	sp, r7
 8005970:	bd80      	pop	{r7, pc}

08005972 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005972:	b580      	push	{r7, lr}
 8005974:	b082      	sub	sp, #8
 8005976:	af00      	add	r7, sp, #0
 8005978:	4603      	mov	r3, r0
 800597a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800597c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005980:	4618      	mov	r0, r3
 8005982:	f7ff ff31 	bl	80057e8 <__NVIC_EnableIRQ>
}
 8005986:	bf00      	nop
 8005988:	3708      	adds	r7, #8
 800598a:	46bd      	mov	sp, r7
 800598c:	bd80      	pop	{r7, pc}

0800598e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800598e:	b580      	push	{r7, lr}
 8005990:	b082      	sub	sp, #8
 8005992:	af00      	add	r7, sp, #0
 8005994:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005996:	6878      	ldr	r0, [r7, #4]
 8005998:	f7ff ffa2 	bl	80058e0 <SysTick_Config>
 800599c:	4603      	mov	r3, r0
}
 800599e:	4618      	mov	r0, r3
 80059a0:	3708      	adds	r7, #8
 80059a2:	46bd      	mov	sp, r7
 80059a4:	bd80      	pop	{r7, pc}

080059a6 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 80059a6:	b580      	push	{r7, lr}
 80059a8:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 80059aa:	f000 f802 	bl	80059b2 <HAL_SYSTICK_Callback>
}
 80059ae:	bf00      	nop
 80059b0:	bd80      	pop	{r7, pc}

080059b2 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 80059b2:	b480      	push	{r7}
 80059b4:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 80059b6:	bf00      	nop
 80059b8:	46bd      	mov	sp, r7
 80059ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059be:	4770      	bx	lr

080059c0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80059c0:	b580      	push	{r7, lr}
 80059c2:	b086      	sub	sp, #24
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80059c8:	2300      	movs	r3, #0
 80059ca:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80059cc:	f7fe fc94 	bl	80042f8 <HAL_GetTick>
 80059d0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d101      	bne.n	80059dc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80059d8:	2301      	movs	r3, #1
 80059da:	e099      	b.n	8005b10 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2202      	movs	r2, #2
 80059e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2200      	movs	r2, #0
 80059e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	681a      	ldr	r2, [r3, #0]
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f022 0201 	bic.w	r2, r2, #1
 80059fa:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80059fc:	e00f      	b.n	8005a1e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80059fe:	f7fe fc7b 	bl	80042f8 <HAL_GetTick>
 8005a02:	4602      	mov	r2, r0
 8005a04:	693b      	ldr	r3, [r7, #16]
 8005a06:	1ad3      	subs	r3, r2, r3
 8005a08:	2b05      	cmp	r3, #5
 8005a0a:	d908      	bls.n	8005a1e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2220      	movs	r2, #32
 8005a10:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	2203      	movs	r2, #3
 8005a16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8005a1a:	2303      	movs	r3, #3
 8005a1c:	e078      	b.n	8005b10 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	f003 0301 	and.w	r3, r3, #1
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d1e8      	bne.n	80059fe <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005a34:	697a      	ldr	r2, [r7, #20]
 8005a36:	4b38      	ldr	r3, [pc, #224]	; (8005b18 <HAL_DMA_Init+0x158>)
 8005a38:	4013      	ands	r3, r2
 8005a3a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	685a      	ldr	r2, [r3, #4]
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	689b      	ldr	r3, [r3, #8]
 8005a44:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005a4a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	691b      	ldr	r3, [r3, #16]
 8005a50:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005a56:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	699b      	ldr	r3, [r3, #24]
 8005a5c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005a62:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	6a1b      	ldr	r3, [r3, #32]
 8005a68:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005a6a:	697a      	ldr	r2, [r7, #20]
 8005a6c:	4313      	orrs	r3, r2
 8005a6e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a74:	2b04      	cmp	r3, #4
 8005a76:	d107      	bne.n	8005a88 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a80:	4313      	orrs	r3, r2
 8005a82:	697a      	ldr	r2, [r7, #20]
 8005a84:	4313      	orrs	r3, r2
 8005a86:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	697a      	ldr	r2, [r7, #20]
 8005a8e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	695b      	ldr	r3, [r3, #20]
 8005a96:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005a98:	697b      	ldr	r3, [r7, #20]
 8005a9a:	f023 0307 	bic.w	r3, r3, #7
 8005a9e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aa4:	697a      	ldr	r2, [r7, #20]
 8005aa6:	4313      	orrs	r3, r2
 8005aa8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aae:	2b04      	cmp	r3, #4
 8005ab0:	d117      	bne.n	8005ae2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ab6:	697a      	ldr	r2, [r7, #20]
 8005ab8:	4313      	orrs	r3, r2
 8005aba:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d00e      	beq.n	8005ae2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005ac4:	6878      	ldr	r0, [r7, #4]
 8005ac6:	f000 fb1b 	bl	8006100 <DMA_CheckFifoParam>
 8005aca:	4603      	mov	r3, r0
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d008      	beq.n	8005ae2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2240      	movs	r2, #64	; 0x40
 8005ad4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	2201      	movs	r2, #1
 8005ada:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8005ade:	2301      	movs	r3, #1
 8005ae0:	e016      	b.n	8005b10 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	697a      	ldr	r2, [r7, #20]
 8005ae8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005aea:	6878      	ldr	r0, [r7, #4]
 8005aec:	f000 fad2 	bl	8006094 <DMA_CalcBaseAndBitshift>
 8005af0:	4603      	mov	r3, r0
 8005af2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005af8:	223f      	movs	r2, #63	; 0x3f
 8005afa:	409a      	lsls	r2, r3
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2200      	movs	r2, #0
 8005b04:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	2201      	movs	r2, #1
 8005b0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005b0e:	2300      	movs	r3, #0
}
 8005b10:	4618      	mov	r0, r3
 8005b12:	3718      	adds	r7, #24
 8005b14:	46bd      	mov	sp, r7
 8005b16:	bd80      	pop	{r7, pc}
 8005b18:	f010803f 	.word	0xf010803f

08005b1c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	b086      	sub	sp, #24
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	60f8      	str	r0, [r7, #12]
 8005b24:	60b9      	str	r1, [r7, #8]
 8005b26:	607a      	str	r2, [r7, #4]
 8005b28:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005b2a:	2300      	movs	r3, #0
 8005b2c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b32:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005b3a:	2b01      	cmp	r3, #1
 8005b3c:	d101      	bne.n	8005b42 <HAL_DMA_Start_IT+0x26>
 8005b3e:	2302      	movs	r3, #2
 8005b40:	e040      	b.n	8005bc4 <HAL_DMA_Start_IT+0xa8>
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	2201      	movs	r2, #1
 8005b46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005b50:	b2db      	uxtb	r3, r3
 8005b52:	2b01      	cmp	r3, #1
 8005b54:	d12f      	bne.n	8005bb6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	2202      	movs	r2, #2
 8005b5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	2200      	movs	r2, #0
 8005b62:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005b64:	683b      	ldr	r3, [r7, #0]
 8005b66:	687a      	ldr	r2, [r7, #4]
 8005b68:	68b9      	ldr	r1, [r7, #8]
 8005b6a:	68f8      	ldr	r0, [r7, #12]
 8005b6c:	f000 fa64 	bl	8006038 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b74:	223f      	movs	r2, #63	; 0x3f
 8005b76:	409a      	lsls	r2, r3
 8005b78:	693b      	ldr	r3, [r7, #16]
 8005b7a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	681a      	ldr	r2, [r3, #0]
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	f042 0216 	orr.w	r2, r2, #22
 8005b8a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d007      	beq.n	8005ba4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	681a      	ldr	r2, [r3, #0]
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	f042 0208 	orr.w	r2, r2, #8
 8005ba2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	681a      	ldr	r2, [r3, #0]
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f042 0201 	orr.w	r2, r2, #1
 8005bb2:	601a      	str	r2, [r3, #0]
 8005bb4:	e005      	b.n	8005bc2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	2200      	movs	r2, #0
 8005bba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8005bbe:	2302      	movs	r3, #2
 8005bc0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8005bc2:	7dfb      	ldrb	r3, [r7, #23]
}
 8005bc4:	4618      	mov	r0, r3
 8005bc6:	3718      	adds	r7, #24
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	bd80      	pop	{r7, pc}

08005bcc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005bcc:	b580      	push	{r7, lr}
 8005bce:	b084      	sub	sp, #16
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bd8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8005bda:	f7fe fb8d 	bl	80042f8 <HAL_GetTick>
 8005bde:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005be6:	b2db      	uxtb	r3, r3
 8005be8:	2b02      	cmp	r3, #2
 8005bea:	d008      	beq.n	8005bfe <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	2280      	movs	r2, #128	; 0x80
 8005bf0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	2200      	movs	r2, #0
 8005bf6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8005bfa:	2301      	movs	r3, #1
 8005bfc:	e052      	b.n	8005ca4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	681a      	ldr	r2, [r3, #0]
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f022 0216 	bic.w	r2, r2, #22
 8005c0c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	695a      	ldr	r2, [r3, #20]
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005c1c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d103      	bne.n	8005c2e <HAL_DMA_Abort+0x62>
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d007      	beq.n	8005c3e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	681a      	ldr	r2, [r3, #0]
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	f022 0208 	bic.w	r2, r2, #8
 8005c3c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	681a      	ldr	r2, [r3, #0]
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f022 0201 	bic.w	r2, r2, #1
 8005c4c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005c4e:	e013      	b.n	8005c78 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005c50:	f7fe fb52 	bl	80042f8 <HAL_GetTick>
 8005c54:	4602      	mov	r2, r0
 8005c56:	68bb      	ldr	r3, [r7, #8]
 8005c58:	1ad3      	subs	r3, r2, r3
 8005c5a:	2b05      	cmp	r3, #5
 8005c5c:	d90c      	bls.n	8005c78 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	2220      	movs	r2, #32
 8005c62:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2203      	movs	r2, #3
 8005c68:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2200      	movs	r2, #0
 8005c70:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8005c74:	2303      	movs	r3, #3
 8005c76:	e015      	b.n	8005ca4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f003 0301 	and.w	r3, r3, #1
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d1e4      	bne.n	8005c50 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c8a:	223f      	movs	r2, #63	; 0x3f
 8005c8c:	409a      	lsls	r2, r3
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	2201      	movs	r2, #1
 8005c96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	2200      	movs	r2, #0
 8005c9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8005ca2:	2300      	movs	r3, #0
}
 8005ca4:	4618      	mov	r0, r3
 8005ca6:	3710      	adds	r7, #16
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	bd80      	pop	{r7, pc}

08005cac <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005cac:	b480      	push	{r7}
 8005cae:	b083      	sub	sp, #12
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005cba:	b2db      	uxtb	r3, r3
 8005cbc:	2b02      	cmp	r3, #2
 8005cbe:	d004      	beq.n	8005cca <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2280      	movs	r2, #128	; 0x80
 8005cc4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005cc6:	2301      	movs	r3, #1
 8005cc8:	e00c      	b.n	8005ce4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	2205      	movs	r2, #5
 8005cce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	681a      	ldr	r2, [r3, #0]
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f022 0201 	bic.w	r2, r2, #1
 8005ce0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005ce2:	2300      	movs	r3, #0
}
 8005ce4:	4618      	mov	r0, r3
 8005ce6:	370c      	adds	r7, #12
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cee:	4770      	bx	lr

08005cf0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005cf0:	b580      	push	{r7, lr}
 8005cf2:	b086      	sub	sp, #24
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005cf8:	2300      	movs	r3, #0
 8005cfa:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005cfc:	4b8e      	ldr	r3, [pc, #568]	; (8005f38 <HAL_DMA_IRQHandler+0x248>)
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	4a8e      	ldr	r2, [pc, #568]	; (8005f3c <HAL_DMA_IRQHandler+0x24c>)
 8005d02:	fba2 2303 	umull	r2, r3, r2, r3
 8005d06:	0a9b      	lsrs	r3, r3, #10
 8005d08:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d0e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005d10:	693b      	ldr	r3, [r7, #16]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d1a:	2208      	movs	r2, #8
 8005d1c:	409a      	lsls	r2, r3
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	4013      	ands	r3, r2
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d01a      	beq.n	8005d5c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	f003 0304 	and.w	r3, r3, #4
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d013      	beq.n	8005d5c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	681a      	ldr	r2, [r3, #0]
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	f022 0204 	bic.w	r2, r2, #4
 8005d42:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d48:	2208      	movs	r2, #8
 8005d4a:	409a      	lsls	r2, r3
 8005d4c:	693b      	ldr	r3, [r7, #16]
 8005d4e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d54:	f043 0201 	orr.w	r2, r3, #1
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d60:	2201      	movs	r2, #1
 8005d62:	409a      	lsls	r2, r3
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	4013      	ands	r3, r2
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d012      	beq.n	8005d92 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	695b      	ldr	r3, [r3, #20]
 8005d72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d00b      	beq.n	8005d92 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d7e:	2201      	movs	r2, #1
 8005d80:	409a      	lsls	r2, r3
 8005d82:	693b      	ldr	r3, [r7, #16]
 8005d84:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d8a:	f043 0202 	orr.w	r2, r3, #2
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d96:	2204      	movs	r2, #4
 8005d98:	409a      	lsls	r2, r3
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	4013      	ands	r3, r2
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d012      	beq.n	8005dc8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	f003 0302 	and.w	r3, r3, #2
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d00b      	beq.n	8005dc8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005db4:	2204      	movs	r2, #4
 8005db6:	409a      	lsls	r2, r3
 8005db8:	693b      	ldr	r3, [r7, #16]
 8005dba:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005dc0:	f043 0204 	orr.w	r2, r3, #4
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005dcc:	2210      	movs	r2, #16
 8005dce:	409a      	lsls	r2, r3
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	4013      	ands	r3, r2
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d043      	beq.n	8005e60 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	f003 0308 	and.w	r3, r3, #8
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d03c      	beq.n	8005e60 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005dea:	2210      	movs	r2, #16
 8005dec:	409a      	lsls	r2, r3
 8005dee:	693b      	ldr	r3, [r7, #16]
 8005df0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d018      	beq.n	8005e32 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d108      	bne.n	8005e20 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d024      	beq.n	8005e60 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e1a:	6878      	ldr	r0, [r7, #4]
 8005e1c:	4798      	blx	r3
 8005e1e:	e01f      	b.n	8005e60 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d01b      	beq.n	8005e60 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e2c:	6878      	ldr	r0, [r7, #4]
 8005e2e:	4798      	blx	r3
 8005e30:	e016      	b.n	8005e60 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d107      	bne.n	8005e50 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	681a      	ldr	r2, [r3, #0]
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	f022 0208 	bic.w	r2, r2, #8
 8005e4e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d003      	beq.n	8005e60 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e5c:	6878      	ldr	r0, [r7, #4]
 8005e5e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e64:	2220      	movs	r2, #32
 8005e66:	409a      	lsls	r2, r3
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	4013      	ands	r3, r2
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	f000 808f 	beq.w	8005f90 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	f003 0310 	and.w	r3, r3, #16
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	f000 8087 	beq.w	8005f90 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e86:	2220      	movs	r2, #32
 8005e88:	409a      	lsls	r2, r3
 8005e8a:	693b      	ldr	r3, [r7, #16]
 8005e8c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005e94:	b2db      	uxtb	r3, r3
 8005e96:	2b05      	cmp	r3, #5
 8005e98:	d136      	bne.n	8005f08 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	681a      	ldr	r2, [r3, #0]
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	f022 0216 	bic.w	r2, r2, #22
 8005ea8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	695a      	ldr	r2, [r3, #20]
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005eb8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d103      	bne.n	8005eca <HAL_DMA_IRQHandler+0x1da>
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d007      	beq.n	8005eda <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	681a      	ldr	r2, [r3, #0]
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	f022 0208 	bic.w	r2, r2, #8
 8005ed8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ede:	223f      	movs	r2, #63	; 0x3f
 8005ee0:	409a      	lsls	r2, r3
 8005ee2:	693b      	ldr	r3, [r7, #16]
 8005ee4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	2201      	movs	r2, #1
 8005eea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	2200      	movs	r2, #0
 8005ef2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d07e      	beq.n	8005ffc <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f02:	6878      	ldr	r0, [r7, #4]
 8005f04:	4798      	blx	r3
        }
        return;
 8005f06:	e079      	b.n	8005ffc <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d01d      	beq.n	8005f52 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d10d      	bne.n	8005f40 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d031      	beq.n	8005f90 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f30:	6878      	ldr	r0, [r7, #4]
 8005f32:	4798      	blx	r3
 8005f34:	e02c      	b.n	8005f90 <HAL_DMA_IRQHandler+0x2a0>
 8005f36:	bf00      	nop
 8005f38:	200000b8 	.word	0x200000b8
 8005f3c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d023      	beq.n	8005f90 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f4c:	6878      	ldr	r0, [r7, #4]
 8005f4e:	4798      	blx	r3
 8005f50:	e01e      	b.n	8005f90 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d10f      	bne.n	8005f80 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	681a      	ldr	r2, [r3, #0]
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	f022 0210 	bic.w	r2, r2, #16
 8005f6e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2201      	movs	r2, #1
 8005f74:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d003      	beq.n	8005f90 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f8c:	6878      	ldr	r0, [r7, #4]
 8005f8e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d032      	beq.n	8005ffe <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f9c:	f003 0301 	and.w	r3, r3, #1
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d022      	beq.n	8005fea <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	2205      	movs	r2, #5
 8005fa8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	681a      	ldr	r2, [r3, #0]
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	f022 0201 	bic.w	r2, r2, #1
 8005fba:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005fbc:	68bb      	ldr	r3, [r7, #8]
 8005fbe:	3301      	adds	r3, #1
 8005fc0:	60bb      	str	r3, [r7, #8]
 8005fc2:	697a      	ldr	r2, [r7, #20]
 8005fc4:	429a      	cmp	r2, r3
 8005fc6:	d307      	bcc.n	8005fd8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	f003 0301 	and.w	r3, r3, #1
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d1f2      	bne.n	8005fbc <HAL_DMA_IRQHandler+0x2cc>
 8005fd6:	e000      	b.n	8005fda <HAL_DMA_IRQHandler+0x2ea>
          break;
 8005fd8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	2201      	movs	r2, #1
 8005fde:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d005      	beq.n	8005ffe <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ff6:	6878      	ldr	r0, [r7, #4]
 8005ff8:	4798      	blx	r3
 8005ffa:	e000      	b.n	8005ffe <HAL_DMA_IRQHandler+0x30e>
        return;
 8005ffc:	bf00      	nop
    }
  }
}
 8005ffe:	3718      	adds	r7, #24
 8006000:	46bd      	mov	sp, r7
 8006002:	bd80      	pop	{r7, pc}

08006004 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8006004:	b480      	push	{r7}
 8006006:	b083      	sub	sp, #12
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006012:	b2db      	uxtb	r3, r3
}
 8006014:	4618      	mov	r0, r3
 8006016:	370c      	adds	r7, #12
 8006018:	46bd      	mov	sp, r7
 800601a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601e:	4770      	bx	lr

08006020 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8006020:	b480      	push	{r7}
 8006022:	b083      	sub	sp, #12
 8006024:	af00      	add	r7, sp, #0
 8006026:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 800602c:	4618      	mov	r0, r3
 800602e:	370c      	adds	r7, #12
 8006030:	46bd      	mov	sp, r7
 8006032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006036:	4770      	bx	lr

08006038 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006038:	b480      	push	{r7}
 800603a:	b085      	sub	sp, #20
 800603c:	af00      	add	r7, sp, #0
 800603e:	60f8      	str	r0, [r7, #12]
 8006040:	60b9      	str	r1, [r7, #8]
 8006042:	607a      	str	r2, [r7, #4]
 8006044:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	681a      	ldr	r2, [r3, #0]
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006054:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	683a      	ldr	r2, [r7, #0]
 800605c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	689b      	ldr	r3, [r3, #8]
 8006062:	2b40      	cmp	r3, #64	; 0x40
 8006064:	d108      	bne.n	8006078 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	687a      	ldr	r2, [r7, #4]
 800606c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	68ba      	ldr	r2, [r7, #8]
 8006074:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8006076:	e007      	b.n	8006088 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	68ba      	ldr	r2, [r7, #8]
 800607e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	687a      	ldr	r2, [r7, #4]
 8006086:	60da      	str	r2, [r3, #12]
}
 8006088:	bf00      	nop
 800608a:	3714      	adds	r7, #20
 800608c:	46bd      	mov	sp, r7
 800608e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006092:	4770      	bx	lr

08006094 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006094:	b480      	push	{r7}
 8006096:	b085      	sub	sp, #20
 8006098:	af00      	add	r7, sp, #0
 800609a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	b2db      	uxtb	r3, r3
 80060a2:	3b10      	subs	r3, #16
 80060a4:	4a14      	ldr	r2, [pc, #80]	; (80060f8 <DMA_CalcBaseAndBitshift+0x64>)
 80060a6:	fba2 2303 	umull	r2, r3, r2, r3
 80060aa:	091b      	lsrs	r3, r3, #4
 80060ac:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80060ae:	4a13      	ldr	r2, [pc, #76]	; (80060fc <DMA_CalcBaseAndBitshift+0x68>)
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	4413      	add	r3, r2
 80060b4:	781b      	ldrb	r3, [r3, #0]
 80060b6:	461a      	mov	r2, r3
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	2b03      	cmp	r3, #3
 80060c0:	d909      	bls.n	80060d6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80060ca:	f023 0303 	bic.w	r3, r3, #3
 80060ce:	1d1a      	adds	r2, r3, #4
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	659a      	str	r2, [r3, #88]	; 0x58
 80060d4:	e007      	b.n	80060e6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80060de:	f023 0303 	bic.w	r3, r3, #3
 80060e2:	687a      	ldr	r2, [r7, #4]
 80060e4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80060ea:	4618      	mov	r0, r3
 80060ec:	3714      	adds	r7, #20
 80060ee:	46bd      	mov	sp, r7
 80060f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f4:	4770      	bx	lr
 80060f6:	bf00      	nop
 80060f8:	aaaaaaab 	.word	0xaaaaaaab
 80060fc:	08012714 	.word	0x08012714

08006100 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006100:	b480      	push	{r7}
 8006102:	b085      	sub	sp, #20
 8006104:	af00      	add	r7, sp, #0
 8006106:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006108:	2300      	movs	r3, #0
 800610a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006110:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	699b      	ldr	r3, [r3, #24]
 8006116:	2b00      	cmp	r3, #0
 8006118:	d11f      	bne.n	800615a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800611a:	68bb      	ldr	r3, [r7, #8]
 800611c:	2b03      	cmp	r3, #3
 800611e:	d856      	bhi.n	80061ce <DMA_CheckFifoParam+0xce>
 8006120:	a201      	add	r2, pc, #4	; (adr r2, 8006128 <DMA_CheckFifoParam+0x28>)
 8006122:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006126:	bf00      	nop
 8006128:	08006139 	.word	0x08006139
 800612c:	0800614b 	.word	0x0800614b
 8006130:	08006139 	.word	0x08006139
 8006134:	080061cf 	.word	0x080061cf
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800613c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006140:	2b00      	cmp	r3, #0
 8006142:	d046      	beq.n	80061d2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8006144:	2301      	movs	r3, #1
 8006146:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006148:	e043      	b.n	80061d2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800614e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006152:	d140      	bne.n	80061d6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8006154:	2301      	movs	r3, #1
 8006156:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006158:	e03d      	b.n	80061d6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	699b      	ldr	r3, [r3, #24]
 800615e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006162:	d121      	bne.n	80061a8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8006164:	68bb      	ldr	r3, [r7, #8]
 8006166:	2b03      	cmp	r3, #3
 8006168:	d837      	bhi.n	80061da <DMA_CheckFifoParam+0xda>
 800616a:	a201      	add	r2, pc, #4	; (adr r2, 8006170 <DMA_CheckFifoParam+0x70>)
 800616c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006170:	08006181 	.word	0x08006181
 8006174:	08006187 	.word	0x08006187
 8006178:	08006181 	.word	0x08006181
 800617c:	08006199 	.word	0x08006199
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8006180:	2301      	movs	r3, #1
 8006182:	73fb      	strb	r3, [r7, #15]
      break;
 8006184:	e030      	b.n	80061e8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800618a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800618e:	2b00      	cmp	r3, #0
 8006190:	d025      	beq.n	80061de <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8006192:	2301      	movs	r3, #1
 8006194:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006196:	e022      	b.n	80061de <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800619c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80061a0:	d11f      	bne.n	80061e2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80061a2:	2301      	movs	r3, #1
 80061a4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80061a6:	e01c      	b.n	80061e2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80061a8:	68bb      	ldr	r3, [r7, #8]
 80061aa:	2b02      	cmp	r3, #2
 80061ac:	d903      	bls.n	80061b6 <DMA_CheckFifoParam+0xb6>
 80061ae:	68bb      	ldr	r3, [r7, #8]
 80061b0:	2b03      	cmp	r3, #3
 80061b2:	d003      	beq.n	80061bc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80061b4:	e018      	b.n	80061e8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80061b6:	2301      	movs	r3, #1
 80061b8:	73fb      	strb	r3, [r7, #15]
      break;
 80061ba:	e015      	b.n	80061e8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061c0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d00e      	beq.n	80061e6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80061c8:	2301      	movs	r3, #1
 80061ca:	73fb      	strb	r3, [r7, #15]
      break;
 80061cc:	e00b      	b.n	80061e6 <DMA_CheckFifoParam+0xe6>
      break;
 80061ce:	bf00      	nop
 80061d0:	e00a      	b.n	80061e8 <DMA_CheckFifoParam+0xe8>
      break;
 80061d2:	bf00      	nop
 80061d4:	e008      	b.n	80061e8 <DMA_CheckFifoParam+0xe8>
      break;
 80061d6:	bf00      	nop
 80061d8:	e006      	b.n	80061e8 <DMA_CheckFifoParam+0xe8>
      break;
 80061da:	bf00      	nop
 80061dc:	e004      	b.n	80061e8 <DMA_CheckFifoParam+0xe8>
      break;
 80061de:	bf00      	nop
 80061e0:	e002      	b.n	80061e8 <DMA_CheckFifoParam+0xe8>
      break;   
 80061e2:	bf00      	nop
 80061e4:	e000      	b.n	80061e8 <DMA_CheckFifoParam+0xe8>
      break;
 80061e6:	bf00      	nop
    }
  } 
  
  return status; 
 80061e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80061ea:	4618      	mov	r0, r3
 80061ec:	3714      	adds	r7, #20
 80061ee:	46bd      	mov	sp, r7
 80061f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f4:	4770      	bx	lr
 80061f6:	bf00      	nop

080061f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80061f8:	b480      	push	{r7}
 80061fa:	b089      	sub	sp, #36	; 0x24
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	6078      	str	r0, [r7, #4]
 8006200:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006202:	2300      	movs	r3, #0
 8006204:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8006206:	2300      	movs	r3, #0
 8006208:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800620a:	2300      	movs	r3, #0
 800620c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800620e:	2300      	movs	r3, #0
 8006210:	61fb      	str	r3, [r7, #28]
 8006212:	e16b      	b.n	80064ec <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006214:	2201      	movs	r2, #1
 8006216:	69fb      	ldr	r3, [r7, #28]
 8006218:	fa02 f303 	lsl.w	r3, r2, r3
 800621c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800621e:	683b      	ldr	r3, [r7, #0]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	697a      	ldr	r2, [r7, #20]
 8006224:	4013      	ands	r3, r2
 8006226:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006228:	693a      	ldr	r2, [r7, #16]
 800622a:	697b      	ldr	r3, [r7, #20]
 800622c:	429a      	cmp	r2, r3
 800622e:	f040 815a 	bne.w	80064e6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006232:	683b      	ldr	r3, [r7, #0]
 8006234:	685b      	ldr	r3, [r3, #4]
 8006236:	f003 0303 	and.w	r3, r3, #3
 800623a:	2b01      	cmp	r3, #1
 800623c:	d005      	beq.n	800624a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800623e:	683b      	ldr	r3, [r7, #0]
 8006240:	685b      	ldr	r3, [r3, #4]
 8006242:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006246:	2b02      	cmp	r3, #2
 8006248:	d130      	bne.n	80062ac <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	689b      	ldr	r3, [r3, #8]
 800624e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006250:	69fb      	ldr	r3, [r7, #28]
 8006252:	005b      	lsls	r3, r3, #1
 8006254:	2203      	movs	r2, #3
 8006256:	fa02 f303 	lsl.w	r3, r2, r3
 800625a:	43db      	mvns	r3, r3
 800625c:	69ba      	ldr	r2, [r7, #24]
 800625e:	4013      	ands	r3, r2
 8006260:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006262:	683b      	ldr	r3, [r7, #0]
 8006264:	68da      	ldr	r2, [r3, #12]
 8006266:	69fb      	ldr	r3, [r7, #28]
 8006268:	005b      	lsls	r3, r3, #1
 800626a:	fa02 f303 	lsl.w	r3, r2, r3
 800626e:	69ba      	ldr	r2, [r7, #24]
 8006270:	4313      	orrs	r3, r2
 8006272:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	69ba      	ldr	r2, [r7, #24]
 8006278:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	685b      	ldr	r3, [r3, #4]
 800627e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006280:	2201      	movs	r2, #1
 8006282:	69fb      	ldr	r3, [r7, #28]
 8006284:	fa02 f303 	lsl.w	r3, r2, r3
 8006288:	43db      	mvns	r3, r3
 800628a:	69ba      	ldr	r2, [r7, #24]
 800628c:	4013      	ands	r3, r2
 800628e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006290:	683b      	ldr	r3, [r7, #0]
 8006292:	685b      	ldr	r3, [r3, #4]
 8006294:	091b      	lsrs	r3, r3, #4
 8006296:	f003 0201 	and.w	r2, r3, #1
 800629a:	69fb      	ldr	r3, [r7, #28]
 800629c:	fa02 f303 	lsl.w	r3, r2, r3
 80062a0:	69ba      	ldr	r2, [r7, #24]
 80062a2:	4313      	orrs	r3, r2
 80062a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	69ba      	ldr	r2, [r7, #24]
 80062aa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80062ac:	683b      	ldr	r3, [r7, #0]
 80062ae:	685b      	ldr	r3, [r3, #4]
 80062b0:	f003 0303 	and.w	r3, r3, #3
 80062b4:	2b03      	cmp	r3, #3
 80062b6:	d017      	beq.n	80062e8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	68db      	ldr	r3, [r3, #12]
 80062bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80062be:	69fb      	ldr	r3, [r7, #28]
 80062c0:	005b      	lsls	r3, r3, #1
 80062c2:	2203      	movs	r2, #3
 80062c4:	fa02 f303 	lsl.w	r3, r2, r3
 80062c8:	43db      	mvns	r3, r3
 80062ca:	69ba      	ldr	r2, [r7, #24]
 80062cc:	4013      	ands	r3, r2
 80062ce:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80062d0:	683b      	ldr	r3, [r7, #0]
 80062d2:	689a      	ldr	r2, [r3, #8]
 80062d4:	69fb      	ldr	r3, [r7, #28]
 80062d6:	005b      	lsls	r3, r3, #1
 80062d8:	fa02 f303 	lsl.w	r3, r2, r3
 80062dc:	69ba      	ldr	r2, [r7, #24]
 80062de:	4313      	orrs	r3, r2
 80062e0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	69ba      	ldr	r2, [r7, #24]
 80062e6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80062e8:	683b      	ldr	r3, [r7, #0]
 80062ea:	685b      	ldr	r3, [r3, #4]
 80062ec:	f003 0303 	and.w	r3, r3, #3
 80062f0:	2b02      	cmp	r3, #2
 80062f2:	d123      	bne.n	800633c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80062f4:	69fb      	ldr	r3, [r7, #28]
 80062f6:	08da      	lsrs	r2, r3, #3
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	3208      	adds	r2, #8
 80062fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006300:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006302:	69fb      	ldr	r3, [r7, #28]
 8006304:	f003 0307 	and.w	r3, r3, #7
 8006308:	009b      	lsls	r3, r3, #2
 800630a:	220f      	movs	r2, #15
 800630c:	fa02 f303 	lsl.w	r3, r2, r3
 8006310:	43db      	mvns	r3, r3
 8006312:	69ba      	ldr	r2, [r7, #24]
 8006314:	4013      	ands	r3, r2
 8006316:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006318:	683b      	ldr	r3, [r7, #0]
 800631a:	691a      	ldr	r2, [r3, #16]
 800631c:	69fb      	ldr	r3, [r7, #28]
 800631e:	f003 0307 	and.w	r3, r3, #7
 8006322:	009b      	lsls	r3, r3, #2
 8006324:	fa02 f303 	lsl.w	r3, r2, r3
 8006328:	69ba      	ldr	r2, [r7, #24]
 800632a:	4313      	orrs	r3, r2
 800632c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800632e:	69fb      	ldr	r3, [r7, #28]
 8006330:	08da      	lsrs	r2, r3, #3
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	3208      	adds	r2, #8
 8006336:	69b9      	ldr	r1, [r7, #24]
 8006338:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006342:	69fb      	ldr	r3, [r7, #28]
 8006344:	005b      	lsls	r3, r3, #1
 8006346:	2203      	movs	r2, #3
 8006348:	fa02 f303 	lsl.w	r3, r2, r3
 800634c:	43db      	mvns	r3, r3
 800634e:	69ba      	ldr	r2, [r7, #24]
 8006350:	4013      	ands	r3, r2
 8006352:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006354:	683b      	ldr	r3, [r7, #0]
 8006356:	685b      	ldr	r3, [r3, #4]
 8006358:	f003 0203 	and.w	r2, r3, #3
 800635c:	69fb      	ldr	r3, [r7, #28]
 800635e:	005b      	lsls	r3, r3, #1
 8006360:	fa02 f303 	lsl.w	r3, r2, r3
 8006364:	69ba      	ldr	r2, [r7, #24]
 8006366:	4313      	orrs	r3, r2
 8006368:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	69ba      	ldr	r2, [r7, #24]
 800636e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006370:	683b      	ldr	r3, [r7, #0]
 8006372:	685b      	ldr	r3, [r3, #4]
 8006374:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006378:	2b00      	cmp	r3, #0
 800637a:	f000 80b4 	beq.w	80064e6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800637e:	2300      	movs	r3, #0
 8006380:	60fb      	str	r3, [r7, #12]
 8006382:	4b60      	ldr	r3, [pc, #384]	; (8006504 <HAL_GPIO_Init+0x30c>)
 8006384:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006386:	4a5f      	ldr	r2, [pc, #380]	; (8006504 <HAL_GPIO_Init+0x30c>)
 8006388:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800638c:	6453      	str	r3, [r2, #68]	; 0x44
 800638e:	4b5d      	ldr	r3, [pc, #372]	; (8006504 <HAL_GPIO_Init+0x30c>)
 8006390:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006392:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006396:	60fb      	str	r3, [r7, #12]
 8006398:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800639a:	4a5b      	ldr	r2, [pc, #364]	; (8006508 <HAL_GPIO_Init+0x310>)
 800639c:	69fb      	ldr	r3, [r7, #28]
 800639e:	089b      	lsrs	r3, r3, #2
 80063a0:	3302      	adds	r3, #2
 80063a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80063a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80063a8:	69fb      	ldr	r3, [r7, #28]
 80063aa:	f003 0303 	and.w	r3, r3, #3
 80063ae:	009b      	lsls	r3, r3, #2
 80063b0:	220f      	movs	r2, #15
 80063b2:	fa02 f303 	lsl.w	r3, r2, r3
 80063b6:	43db      	mvns	r3, r3
 80063b8:	69ba      	ldr	r2, [r7, #24]
 80063ba:	4013      	ands	r3, r2
 80063bc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	4a52      	ldr	r2, [pc, #328]	; (800650c <HAL_GPIO_Init+0x314>)
 80063c2:	4293      	cmp	r3, r2
 80063c4:	d02b      	beq.n	800641e <HAL_GPIO_Init+0x226>
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	4a51      	ldr	r2, [pc, #324]	; (8006510 <HAL_GPIO_Init+0x318>)
 80063ca:	4293      	cmp	r3, r2
 80063cc:	d025      	beq.n	800641a <HAL_GPIO_Init+0x222>
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	4a50      	ldr	r2, [pc, #320]	; (8006514 <HAL_GPIO_Init+0x31c>)
 80063d2:	4293      	cmp	r3, r2
 80063d4:	d01f      	beq.n	8006416 <HAL_GPIO_Init+0x21e>
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	4a4f      	ldr	r2, [pc, #316]	; (8006518 <HAL_GPIO_Init+0x320>)
 80063da:	4293      	cmp	r3, r2
 80063dc:	d019      	beq.n	8006412 <HAL_GPIO_Init+0x21a>
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	4a4e      	ldr	r2, [pc, #312]	; (800651c <HAL_GPIO_Init+0x324>)
 80063e2:	4293      	cmp	r3, r2
 80063e4:	d013      	beq.n	800640e <HAL_GPIO_Init+0x216>
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	4a4d      	ldr	r2, [pc, #308]	; (8006520 <HAL_GPIO_Init+0x328>)
 80063ea:	4293      	cmp	r3, r2
 80063ec:	d00d      	beq.n	800640a <HAL_GPIO_Init+0x212>
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	4a4c      	ldr	r2, [pc, #304]	; (8006524 <HAL_GPIO_Init+0x32c>)
 80063f2:	4293      	cmp	r3, r2
 80063f4:	d007      	beq.n	8006406 <HAL_GPIO_Init+0x20e>
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	4a4b      	ldr	r2, [pc, #300]	; (8006528 <HAL_GPIO_Init+0x330>)
 80063fa:	4293      	cmp	r3, r2
 80063fc:	d101      	bne.n	8006402 <HAL_GPIO_Init+0x20a>
 80063fe:	2307      	movs	r3, #7
 8006400:	e00e      	b.n	8006420 <HAL_GPIO_Init+0x228>
 8006402:	2308      	movs	r3, #8
 8006404:	e00c      	b.n	8006420 <HAL_GPIO_Init+0x228>
 8006406:	2306      	movs	r3, #6
 8006408:	e00a      	b.n	8006420 <HAL_GPIO_Init+0x228>
 800640a:	2305      	movs	r3, #5
 800640c:	e008      	b.n	8006420 <HAL_GPIO_Init+0x228>
 800640e:	2304      	movs	r3, #4
 8006410:	e006      	b.n	8006420 <HAL_GPIO_Init+0x228>
 8006412:	2303      	movs	r3, #3
 8006414:	e004      	b.n	8006420 <HAL_GPIO_Init+0x228>
 8006416:	2302      	movs	r3, #2
 8006418:	e002      	b.n	8006420 <HAL_GPIO_Init+0x228>
 800641a:	2301      	movs	r3, #1
 800641c:	e000      	b.n	8006420 <HAL_GPIO_Init+0x228>
 800641e:	2300      	movs	r3, #0
 8006420:	69fa      	ldr	r2, [r7, #28]
 8006422:	f002 0203 	and.w	r2, r2, #3
 8006426:	0092      	lsls	r2, r2, #2
 8006428:	4093      	lsls	r3, r2
 800642a:	69ba      	ldr	r2, [r7, #24]
 800642c:	4313      	orrs	r3, r2
 800642e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006430:	4935      	ldr	r1, [pc, #212]	; (8006508 <HAL_GPIO_Init+0x310>)
 8006432:	69fb      	ldr	r3, [r7, #28]
 8006434:	089b      	lsrs	r3, r3, #2
 8006436:	3302      	adds	r3, #2
 8006438:	69ba      	ldr	r2, [r7, #24]
 800643a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800643e:	4b3b      	ldr	r3, [pc, #236]	; (800652c <HAL_GPIO_Init+0x334>)
 8006440:	689b      	ldr	r3, [r3, #8]
 8006442:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006444:	693b      	ldr	r3, [r7, #16]
 8006446:	43db      	mvns	r3, r3
 8006448:	69ba      	ldr	r2, [r7, #24]
 800644a:	4013      	ands	r3, r2
 800644c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800644e:	683b      	ldr	r3, [r7, #0]
 8006450:	685b      	ldr	r3, [r3, #4]
 8006452:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006456:	2b00      	cmp	r3, #0
 8006458:	d003      	beq.n	8006462 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800645a:	69ba      	ldr	r2, [r7, #24]
 800645c:	693b      	ldr	r3, [r7, #16]
 800645e:	4313      	orrs	r3, r2
 8006460:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006462:	4a32      	ldr	r2, [pc, #200]	; (800652c <HAL_GPIO_Init+0x334>)
 8006464:	69bb      	ldr	r3, [r7, #24]
 8006466:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006468:	4b30      	ldr	r3, [pc, #192]	; (800652c <HAL_GPIO_Init+0x334>)
 800646a:	68db      	ldr	r3, [r3, #12]
 800646c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800646e:	693b      	ldr	r3, [r7, #16]
 8006470:	43db      	mvns	r3, r3
 8006472:	69ba      	ldr	r2, [r7, #24]
 8006474:	4013      	ands	r3, r2
 8006476:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006478:	683b      	ldr	r3, [r7, #0]
 800647a:	685b      	ldr	r3, [r3, #4]
 800647c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006480:	2b00      	cmp	r3, #0
 8006482:	d003      	beq.n	800648c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8006484:	69ba      	ldr	r2, [r7, #24]
 8006486:	693b      	ldr	r3, [r7, #16]
 8006488:	4313      	orrs	r3, r2
 800648a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800648c:	4a27      	ldr	r2, [pc, #156]	; (800652c <HAL_GPIO_Init+0x334>)
 800648e:	69bb      	ldr	r3, [r7, #24]
 8006490:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8006492:	4b26      	ldr	r3, [pc, #152]	; (800652c <HAL_GPIO_Init+0x334>)
 8006494:	685b      	ldr	r3, [r3, #4]
 8006496:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006498:	693b      	ldr	r3, [r7, #16]
 800649a:	43db      	mvns	r3, r3
 800649c:	69ba      	ldr	r2, [r7, #24]
 800649e:	4013      	ands	r3, r2
 80064a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80064a2:	683b      	ldr	r3, [r7, #0]
 80064a4:	685b      	ldr	r3, [r3, #4]
 80064a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d003      	beq.n	80064b6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80064ae:	69ba      	ldr	r2, [r7, #24]
 80064b0:	693b      	ldr	r3, [r7, #16]
 80064b2:	4313      	orrs	r3, r2
 80064b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80064b6:	4a1d      	ldr	r2, [pc, #116]	; (800652c <HAL_GPIO_Init+0x334>)
 80064b8:	69bb      	ldr	r3, [r7, #24]
 80064ba:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80064bc:	4b1b      	ldr	r3, [pc, #108]	; (800652c <HAL_GPIO_Init+0x334>)
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80064c2:	693b      	ldr	r3, [r7, #16]
 80064c4:	43db      	mvns	r3, r3
 80064c6:	69ba      	ldr	r2, [r7, #24]
 80064c8:	4013      	ands	r3, r2
 80064ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80064cc:	683b      	ldr	r3, [r7, #0]
 80064ce:	685b      	ldr	r3, [r3, #4]
 80064d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d003      	beq.n	80064e0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80064d8:	69ba      	ldr	r2, [r7, #24]
 80064da:	693b      	ldr	r3, [r7, #16]
 80064dc:	4313      	orrs	r3, r2
 80064de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80064e0:	4a12      	ldr	r2, [pc, #72]	; (800652c <HAL_GPIO_Init+0x334>)
 80064e2:	69bb      	ldr	r3, [r7, #24]
 80064e4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80064e6:	69fb      	ldr	r3, [r7, #28]
 80064e8:	3301      	adds	r3, #1
 80064ea:	61fb      	str	r3, [r7, #28]
 80064ec:	69fb      	ldr	r3, [r7, #28]
 80064ee:	2b0f      	cmp	r3, #15
 80064f0:	f67f ae90 	bls.w	8006214 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80064f4:	bf00      	nop
 80064f6:	bf00      	nop
 80064f8:	3724      	adds	r7, #36	; 0x24
 80064fa:	46bd      	mov	sp, r7
 80064fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006500:	4770      	bx	lr
 8006502:	bf00      	nop
 8006504:	40023800 	.word	0x40023800
 8006508:	40013800 	.word	0x40013800
 800650c:	40020000 	.word	0x40020000
 8006510:	40020400 	.word	0x40020400
 8006514:	40020800 	.word	0x40020800
 8006518:	40020c00 	.word	0x40020c00
 800651c:	40021000 	.word	0x40021000
 8006520:	40021400 	.word	0x40021400
 8006524:	40021800 	.word	0x40021800
 8006528:	40021c00 	.word	0x40021c00
 800652c:	40013c00 	.word	0x40013c00

08006530 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006530:	b480      	push	{r7}
 8006532:	b085      	sub	sp, #20
 8006534:	af00      	add	r7, sp, #0
 8006536:	6078      	str	r0, [r7, #4]
 8006538:	460b      	mov	r3, r1
 800653a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	691a      	ldr	r2, [r3, #16]
 8006540:	887b      	ldrh	r3, [r7, #2]
 8006542:	4013      	ands	r3, r2
 8006544:	2b00      	cmp	r3, #0
 8006546:	d002      	beq.n	800654e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006548:	2301      	movs	r3, #1
 800654a:	73fb      	strb	r3, [r7, #15]
 800654c:	e001      	b.n	8006552 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800654e:	2300      	movs	r3, #0
 8006550:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006552:	7bfb      	ldrb	r3, [r7, #15]
}
 8006554:	4618      	mov	r0, r3
 8006556:	3714      	adds	r7, #20
 8006558:	46bd      	mov	sp, r7
 800655a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655e:	4770      	bx	lr

08006560 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006560:	b480      	push	{r7}
 8006562:	b083      	sub	sp, #12
 8006564:	af00      	add	r7, sp, #0
 8006566:	6078      	str	r0, [r7, #4]
 8006568:	460b      	mov	r3, r1
 800656a:	807b      	strh	r3, [r7, #2]
 800656c:	4613      	mov	r3, r2
 800656e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006570:	787b      	ldrb	r3, [r7, #1]
 8006572:	2b00      	cmp	r3, #0
 8006574:	d003      	beq.n	800657e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006576:	887a      	ldrh	r2, [r7, #2]
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800657c:	e003      	b.n	8006586 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800657e:	887b      	ldrh	r3, [r7, #2]
 8006580:	041a      	lsls	r2, r3, #16
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	619a      	str	r2, [r3, #24]
}
 8006586:	bf00      	nop
 8006588:	370c      	adds	r7, #12
 800658a:	46bd      	mov	sp, r7
 800658c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006590:	4770      	bx	lr
	...

08006594 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006594:	b580      	push	{r7, lr}
 8006596:	b084      	sub	sp, #16
 8006598:	af00      	add	r7, sp, #0
 800659a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d101      	bne.n	80065a6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80065a2:	2301      	movs	r3, #1
 80065a4:	e12b      	b.n	80067fe <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80065ac:	b2db      	uxtb	r3, r3
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d106      	bne.n	80065c0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	2200      	movs	r2, #0
 80065b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80065ba:	6878      	ldr	r0, [r7, #4]
 80065bc:	f7fa ff32 	bl	8001424 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	2224      	movs	r2, #36	; 0x24
 80065c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	681a      	ldr	r2, [r3, #0]
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	f022 0201 	bic.w	r2, r2, #1
 80065d6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	681a      	ldr	r2, [r3, #0]
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80065e6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	681a      	ldr	r2, [r3, #0]
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80065f6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80065f8:	f002 ffbc 	bl	8009574 <HAL_RCC_GetPCLK1Freq>
 80065fc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	685b      	ldr	r3, [r3, #4]
 8006602:	4a81      	ldr	r2, [pc, #516]	; (8006808 <HAL_I2C_Init+0x274>)
 8006604:	4293      	cmp	r3, r2
 8006606:	d807      	bhi.n	8006618 <HAL_I2C_Init+0x84>
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	4a80      	ldr	r2, [pc, #512]	; (800680c <HAL_I2C_Init+0x278>)
 800660c:	4293      	cmp	r3, r2
 800660e:	bf94      	ite	ls
 8006610:	2301      	movls	r3, #1
 8006612:	2300      	movhi	r3, #0
 8006614:	b2db      	uxtb	r3, r3
 8006616:	e006      	b.n	8006626 <HAL_I2C_Init+0x92>
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	4a7d      	ldr	r2, [pc, #500]	; (8006810 <HAL_I2C_Init+0x27c>)
 800661c:	4293      	cmp	r3, r2
 800661e:	bf94      	ite	ls
 8006620:	2301      	movls	r3, #1
 8006622:	2300      	movhi	r3, #0
 8006624:	b2db      	uxtb	r3, r3
 8006626:	2b00      	cmp	r3, #0
 8006628:	d001      	beq.n	800662e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800662a:	2301      	movs	r3, #1
 800662c:	e0e7      	b.n	80067fe <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	4a78      	ldr	r2, [pc, #480]	; (8006814 <HAL_I2C_Init+0x280>)
 8006632:	fba2 2303 	umull	r2, r3, r2, r3
 8006636:	0c9b      	lsrs	r3, r3, #18
 8006638:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	685b      	ldr	r3, [r3, #4]
 8006640:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	68ba      	ldr	r2, [r7, #8]
 800664a:	430a      	orrs	r2, r1
 800664c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	6a1b      	ldr	r3, [r3, #32]
 8006654:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	685b      	ldr	r3, [r3, #4]
 800665c:	4a6a      	ldr	r2, [pc, #424]	; (8006808 <HAL_I2C_Init+0x274>)
 800665e:	4293      	cmp	r3, r2
 8006660:	d802      	bhi.n	8006668 <HAL_I2C_Init+0xd4>
 8006662:	68bb      	ldr	r3, [r7, #8]
 8006664:	3301      	adds	r3, #1
 8006666:	e009      	b.n	800667c <HAL_I2C_Init+0xe8>
 8006668:	68bb      	ldr	r3, [r7, #8]
 800666a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800666e:	fb02 f303 	mul.w	r3, r2, r3
 8006672:	4a69      	ldr	r2, [pc, #420]	; (8006818 <HAL_I2C_Init+0x284>)
 8006674:	fba2 2303 	umull	r2, r3, r2, r3
 8006678:	099b      	lsrs	r3, r3, #6
 800667a:	3301      	adds	r3, #1
 800667c:	687a      	ldr	r2, [r7, #4]
 800667e:	6812      	ldr	r2, [r2, #0]
 8006680:	430b      	orrs	r3, r1
 8006682:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	69db      	ldr	r3, [r3, #28]
 800668a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800668e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	685b      	ldr	r3, [r3, #4]
 8006696:	495c      	ldr	r1, [pc, #368]	; (8006808 <HAL_I2C_Init+0x274>)
 8006698:	428b      	cmp	r3, r1
 800669a:	d819      	bhi.n	80066d0 <HAL_I2C_Init+0x13c>
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	1e59      	subs	r1, r3, #1
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	685b      	ldr	r3, [r3, #4]
 80066a4:	005b      	lsls	r3, r3, #1
 80066a6:	fbb1 f3f3 	udiv	r3, r1, r3
 80066aa:	1c59      	adds	r1, r3, #1
 80066ac:	f640 73fc 	movw	r3, #4092	; 0xffc
 80066b0:	400b      	ands	r3, r1
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d00a      	beq.n	80066cc <HAL_I2C_Init+0x138>
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	1e59      	subs	r1, r3, #1
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	685b      	ldr	r3, [r3, #4]
 80066be:	005b      	lsls	r3, r3, #1
 80066c0:	fbb1 f3f3 	udiv	r3, r1, r3
 80066c4:	3301      	adds	r3, #1
 80066c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80066ca:	e051      	b.n	8006770 <HAL_I2C_Init+0x1dc>
 80066cc:	2304      	movs	r3, #4
 80066ce:	e04f      	b.n	8006770 <HAL_I2C_Init+0x1dc>
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	689b      	ldr	r3, [r3, #8]
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d111      	bne.n	80066fc <HAL_I2C_Init+0x168>
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	1e58      	subs	r0, r3, #1
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	6859      	ldr	r1, [r3, #4]
 80066e0:	460b      	mov	r3, r1
 80066e2:	005b      	lsls	r3, r3, #1
 80066e4:	440b      	add	r3, r1
 80066e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80066ea:	3301      	adds	r3, #1
 80066ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	bf0c      	ite	eq
 80066f4:	2301      	moveq	r3, #1
 80066f6:	2300      	movne	r3, #0
 80066f8:	b2db      	uxtb	r3, r3
 80066fa:	e012      	b.n	8006722 <HAL_I2C_Init+0x18e>
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	1e58      	subs	r0, r3, #1
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	6859      	ldr	r1, [r3, #4]
 8006704:	460b      	mov	r3, r1
 8006706:	009b      	lsls	r3, r3, #2
 8006708:	440b      	add	r3, r1
 800670a:	0099      	lsls	r1, r3, #2
 800670c:	440b      	add	r3, r1
 800670e:	fbb0 f3f3 	udiv	r3, r0, r3
 8006712:	3301      	adds	r3, #1
 8006714:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006718:	2b00      	cmp	r3, #0
 800671a:	bf0c      	ite	eq
 800671c:	2301      	moveq	r3, #1
 800671e:	2300      	movne	r3, #0
 8006720:	b2db      	uxtb	r3, r3
 8006722:	2b00      	cmp	r3, #0
 8006724:	d001      	beq.n	800672a <HAL_I2C_Init+0x196>
 8006726:	2301      	movs	r3, #1
 8006728:	e022      	b.n	8006770 <HAL_I2C_Init+0x1dc>
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	689b      	ldr	r3, [r3, #8]
 800672e:	2b00      	cmp	r3, #0
 8006730:	d10e      	bne.n	8006750 <HAL_I2C_Init+0x1bc>
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	1e58      	subs	r0, r3, #1
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	6859      	ldr	r1, [r3, #4]
 800673a:	460b      	mov	r3, r1
 800673c:	005b      	lsls	r3, r3, #1
 800673e:	440b      	add	r3, r1
 8006740:	fbb0 f3f3 	udiv	r3, r0, r3
 8006744:	3301      	adds	r3, #1
 8006746:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800674a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800674e:	e00f      	b.n	8006770 <HAL_I2C_Init+0x1dc>
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	1e58      	subs	r0, r3, #1
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	6859      	ldr	r1, [r3, #4]
 8006758:	460b      	mov	r3, r1
 800675a:	009b      	lsls	r3, r3, #2
 800675c:	440b      	add	r3, r1
 800675e:	0099      	lsls	r1, r3, #2
 8006760:	440b      	add	r3, r1
 8006762:	fbb0 f3f3 	udiv	r3, r0, r3
 8006766:	3301      	adds	r3, #1
 8006768:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800676c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006770:	6879      	ldr	r1, [r7, #4]
 8006772:	6809      	ldr	r1, [r1, #0]
 8006774:	4313      	orrs	r3, r2
 8006776:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	69da      	ldr	r2, [r3, #28]
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	6a1b      	ldr	r3, [r3, #32]
 800678a:	431a      	orrs	r2, r3
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	430a      	orrs	r2, r1
 8006792:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	689b      	ldr	r3, [r3, #8]
 800679a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800679e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80067a2:	687a      	ldr	r2, [r7, #4]
 80067a4:	6911      	ldr	r1, [r2, #16]
 80067a6:	687a      	ldr	r2, [r7, #4]
 80067a8:	68d2      	ldr	r2, [r2, #12]
 80067aa:	4311      	orrs	r1, r2
 80067ac:	687a      	ldr	r2, [r7, #4]
 80067ae:	6812      	ldr	r2, [r2, #0]
 80067b0:	430b      	orrs	r3, r1
 80067b2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	68db      	ldr	r3, [r3, #12]
 80067ba:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	695a      	ldr	r2, [r3, #20]
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	699b      	ldr	r3, [r3, #24]
 80067c6:	431a      	orrs	r2, r3
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	430a      	orrs	r2, r1
 80067ce:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	681a      	ldr	r2, [r3, #0]
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	f042 0201 	orr.w	r2, r2, #1
 80067de:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	2200      	movs	r2, #0
 80067e4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	2220      	movs	r2, #32
 80067ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	2200      	movs	r2, #0
 80067f2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	2200      	movs	r2, #0
 80067f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80067fc:	2300      	movs	r3, #0
}
 80067fe:	4618      	mov	r0, r3
 8006800:	3710      	adds	r7, #16
 8006802:	46bd      	mov	sp, r7
 8006804:	bd80      	pop	{r7, pc}
 8006806:	bf00      	nop
 8006808:	000186a0 	.word	0x000186a0
 800680c:	001e847f 	.word	0x001e847f
 8006810:	003d08ff 	.word	0x003d08ff
 8006814:	431bde83 	.word	0x431bde83
 8006818:	10624dd3 	.word	0x10624dd3

0800681c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800681c:	b580      	push	{r7, lr}
 800681e:	b088      	sub	sp, #32
 8006820:	af02      	add	r7, sp, #8
 8006822:	60f8      	str	r0, [r7, #12]
 8006824:	607a      	str	r2, [r7, #4]
 8006826:	461a      	mov	r2, r3
 8006828:	460b      	mov	r3, r1
 800682a:	817b      	strh	r3, [r7, #10]
 800682c:	4613      	mov	r3, r2
 800682e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006830:	f7fd fd62 	bl	80042f8 <HAL_GetTick>
 8006834:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800683c:	b2db      	uxtb	r3, r3
 800683e:	2b20      	cmp	r3, #32
 8006840:	f040 80e0 	bne.w	8006a04 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006844:	697b      	ldr	r3, [r7, #20]
 8006846:	9300      	str	r3, [sp, #0]
 8006848:	2319      	movs	r3, #25
 800684a:	2201      	movs	r2, #1
 800684c:	4970      	ldr	r1, [pc, #448]	; (8006a10 <HAL_I2C_Master_Transmit+0x1f4>)
 800684e:	68f8      	ldr	r0, [r7, #12]
 8006850:	f001 ffea 	bl	8008828 <I2C_WaitOnFlagUntilTimeout>
 8006854:	4603      	mov	r3, r0
 8006856:	2b00      	cmp	r3, #0
 8006858:	d001      	beq.n	800685e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800685a:	2302      	movs	r3, #2
 800685c:	e0d3      	b.n	8006a06 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006864:	2b01      	cmp	r3, #1
 8006866:	d101      	bne.n	800686c <HAL_I2C_Master_Transmit+0x50>
 8006868:	2302      	movs	r3, #2
 800686a:	e0cc      	b.n	8006a06 <HAL_I2C_Master_Transmit+0x1ea>
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	2201      	movs	r2, #1
 8006870:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	f003 0301 	and.w	r3, r3, #1
 800687e:	2b01      	cmp	r3, #1
 8006880:	d007      	beq.n	8006892 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	681a      	ldr	r2, [r3, #0]
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	f042 0201 	orr.w	r2, r2, #1
 8006890:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	681a      	ldr	r2, [r3, #0]
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80068a0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	2221      	movs	r2, #33	; 0x21
 80068a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	2210      	movs	r2, #16
 80068ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	2200      	movs	r2, #0
 80068b6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	687a      	ldr	r2, [r7, #4]
 80068bc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	893a      	ldrh	r2, [r7, #8]
 80068c2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068c8:	b29a      	uxth	r2, r3
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	4a50      	ldr	r2, [pc, #320]	; (8006a14 <HAL_I2C_Master_Transmit+0x1f8>)
 80068d2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80068d4:	8979      	ldrh	r1, [r7, #10]
 80068d6:	697b      	ldr	r3, [r7, #20]
 80068d8:	6a3a      	ldr	r2, [r7, #32]
 80068da:	68f8      	ldr	r0, [r7, #12]
 80068dc:	f001 fd92 	bl	8008404 <I2C_MasterRequestWrite>
 80068e0:	4603      	mov	r3, r0
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d001      	beq.n	80068ea <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80068e6:	2301      	movs	r3, #1
 80068e8:	e08d      	b.n	8006a06 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80068ea:	2300      	movs	r3, #0
 80068ec:	613b      	str	r3, [r7, #16]
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	695b      	ldr	r3, [r3, #20]
 80068f4:	613b      	str	r3, [r7, #16]
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	699b      	ldr	r3, [r3, #24]
 80068fc:	613b      	str	r3, [r7, #16]
 80068fe:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8006900:	e066      	b.n	80069d0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006902:	697a      	ldr	r2, [r7, #20]
 8006904:	6a39      	ldr	r1, [r7, #32]
 8006906:	68f8      	ldr	r0, [r7, #12]
 8006908:	f002 f864 	bl	80089d4 <I2C_WaitOnTXEFlagUntilTimeout>
 800690c:	4603      	mov	r3, r0
 800690e:	2b00      	cmp	r3, #0
 8006910:	d00d      	beq.n	800692e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006916:	2b04      	cmp	r3, #4
 8006918:	d107      	bne.n	800692a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	681a      	ldr	r2, [r3, #0]
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006928:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800692a:	2301      	movs	r3, #1
 800692c:	e06b      	b.n	8006a06 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006932:	781a      	ldrb	r2, [r3, #0]
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800693e:	1c5a      	adds	r2, r3, #1
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006948:	b29b      	uxth	r3, r3
 800694a:	3b01      	subs	r3, #1
 800694c:	b29a      	uxth	r2, r3
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006956:	3b01      	subs	r3, #1
 8006958:	b29a      	uxth	r2, r3
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	695b      	ldr	r3, [r3, #20]
 8006964:	f003 0304 	and.w	r3, r3, #4
 8006968:	2b04      	cmp	r3, #4
 800696a:	d11b      	bne.n	80069a4 <HAL_I2C_Master_Transmit+0x188>
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006970:	2b00      	cmp	r3, #0
 8006972:	d017      	beq.n	80069a4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006978:	781a      	ldrb	r2, [r3, #0]
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006984:	1c5a      	adds	r2, r3, #1
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800698e:	b29b      	uxth	r3, r3
 8006990:	3b01      	subs	r3, #1
 8006992:	b29a      	uxth	r2, r3
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800699c:	3b01      	subs	r3, #1
 800699e:	b29a      	uxth	r2, r3
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80069a4:	697a      	ldr	r2, [r7, #20]
 80069a6:	6a39      	ldr	r1, [r7, #32]
 80069a8:	68f8      	ldr	r0, [r7, #12]
 80069aa:	f002 f854 	bl	8008a56 <I2C_WaitOnBTFFlagUntilTimeout>
 80069ae:	4603      	mov	r3, r0
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d00d      	beq.n	80069d0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069b8:	2b04      	cmp	r3, #4
 80069ba:	d107      	bne.n	80069cc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	681a      	ldr	r2, [r3, #0]
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80069ca:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80069cc:	2301      	movs	r3, #1
 80069ce:	e01a      	b.n	8006a06 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d194      	bne.n	8006902 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	681a      	ldr	r2, [r3, #0]
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80069e6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	2220      	movs	r2, #32
 80069ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	2200      	movs	r2, #0
 80069f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	2200      	movs	r2, #0
 80069fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006a00:	2300      	movs	r3, #0
 8006a02:	e000      	b.n	8006a06 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8006a04:	2302      	movs	r3, #2
  }
}
 8006a06:	4618      	mov	r0, r3
 8006a08:	3718      	adds	r7, #24
 8006a0a:	46bd      	mov	sp, r7
 8006a0c:	bd80      	pop	{r7, pc}
 8006a0e:	bf00      	nop
 8006a10:	00100002 	.word	0x00100002
 8006a14:	ffff0000 	.word	0xffff0000

08006a18 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006a18:	b580      	push	{r7, lr}
 8006a1a:	b08c      	sub	sp, #48	; 0x30
 8006a1c:	af02      	add	r7, sp, #8
 8006a1e:	60f8      	str	r0, [r7, #12]
 8006a20:	4608      	mov	r0, r1
 8006a22:	4611      	mov	r1, r2
 8006a24:	461a      	mov	r2, r3
 8006a26:	4603      	mov	r3, r0
 8006a28:	817b      	strh	r3, [r7, #10]
 8006a2a:	460b      	mov	r3, r1
 8006a2c:	813b      	strh	r3, [r7, #8]
 8006a2e:	4613      	mov	r3, r2
 8006a30:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006a32:	f7fd fc61 	bl	80042f8 <HAL_GetTick>
 8006a36:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a3e:	b2db      	uxtb	r3, r3
 8006a40:	2b20      	cmp	r3, #32
 8006a42:	f040 8208 	bne.w	8006e56 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a48:	9300      	str	r3, [sp, #0]
 8006a4a:	2319      	movs	r3, #25
 8006a4c:	2201      	movs	r2, #1
 8006a4e:	497b      	ldr	r1, [pc, #492]	; (8006c3c <HAL_I2C_Mem_Read+0x224>)
 8006a50:	68f8      	ldr	r0, [r7, #12]
 8006a52:	f001 fee9 	bl	8008828 <I2C_WaitOnFlagUntilTimeout>
 8006a56:	4603      	mov	r3, r0
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d001      	beq.n	8006a60 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8006a5c:	2302      	movs	r3, #2
 8006a5e:	e1fb      	b.n	8006e58 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a66:	2b01      	cmp	r3, #1
 8006a68:	d101      	bne.n	8006a6e <HAL_I2C_Mem_Read+0x56>
 8006a6a:	2302      	movs	r3, #2
 8006a6c:	e1f4      	b.n	8006e58 <HAL_I2C_Mem_Read+0x440>
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	2201      	movs	r2, #1
 8006a72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	f003 0301 	and.w	r3, r3, #1
 8006a80:	2b01      	cmp	r3, #1
 8006a82:	d007      	beq.n	8006a94 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	681a      	ldr	r2, [r3, #0]
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	f042 0201 	orr.w	r2, r2, #1
 8006a92:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	681a      	ldr	r2, [r3, #0]
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006aa2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	2222      	movs	r2, #34	; 0x22
 8006aa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	2240      	movs	r2, #64	; 0x40
 8006ab0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	2200      	movs	r2, #0
 8006ab8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006abe:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8006ac4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006aca:	b29a      	uxth	r2, r3
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	4a5b      	ldr	r2, [pc, #364]	; (8006c40 <HAL_I2C_Mem_Read+0x228>)
 8006ad4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006ad6:	88f8      	ldrh	r0, [r7, #6]
 8006ad8:	893a      	ldrh	r2, [r7, #8]
 8006ada:	8979      	ldrh	r1, [r7, #10]
 8006adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ade:	9301      	str	r3, [sp, #4]
 8006ae0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ae2:	9300      	str	r3, [sp, #0]
 8006ae4:	4603      	mov	r3, r0
 8006ae6:	68f8      	ldr	r0, [r7, #12]
 8006ae8:	f001 fd0e 	bl	8008508 <I2C_RequestMemoryRead>
 8006aec:	4603      	mov	r3, r0
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d001      	beq.n	8006af6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8006af2:	2301      	movs	r3, #1
 8006af4:	e1b0      	b.n	8006e58 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d113      	bne.n	8006b26 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006afe:	2300      	movs	r3, #0
 8006b00:	623b      	str	r3, [r7, #32]
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	695b      	ldr	r3, [r3, #20]
 8006b08:	623b      	str	r3, [r7, #32]
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	699b      	ldr	r3, [r3, #24]
 8006b10:	623b      	str	r3, [r7, #32]
 8006b12:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	681a      	ldr	r2, [r3, #0]
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006b22:	601a      	str	r2, [r3, #0]
 8006b24:	e184      	b.n	8006e30 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b2a:	2b01      	cmp	r3, #1
 8006b2c:	d11b      	bne.n	8006b66 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	681a      	ldr	r2, [r3, #0]
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006b3c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006b3e:	2300      	movs	r3, #0
 8006b40:	61fb      	str	r3, [r7, #28]
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	695b      	ldr	r3, [r3, #20]
 8006b48:	61fb      	str	r3, [r7, #28]
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	699b      	ldr	r3, [r3, #24]
 8006b50:	61fb      	str	r3, [r7, #28]
 8006b52:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	681a      	ldr	r2, [r3, #0]
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006b62:	601a      	str	r2, [r3, #0]
 8006b64:	e164      	b.n	8006e30 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b6a:	2b02      	cmp	r3, #2
 8006b6c:	d11b      	bne.n	8006ba6 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	681a      	ldr	r2, [r3, #0]
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006b7c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	681a      	ldr	r2, [r3, #0]
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006b8c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006b8e:	2300      	movs	r3, #0
 8006b90:	61bb      	str	r3, [r7, #24]
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	695b      	ldr	r3, [r3, #20]
 8006b98:	61bb      	str	r3, [r7, #24]
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	699b      	ldr	r3, [r3, #24]
 8006ba0:	61bb      	str	r3, [r7, #24]
 8006ba2:	69bb      	ldr	r3, [r7, #24]
 8006ba4:	e144      	b.n	8006e30 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006ba6:	2300      	movs	r3, #0
 8006ba8:	617b      	str	r3, [r7, #20]
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	695b      	ldr	r3, [r3, #20]
 8006bb0:	617b      	str	r3, [r7, #20]
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	699b      	ldr	r3, [r3, #24]
 8006bb8:	617b      	str	r3, [r7, #20]
 8006bba:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8006bbc:	e138      	b.n	8006e30 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006bc2:	2b03      	cmp	r3, #3
 8006bc4:	f200 80f1 	bhi.w	8006daa <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006bcc:	2b01      	cmp	r3, #1
 8006bce:	d123      	bne.n	8006c18 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006bd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006bd2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006bd4:	68f8      	ldr	r0, [r7, #12]
 8006bd6:	f001 ffb1 	bl	8008b3c <I2C_WaitOnRXNEFlagUntilTimeout>
 8006bda:	4603      	mov	r3, r0
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d001      	beq.n	8006be4 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8006be0:	2301      	movs	r3, #1
 8006be2:	e139      	b.n	8006e58 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	691a      	ldr	r2, [r3, #16]
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bee:	b2d2      	uxtb	r2, r2
 8006bf0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bf6:	1c5a      	adds	r2, r3, #1
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c00:	3b01      	subs	r3, #1
 8006c02:	b29a      	uxth	r2, r3
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c0c:	b29b      	uxth	r3, r3
 8006c0e:	3b01      	subs	r3, #1
 8006c10:	b29a      	uxth	r2, r3
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006c16:	e10b      	b.n	8006e30 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c1c:	2b02      	cmp	r3, #2
 8006c1e:	d14e      	bne.n	8006cbe <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c22:	9300      	str	r3, [sp, #0]
 8006c24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c26:	2200      	movs	r2, #0
 8006c28:	4906      	ldr	r1, [pc, #24]	; (8006c44 <HAL_I2C_Mem_Read+0x22c>)
 8006c2a:	68f8      	ldr	r0, [r7, #12]
 8006c2c:	f001 fdfc 	bl	8008828 <I2C_WaitOnFlagUntilTimeout>
 8006c30:	4603      	mov	r3, r0
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d008      	beq.n	8006c48 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8006c36:	2301      	movs	r3, #1
 8006c38:	e10e      	b.n	8006e58 <HAL_I2C_Mem_Read+0x440>
 8006c3a:	bf00      	nop
 8006c3c:	00100002 	.word	0x00100002
 8006c40:	ffff0000 	.word	0xffff0000
 8006c44:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	681a      	ldr	r2, [r3, #0]
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006c56:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	691a      	ldr	r2, [r3, #16]
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c62:	b2d2      	uxtb	r2, r2
 8006c64:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c6a:	1c5a      	adds	r2, r3, #1
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c74:	3b01      	subs	r3, #1
 8006c76:	b29a      	uxth	r2, r3
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c80:	b29b      	uxth	r3, r3
 8006c82:	3b01      	subs	r3, #1
 8006c84:	b29a      	uxth	r2, r3
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	691a      	ldr	r2, [r3, #16]
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c94:	b2d2      	uxtb	r2, r2
 8006c96:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c9c:	1c5a      	adds	r2, r3, #1
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ca6:	3b01      	subs	r3, #1
 8006ca8:	b29a      	uxth	r2, r3
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006cb2:	b29b      	uxth	r3, r3
 8006cb4:	3b01      	subs	r3, #1
 8006cb6:	b29a      	uxth	r2, r3
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006cbc:	e0b8      	b.n	8006e30 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cc0:	9300      	str	r3, [sp, #0]
 8006cc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cc4:	2200      	movs	r2, #0
 8006cc6:	4966      	ldr	r1, [pc, #408]	; (8006e60 <HAL_I2C_Mem_Read+0x448>)
 8006cc8:	68f8      	ldr	r0, [r7, #12]
 8006cca:	f001 fdad 	bl	8008828 <I2C_WaitOnFlagUntilTimeout>
 8006cce:	4603      	mov	r3, r0
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d001      	beq.n	8006cd8 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8006cd4:	2301      	movs	r3, #1
 8006cd6:	e0bf      	b.n	8006e58 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	681a      	ldr	r2, [r3, #0]
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006ce6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	691a      	ldr	r2, [r3, #16]
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cf2:	b2d2      	uxtb	r2, r2
 8006cf4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cfa:	1c5a      	adds	r2, r3, #1
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d04:	3b01      	subs	r3, #1
 8006d06:	b29a      	uxth	r2, r3
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d10:	b29b      	uxth	r3, r3
 8006d12:	3b01      	subs	r3, #1
 8006d14:	b29a      	uxth	r2, r3
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d1c:	9300      	str	r3, [sp, #0]
 8006d1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d20:	2200      	movs	r2, #0
 8006d22:	494f      	ldr	r1, [pc, #316]	; (8006e60 <HAL_I2C_Mem_Read+0x448>)
 8006d24:	68f8      	ldr	r0, [r7, #12]
 8006d26:	f001 fd7f 	bl	8008828 <I2C_WaitOnFlagUntilTimeout>
 8006d2a:	4603      	mov	r3, r0
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d001      	beq.n	8006d34 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8006d30:	2301      	movs	r3, #1
 8006d32:	e091      	b.n	8006e58 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	681a      	ldr	r2, [r3, #0]
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006d42:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	691a      	ldr	r2, [r3, #16]
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d4e:	b2d2      	uxtb	r2, r2
 8006d50:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d56:	1c5a      	adds	r2, r3, #1
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d60:	3b01      	subs	r3, #1
 8006d62:	b29a      	uxth	r2, r3
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d6c:	b29b      	uxth	r3, r3
 8006d6e:	3b01      	subs	r3, #1
 8006d70:	b29a      	uxth	r2, r3
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	691a      	ldr	r2, [r3, #16]
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d80:	b2d2      	uxtb	r2, r2
 8006d82:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d88:	1c5a      	adds	r2, r3, #1
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d92:	3b01      	subs	r3, #1
 8006d94:	b29a      	uxth	r2, r3
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d9e:	b29b      	uxth	r3, r3
 8006da0:	3b01      	subs	r3, #1
 8006da2:	b29a      	uxth	r2, r3
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006da8:	e042      	b.n	8006e30 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006daa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006dac:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006dae:	68f8      	ldr	r0, [r7, #12]
 8006db0:	f001 fec4 	bl	8008b3c <I2C_WaitOnRXNEFlagUntilTimeout>
 8006db4:	4603      	mov	r3, r0
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d001      	beq.n	8006dbe <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8006dba:	2301      	movs	r3, #1
 8006dbc:	e04c      	b.n	8006e58 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	691a      	ldr	r2, [r3, #16]
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dc8:	b2d2      	uxtb	r2, r2
 8006dca:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dd0:	1c5a      	adds	r2, r3, #1
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006dda:	3b01      	subs	r3, #1
 8006ddc:	b29a      	uxth	r2, r3
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006de6:	b29b      	uxth	r3, r3
 8006de8:	3b01      	subs	r3, #1
 8006dea:	b29a      	uxth	r2, r3
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	695b      	ldr	r3, [r3, #20]
 8006df6:	f003 0304 	and.w	r3, r3, #4
 8006dfa:	2b04      	cmp	r3, #4
 8006dfc:	d118      	bne.n	8006e30 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	691a      	ldr	r2, [r3, #16]
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e08:	b2d2      	uxtb	r2, r2
 8006e0a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e10:	1c5a      	adds	r2, r3, #1
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e1a:	3b01      	subs	r3, #1
 8006e1c:	b29a      	uxth	r2, r3
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e26:	b29b      	uxth	r3, r3
 8006e28:	3b01      	subs	r3, #1
 8006e2a:	b29a      	uxth	r2, r3
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	f47f aec2 	bne.w	8006bbe <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	2220      	movs	r2, #32
 8006e3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	2200      	movs	r2, #0
 8006e46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	2200      	movs	r2, #0
 8006e4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006e52:	2300      	movs	r3, #0
 8006e54:	e000      	b.n	8006e58 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8006e56:	2302      	movs	r3, #2
  }
}
 8006e58:	4618      	mov	r0, r3
 8006e5a:	3728      	adds	r7, #40	; 0x28
 8006e5c:	46bd      	mov	sp, r7
 8006e5e:	bd80      	pop	{r7, pc}
 8006e60:	00010004 	.word	0x00010004

08006e64 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8006e64:	b580      	push	{r7, lr}
 8006e66:	b088      	sub	sp, #32
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8006e6c:	2300      	movs	r3, #0
 8006e6e:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	685b      	ldr	r3, [r3, #4]
 8006e76:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e7c:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006e84:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e8c:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8006e8e:	7bfb      	ldrb	r3, [r7, #15]
 8006e90:	2b10      	cmp	r3, #16
 8006e92:	d003      	beq.n	8006e9c <HAL_I2C_EV_IRQHandler+0x38>
 8006e94:	7bfb      	ldrb	r3, [r7, #15]
 8006e96:	2b40      	cmp	r3, #64	; 0x40
 8006e98:	f040 80c1 	bne.w	800701e <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	699b      	ldr	r3, [r3, #24]
 8006ea2:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	695b      	ldr	r3, [r3, #20]
 8006eaa:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8006eac:	69fb      	ldr	r3, [r7, #28]
 8006eae:	f003 0301 	and.w	r3, r3, #1
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d10d      	bne.n	8006ed2 <HAL_I2C_EV_IRQHandler+0x6e>
 8006eb6:	693b      	ldr	r3, [r7, #16]
 8006eb8:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8006ebc:	d003      	beq.n	8006ec6 <HAL_I2C_EV_IRQHandler+0x62>
 8006ebe:	693b      	ldr	r3, [r7, #16]
 8006ec0:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8006ec4:	d101      	bne.n	8006eca <HAL_I2C_EV_IRQHandler+0x66>
 8006ec6:	2301      	movs	r3, #1
 8006ec8:	e000      	b.n	8006ecc <HAL_I2C_EV_IRQHandler+0x68>
 8006eca:	2300      	movs	r3, #0
 8006ecc:	2b01      	cmp	r3, #1
 8006ece:	f000 8132 	beq.w	8007136 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006ed2:	69fb      	ldr	r3, [r7, #28]
 8006ed4:	f003 0301 	and.w	r3, r3, #1
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d00c      	beq.n	8006ef6 <HAL_I2C_EV_IRQHandler+0x92>
 8006edc:	697b      	ldr	r3, [r7, #20]
 8006ede:	0a5b      	lsrs	r3, r3, #9
 8006ee0:	f003 0301 	and.w	r3, r3, #1
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d006      	beq.n	8006ef6 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8006ee8:	6878      	ldr	r0, [r7, #4]
 8006eea:	f001 feac 	bl	8008c46 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8006eee:	6878      	ldr	r0, [r7, #4]
 8006ef0:	f000 fcdc 	bl	80078ac <I2C_Master_SB>
 8006ef4:	e092      	b.n	800701c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006ef6:	69fb      	ldr	r3, [r7, #28]
 8006ef8:	08db      	lsrs	r3, r3, #3
 8006efa:	f003 0301 	and.w	r3, r3, #1
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d009      	beq.n	8006f16 <HAL_I2C_EV_IRQHandler+0xb2>
 8006f02:	697b      	ldr	r3, [r7, #20]
 8006f04:	0a5b      	lsrs	r3, r3, #9
 8006f06:	f003 0301 	and.w	r3, r3, #1
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d003      	beq.n	8006f16 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8006f0e:	6878      	ldr	r0, [r7, #4]
 8006f10:	f000 fd52 	bl	80079b8 <I2C_Master_ADD10>
 8006f14:	e082      	b.n	800701c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006f16:	69fb      	ldr	r3, [r7, #28]
 8006f18:	085b      	lsrs	r3, r3, #1
 8006f1a:	f003 0301 	and.w	r3, r3, #1
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d009      	beq.n	8006f36 <HAL_I2C_EV_IRQHandler+0xd2>
 8006f22:	697b      	ldr	r3, [r7, #20]
 8006f24:	0a5b      	lsrs	r3, r3, #9
 8006f26:	f003 0301 	and.w	r3, r3, #1
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d003      	beq.n	8006f36 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8006f2e:	6878      	ldr	r0, [r7, #4]
 8006f30:	f000 fd6c 	bl	8007a0c <I2C_Master_ADDR>
 8006f34:	e072      	b.n	800701c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8006f36:	69bb      	ldr	r3, [r7, #24]
 8006f38:	089b      	lsrs	r3, r3, #2
 8006f3a:	f003 0301 	and.w	r3, r3, #1
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d03b      	beq.n	8006fba <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	685b      	ldr	r3, [r3, #4]
 8006f48:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006f4c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006f50:	f000 80f3 	beq.w	800713a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006f54:	69fb      	ldr	r3, [r7, #28]
 8006f56:	09db      	lsrs	r3, r3, #7
 8006f58:	f003 0301 	and.w	r3, r3, #1
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d00f      	beq.n	8006f80 <HAL_I2C_EV_IRQHandler+0x11c>
 8006f60:	697b      	ldr	r3, [r7, #20]
 8006f62:	0a9b      	lsrs	r3, r3, #10
 8006f64:	f003 0301 	and.w	r3, r3, #1
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d009      	beq.n	8006f80 <HAL_I2C_EV_IRQHandler+0x11c>
 8006f6c:	69fb      	ldr	r3, [r7, #28]
 8006f6e:	089b      	lsrs	r3, r3, #2
 8006f70:	f003 0301 	and.w	r3, r3, #1
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d103      	bne.n	8006f80 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8006f78:	6878      	ldr	r0, [r7, #4]
 8006f7a:	f000 f94c 	bl	8007216 <I2C_MasterTransmit_TXE>
 8006f7e:	e04d      	b.n	800701c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006f80:	69fb      	ldr	r3, [r7, #28]
 8006f82:	089b      	lsrs	r3, r3, #2
 8006f84:	f003 0301 	and.w	r3, r3, #1
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	f000 80d6 	beq.w	800713a <HAL_I2C_EV_IRQHandler+0x2d6>
 8006f8e:	697b      	ldr	r3, [r7, #20]
 8006f90:	0a5b      	lsrs	r3, r3, #9
 8006f92:	f003 0301 	and.w	r3, r3, #1
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	f000 80cf 	beq.w	800713a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8006f9c:	7bbb      	ldrb	r3, [r7, #14]
 8006f9e:	2b21      	cmp	r3, #33	; 0x21
 8006fa0:	d103      	bne.n	8006faa <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8006fa2:	6878      	ldr	r0, [r7, #4]
 8006fa4:	f000 f9d3 	bl	800734e <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006fa8:	e0c7      	b.n	800713a <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8006faa:	7bfb      	ldrb	r3, [r7, #15]
 8006fac:	2b40      	cmp	r3, #64	; 0x40
 8006fae:	f040 80c4 	bne.w	800713a <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8006fb2:	6878      	ldr	r0, [r7, #4]
 8006fb4:	f000 fa41 	bl	800743a <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006fb8:	e0bf      	b.n	800713a <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	685b      	ldr	r3, [r3, #4]
 8006fc0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006fc4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006fc8:	f000 80b7 	beq.w	800713a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006fcc:	69fb      	ldr	r3, [r7, #28]
 8006fce:	099b      	lsrs	r3, r3, #6
 8006fd0:	f003 0301 	and.w	r3, r3, #1
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d00f      	beq.n	8006ff8 <HAL_I2C_EV_IRQHandler+0x194>
 8006fd8:	697b      	ldr	r3, [r7, #20]
 8006fda:	0a9b      	lsrs	r3, r3, #10
 8006fdc:	f003 0301 	and.w	r3, r3, #1
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d009      	beq.n	8006ff8 <HAL_I2C_EV_IRQHandler+0x194>
 8006fe4:	69fb      	ldr	r3, [r7, #28]
 8006fe6:	089b      	lsrs	r3, r3, #2
 8006fe8:	f003 0301 	and.w	r3, r3, #1
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d103      	bne.n	8006ff8 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8006ff0:	6878      	ldr	r0, [r7, #4]
 8006ff2:	f000 fab6 	bl	8007562 <I2C_MasterReceive_RXNE>
 8006ff6:	e011      	b.n	800701c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006ff8:	69fb      	ldr	r3, [r7, #28]
 8006ffa:	089b      	lsrs	r3, r3, #2
 8006ffc:	f003 0301 	and.w	r3, r3, #1
 8007000:	2b00      	cmp	r3, #0
 8007002:	f000 809a 	beq.w	800713a <HAL_I2C_EV_IRQHandler+0x2d6>
 8007006:	697b      	ldr	r3, [r7, #20]
 8007008:	0a5b      	lsrs	r3, r3, #9
 800700a:	f003 0301 	and.w	r3, r3, #1
 800700e:	2b00      	cmp	r3, #0
 8007010:	f000 8093 	beq.w	800713a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8007014:	6878      	ldr	r0, [r7, #4]
 8007016:	f000 fb5f 	bl	80076d8 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800701a:	e08e      	b.n	800713a <HAL_I2C_EV_IRQHandler+0x2d6>
 800701c:	e08d      	b.n	800713a <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007022:	2b00      	cmp	r3, #0
 8007024:	d004      	beq.n	8007030 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	695b      	ldr	r3, [r3, #20]
 800702c:	61fb      	str	r3, [r7, #28]
 800702e:	e007      	b.n	8007040 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	699b      	ldr	r3, [r3, #24]
 8007036:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	695b      	ldr	r3, [r3, #20]
 800703e:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007040:	69fb      	ldr	r3, [r7, #28]
 8007042:	085b      	lsrs	r3, r3, #1
 8007044:	f003 0301 	and.w	r3, r3, #1
 8007048:	2b00      	cmp	r3, #0
 800704a:	d012      	beq.n	8007072 <HAL_I2C_EV_IRQHandler+0x20e>
 800704c:	697b      	ldr	r3, [r7, #20]
 800704e:	0a5b      	lsrs	r3, r3, #9
 8007050:	f003 0301 	and.w	r3, r3, #1
 8007054:	2b00      	cmp	r3, #0
 8007056:	d00c      	beq.n	8007072 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800705c:	2b00      	cmp	r3, #0
 800705e:	d003      	beq.n	8007068 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	699b      	ldr	r3, [r3, #24]
 8007066:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8007068:	69b9      	ldr	r1, [r7, #24]
 800706a:	6878      	ldr	r0, [r7, #4]
 800706c:	f000 ff1d 	bl	8007eaa <I2C_Slave_ADDR>
 8007070:	e066      	b.n	8007140 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007072:	69fb      	ldr	r3, [r7, #28]
 8007074:	091b      	lsrs	r3, r3, #4
 8007076:	f003 0301 	and.w	r3, r3, #1
 800707a:	2b00      	cmp	r3, #0
 800707c:	d009      	beq.n	8007092 <HAL_I2C_EV_IRQHandler+0x22e>
 800707e:	697b      	ldr	r3, [r7, #20]
 8007080:	0a5b      	lsrs	r3, r3, #9
 8007082:	f003 0301 	and.w	r3, r3, #1
 8007086:	2b00      	cmp	r3, #0
 8007088:	d003      	beq.n	8007092 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 800708a:	6878      	ldr	r0, [r7, #4]
 800708c:	f000 ff58 	bl	8007f40 <I2C_Slave_STOPF>
 8007090:	e056      	b.n	8007140 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8007092:	7bbb      	ldrb	r3, [r7, #14]
 8007094:	2b21      	cmp	r3, #33	; 0x21
 8007096:	d002      	beq.n	800709e <HAL_I2C_EV_IRQHandler+0x23a>
 8007098:	7bbb      	ldrb	r3, [r7, #14]
 800709a:	2b29      	cmp	r3, #41	; 0x29
 800709c:	d125      	bne.n	80070ea <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800709e:	69fb      	ldr	r3, [r7, #28]
 80070a0:	09db      	lsrs	r3, r3, #7
 80070a2:	f003 0301 	and.w	r3, r3, #1
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d00f      	beq.n	80070ca <HAL_I2C_EV_IRQHandler+0x266>
 80070aa:	697b      	ldr	r3, [r7, #20]
 80070ac:	0a9b      	lsrs	r3, r3, #10
 80070ae:	f003 0301 	and.w	r3, r3, #1
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d009      	beq.n	80070ca <HAL_I2C_EV_IRQHandler+0x266>
 80070b6:	69fb      	ldr	r3, [r7, #28]
 80070b8:	089b      	lsrs	r3, r3, #2
 80070ba:	f003 0301 	and.w	r3, r3, #1
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d103      	bne.n	80070ca <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80070c2:	6878      	ldr	r0, [r7, #4]
 80070c4:	f000 fe33 	bl	8007d2e <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80070c8:	e039      	b.n	800713e <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80070ca:	69fb      	ldr	r3, [r7, #28]
 80070cc:	089b      	lsrs	r3, r3, #2
 80070ce:	f003 0301 	and.w	r3, r3, #1
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d033      	beq.n	800713e <HAL_I2C_EV_IRQHandler+0x2da>
 80070d6:	697b      	ldr	r3, [r7, #20]
 80070d8:	0a5b      	lsrs	r3, r3, #9
 80070da:	f003 0301 	and.w	r3, r3, #1
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d02d      	beq.n	800713e <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80070e2:	6878      	ldr	r0, [r7, #4]
 80070e4:	f000 fe60 	bl	8007da8 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80070e8:	e029      	b.n	800713e <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80070ea:	69fb      	ldr	r3, [r7, #28]
 80070ec:	099b      	lsrs	r3, r3, #6
 80070ee:	f003 0301 	and.w	r3, r3, #1
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d00f      	beq.n	8007116 <HAL_I2C_EV_IRQHandler+0x2b2>
 80070f6:	697b      	ldr	r3, [r7, #20]
 80070f8:	0a9b      	lsrs	r3, r3, #10
 80070fa:	f003 0301 	and.w	r3, r3, #1
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d009      	beq.n	8007116 <HAL_I2C_EV_IRQHandler+0x2b2>
 8007102:	69fb      	ldr	r3, [r7, #28]
 8007104:	089b      	lsrs	r3, r3, #2
 8007106:	f003 0301 	and.w	r3, r3, #1
 800710a:	2b00      	cmp	r3, #0
 800710c:	d103      	bne.n	8007116 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800710e:	6878      	ldr	r0, [r7, #4]
 8007110:	f000 fe6b 	bl	8007dea <I2C_SlaveReceive_RXNE>
 8007114:	e014      	b.n	8007140 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007116:	69fb      	ldr	r3, [r7, #28]
 8007118:	089b      	lsrs	r3, r3, #2
 800711a:	f003 0301 	and.w	r3, r3, #1
 800711e:	2b00      	cmp	r3, #0
 8007120:	d00e      	beq.n	8007140 <HAL_I2C_EV_IRQHandler+0x2dc>
 8007122:	697b      	ldr	r3, [r7, #20]
 8007124:	0a5b      	lsrs	r3, r3, #9
 8007126:	f003 0301 	and.w	r3, r3, #1
 800712a:	2b00      	cmp	r3, #0
 800712c:	d008      	beq.n	8007140 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800712e:	6878      	ldr	r0, [r7, #4]
 8007130:	f000 fe99 	bl	8007e66 <I2C_SlaveReceive_BTF>
 8007134:	e004      	b.n	8007140 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8007136:	bf00      	nop
 8007138:	e002      	b.n	8007140 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800713a:	bf00      	nop
 800713c:	e000      	b.n	8007140 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800713e:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8007140:	3720      	adds	r7, #32
 8007142:	46bd      	mov	sp, r7
 8007144:	bd80      	pop	{r7, pc}

08007146 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007146:	b480      	push	{r7}
 8007148:	b083      	sub	sp, #12
 800714a:	af00      	add	r7, sp, #0
 800714c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800714e:	bf00      	nop
 8007150:	370c      	adds	r7, #12
 8007152:	46bd      	mov	sp, r7
 8007154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007158:	4770      	bx	lr

0800715a <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800715a:	b480      	push	{r7}
 800715c:	b083      	sub	sp, #12
 800715e:	af00      	add	r7, sp, #0
 8007160:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8007162:	bf00      	nop
 8007164:	370c      	adds	r7, #12
 8007166:	46bd      	mov	sp, r7
 8007168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800716c:	4770      	bx	lr

0800716e <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800716e:	b480      	push	{r7}
 8007170:	b083      	sub	sp, #12
 8007172:	af00      	add	r7, sp, #0
 8007174:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8007176:	bf00      	nop
 8007178:	370c      	adds	r7, #12
 800717a:	46bd      	mov	sp, r7
 800717c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007180:	4770      	bx	lr

08007182 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007182:	b480      	push	{r7}
 8007184:	b083      	sub	sp, #12
 8007186:	af00      	add	r7, sp, #0
 8007188:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800718a:	bf00      	nop
 800718c:	370c      	adds	r7, #12
 800718e:	46bd      	mov	sp, r7
 8007190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007194:	4770      	bx	lr

08007196 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8007196:	b480      	push	{r7}
 8007198:	b083      	sub	sp, #12
 800719a:	af00      	add	r7, sp, #0
 800719c:	6078      	str	r0, [r7, #4]
 800719e:	460b      	mov	r3, r1
 80071a0:	70fb      	strb	r3, [r7, #3]
 80071a2:	4613      	mov	r3, r2
 80071a4:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80071a6:	bf00      	nop
 80071a8:	370c      	adds	r7, #12
 80071aa:	46bd      	mov	sp, r7
 80071ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b0:	4770      	bx	lr

080071b2 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80071b2:	b480      	push	{r7}
 80071b4:	b083      	sub	sp, #12
 80071b6:	af00      	add	r7, sp, #0
 80071b8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80071ba:	bf00      	nop
 80071bc:	370c      	adds	r7, #12
 80071be:	46bd      	mov	sp, r7
 80071c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c4:	4770      	bx	lr

080071c6 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80071c6:	b480      	push	{r7}
 80071c8:	b083      	sub	sp, #12
 80071ca:	af00      	add	r7, sp, #0
 80071cc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80071ce:	bf00      	nop
 80071d0:	370c      	adds	r7, #12
 80071d2:	46bd      	mov	sp, r7
 80071d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d8:	4770      	bx	lr

080071da <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80071da:	b480      	push	{r7}
 80071dc:	b083      	sub	sp, #12
 80071de:	af00      	add	r7, sp, #0
 80071e0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80071e2:	bf00      	nop
 80071e4:	370c      	adds	r7, #12
 80071e6:	46bd      	mov	sp, r7
 80071e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ec:	4770      	bx	lr

080071ee <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80071ee:	b480      	push	{r7}
 80071f0:	b083      	sub	sp, #12
 80071f2:	af00      	add	r7, sp, #0
 80071f4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80071f6:	bf00      	nop
 80071f8:	370c      	adds	r7, #12
 80071fa:	46bd      	mov	sp, r7
 80071fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007200:	4770      	bx	lr

08007202 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007202:	b480      	push	{r7}
 8007204:	b083      	sub	sp, #12
 8007206:	af00      	add	r7, sp, #0
 8007208:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800720a:	bf00      	nop
 800720c:	370c      	adds	r7, #12
 800720e:	46bd      	mov	sp, r7
 8007210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007214:	4770      	bx	lr

08007216 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8007216:	b580      	push	{r7, lr}
 8007218:	b084      	sub	sp, #16
 800721a:	af00      	add	r7, sp, #0
 800721c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007224:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800722c:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007232:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007238:	2b00      	cmp	r3, #0
 800723a:	d150      	bne.n	80072de <I2C_MasterTransmit_TXE+0xc8>
 800723c:	7bfb      	ldrb	r3, [r7, #15]
 800723e:	2b21      	cmp	r3, #33	; 0x21
 8007240:	d14d      	bne.n	80072de <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8007242:	68bb      	ldr	r3, [r7, #8]
 8007244:	2b08      	cmp	r3, #8
 8007246:	d01d      	beq.n	8007284 <I2C_MasterTransmit_TXE+0x6e>
 8007248:	68bb      	ldr	r3, [r7, #8]
 800724a:	2b20      	cmp	r3, #32
 800724c:	d01a      	beq.n	8007284 <I2C_MasterTransmit_TXE+0x6e>
 800724e:	68bb      	ldr	r3, [r7, #8]
 8007250:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007254:	d016      	beq.n	8007284 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	685a      	ldr	r2, [r3, #4]
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007264:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	2211      	movs	r2, #17
 800726a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	2200      	movs	r2, #0
 8007270:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	2220      	movs	r2, #32
 8007278:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800727c:	6878      	ldr	r0, [r7, #4]
 800727e:	f7ff ff62 	bl	8007146 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8007282:	e060      	b.n	8007346 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	685a      	ldr	r2, [r3, #4]
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007292:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	681a      	ldr	r2, [r3, #0]
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80072a2:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	2200      	movs	r2, #0
 80072a8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	2220      	movs	r2, #32
 80072ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80072b8:	b2db      	uxtb	r3, r3
 80072ba:	2b40      	cmp	r3, #64	; 0x40
 80072bc:	d107      	bne.n	80072ce <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	2200      	movs	r2, #0
 80072c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80072c6:	6878      	ldr	r0, [r7, #4]
 80072c8:	f7ff ff7d 	bl	80071c6 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80072cc:	e03b      	b.n	8007346 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	2200      	movs	r2, #0
 80072d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80072d6:	6878      	ldr	r0, [r7, #4]
 80072d8:	f7ff ff35 	bl	8007146 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80072dc:	e033      	b.n	8007346 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80072de:	7bfb      	ldrb	r3, [r7, #15]
 80072e0:	2b21      	cmp	r3, #33	; 0x21
 80072e2:	d005      	beq.n	80072f0 <I2C_MasterTransmit_TXE+0xda>
 80072e4:	7bbb      	ldrb	r3, [r7, #14]
 80072e6:	2b40      	cmp	r3, #64	; 0x40
 80072e8:	d12d      	bne.n	8007346 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80072ea:	7bfb      	ldrb	r3, [r7, #15]
 80072ec:	2b22      	cmp	r3, #34	; 0x22
 80072ee:	d12a      	bne.n	8007346 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80072f4:	b29b      	uxth	r3, r3
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d108      	bne.n	800730c <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	685a      	ldr	r2, [r3, #4]
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007308:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800730a:	e01c      	b.n	8007346 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007312:	b2db      	uxtb	r3, r3
 8007314:	2b40      	cmp	r3, #64	; 0x40
 8007316:	d103      	bne.n	8007320 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8007318:	6878      	ldr	r0, [r7, #4]
 800731a:	f000 f88e 	bl	800743a <I2C_MemoryTransmit_TXE_BTF>
}
 800731e:	e012      	b.n	8007346 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007324:	781a      	ldrb	r2, [r3, #0]
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007330:	1c5a      	adds	r2, r3, #1
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800733a:	b29b      	uxth	r3, r3
 800733c:	3b01      	subs	r3, #1
 800733e:	b29a      	uxth	r2, r3
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8007344:	e7ff      	b.n	8007346 <I2C_MasterTransmit_TXE+0x130>
 8007346:	bf00      	nop
 8007348:	3710      	adds	r7, #16
 800734a:	46bd      	mov	sp, r7
 800734c:	bd80      	pop	{r7, pc}

0800734e <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800734e:	b580      	push	{r7, lr}
 8007350:	b084      	sub	sp, #16
 8007352:	af00      	add	r7, sp, #0
 8007354:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800735a:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007362:	b2db      	uxtb	r3, r3
 8007364:	2b21      	cmp	r3, #33	; 0x21
 8007366:	d164      	bne.n	8007432 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800736c:	b29b      	uxth	r3, r3
 800736e:	2b00      	cmp	r3, #0
 8007370:	d012      	beq.n	8007398 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007376:	781a      	ldrb	r2, [r3, #0]
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007382:	1c5a      	adds	r2, r3, #1
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800738c:	b29b      	uxth	r3, r3
 800738e:	3b01      	subs	r3, #1
 8007390:	b29a      	uxth	r2, r3
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8007396:	e04c      	b.n	8007432 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	2b08      	cmp	r3, #8
 800739c:	d01d      	beq.n	80073da <I2C_MasterTransmit_BTF+0x8c>
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	2b20      	cmp	r3, #32
 80073a2:	d01a      	beq.n	80073da <I2C_MasterTransmit_BTF+0x8c>
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80073aa:	d016      	beq.n	80073da <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	685a      	ldr	r2, [r3, #4]
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80073ba:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	2211      	movs	r2, #17
 80073c0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	2200      	movs	r2, #0
 80073c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	2220      	movs	r2, #32
 80073ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80073d2:	6878      	ldr	r0, [r7, #4]
 80073d4:	f7ff feb7 	bl	8007146 <HAL_I2C_MasterTxCpltCallback>
}
 80073d8:	e02b      	b.n	8007432 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	685a      	ldr	r2, [r3, #4]
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80073e8:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	681a      	ldr	r2, [r3, #0]
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80073f8:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	2200      	movs	r2, #0
 80073fe:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	2220      	movs	r2, #32
 8007404:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800740e:	b2db      	uxtb	r3, r3
 8007410:	2b40      	cmp	r3, #64	; 0x40
 8007412:	d107      	bne.n	8007424 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	2200      	movs	r2, #0
 8007418:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 800741c:	6878      	ldr	r0, [r7, #4]
 800741e:	f7ff fed2 	bl	80071c6 <HAL_I2C_MemTxCpltCallback>
}
 8007422:	e006      	b.n	8007432 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	2200      	movs	r2, #0
 8007428:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 800742c:	6878      	ldr	r0, [r7, #4]
 800742e:	f7ff fe8a 	bl	8007146 <HAL_I2C_MasterTxCpltCallback>
}
 8007432:	bf00      	nop
 8007434:	3710      	adds	r7, #16
 8007436:	46bd      	mov	sp, r7
 8007438:	bd80      	pop	{r7, pc}

0800743a <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 800743a:	b580      	push	{r7, lr}
 800743c:	b084      	sub	sp, #16
 800743e:	af00      	add	r7, sp, #0
 8007440:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007448:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800744e:	2b00      	cmp	r3, #0
 8007450:	d11d      	bne.n	800748e <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007456:	2b01      	cmp	r3, #1
 8007458:	d10b      	bne.n	8007472 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800745e:	b2da      	uxtb	r2, r3
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800746a:	1c9a      	adds	r2, r3, #2
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8007470:	e073      	b.n	800755a <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007476:	b29b      	uxth	r3, r3
 8007478:	121b      	asrs	r3, r3, #8
 800747a:	b2da      	uxtb	r2, r3
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007486:	1c5a      	adds	r2, r3, #1
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	651a      	str	r2, [r3, #80]	; 0x50
}
 800748c:	e065      	b.n	800755a <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007492:	2b01      	cmp	r3, #1
 8007494:	d10b      	bne.n	80074ae <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800749a:	b2da      	uxtb	r2, r3
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80074a6:	1c5a      	adds	r2, r3, #1
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	651a      	str	r2, [r3, #80]	; 0x50
}
 80074ac:	e055      	b.n	800755a <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80074b2:	2b02      	cmp	r3, #2
 80074b4:	d151      	bne.n	800755a <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80074b6:	7bfb      	ldrb	r3, [r7, #15]
 80074b8:	2b22      	cmp	r3, #34	; 0x22
 80074ba:	d10d      	bne.n	80074d8 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	681a      	ldr	r2, [r3, #0]
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80074ca:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80074d0:	1c5a      	adds	r2, r3, #1
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	651a      	str	r2, [r3, #80]	; 0x50
}
 80074d6:	e040      	b.n	800755a <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80074dc:	b29b      	uxth	r3, r3
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d015      	beq.n	800750e <I2C_MemoryTransmit_TXE_BTF+0xd4>
 80074e2:	7bfb      	ldrb	r3, [r7, #15]
 80074e4:	2b21      	cmp	r3, #33	; 0x21
 80074e6:	d112      	bne.n	800750e <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074ec:	781a      	ldrb	r2, [r3, #0]
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074f8:	1c5a      	adds	r2, r3, #1
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007502:	b29b      	uxth	r3, r3
 8007504:	3b01      	subs	r3, #1
 8007506:	b29a      	uxth	r2, r3
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800750c:	e025      	b.n	800755a <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007512:	b29b      	uxth	r3, r3
 8007514:	2b00      	cmp	r3, #0
 8007516:	d120      	bne.n	800755a <I2C_MemoryTransmit_TXE_BTF+0x120>
 8007518:	7bfb      	ldrb	r3, [r7, #15]
 800751a:	2b21      	cmp	r3, #33	; 0x21
 800751c:	d11d      	bne.n	800755a <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	685a      	ldr	r2, [r3, #4]
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800752c:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	681a      	ldr	r2, [r3, #0]
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800753c:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	2200      	movs	r2, #0
 8007542:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	2220      	movs	r2, #32
 8007548:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	2200      	movs	r2, #0
 8007550:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8007554:	6878      	ldr	r0, [r7, #4]
 8007556:	f7ff fe36 	bl	80071c6 <HAL_I2C_MemTxCpltCallback>
}
 800755a:	bf00      	nop
 800755c:	3710      	adds	r7, #16
 800755e:	46bd      	mov	sp, r7
 8007560:	bd80      	pop	{r7, pc}

08007562 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8007562:	b580      	push	{r7, lr}
 8007564:	b084      	sub	sp, #16
 8007566:	af00      	add	r7, sp, #0
 8007568:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007570:	b2db      	uxtb	r3, r3
 8007572:	2b22      	cmp	r3, #34	; 0x22
 8007574:	f040 80ac 	bne.w	80076d0 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800757c:	b29b      	uxth	r3, r3
 800757e:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	2b03      	cmp	r3, #3
 8007584:	d921      	bls.n	80075ca <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	691a      	ldr	r2, [r3, #16]
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007590:	b2d2      	uxtb	r2, r2
 8007592:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007598:	1c5a      	adds	r2, r3, #1
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075a2:	b29b      	uxth	r3, r3
 80075a4:	3b01      	subs	r3, #1
 80075a6:	b29a      	uxth	r2, r3
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075b0:	b29b      	uxth	r3, r3
 80075b2:	2b03      	cmp	r3, #3
 80075b4:	f040 808c 	bne.w	80076d0 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	685a      	ldr	r2, [r3, #4]
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80075c6:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 80075c8:	e082      	b.n	80076d0 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075ce:	2b02      	cmp	r3, #2
 80075d0:	d075      	beq.n	80076be <I2C_MasterReceive_RXNE+0x15c>
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	2b01      	cmp	r3, #1
 80075d6:	d002      	beq.n	80075de <I2C_MasterReceive_RXNE+0x7c>
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d16f      	bne.n	80076be <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80075de:	6878      	ldr	r0, [r7, #4]
 80075e0:	f001 fa7a 	bl	8008ad8 <I2C_WaitOnSTOPRequestThroughIT>
 80075e4:	4603      	mov	r3, r0
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d142      	bne.n	8007670 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	681a      	ldr	r2, [r3, #0]
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80075f8:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	685a      	ldr	r2, [r3, #4]
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007608:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	691a      	ldr	r2, [r3, #16]
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007614:	b2d2      	uxtb	r2, r2
 8007616:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800761c:	1c5a      	adds	r2, r3, #1
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007626:	b29b      	uxth	r3, r3
 8007628:	3b01      	subs	r3, #1
 800762a:	b29a      	uxth	r2, r3
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	2220      	movs	r2, #32
 8007634:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800763e:	b2db      	uxtb	r3, r3
 8007640:	2b40      	cmp	r3, #64	; 0x40
 8007642:	d10a      	bne.n	800765a <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	2200      	movs	r2, #0
 8007648:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	2200      	movs	r2, #0
 8007650:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8007652:	6878      	ldr	r0, [r7, #4]
 8007654:	f7ff fdc1 	bl	80071da <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8007658:	e03a      	b.n	80076d0 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	2200      	movs	r2, #0
 800765e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	2212      	movs	r2, #18
 8007666:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8007668:	6878      	ldr	r0, [r7, #4]
 800766a:	f7ff fd76 	bl	800715a <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800766e:	e02f      	b.n	80076d0 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	685a      	ldr	r2, [r3, #4]
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800767e:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	691a      	ldr	r2, [r3, #16]
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800768a:	b2d2      	uxtb	r2, r2
 800768c:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007692:	1c5a      	adds	r2, r3, #1
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800769c:	b29b      	uxth	r3, r3
 800769e:	3b01      	subs	r3, #1
 80076a0:	b29a      	uxth	r2, r3
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	2220      	movs	r2, #32
 80076aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	2200      	movs	r2, #0
 80076b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80076b6:	6878      	ldr	r0, [r7, #4]
 80076b8:	f7ff fd99 	bl	80071ee <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80076bc:	e008      	b.n	80076d0 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	685a      	ldr	r2, [r3, #4]
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80076cc:	605a      	str	r2, [r3, #4]
}
 80076ce:	e7ff      	b.n	80076d0 <I2C_MasterReceive_RXNE+0x16e>
 80076d0:	bf00      	nop
 80076d2:	3710      	adds	r7, #16
 80076d4:	46bd      	mov	sp, r7
 80076d6:	bd80      	pop	{r7, pc}

080076d8 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80076d8:	b580      	push	{r7, lr}
 80076da:	b084      	sub	sp, #16
 80076dc:	af00      	add	r7, sp, #0
 80076de:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076e4:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80076ea:	b29b      	uxth	r3, r3
 80076ec:	2b04      	cmp	r3, #4
 80076ee:	d11b      	bne.n	8007728 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	685a      	ldr	r2, [r3, #4]
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80076fe:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	691a      	ldr	r2, [r3, #16]
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800770a:	b2d2      	uxtb	r2, r2
 800770c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007712:	1c5a      	adds	r2, r3, #1
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800771c:	b29b      	uxth	r3, r3
 800771e:	3b01      	subs	r3, #1
 8007720:	b29a      	uxth	r2, r3
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8007726:	e0bd      	b.n	80078a4 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800772c:	b29b      	uxth	r3, r3
 800772e:	2b03      	cmp	r3, #3
 8007730:	d129      	bne.n	8007786 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	685a      	ldr	r2, [r3, #4]
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007740:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	2b04      	cmp	r3, #4
 8007746:	d00a      	beq.n	800775e <I2C_MasterReceive_BTF+0x86>
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	2b02      	cmp	r3, #2
 800774c:	d007      	beq.n	800775e <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	681a      	ldr	r2, [r3, #0]
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800775c:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	691a      	ldr	r2, [r3, #16]
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007768:	b2d2      	uxtb	r2, r2
 800776a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007770:	1c5a      	adds	r2, r3, #1
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800777a:	b29b      	uxth	r3, r3
 800777c:	3b01      	subs	r3, #1
 800777e:	b29a      	uxth	r2, r3
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8007784:	e08e      	b.n	80078a4 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800778a:	b29b      	uxth	r3, r3
 800778c:	2b02      	cmp	r3, #2
 800778e:	d176      	bne.n	800787e <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	2b01      	cmp	r3, #1
 8007794:	d002      	beq.n	800779c <I2C_MasterReceive_BTF+0xc4>
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	2b10      	cmp	r3, #16
 800779a:	d108      	bne.n	80077ae <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	681a      	ldr	r2, [r3, #0]
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80077aa:	601a      	str	r2, [r3, #0]
 80077ac:	e019      	b.n	80077e2 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	2b04      	cmp	r3, #4
 80077b2:	d002      	beq.n	80077ba <I2C_MasterReceive_BTF+0xe2>
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	2b02      	cmp	r3, #2
 80077b8:	d108      	bne.n	80077cc <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	681a      	ldr	r2, [r3, #0]
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80077c8:	601a      	str	r2, [r3, #0]
 80077ca:	e00a      	b.n	80077e2 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	2b10      	cmp	r3, #16
 80077d0:	d007      	beq.n	80077e2 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	681a      	ldr	r2, [r3, #0]
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80077e0:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	691a      	ldr	r2, [r3, #16]
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077ec:	b2d2      	uxtb	r2, r2
 80077ee:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077f4:	1c5a      	adds	r2, r3, #1
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80077fe:	b29b      	uxth	r3, r3
 8007800:	3b01      	subs	r3, #1
 8007802:	b29a      	uxth	r2, r3
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	691a      	ldr	r2, [r3, #16]
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007812:	b2d2      	uxtb	r2, r2
 8007814:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800781a:	1c5a      	adds	r2, r3, #1
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007824:	b29b      	uxth	r3, r3
 8007826:	3b01      	subs	r3, #1
 8007828:	b29a      	uxth	r2, r3
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	685a      	ldr	r2, [r3, #4]
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800783c:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	2220      	movs	r2, #32
 8007842:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800784c:	b2db      	uxtb	r3, r3
 800784e:	2b40      	cmp	r3, #64	; 0x40
 8007850:	d10a      	bne.n	8007868 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	2200      	movs	r2, #0
 8007856:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	2200      	movs	r2, #0
 800785e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8007860:	6878      	ldr	r0, [r7, #4]
 8007862:	f7ff fcba 	bl	80071da <HAL_I2C_MemRxCpltCallback>
}
 8007866:	e01d      	b.n	80078a4 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	2200      	movs	r2, #0
 800786c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	2212      	movs	r2, #18
 8007874:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8007876:	6878      	ldr	r0, [r7, #4]
 8007878:	f7ff fc6f 	bl	800715a <HAL_I2C_MasterRxCpltCallback>
}
 800787c:	e012      	b.n	80078a4 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	691a      	ldr	r2, [r3, #16]
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007888:	b2d2      	uxtb	r2, r2
 800788a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007890:	1c5a      	adds	r2, r3, #1
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800789a:	b29b      	uxth	r3, r3
 800789c:	3b01      	subs	r3, #1
 800789e:	b29a      	uxth	r2, r3
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80078a4:	bf00      	nop
 80078a6:	3710      	adds	r7, #16
 80078a8:	46bd      	mov	sp, r7
 80078aa:	bd80      	pop	{r7, pc}

080078ac <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80078ac:	b480      	push	{r7}
 80078ae:	b083      	sub	sp, #12
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80078ba:	b2db      	uxtb	r3, r3
 80078bc:	2b40      	cmp	r3, #64	; 0x40
 80078be:	d117      	bne.n	80078f0 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d109      	bne.n	80078dc <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078cc:	b2db      	uxtb	r3, r3
 80078ce:	461a      	mov	r2, r3
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80078d8:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80078da:	e067      	b.n	80079ac <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078e0:	b2db      	uxtb	r3, r3
 80078e2:	f043 0301 	orr.w	r3, r3, #1
 80078e6:	b2da      	uxtb	r2, r3
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	611a      	str	r2, [r3, #16]
}
 80078ee:	e05d      	b.n	80079ac <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	691b      	ldr	r3, [r3, #16]
 80078f4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80078f8:	d133      	bne.n	8007962 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007900:	b2db      	uxtb	r3, r3
 8007902:	2b21      	cmp	r3, #33	; 0x21
 8007904:	d109      	bne.n	800791a <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800790a:	b2db      	uxtb	r3, r3
 800790c:	461a      	mov	r2, r3
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007916:	611a      	str	r2, [r3, #16]
 8007918:	e008      	b.n	800792c <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800791e:	b2db      	uxtb	r3, r3
 8007920:	f043 0301 	orr.w	r3, r3, #1
 8007924:	b2da      	uxtb	r2, r3
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007930:	2b00      	cmp	r3, #0
 8007932:	d004      	beq.n	800793e <I2C_Master_SB+0x92>
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007938:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800793a:	2b00      	cmp	r3, #0
 800793c:	d108      	bne.n	8007950 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007942:	2b00      	cmp	r3, #0
 8007944:	d032      	beq.n	80079ac <I2C_Master_SB+0x100>
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800794a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800794c:	2b00      	cmp	r3, #0
 800794e:	d02d      	beq.n	80079ac <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	685a      	ldr	r2, [r3, #4]
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800795e:	605a      	str	r2, [r3, #4]
}
 8007960:	e024      	b.n	80079ac <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007966:	2b00      	cmp	r3, #0
 8007968:	d10e      	bne.n	8007988 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800796e:	b29b      	uxth	r3, r3
 8007970:	11db      	asrs	r3, r3, #7
 8007972:	b2db      	uxtb	r3, r3
 8007974:	f003 0306 	and.w	r3, r3, #6
 8007978:	b2db      	uxtb	r3, r3
 800797a:	f063 030f 	orn	r3, r3, #15
 800797e:	b2da      	uxtb	r2, r3
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	611a      	str	r2, [r3, #16]
}
 8007986:	e011      	b.n	80079ac <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800798c:	2b01      	cmp	r3, #1
 800798e:	d10d      	bne.n	80079ac <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007994:	b29b      	uxth	r3, r3
 8007996:	11db      	asrs	r3, r3, #7
 8007998:	b2db      	uxtb	r3, r3
 800799a:	f003 0306 	and.w	r3, r3, #6
 800799e:	b2db      	uxtb	r3, r3
 80079a0:	f063 030e 	orn	r3, r3, #14
 80079a4:	b2da      	uxtb	r2, r3
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	611a      	str	r2, [r3, #16]
}
 80079ac:	bf00      	nop
 80079ae:	370c      	adds	r7, #12
 80079b0:	46bd      	mov	sp, r7
 80079b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b6:	4770      	bx	lr

080079b8 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80079b8:	b480      	push	{r7}
 80079ba:	b083      	sub	sp, #12
 80079bc:	af00      	add	r7, sp, #0
 80079be:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80079c4:	b2da      	uxtb	r2, r3
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d004      	beq.n	80079de <I2C_Master_ADD10+0x26>
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d108      	bne.n	80079f0 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d00c      	beq.n	8007a00 <I2C_Master_ADD10+0x48>
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d007      	beq.n	8007a00 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	685a      	ldr	r2, [r3, #4]
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80079fe:	605a      	str	r2, [r3, #4]
  }
}
 8007a00:	bf00      	nop
 8007a02:	370c      	adds	r7, #12
 8007a04:	46bd      	mov	sp, r7
 8007a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a0a:	4770      	bx	lr

08007a0c <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8007a0c:	b480      	push	{r7}
 8007a0e:	b091      	sub	sp, #68	; 0x44
 8007a10:	af00      	add	r7, sp, #0
 8007a12:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007a1a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a22:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a28:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007a30:	b2db      	uxtb	r3, r3
 8007a32:	2b22      	cmp	r3, #34	; 0x22
 8007a34:	f040 8169 	bne.w	8007d0a <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d10f      	bne.n	8007a60 <I2C_Master_ADDR+0x54>
 8007a40:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007a44:	2b40      	cmp	r3, #64	; 0x40
 8007a46:	d10b      	bne.n	8007a60 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007a48:	2300      	movs	r3, #0
 8007a4a:	633b      	str	r3, [r7, #48]	; 0x30
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	695b      	ldr	r3, [r3, #20]
 8007a52:	633b      	str	r3, [r7, #48]	; 0x30
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	699b      	ldr	r3, [r3, #24]
 8007a5a:	633b      	str	r3, [r7, #48]	; 0x30
 8007a5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a5e:	e160      	b.n	8007d22 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d11d      	bne.n	8007aa4 <I2C_Master_ADDR+0x98>
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	691b      	ldr	r3, [r3, #16]
 8007a6c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007a70:	d118      	bne.n	8007aa4 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007a72:	2300      	movs	r3, #0
 8007a74:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	695b      	ldr	r3, [r3, #20]
 8007a7c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	699b      	ldr	r3, [r3, #24]
 8007a84:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007a86:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	681a      	ldr	r2, [r3, #0]
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007a96:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a9c:	1c5a      	adds	r2, r3, #1
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	651a      	str	r2, [r3, #80]	; 0x50
 8007aa2:	e13e      	b.n	8007d22 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007aa8:	b29b      	uxth	r3, r3
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d113      	bne.n	8007ad6 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007aae:	2300      	movs	r3, #0
 8007ab0:	62bb      	str	r3, [r7, #40]	; 0x28
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	695b      	ldr	r3, [r3, #20]
 8007ab8:	62bb      	str	r3, [r7, #40]	; 0x28
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	699b      	ldr	r3, [r3, #24]
 8007ac0:	62bb      	str	r3, [r7, #40]	; 0x28
 8007ac2:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	681a      	ldr	r2, [r3, #0]
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007ad2:	601a      	str	r2, [r3, #0]
 8007ad4:	e115      	b.n	8007d02 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ada:	b29b      	uxth	r3, r3
 8007adc:	2b01      	cmp	r3, #1
 8007ade:	f040 808a 	bne.w	8007bf6 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8007ae2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ae4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007ae8:	d137      	bne.n	8007b5a <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	681a      	ldr	r2, [r3, #0]
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007af8:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	685b      	ldr	r3, [r3, #4]
 8007b00:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007b04:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007b08:	d113      	bne.n	8007b32 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	681a      	ldr	r2, [r3, #0]
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007b18:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007b1a:	2300      	movs	r3, #0
 8007b1c:	627b      	str	r3, [r7, #36]	; 0x24
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	695b      	ldr	r3, [r3, #20]
 8007b24:	627b      	str	r3, [r7, #36]	; 0x24
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	699b      	ldr	r3, [r3, #24]
 8007b2c:	627b      	str	r3, [r7, #36]	; 0x24
 8007b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b30:	e0e7      	b.n	8007d02 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007b32:	2300      	movs	r3, #0
 8007b34:	623b      	str	r3, [r7, #32]
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	695b      	ldr	r3, [r3, #20]
 8007b3c:	623b      	str	r3, [r7, #32]
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	699b      	ldr	r3, [r3, #24]
 8007b44:	623b      	str	r3, [r7, #32]
 8007b46:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	681a      	ldr	r2, [r3, #0]
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007b56:	601a      	str	r2, [r3, #0]
 8007b58:	e0d3      	b.n	8007d02 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8007b5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b5c:	2b08      	cmp	r3, #8
 8007b5e:	d02e      	beq.n	8007bbe <I2C_Master_ADDR+0x1b2>
 8007b60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b62:	2b20      	cmp	r3, #32
 8007b64:	d02b      	beq.n	8007bbe <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8007b66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b68:	2b12      	cmp	r3, #18
 8007b6a:	d102      	bne.n	8007b72 <I2C_Master_ADDR+0x166>
 8007b6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b6e:	2b01      	cmp	r3, #1
 8007b70:	d125      	bne.n	8007bbe <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8007b72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b74:	2b04      	cmp	r3, #4
 8007b76:	d00e      	beq.n	8007b96 <I2C_Master_ADDR+0x18a>
 8007b78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b7a:	2b02      	cmp	r3, #2
 8007b7c:	d00b      	beq.n	8007b96 <I2C_Master_ADDR+0x18a>
 8007b7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b80:	2b10      	cmp	r3, #16
 8007b82:	d008      	beq.n	8007b96 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	681a      	ldr	r2, [r3, #0]
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007b92:	601a      	str	r2, [r3, #0]
 8007b94:	e007      	b.n	8007ba6 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	681a      	ldr	r2, [r3, #0]
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007ba4:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007ba6:	2300      	movs	r3, #0
 8007ba8:	61fb      	str	r3, [r7, #28]
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	695b      	ldr	r3, [r3, #20]
 8007bb0:	61fb      	str	r3, [r7, #28]
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	699b      	ldr	r3, [r3, #24]
 8007bb8:	61fb      	str	r3, [r7, #28]
 8007bba:	69fb      	ldr	r3, [r7, #28]
 8007bbc:	e0a1      	b.n	8007d02 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	681a      	ldr	r2, [r3, #0]
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007bcc:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007bce:	2300      	movs	r3, #0
 8007bd0:	61bb      	str	r3, [r7, #24]
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	695b      	ldr	r3, [r3, #20]
 8007bd8:	61bb      	str	r3, [r7, #24]
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	699b      	ldr	r3, [r3, #24]
 8007be0:	61bb      	str	r3, [r7, #24]
 8007be2:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	681a      	ldr	r2, [r3, #0]
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007bf2:	601a      	str	r2, [r3, #0]
 8007bf4:	e085      	b.n	8007d02 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007bfa:	b29b      	uxth	r3, r3
 8007bfc:	2b02      	cmp	r3, #2
 8007bfe:	d14d      	bne.n	8007c9c <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8007c00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c02:	2b04      	cmp	r3, #4
 8007c04:	d016      	beq.n	8007c34 <I2C_Master_ADDR+0x228>
 8007c06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c08:	2b02      	cmp	r3, #2
 8007c0a:	d013      	beq.n	8007c34 <I2C_Master_ADDR+0x228>
 8007c0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c0e:	2b10      	cmp	r3, #16
 8007c10:	d010      	beq.n	8007c34 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	681a      	ldr	r2, [r3, #0]
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007c20:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	681a      	ldr	r2, [r3, #0]
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007c30:	601a      	str	r2, [r3, #0]
 8007c32:	e007      	b.n	8007c44 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	681a      	ldr	r2, [r3, #0]
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007c42:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	685b      	ldr	r3, [r3, #4]
 8007c4a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007c4e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007c52:	d117      	bne.n	8007c84 <I2C_Master_ADDR+0x278>
 8007c54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c56:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007c5a:	d00b      	beq.n	8007c74 <I2C_Master_ADDR+0x268>
 8007c5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c5e:	2b01      	cmp	r3, #1
 8007c60:	d008      	beq.n	8007c74 <I2C_Master_ADDR+0x268>
 8007c62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c64:	2b08      	cmp	r3, #8
 8007c66:	d005      	beq.n	8007c74 <I2C_Master_ADDR+0x268>
 8007c68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c6a:	2b10      	cmp	r3, #16
 8007c6c:	d002      	beq.n	8007c74 <I2C_Master_ADDR+0x268>
 8007c6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c70:	2b20      	cmp	r3, #32
 8007c72:	d107      	bne.n	8007c84 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	685a      	ldr	r2, [r3, #4]
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007c82:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007c84:	2300      	movs	r3, #0
 8007c86:	617b      	str	r3, [r7, #20]
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	695b      	ldr	r3, [r3, #20]
 8007c8e:	617b      	str	r3, [r7, #20]
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	699b      	ldr	r3, [r3, #24]
 8007c96:	617b      	str	r3, [r7, #20]
 8007c98:	697b      	ldr	r3, [r7, #20]
 8007c9a:	e032      	b.n	8007d02 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	681a      	ldr	r2, [r3, #0]
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007caa:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	685b      	ldr	r3, [r3, #4]
 8007cb2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007cb6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007cba:	d117      	bne.n	8007cec <I2C_Master_ADDR+0x2e0>
 8007cbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cbe:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007cc2:	d00b      	beq.n	8007cdc <I2C_Master_ADDR+0x2d0>
 8007cc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cc6:	2b01      	cmp	r3, #1
 8007cc8:	d008      	beq.n	8007cdc <I2C_Master_ADDR+0x2d0>
 8007cca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ccc:	2b08      	cmp	r3, #8
 8007cce:	d005      	beq.n	8007cdc <I2C_Master_ADDR+0x2d0>
 8007cd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cd2:	2b10      	cmp	r3, #16
 8007cd4:	d002      	beq.n	8007cdc <I2C_Master_ADDR+0x2d0>
 8007cd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cd8:	2b20      	cmp	r3, #32
 8007cda:	d107      	bne.n	8007cec <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	685a      	ldr	r2, [r3, #4]
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007cea:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007cec:	2300      	movs	r3, #0
 8007cee:	613b      	str	r3, [r7, #16]
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	695b      	ldr	r3, [r3, #20]
 8007cf6:	613b      	str	r3, [r7, #16]
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	699b      	ldr	r3, [r3, #24]
 8007cfe:	613b      	str	r3, [r7, #16]
 8007d00:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	2200      	movs	r2, #0
 8007d06:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8007d08:	e00b      	b.n	8007d22 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007d0a:	2300      	movs	r3, #0
 8007d0c:	60fb      	str	r3, [r7, #12]
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	695b      	ldr	r3, [r3, #20]
 8007d14:	60fb      	str	r3, [r7, #12]
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	699b      	ldr	r3, [r3, #24]
 8007d1c:	60fb      	str	r3, [r7, #12]
 8007d1e:	68fb      	ldr	r3, [r7, #12]
}
 8007d20:	e7ff      	b.n	8007d22 <I2C_Master_ADDR+0x316>
 8007d22:	bf00      	nop
 8007d24:	3744      	adds	r7, #68	; 0x44
 8007d26:	46bd      	mov	sp, r7
 8007d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d2c:	4770      	bx	lr

08007d2e <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8007d2e:	b580      	push	{r7, lr}
 8007d30:	b084      	sub	sp, #16
 8007d32:	af00      	add	r7, sp, #0
 8007d34:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007d3c:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d42:	b29b      	uxth	r3, r3
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d02b      	beq.n	8007da0 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d4c:	781a      	ldrb	r2, [r3, #0]
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d58:	1c5a      	adds	r2, r3, #1
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d62:	b29b      	uxth	r3, r3
 8007d64:	3b01      	subs	r3, #1
 8007d66:	b29a      	uxth	r2, r3
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d70:	b29b      	uxth	r3, r3
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d114      	bne.n	8007da0 <I2C_SlaveTransmit_TXE+0x72>
 8007d76:	7bfb      	ldrb	r3, [r7, #15]
 8007d78:	2b29      	cmp	r3, #41	; 0x29
 8007d7a:	d111      	bne.n	8007da0 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	685a      	ldr	r2, [r3, #4]
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007d8a:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	2221      	movs	r2, #33	; 0x21
 8007d90:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	2228      	movs	r2, #40	; 0x28
 8007d96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8007d9a:	6878      	ldr	r0, [r7, #4]
 8007d9c:	f7ff f9e7 	bl	800716e <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8007da0:	bf00      	nop
 8007da2:	3710      	adds	r7, #16
 8007da4:	46bd      	mov	sp, r7
 8007da6:	bd80      	pop	{r7, pc}

08007da8 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8007da8:	b480      	push	{r7}
 8007daa:	b083      	sub	sp, #12
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007db4:	b29b      	uxth	r3, r3
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d011      	beq.n	8007dde <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dbe:	781a      	ldrb	r2, [r3, #0]
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dca:	1c5a      	adds	r2, r3, #1
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007dd4:	b29b      	uxth	r3, r3
 8007dd6:	3b01      	subs	r3, #1
 8007dd8:	b29a      	uxth	r2, r3
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8007dde:	bf00      	nop
 8007de0:	370c      	adds	r7, #12
 8007de2:	46bd      	mov	sp, r7
 8007de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de8:	4770      	bx	lr

08007dea <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8007dea:	b580      	push	{r7, lr}
 8007dec:	b084      	sub	sp, #16
 8007dee:	af00      	add	r7, sp, #0
 8007df0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007df8:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007dfe:	b29b      	uxth	r3, r3
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d02c      	beq.n	8007e5e <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	691a      	ldr	r2, [r3, #16]
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e0e:	b2d2      	uxtb	r2, r2
 8007e10:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e16:	1c5a      	adds	r2, r3, #1
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e20:	b29b      	uxth	r3, r3
 8007e22:	3b01      	subs	r3, #1
 8007e24:	b29a      	uxth	r2, r3
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e2e:	b29b      	uxth	r3, r3
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d114      	bne.n	8007e5e <I2C_SlaveReceive_RXNE+0x74>
 8007e34:	7bfb      	ldrb	r3, [r7, #15]
 8007e36:	2b2a      	cmp	r3, #42	; 0x2a
 8007e38:	d111      	bne.n	8007e5e <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	685a      	ldr	r2, [r3, #4]
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007e48:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	2222      	movs	r2, #34	; 0x22
 8007e4e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	2228      	movs	r2, #40	; 0x28
 8007e54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007e58:	6878      	ldr	r0, [r7, #4]
 8007e5a:	f7ff f992 	bl	8007182 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8007e5e:	bf00      	nop
 8007e60:	3710      	adds	r7, #16
 8007e62:	46bd      	mov	sp, r7
 8007e64:	bd80      	pop	{r7, pc}

08007e66 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8007e66:	b480      	push	{r7}
 8007e68:	b083      	sub	sp, #12
 8007e6a:	af00      	add	r7, sp, #0
 8007e6c:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e72:	b29b      	uxth	r3, r3
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d012      	beq.n	8007e9e <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	691a      	ldr	r2, [r3, #16]
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e82:	b2d2      	uxtb	r2, r2
 8007e84:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e8a:	1c5a      	adds	r2, r3, #1
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e94:	b29b      	uxth	r3, r3
 8007e96:	3b01      	subs	r3, #1
 8007e98:	b29a      	uxth	r2, r3
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8007e9e:	bf00      	nop
 8007ea0:	370c      	adds	r7, #12
 8007ea2:	46bd      	mov	sp, r7
 8007ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea8:	4770      	bx	lr

08007eaa <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8007eaa:	b580      	push	{r7, lr}
 8007eac:	b084      	sub	sp, #16
 8007eae:	af00      	add	r7, sp, #0
 8007eb0:	6078      	str	r0, [r7, #4]
 8007eb2:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8007eb4:	2300      	movs	r3, #0
 8007eb6:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007ebe:	b2db      	uxtb	r3, r3
 8007ec0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007ec4:	2b28      	cmp	r3, #40	; 0x28
 8007ec6:	d127      	bne.n	8007f18 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	685a      	ldr	r2, [r3, #4]
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007ed6:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8007ed8:	683b      	ldr	r3, [r7, #0]
 8007eda:	089b      	lsrs	r3, r3, #2
 8007edc:	f003 0301 	and.w	r3, r3, #1
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d101      	bne.n	8007ee8 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8007ee4:	2301      	movs	r3, #1
 8007ee6:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8007ee8:	683b      	ldr	r3, [r7, #0]
 8007eea:	09db      	lsrs	r3, r3, #7
 8007eec:	f003 0301 	and.w	r3, r3, #1
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d103      	bne.n	8007efc <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	68db      	ldr	r3, [r3, #12]
 8007ef8:	81bb      	strh	r3, [r7, #12]
 8007efa:	e002      	b.n	8007f02 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	699b      	ldr	r3, [r3, #24]
 8007f00:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	2200      	movs	r2, #0
 8007f06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8007f0a:	89ba      	ldrh	r2, [r7, #12]
 8007f0c:	7bfb      	ldrb	r3, [r7, #15]
 8007f0e:	4619      	mov	r1, r3
 8007f10:	6878      	ldr	r0, [r7, #4]
 8007f12:	f7ff f940 	bl	8007196 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8007f16:	e00e      	b.n	8007f36 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007f18:	2300      	movs	r3, #0
 8007f1a:	60bb      	str	r3, [r7, #8]
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	695b      	ldr	r3, [r3, #20]
 8007f22:	60bb      	str	r3, [r7, #8]
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	699b      	ldr	r3, [r3, #24]
 8007f2a:	60bb      	str	r3, [r7, #8]
 8007f2c:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	2200      	movs	r2, #0
 8007f32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8007f36:	bf00      	nop
 8007f38:	3710      	adds	r7, #16
 8007f3a:	46bd      	mov	sp, r7
 8007f3c:	bd80      	pop	{r7, pc}
	...

08007f40 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8007f40:	b580      	push	{r7, lr}
 8007f42:	b084      	sub	sp, #16
 8007f44:	af00      	add	r7, sp, #0
 8007f46:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f4e:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	685a      	ldr	r2, [r3, #4]
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007f5e:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8007f60:	2300      	movs	r3, #0
 8007f62:	60bb      	str	r3, [r7, #8]
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	695b      	ldr	r3, [r3, #20]
 8007f6a:	60bb      	str	r3, [r7, #8]
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	681a      	ldr	r2, [r3, #0]
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	f042 0201 	orr.w	r2, r2, #1
 8007f7a:	601a      	str	r2, [r3, #0]
 8007f7c:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	681a      	ldr	r2, [r3, #0]
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007f8c:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	685b      	ldr	r3, [r3, #4]
 8007f94:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007f98:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007f9c:	d172      	bne.n	8008084 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8007f9e:	7bfb      	ldrb	r3, [r7, #15]
 8007fa0:	2b22      	cmp	r3, #34	; 0x22
 8007fa2:	d002      	beq.n	8007faa <I2C_Slave_STOPF+0x6a>
 8007fa4:	7bfb      	ldrb	r3, [r7, #15]
 8007fa6:	2b2a      	cmp	r3, #42	; 0x2a
 8007fa8:	d135      	bne.n	8008016 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	685b      	ldr	r3, [r3, #4]
 8007fb2:	b29a      	uxth	r2, r3
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007fbc:	b29b      	uxth	r3, r3
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d005      	beq.n	8007fce <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fc6:	f043 0204 	orr.w	r2, r3, #4
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	685a      	ldr	r2, [r3, #4]
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007fdc:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fe2:	4618      	mov	r0, r3
 8007fe4:	f7fe f80e 	bl	8006004 <HAL_DMA_GetState>
 8007fe8:	4603      	mov	r3, r0
 8007fea:	2b01      	cmp	r3, #1
 8007fec:	d049      	beq.n	8008082 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ff2:	4a69      	ldr	r2, [pc, #420]	; (8008198 <I2C_Slave_STOPF+0x258>)
 8007ff4:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ffa:	4618      	mov	r0, r3
 8007ffc:	f7fd fe56 	bl	8005cac <HAL_DMA_Abort_IT>
 8008000:	4603      	mov	r3, r0
 8008002:	2b00      	cmp	r3, #0
 8008004:	d03d      	beq.n	8008082 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800800a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800800c:	687a      	ldr	r2, [r7, #4]
 800800e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008010:	4610      	mov	r0, r2
 8008012:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008014:	e035      	b.n	8008082 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	685b      	ldr	r3, [r3, #4]
 800801e:	b29a      	uxth	r2, r3
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008028:	b29b      	uxth	r3, r3
 800802a:	2b00      	cmp	r3, #0
 800802c:	d005      	beq.n	800803a <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008032:	f043 0204 	orr.w	r2, r3, #4
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	685a      	ldr	r2, [r3, #4]
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008048:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800804e:	4618      	mov	r0, r3
 8008050:	f7fd ffd8 	bl	8006004 <HAL_DMA_GetState>
 8008054:	4603      	mov	r3, r0
 8008056:	2b01      	cmp	r3, #1
 8008058:	d014      	beq.n	8008084 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800805e:	4a4e      	ldr	r2, [pc, #312]	; (8008198 <I2C_Slave_STOPF+0x258>)
 8008060:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008066:	4618      	mov	r0, r3
 8008068:	f7fd fe20 	bl	8005cac <HAL_DMA_Abort_IT>
 800806c:	4603      	mov	r3, r0
 800806e:	2b00      	cmp	r3, #0
 8008070:	d008      	beq.n	8008084 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008076:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008078:	687a      	ldr	r2, [r7, #4]
 800807a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800807c:	4610      	mov	r0, r2
 800807e:	4798      	blx	r3
 8008080:	e000      	b.n	8008084 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008082:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008088:	b29b      	uxth	r3, r3
 800808a:	2b00      	cmp	r3, #0
 800808c:	d03e      	beq.n	800810c <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	695b      	ldr	r3, [r3, #20]
 8008094:	f003 0304 	and.w	r3, r3, #4
 8008098:	2b04      	cmp	r3, #4
 800809a:	d112      	bne.n	80080c2 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	691a      	ldr	r2, [r3, #16]
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080a6:	b2d2      	uxtb	r2, r2
 80080a8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080ae:	1c5a      	adds	r2, r3, #1
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80080b8:	b29b      	uxth	r3, r3
 80080ba:	3b01      	subs	r3, #1
 80080bc:	b29a      	uxth	r2, r3
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	695b      	ldr	r3, [r3, #20]
 80080c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080cc:	2b40      	cmp	r3, #64	; 0x40
 80080ce:	d112      	bne.n	80080f6 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	691a      	ldr	r2, [r3, #16]
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080da:	b2d2      	uxtb	r2, r2
 80080dc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080e2:	1c5a      	adds	r2, r3, #1
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80080ec:	b29b      	uxth	r3, r3
 80080ee:	3b01      	subs	r3, #1
 80080f0:	b29a      	uxth	r2, r3
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80080fa:	b29b      	uxth	r3, r3
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d005      	beq.n	800810c <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008104:	f043 0204 	orr.w	r2, r3, #4
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008110:	2b00      	cmp	r3, #0
 8008112:	d003      	beq.n	800811c <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8008114:	6878      	ldr	r0, [r7, #4]
 8008116:	f000 f843 	bl	80081a0 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800811a:	e039      	b.n	8008190 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800811c:	7bfb      	ldrb	r3, [r7, #15]
 800811e:	2b2a      	cmp	r3, #42	; 0x2a
 8008120:	d109      	bne.n	8008136 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	2200      	movs	r2, #0
 8008126:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	2228      	movs	r2, #40	; 0x28
 800812c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8008130:	6878      	ldr	r0, [r7, #4]
 8008132:	f7ff f826 	bl	8007182 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800813c:	b2db      	uxtb	r3, r3
 800813e:	2b28      	cmp	r3, #40	; 0x28
 8008140:	d111      	bne.n	8008166 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	4a15      	ldr	r2, [pc, #84]	; (800819c <I2C_Slave_STOPF+0x25c>)
 8008146:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	2200      	movs	r2, #0
 800814c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	2220      	movs	r2, #32
 8008152:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	2200      	movs	r2, #0
 800815a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800815e:	6878      	ldr	r0, [r7, #4]
 8008160:	f7ff f827 	bl	80071b2 <HAL_I2C_ListenCpltCallback>
}
 8008164:	e014      	b.n	8008190 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800816a:	2b22      	cmp	r3, #34	; 0x22
 800816c:	d002      	beq.n	8008174 <I2C_Slave_STOPF+0x234>
 800816e:	7bfb      	ldrb	r3, [r7, #15]
 8008170:	2b22      	cmp	r3, #34	; 0x22
 8008172:	d10d      	bne.n	8008190 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	2200      	movs	r2, #0
 8008178:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	2220      	movs	r2, #32
 800817e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	2200      	movs	r2, #0
 8008186:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800818a:	6878      	ldr	r0, [r7, #4]
 800818c:	f7fe fff9 	bl	8007182 <HAL_I2C_SlaveRxCpltCallback>
}
 8008190:	bf00      	nop
 8008192:	3710      	adds	r7, #16
 8008194:	46bd      	mov	sp, r7
 8008196:	bd80      	pop	{r7, pc}
 8008198:	080086d9 	.word	0x080086d9
 800819c:	ffff0000 	.word	0xffff0000

080081a0 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80081a0:	b580      	push	{r7, lr}
 80081a2:	b084      	sub	sp, #16
 80081a4:	af00      	add	r7, sp, #0
 80081a6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80081ae:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80081b6:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80081b8:	7bbb      	ldrb	r3, [r7, #14]
 80081ba:	2b10      	cmp	r3, #16
 80081bc:	d002      	beq.n	80081c4 <I2C_ITError+0x24>
 80081be:	7bbb      	ldrb	r3, [r7, #14]
 80081c0:	2b40      	cmp	r3, #64	; 0x40
 80081c2:	d10a      	bne.n	80081da <I2C_ITError+0x3a>
 80081c4:	7bfb      	ldrb	r3, [r7, #15]
 80081c6:	2b22      	cmp	r3, #34	; 0x22
 80081c8:	d107      	bne.n	80081da <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	681a      	ldr	r2, [r3, #0]
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80081d8:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80081da:	7bfb      	ldrb	r3, [r7, #15]
 80081dc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80081e0:	2b28      	cmp	r3, #40	; 0x28
 80081e2:	d107      	bne.n	80081f4 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	2200      	movs	r2, #0
 80081e8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	2228      	movs	r2, #40	; 0x28
 80081ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80081f2:	e015      	b.n	8008220 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	685b      	ldr	r3, [r3, #4]
 80081fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80081fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008202:	d00a      	beq.n	800821a <I2C_ITError+0x7a>
 8008204:	7bfb      	ldrb	r3, [r7, #15]
 8008206:	2b60      	cmp	r3, #96	; 0x60
 8008208:	d007      	beq.n	800821a <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	2220      	movs	r2, #32
 800820e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	2200      	movs	r2, #0
 8008216:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	2200      	movs	r2, #0
 800821e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	685b      	ldr	r3, [r3, #4]
 8008226:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800822a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800822e:	d162      	bne.n	80082f6 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	685a      	ldr	r2, [r3, #4]
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800823e:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008244:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008248:	b2db      	uxtb	r3, r3
 800824a:	2b01      	cmp	r3, #1
 800824c:	d020      	beq.n	8008290 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008252:	4a6a      	ldr	r2, [pc, #424]	; (80083fc <I2C_ITError+0x25c>)
 8008254:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800825a:	4618      	mov	r0, r3
 800825c:	f7fd fd26 	bl	8005cac <HAL_DMA_Abort_IT>
 8008260:	4603      	mov	r3, r0
 8008262:	2b00      	cmp	r3, #0
 8008264:	f000 8089 	beq.w	800837a <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	681a      	ldr	r2, [r3, #0]
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	f022 0201 	bic.w	r2, r2, #1
 8008276:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	2220      	movs	r2, #32
 800827c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008284:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008286:	687a      	ldr	r2, [r7, #4]
 8008288:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800828a:	4610      	mov	r0, r2
 800828c:	4798      	blx	r3
 800828e:	e074      	b.n	800837a <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008294:	4a59      	ldr	r2, [pc, #356]	; (80083fc <I2C_ITError+0x25c>)
 8008296:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800829c:	4618      	mov	r0, r3
 800829e:	f7fd fd05 	bl	8005cac <HAL_DMA_Abort_IT>
 80082a2:	4603      	mov	r3, r0
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d068      	beq.n	800837a <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	695b      	ldr	r3, [r3, #20]
 80082ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082b2:	2b40      	cmp	r3, #64	; 0x40
 80082b4:	d10b      	bne.n	80082ce <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	691a      	ldr	r2, [r3, #16]
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082c0:	b2d2      	uxtb	r2, r2
 80082c2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082c8:	1c5a      	adds	r2, r3, #1
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	681a      	ldr	r2, [r3, #0]
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	f022 0201 	bic.w	r2, r2, #1
 80082dc:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	2220      	movs	r2, #32
 80082e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80082ec:	687a      	ldr	r2, [r7, #4]
 80082ee:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80082f0:	4610      	mov	r0, r2
 80082f2:	4798      	blx	r3
 80082f4:	e041      	b.n	800837a <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80082fc:	b2db      	uxtb	r3, r3
 80082fe:	2b60      	cmp	r3, #96	; 0x60
 8008300:	d125      	bne.n	800834e <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	2220      	movs	r2, #32
 8008306:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	2200      	movs	r2, #0
 800830e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	695b      	ldr	r3, [r3, #20]
 8008316:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800831a:	2b40      	cmp	r3, #64	; 0x40
 800831c:	d10b      	bne.n	8008336 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	691a      	ldr	r2, [r3, #16]
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008328:	b2d2      	uxtb	r2, r2
 800832a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008330:	1c5a      	adds	r2, r3, #1
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	681a      	ldr	r2, [r3, #0]
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	f022 0201 	bic.w	r2, r2, #1
 8008344:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8008346:	6878      	ldr	r0, [r7, #4]
 8008348:	f7fe ff5b 	bl	8007202 <HAL_I2C_AbortCpltCallback>
 800834c:	e015      	b.n	800837a <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	695b      	ldr	r3, [r3, #20]
 8008354:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008358:	2b40      	cmp	r3, #64	; 0x40
 800835a:	d10b      	bne.n	8008374 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	691a      	ldr	r2, [r3, #16]
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008366:	b2d2      	uxtb	r2, r2
 8008368:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800836e:	1c5a      	adds	r2, r3, #1
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8008374:	6878      	ldr	r0, [r7, #4]
 8008376:	f7fe ff3a 	bl	80071ee <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800837e:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8008380:	68bb      	ldr	r3, [r7, #8]
 8008382:	f003 0301 	and.w	r3, r3, #1
 8008386:	2b00      	cmp	r3, #0
 8008388:	d10e      	bne.n	80083a8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800838a:	68bb      	ldr	r3, [r7, #8]
 800838c:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8008390:	2b00      	cmp	r3, #0
 8008392:	d109      	bne.n	80083a8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8008394:	68bb      	ldr	r3, [r7, #8]
 8008396:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800839a:	2b00      	cmp	r3, #0
 800839c:	d104      	bne.n	80083a8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800839e:	68bb      	ldr	r3, [r7, #8]
 80083a0:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d007      	beq.n	80083b8 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	685a      	ldr	r2, [r3, #4]
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80083b6:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80083be:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083c4:	f003 0304 	and.w	r3, r3, #4
 80083c8:	2b04      	cmp	r3, #4
 80083ca:	d113      	bne.n	80083f4 <I2C_ITError+0x254>
 80083cc:	7bfb      	ldrb	r3, [r7, #15]
 80083ce:	2b28      	cmp	r3, #40	; 0x28
 80083d0:	d110      	bne.n	80083f4 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	4a0a      	ldr	r2, [pc, #40]	; (8008400 <I2C_ITError+0x260>)
 80083d6:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	2200      	movs	r2, #0
 80083dc:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	2220      	movs	r2, #32
 80083e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	2200      	movs	r2, #0
 80083ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80083ee:	6878      	ldr	r0, [r7, #4]
 80083f0:	f7fe fedf 	bl	80071b2 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80083f4:	bf00      	nop
 80083f6:	3710      	adds	r7, #16
 80083f8:	46bd      	mov	sp, r7
 80083fa:	bd80      	pop	{r7, pc}
 80083fc:	080086d9 	.word	0x080086d9
 8008400:	ffff0000 	.word	0xffff0000

08008404 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8008404:	b580      	push	{r7, lr}
 8008406:	b088      	sub	sp, #32
 8008408:	af02      	add	r7, sp, #8
 800840a:	60f8      	str	r0, [r7, #12]
 800840c:	607a      	str	r2, [r7, #4]
 800840e:	603b      	str	r3, [r7, #0]
 8008410:	460b      	mov	r3, r1
 8008412:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008418:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800841a:	697b      	ldr	r3, [r7, #20]
 800841c:	2b08      	cmp	r3, #8
 800841e:	d006      	beq.n	800842e <I2C_MasterRequestWrite+0x2a>
 8008420:	697b      	ldr	r3, [r7, #20]
 8008422:	2b01      	cmp	r3, #1
 8008424:	d003      	beq.n	800842e <I2C_MasterRequestWrite+0x2a>
 8008426:	697b      	ldr	r3, [r7, #20]
 8008428:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800842c:	d108      	bne.n	8008440 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	681a      	ldr	r2, [r3, #0]
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800843c:	601a      	str	r2, [r3, #0]
 800843e:	e00b      	b.n	8008458 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008444:	2b12      	cmp	r3, #18
 8008446:	d107      	bne.n	8008458 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	681a      	ldr	r2, [r3, #0]
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008456:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008458:	683b      	ldr	r3, [r7, #0]
 800845a:	9300      	str	r3, [sp, #0]
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	2200      	movs	r2, #0
 8008460:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008464:	68f8      	ldr	r0, [r7, #12]
 8008466:	f000 f9df 	bl	8008828 <I2C_WaitOnFlagUntilTimeout>
 800846a:	4603      	mov	r3, r0
 800846c:	2b00      	cmp	r3, #0
 800846e:	d00d      	beq.n	800848c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800847a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800847e:	d103      	bne.n	8008488 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008486:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008488:	2303      	movs	r3, #3
 800848a:	e035      	b.n	80084f8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	691b      	ldr	r3, [r3, #16]
 8008490:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008494:	d108      	bne.n	80084a8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008496:	897b      	ldrh	r3, [r7, #10]
 8008498:	b2db      	uxtb	r3, r3
 800849a:	461a      	mov	r2, r3
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80084a4:	611a      	str	r2, [r3, #16]
 80084a6:	e01b      	b.n	80084e0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80084a8:	897b      	ldrh	r3, [r7, #10]
 80084aa:	11db      	asrs	r3, r3, #7
 80084ac:	b2db      	uxtb	r3, r3
 80084ae:	f003 0306 	and.w	r3, r3, #6
 80084b2:	b2db      	uxtb	r3, r3
 80084b4:	f063 030f 	orn	r3, r3, #15
 80084b8:	b2da      	uxtb	r2, r3
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80084c0:	683b      	ldr	r3, [r7, #0]
 80084c2:	687a      	ldr	r2, [r7, #4]
 80084c4:	490e      	ldr	r1, [pc, #56]	; (8008500 <I2C_MasterRequestWrite+0xfc>)
 80084c6:	68f8      	ldr	r0, [r7, #12]
 80084c8:	f000 fa05 	bl	80088d6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80084cc:	4603      	mov	r3, r0
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d001      	beq.n	80084d6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80084d2:	2301      	movs	r3, #1
 80084d4:	e010      	b.n	80084f8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80084d6:	897b      	ldrh	r3, [r7, #10]
 80084d8:	b2da      	uxtb	r2, r3
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80084e0:	683b      	ldr	r3, [r7, #0]
 80084e2:	687a      	ldr	r2, [r7, #4]
 80084e4:	4907      	ldr	r1, [pc, #28]	; (8008504 <I2C_MasterRequestWrite+0x100>)
 80084e6:	68f8      	ldr	r0, [r7, #12]
 80084e8:	f000 f9f5 	bl	80088d6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80084ec:	4603      	mov	r3, r0
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d001      	beq.n	80084f6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80084f2:	2301      	movs	r3, #1
 80084f4:	e000      	b.n	80084f8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80084f6:	2300      	movs	r3, #0
}
 80084f8:	4618      	mov	r0, r3
 80084fa:	3718      	adds	r7, #24
 80084fc:	46bd      	mov	sp, r7
 80084fe:	bd80      	pop	{r7, pc}
 8008500:	00010008 	.word	0x00010008
 8008504:	00010002 	.word	0x00010002

08008508 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8008508:	b580      	push	{r7, lr}
 800850a:	b088      	sub	sp, #32
 800850c:	af02      	add	r7, sp, #8
 800850e:	60f8      	str	r0, [r7, #12]
 8008510:	4608      	mov	r0, r1
 8008512:	4611      	mov	r1, r2
 8008514:	461a      	mov	r2, r3
 8008516:	4603      	mov	r3, r0
 8008518:	817b      	strh	r3, [r7, #10]
 800851a:	460b      	mov	r3, r1
 800851c:	813b      	strh	r3, [r7, #8]
 800851e:	4613      	mov	r3, r2
 8008520:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	681a      	ldr	r2, [r3, #0]
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008530:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	681a      	ldr	r2, [r3, #0]
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008540:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008544:	9300      	str	r3, [sp, #0]
 8008546:	6a3b      	ldr	r3, [r7, #32]
 8008548:	2200      	movs	r2, #0
 800854a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800854e:	68f8      	ldr	r0, [r7, #12]
 8008550:	f000 f96a 	bl	8008828 <I2C_WaitOnFlagUntilTimeout>
 8008554:	4603      	mov	r3, r0
 8008556:	2b00      	cmp	r3, #0
 8008558:	d00d      	beq.n	8008576 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008564:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008568:	d103      	bne.n	8008572 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008570:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008572:	2303      	movs	r3, #3
 8008574:	e0aa      	b.n	80086cc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008576:	897b      	ldrh	r3, [r7, #10]
 8008578:	b2db      	uxtb	r3, r3
 800857a:	461a      	mov	r2, r3
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8008584:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008588:	6a3a      	ldr	r2, [r7, #32]
 800858a:	4952      	ldr	r1, [pc, #328]	; (80086d4 <I2C_RequestMemoryRead+0x1cc>)
 800858c:	68f8      	ldr	r0, [r7, #12]
 800858e:	f000 f9a2 	bl	80088d6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008592:	4603      	mov	r3, r0
 8008594:	2b00      	cmp	r3, #0
 8008596:	d001      	beq.n	800859c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8008598:	2301      	movs	r3, #1
 800859a:	e097      	b.n	80086cc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800859c:	2300      	movs	r3, #0
 800859e:	617b      	str	r3, [r7, #20]
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	695b      	ldr	r3, [r3, #20]
 80085a6:	617b      	str	r3, [r7, #20]
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	699b      	ldr	r3, [r3, #24]
 80085ae:	617b      	str	r3, [r7, #20]
 80085b0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80085b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80085b4:	6a39      	ldr	r1, [r7, #32]
 80085b6:	68f8      	ldr	r0, [r7, #12]
 80085b8:	f000 fa0c 	bl	80089d4 <I2C_WaitOnTXEFlagUntilTimeout>
 80085bc:	4603      	mov	r3, r0
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d00d      	beq.n	80085de <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085c6:	2b04      	cmp	r3, #4
 80085c8:	d107      	bne.n	80085da <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	681a      	ldr	r2, [r3, #0]
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80085d8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80085da:	2301      	movs	r3, #1
 80085dc:	e076      	b.n	80086cc <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80085de:	88fb      	ldrh	r3, [r7, #6]
 80085e0:	2b01      	cmp	r3, #1
 80085e2:	d105      	bne.n	80085f0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80085e4:	893b      	ldrh	r3, [r7, #8]
 80085e6:	b2da      	uxtb	r2, r3
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	611a      	str	r2, [r3, #16]
 80085ee:	e021      	b.n	8008634 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80085f0:	893b      	ldrh	r3, [r7, #8]
 80085f2:	0a1b      	lsrs	r3, r3, #8
 80085f4:	b29b      	uxth	r3, r3
 80085f6:	b2da      	uxtb	r2, r3
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80085fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008600:	6a39      	ldr	r1, [r7, #32]
 8008602:	68f8      	ldr	r0, [r7, #12]
 8008604:	f000 f9e6 	bl	80089d4 <I2C_WaitOnTXEFlagUntilTimeout>
 8008608:	4603      	mov	r3, r0
 800860a:	2b00      	cmp	r3, #0
 800860c:	d00d      	beq.n	800862a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008612:	2b04      	cmp	r3, #4
 8008614:	d107      	bne.n	8008626 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	681a      	ldr	r2, [r3, #0]
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008624:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8008626:	2301      	movs	r3, #1
 8008628:	e050      	b.n	80086cc <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800862a:	893b      	ldrh	r3, [r7, #8]
 800862c:	b2da      	uxtb	r2, r3
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008634:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008636:	6a39      	ldr	r1, [r7, #32]
 8008638:	68f8      	ldr	r0, [r7, #12]
 800863a:	f000 f9cb 	bl	80089d4 <I2C_WaitOnTXEFlagUntilTimeout>
 800863e:	4603      	mov	r3, r0
 8008640:	2b00      	cmp	r3, #0
 8008642:	d00d      	beq.n	8008660 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008648:	2b04      	cmp	r3, #4
 800864a:	d107      	bne.n	800865c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	681a      	ldr	r2, [r3, #0]
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800865a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800865c:	2301      	movs	r3, #1
 800865e:	e035      	b.n	80086cc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	681a      	ldr	r2, [r3, #0]
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800866e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008672:	9300      	str	r3, [sp, #0]
 8008674:	6a3b      	ldr	r3, [r7, #32]
 8008676:	2200      	movs	r2, #0
 8008678:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800867c:	68f8      	ldr	r0, [r7, #12]
 800867e:	f000 f8d3 	bl	8008828 <I2C_WaitOnFlagUntilTimeout>
 8008682:	4603      	mov	r3, r0
 8008684:	2b00      	cmp	r3, #0
 8008686:	d00d      	beq.n	80086a4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008692:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008696:	d103      	bne.n	80086a0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800869e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80086a0:	2303      	movs	r3, #3
 80086a2:	e013      	b.n	80086cc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80086a4:	897b      	ldrh	r3, [r7, #10]
 80086a6:	b2db      	uxtb	r3, r3
 80086a8:	f043 0301 	orr.w	r3, r3, #1
 80086ac:	b2da      	uxtb	r2, r3
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80086b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086b6:	6a3a      	ldr	r2, [r7, #32]
 80086b8:	4906      	ldr	r1, [pc, #24]	; (80086d4 <I2C_RequestMemoryRead+0x1cc>)
 80086ba:	68f8      	ldr	r0, [r7, #12]
 80086bc:	f000 f90b 	bl	80088d6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80086c0:	4603      	mov	r3, r0
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d001      	beq.n	80086ca <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80086c6:	2301      	movs	r3, #1
 80086c8:	e000      	b.n	80086cc <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80086ca:	2300      	movs	r3, #0
}
 80086cc:	4618      	mov	r0, r3
 80086ce:	3718      	adds	r7, #24
 80086d0:	46bd      	mov	sp, r7
 80086d2:	bd80      	pop	{r7, pc}
 80086d4:	00010002 	.word	0x00010002

080086d8 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80086d8:	b580      	push	{r7, lr}
 80086da:	b086      	sub	sp, #24
 80086dc:	af00      	add	r7, sp, #0
 80086de:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80086e0:	2300      	movs	r3, #0
 80086e2:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086e8:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80086ea:	697b      	ldr	r3, [r7, #20]
 80086ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80086f0:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80086f2:	4b4b      	ldr	r3, [pc, #300]	; (8008820 <I2C_DMAAbort+0x148>)
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	08db      	lsrs	r3, r3, #3
 80086f8:	4a4a      	ldr	r2, [pc, #296]	; (8008824 <I2C_DMAAbort+0x14c>)
 80086fa:	fba2 2303 	umull	r2, r3, r2, r3
 80086fe:	0a1a      	lsrs	r2, r3, #8
 8008700:	4613      	mov	r3, r2
 8008702:	009b      	lsls	r3, r3, #2
 8008704:	4413      	add	r3, r2
 8008706:	00da      	lsls	r2, r3, #3
 8008708:	1ad3      	subs	r3, r2, r3
 800870a:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	2b00      	cmp	r3, #0
 8008710:	d106      	bne.n	8008720 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008712:	697b      	ldr	r3, [r7, #20]
 8008714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008716:	f043 0220 	orr.w	r2, r3, #32
 800871a:	697b      	ldr	r3, [r7, #20]
 800871c:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 800871e:	e00a      	b.n	8008736 <I2C_DMAAbort+0x5e>
    }
    count--;
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	3b01      	subs	r3, #1
 8008724:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8008726:	697b      	ldr	r3, [r7, #20]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008730:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008734:	d0ea      	beq.n	800870c <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8008736:	697b      	ldr	r3, [r7, #20]
 8008738:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800873a:	2b00      	cmp	r3, #0
 800873c:	d003      	beq.n	8008746 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800873e:	697b      	ldr	r3, [r7, #20]
 8008740:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008742:	2200      	movs	r2, #0
 8008744:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8008746:	697b      	ldr	r3, [r7, #20]
 8008748:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800874a:	2b00      	cmp	r3, #0
 800874c:	d003      	beq.n	8008756 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800874e:	697b      	ldr	r3, [r7, #20]
 8008750:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008752:	2200      	movs	r2, #0
 8008754:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008756:	697b      	ldr	r3, [r7, #20]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	681a      	ldr	r2, [r3, #0]
 800875c:	697b      	ldr	r3, [r7, #20]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008764:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8008766:	697b      	ldr	r3, [r7, #20]
 8008768:	2200      	movs	r2, #0
 800876a:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 800876c:	697b      	ldr	r3, [r7, #20]
 800876e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008770:	2b00      	cmp	r3, #0
 8008772:	d003      	beq.n	800877c <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8008774:	697b      	ldr	r3, [r7, #20]
 8008776:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008778:	2200      	movs	r2, #0
 800877a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 800877c:	697b      	ldr	r3, [r7, #20]
 800877e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008780:	2b00      	cmp	r3, #0
 8008782:	d003      	beq.n	800878c <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8008784:	697b      	ldr	r3, [r7, #20]
 8008786:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008788:	2200      	movs	r2, #0
 800878a:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 800878c:	697b      	ldr	r3, [r7, #20]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	681a      	ldr	r2, [r3, #0]
 8008792:	697b      	ldr	r3, [r7, #20]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	f022 0201 	bic.w	r2, r2, #1
 800879a:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800879c:	697b      	ldr	r3, [r7, #20]
 800879e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80087a2:	b2db      	uxtb	r3, r3
 80087a4:	2b60      	cmp	r3, #96	; 0x60
 80087a6:	d10e      	bne.n	80087c6 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80087a8:	697b      	ldr	r3, [r7, #20]
 80087aa:	2220      	movs	r2, #32
 80087ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80087b0:	697b      	ldr	r3, [r7, #20]
 80087b2:	2200      	movs	r2, #0
 80087b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80087b8:	697b      	ldr	r3, [r7, #20]
 80087ba:	2200      	movs	r2, #0
 80087bc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80087be:	6978      	ldr	r0, [r7, #20]
 80087c0:	f7fe fd1f 	bl	8007202 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80087c4:	e027      	b.n	8008816 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80087c6:	7cfb      	ldrb	r3, [r7, #19]
 80087c8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80087cc:	2b28      	cmp	r3, #40	; 0x28
 80087ce:	d117      	bne.n	8008800 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80087d0:	697b      	ldr	r3, [r7, #20]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	681a      	ldr	r2, [r3, #0]
 80087d6:	697b      	ldr	r3, [r7, #20]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	f042 0201 	orr.w	r2, r2, #1
 80087de:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80087e0:	697b      	ldr	r3, [r7, #20]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	681a      	ldr	r2, [r3, #0]
 80087e6:	697b      	ldr	r3, [r7, #20]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80087ee:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80087f0:	697b      	ldr	r3, [r7, #20]
 80087f2:	2200      	movs	r2, #0
 80087f4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80087f6:	697b      	ldr	r3, [r7, #20]
 80087f8:	2228      	movs	r2, #40	; 0x28
 80087fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80087fe:	e007      	b.n	8008810 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8008800:	697b      	ldr	r3, [r7, #20]
 8008802:	2220      	movs	r2, #32
 8008804:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008808:	697b      	ldr	r3, [r7, #20]
 800880a:	2200      	movs	r2, #0
 800880c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8008810:	6978      	ldr	r0, [r7, #20]
 8008812:	f7fe fcec 	bl	80071ee <HAL_I2C_ErrorCallback>
}
 8008816:	bf00      	nop
 8008818:	3718      	adds	r7, #24
 800881a:	46bd      	mov	sp, r7
 800881c:	bd80      	pop	{r7, pc}
 800881e:	bf00      	nop
 8008820:	200000b8 	.word	0x200000b8
 8008824:	14f8b589 	.word	0x14f8b589

08008828 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8008828:	b580      	push	{r7, lr}
 800882a:	b084      	sub	sp, #16
 800882c:	af00      	add	r7, sp, #0
 800882e:	60f8      	str	r0, [r7, #12]
 8008830:	60b9      	str	r1, [r7, #8]
 8008832:	603b      	str	r3, [r7, #0]
 8008834:	4613      	mov	r3, r2
 8008836:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008838:	e025      	b.n	8008886 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800883a:	683b      	ldr	r3, [r7, #0]
 800883c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008840:	d021      	beq.n	8008886 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008842:	f7fb fd59 	bl	80042f8 <HAL_GetTick>
 8008846:	4602      	mov	r2, r0
 8008848:	69bb      	ldr	r3, [r7, #24]
 800884a:	1ad3      	subs	r3, r2, r3
 800884c:	683a      	ldr	r2, [r7, #0]
 800884e:	429a      	cmp	r2, r3
 8008850:	d302      	bcc.n	8008858 <I2C_WaitOnFlagUntilTimeout+0x30>
 8008852:	683b      	ldr	r3, [r7, #0]
 8008854:	2b00      	cmp	r3, #0
 8008856:	d116      	bne.n	8008886 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	2200      	movs	r2, #0
 800885c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	2220      	movs	r2, #32
 8008862:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	2200      	movs	r2, #0
 800886a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008872:	f043 0220 	orr.w	r2, r3, #32
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	2200      	movs	r2, #0
 800887e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008882:	2301      	movs	r3, #1
 8008884:	e023      	b.n	80088ce <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008886:	68bb      	ldr	r3, [r7, #8]
 8008888:	0c1b      	lsrs	r3, r3, #16
 800888a:	b2db      	uxtb	r3, r3
 800888c:	2b01      	cmp	r3, #1
 800888e:	d10d      	bne.n	80088ac <I2C_WaitOnFlagUntilTimeout+0x84>
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	695b      	ldr	r3, [r3, #20]
 8008896:	43da      	mvns	r2, r3
 8008898:	68bb      	ldr	r3, [r7, #8]
 800889a:	4013      	ands	r3, r2
 800889c:	b29b      	uxth	r3, r3
 800889e:	2b00      	cmp	r3, #0
 80088a0:	bf0c      	ite	eq
 80088a2:	2301      	moveq	r3, #1
 80088a4:	2300      	movne	r3, #0
 80088a6:	b2db      	uxtb	r3, r3
 80088a8:	461a      	mov	r2, r3
 80088aa:	e00c      	b.n	80088c6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	699b      	ldr	r3, [r3, #24]
 80088b2:	43da      	mvns	r2, r3
 80088b4:	68bb      	ldr	r3, [r7, #8]
 80088b6:	4013      	ands	r3, r2
 80088b8:	b29b      	uxth	r3, r3
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	bf0c      	ite	eq
 80088be:	2301      	moveq	r3, #1
 80088c0:	2300      	movne	r3, #0
 80088c2:	b2db      	uxtb	r3, r3
 80088c4:	461a      	mov	r2, r3
 80088c6:	79fb      	ldrb	r3, [r7, #7]
 80088c8:	429a      	cmp	r2, r3
 80088ca:	d0b6      	beq.n	800883a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80088cc:	2300      	movs	r3, #0
}
 80088ce:	4618      	mov	r0, r3
 80088d0:	3710      	adds	r7, #16
 80088d2:	46bd      	mov	sp, r7
 80088d4:	bd80      	pop	{r7, pc}

080088d6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80088d6:	b580      	push	{r7, lr}
 80088d8:	b084      	sub	sp, #16
 80088da:	af00      	add	r7, sp, #0
 80088dc:	60f8      	str	r0, [r7, #12]
 80088de:	60b9      	str	r1, [r7, #8]
 80088e0:	607a      	str	r2, [r7, #4]
 80088e2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80088e4:	e051      	b.n	800898a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	695b      	ldr	r3, [r3, #20]
 80088ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80088f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80088f4:	d123      	bne.n	800893e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	681a      	ldr	r2, [r3, #0]
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008904:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800890e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	2200      	movs	r2, #0
 8008914:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	2220      	movs	r2, #32
 800891a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	2200      	movs	r2, #0
 8008922:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800892a:	f043 0204 	orr.w	r2, r3, #4
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	2200      	movs	r2, #0
 8008936:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800893a:	2301      	movs	r3, #1
 800893c:	e046      	b.n	80089cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008944:	d021      	beq.n	800898a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008946:	f7fb fcd7 	bl	80042f8 <HAL_GetTick>
 800894a:	4602      	mov	r2, r0
 800894c:	683b      	ldr	r3, [r7, #0]
 800894e:	1ad3      	subs	r3, r2, r3
 8008950:	687a      	ldr	r2, [r7, #4]
 8008952:	429a      	cmp	r2, r3
 8008954:	d302      	bcc.n	800895c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	2b00      	cmp	r3, #0
 800895a:	d116      	bne.n	800898a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	2200      	movs	r2, #0
 8008960:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	2220      	movs	r2, #32
 8008966:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	2200      	movs	r2, #0
 800896e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008976:	f043 0220 	orr.w	r2, r3, #32
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	2200      	movs	r2, #0
 8008982:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008986:	2301      	movs	r3, #1
 8008988:	e020      	b.n	80089cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800898a:	68bb      	ldr	r3, [r7, #8]
 800898c:	0c1b      	lsrs	r3, r3, #16
 800898e:	b2db      	uxtb	r3, r3
 8008990:	2b01      	cmp	r3, #1
 8008992:	d10c      	bne.n	80089ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	695b      	ldr	r3, [r3, #20]
 800899a:	43da      	mvns	r2, r3
 800899c:	68bb      	ldr	r3, [r7, #8]
 800899e:	4013      	ands	r3, r2
 80089a0:	b29b      	uxth	r3, r3
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	bf14      	ite	ne
 80089a6:	2301      	movne	r3, #1
 80089a8:	2300      	moveq	r3, #0
 80089aa:	b2db      	uxtb	r3, r3
 80089ac:	e00b      	b.n	80089c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	699b      	ldr	r3, [r3, #24]
 80089b4:	43da      	mvns	r2, r3
 80089b6:	68bb      	ldr	r3, [r7, #8]
 80089b8:	4013      	ands	r3, r2
 80089ba:	b29b      	uxth	r3, r3
 80089bc:	2b00      	cmp	r3, #0
 80089be:	bf14      	ite	ne
 80089c0:	2301      	movne	r3, #1
 80089c2:	2300      	moveq	r3, #0
 80089c4:	b2db      	uxtb	r3, r3
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d18d      	bne.n	80088e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80089ca:	2300      	movs	r3, #0
}
 80089cc:	4618      	mov	r0, r3
 80089ce:	3710      	adds	r7, #16
 80089d0:	46bd      	mov	sp, r7
 80089d2:	bd80      	pop	{r7, pc}

080089d4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80089d4:	b580      	push	{r7, lr}
 80089d6:	b084      	sub	sp, #16
 80089d8:	af00      	add	r7, sp, #0
 80089da:	60f8      	str	r0, [r7, #12]
 80089dc:	60b9      	str	r1, [r7, #8]
 80089de:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80089e0:	e02d      	b.n	8008a3e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80089e2:	68f8      	ldr	r0, [r7, #12]
 80089e4:	f000 f900 	bl	8008be8 <I2C_IsAcknowledgeFailed>
 80089e8:	4603      	mov	r3, r0
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d001      	beq.n	80089f2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80089ee:	2301      	movs	r3, #1
 80089f0:	e02d      	b.n	8008a4e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80089f2:	68bb      	ldr	r3, [r7, #8]
 80089f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089f8:	d021      	beq.n	8008a3e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80089fa:	f7fb fc7d 	bl	80042f8 <HAL_GetTick>
 80089fe:	4602      	mov	r2, r0
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	1ad3      	subs	r3, r2, r3
 8008a04:	68ba      	ldr	r2, [r7, #8]
 8008a06:	429a      	cmp	r2, r3
 8008a08:	d302      	bcc.n	8008a10 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8008a0a:	68bb      	ldr	r3, [r7, #8]
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d116      	bne.n	8008a3e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	2200      	movs	r2, #0
 8008a14:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	2220      	movs	r2, #32
 8008a1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	2200      	movs	r2, #0
 8008a22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a2a:	f043 0220 	orr.w	r2, r3, #32
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	2200      	movs	r2, #0
 8008a36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008a3a:	2301      	movs	r3, #1
 8008a3c:	e007      	b.n	8008a4e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	695b      	ldr	r3, [r3, #20]
 8008a44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a48:	2b80      	cmp	r3, #128	; 0x80
 8008a4a:	d1ca      	bne.n	80089e2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008a4c:	2300      	movs	r3, #0
}
 8008a4e:	4618      	mov	r0, r3
 8008a50:	3710      	adds	r7, #16
 8008a52:	46bd      	mov	sp, r7
 8008a54:	bd80      	pop	{r7, pc}

08008a56 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008a56:	b580      	push	{r7, lr}
 8008a58:	b084      	sub	sp, #16
 8008a5a:	af00      	add	r7, sp, #0
 8008a5c:	60f8      	str	r0, [r7, #12]
 8008a5e:	60b9      	str	r1, [r7, #8]
 8008a60:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008a62:	e02d      	b.n	8008ac0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008a64:	68f8      	ldr	r0, [r7, #12]
 8008a66:	f000 f8bf 	bl	8008be8 <I2C_IsAcknowledgeFailed>
 8008a6a:	4603      	mov	r3, r0
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d001      	beq.n	8008a74 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008a70:	2301      	movs	r3, #1
 8008a72:	e02d      	b.n	8008ad0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008a74:	68bb      	ldr	r3, [r7, #8]
 8008a76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a7a:	d021      	beq.n	8008ac0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008a7c:	f7fb fc3c 	bl	80042f8 <HAL_GetTick>
 8008a80:	4602      	mov	r2, r0
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	1ad3      	subs	r3, r2, r3
 8008a86:	68ba      	ldr	r2, [r7, #8]
 8008a88:	429a      	cmp	r2, r3
 8008a8a:	d302      	bcc.n	8008a92 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8008a8c:	68bb      	ldr	r3, [r7, #8]
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d116      	bne.n	8008ac0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	2200      	movs	r2, #0
 8008a96:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	2220      	movs	r2, #32
 8008a9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	2200      	movs	r2, #0
 8008aa4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008aac:	f043 0220 	orr.w	r2, r3, #32
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	2200      	movs	r2, #0
 8008ab8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008abc:	2301      	movs	r3, #1
 8008abe:	e007      	b.n	8008ad0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	695b      	ldr	r3, [r3, #20]
 8008ac6:	f003 0304 	and.w	r3, r3, #4
 8008aca:	2b04      	cmp	r3, #4
 8008acc:	d1ca      	bne.n	8008a64 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008ace:	2300      	movs	r3, #0
}
 8008ad0:	4618      	mov	r0, r3
 8008ad2:	3710      	adds	r7, #16
 8008ad4:	46bd      	mov	sp, r7
 8008ad6:	bd80      	pop	{r7, pc}

08008ad8 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8008ad8:	b480      	push	{r7}
 8008ada:	b085      	sub	sp, #20
 8008adc:	af00      	add	r7, sp, #0
 8008ade:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008ae0:	2300      	movs	r3, #0
 8008ae2:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8008ae4:	4b13      	ldr	r3, [pc, #76]	; (8008b34 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	08db      	lsrs	r3, r3, #3
 8008aea:	4a13      	ldr	r2, [pc, #76]	; (8008b38 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8008aec:	fba2 2303 	umull	r2, r3, r2, r3
 8008af0:	0a1a      	lsrs	r2, r3, #8
 8008af2:	4613      	mov	r3, r2
 8008af4:	009b      	lsls	r3, r3, #2
 8008af6:	4413      	add	r3, r2
 8008af8:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	3b01      	subs	r3, #1
 8008afe:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d107      	bne.n	8008b16 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b0a:	f043 0220 	orr.w	r2, r3, #32
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8008b12:	2301      	movs	r3, #1
 8008b14:	e008      	b.n	8008b28 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008b20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008b24:	d0e9      	beq.n	8008afa <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8008b26:	2300      	movs	r3, #0
}
 8008b28:	4618      	mov	r0, r3
 8008b2a:	3714      	adds	r7, #20
 8008b2c:	46bd      	mov	sp, r7
 8008b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b32:	4770      	bx	lr
 8008b34:	200000b8 	.word	0x200000b8
 8008b38:	14f8b589 	.word	0x14f8b589

08008b3c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008b3c:	b580      	push	{r7, lr}
 8008b3e:	b084      	sub	sp, #16
 8008b40:	af00      	add	r7, sp, #0
 8008b42:	60f8      	str	r0, [r7, #12]
 8008b44:	60b9      	str	r1, [r7, #8]
 8008b46:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008b48:	e042      	b.n	8008bd0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	695b      	ldr	r3, [r3, #20]
 8008b50:	f003 0310 	and.w	r3, r3, #16
 8008b54:	2b10      	cmp	r3, #16
 8008b56:	d119      	bne.n	8008b8c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	f06f 0210 	mvn.w	r2, #16
 8008b60:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	2200      	movs	r2, #0
 8008b66:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	2220      	movs	r2, #32
 8008b6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	2200      	movs	r2, #0
 8008b74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	2200      	movs	r2, #0
 8008b84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008b88:	2301      	movs	r3, #1
 8008b8a:	e029      	b.n	8008be0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008b8c:	f7fb fbb4 	bl	80042f8 <HAL_GetTick>
 8008b90:	4602      	mov	r2, r0
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	1ad3      	subs	r3, r2, r3
 8008b96:	68ba      	ldr	r2, [r7, #8]
 8008b98:	429a      	cmp	r2, r3
 8008b9a:	d302      	bcc.n	8008ba2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8008b9c:	68bb      	ldr	r3, [r7, #8]
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d116      	bne.n	8008bd0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	2200      	movs	r2, #0
 8008ba6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	2220      	movs	r2, #32
 8008bac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	2200      	movs	r2, #0
 8008bb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bbc:	f043 0220 	orr.w	r2, r3, #32
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	2200      	movs	r2, #0
 8008bc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008bcc:	2301      	movs	r3, #1
 8008bce:	e007      	b.n	8008be0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	695b      	ldr	r3, [r3, #20]
 8008bd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008bda:	2b40      	cmp	r3, #64	; 0x40
 8008bdc:	d1b5      	bne.n	8008b4a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8008bde:	2300      	movs	r3, #0
}
 8008be0:	4618      	mov	r0, r3
 8008be2:	3710      	adds	r7, #16
 8008be4:	46bd      	mov	sp, r7
 8008be6:	bd80      	pop	{r7, pc}

08008be8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8008be8:	b480      	push	{r7}
 8008bea:	b083      	sub	sp, #12
 8008bec:	af00      	add	r7, sp, #0
 8008bee:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	695b      	ldr	r3, [r3, #20]
 8008bf6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008bfa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008bfe:	d11b      	bne.n	8008c38 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008c08:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	2200      	movs	r2, #0
 8008c0e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	2220      	movs	r2, #32
 8008c14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	2200      	movs	r2, #0
 8008c1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c24:	f043 0204 	orr.w	r2, r3, #4
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	2200      	movs	r2, #0
 8008c30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8008c34:	2301      	movs	r3, #1
 8008c36:	e000      	b.n	8008c3a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8008c38:	2300      	movs	r3, #0
}
 8008c3a:	4618      	mov	r0, r3
 8008c3c:	370c      	adds	r7, #12
 8008c3e:	46bd      	mov	sp, r7
 8008c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c44:	4770      	bx	lr

08008c46 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8008c46:	b480      	push	{r7}
 8008c48:	b083      	sub	sp, #12
 8008c4a:	af00      	add	r7, sp, #0
 8008c4c:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c52:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8008c56:	d103      	bne.n	8008c60 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	2201      	movs	r2, #1
 8008c5c:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8008c5e:	e007      	b.n	8008c70 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c64:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8008c68:	d102      	bne.n	8008c70 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	2208      	movs	r2, #8
 8008c6e:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8008c70:	bf00      	nop
 8008c72:	370c      	adds	r7, #12
 8008c74:	46bd      	mov	sp, r7
 8008c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c7a:	4770      	bx	lr

08008c7c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008c7c:	b580      	push	{r7, lr}
 8008c7e:	b086      	sub	sp, #24
 8008c80:	af00      	add	r7, sp, #0
 8008c82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d101      	bne.n	8008c8e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008c8a:	2301      	movs	r3, #1
 8008c8c:	e267      	b.n	800915e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	f003 0301 	and.w	r3, r3, #1
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d075      	beq.n	8008d86 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008c9a:	4b88      	ldr	r3, [pc, #544]	; (8008ebc <HAL_RCC_OscConfig+0x240>)
 8008c9c:	689b      	ldr	r3, [r3, #8]
 8008c9e:	f003 030c 	and.w	r3, r3, #12
 8008ca2:	2b04      	cmp	r3, #4
 8008ca4:	d00c      	beq.n	8008cc0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008ca6:	4b85      	ldr	r3, [pc, #532]	; (8008ebc <HAL_RCC_OscConfig+0x240>)
 8008ca8:	689b      	ldr	r3, [r3, #8]
 8008caa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008cae:	2b08      	cmp	r3, #8
 8008cb0:	d112      	bne.n	8008cd8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008cb2:	4b82      	ldr	r3, [pc, #520]	; (8008ebc <HAL_RCC_OscConfig+0x240>)
 8008cb4:	685b      	ldr	r3, [r3, #4]
 8008cb6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008cba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008cbe:	d10b      	bne.n	8008cd8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008cc0:	4b7e      	ldr	r3, [pc, #504]	; (8008ebc <HAL_RCC_OscConfig+0x240>)
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d05b      	beq.n	8008d84 <HAL_RCC_OscConfig+0x108>
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	685b      	ldr	r3, [r3, #4]
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d157      	bne.n	8008d84 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008cd4:	2301      	movs	r3, #1
 8008cd6:	e242      	b.n	800915e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	685b      	ldr	r3, [r3, #4]
 8008cdc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008ce0:	d106      	bne.n	8008cf0 <HAL_RCC_OscConfig+0x74>
 8008ce2:	4b76      	ldr	r3, [pc, #472]	; (8008ebc <HAL_RCC_OscConfig+0x240>)
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	4a75      	ldr	r2, [pc, #468]	; (8008ebc <HAL_RCC_OscConfig+0x240>)
 8008ce8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008cec:	6013      	str	r3, [r2, #0]
 8008cee:	e01d      	b.n	8008d2c <HAL_RCC_OscConfig+0xb0>
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	685b      	ldr	r3, [r3, #4]
 8008cf4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008cf8:	d10c      	bne.n	8008d14 <HAL_RCC_OscConfig+0x98>
 8008cfa:	4b70      	ldr	r3, [pc, #448]	; (8008ebc <HAL_RCC_OscConfig+0x240>)
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	4a6f      	ldr	r2, [pc, #444]	; (8008ebc <HAL_RCC_OscConfig+0x240>)
 8008d00:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008d04:	6013      	str	r3, [r2, #0]
 8008d06:	4b6d      	ldr	r3, [pc, #436]	; (8008ebc <HAL_RCC_OscConfig+0x240>)
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	4a6c      	ldr	r2, [pc, #432]	; (8008ebc <HAL_RCC_OscConfig+0x240>)
 8008d0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008d10:	6013      	str	r3, [r2, #0]
 8008d12:	e00b      	b.n	8008d2c <HAL_RCC_OscConfig+0xb0>
 8008d14:	4b69      	ldr	r3, [pc, #420]	; (8008ebc <HAL_RCC_OscConfig+0x240>)
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	4a68      	ldr	r2, [pc, #416]	; (8008ebc <HAL_RCC_OscConfig+0x240>)
 8008d1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008d1e:	6013      	str	r3, [r2, #0]
 8008d20:	4b66      	ldr	r3, [pc, #408]	; (8008ebc <HAL_RCC_OscConfig+0x240>)
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	4a65      	ldr	r2, [pc, #404]	; (8008ebc <HAL_RCC_OscConfig+0x240>)
 8008d26:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008d2a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	685b      	ldr	r3, [r3, #4]
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d013      	beq.n	8008d5c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008d34:	f7fb fae0 	bl	80042f8 <HAL_GetTick>
 8008d38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008d3a:	e008      	b.n	8008d4e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008d3c:	f7fb fadc 	bl	80042f8 <HAL_GetTick>
 8008d40:	4602      	mov	r2, r0
 8008d42:	693b      	ldr	r3, [r7, #16]
 8008d44:	1ad3      	subs	r3, r2, r3
 8008d46:	2b64      	cmp	r3, #100	; 0x64
 8008d48:	d901      	bls.n	8008d4e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8008d4a:	2303      	movs	r3, #3
 8008d4c:	e207      	b.n	800915e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008d4e:	4b5b      	ldr	r3, [pc, #364]	; (8008ebc <HAL_RCC_OscConfig+0x240>)
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d0f0      	beq.n	8008d3c <HAL_RCC_OscConfig+0xc0>
 8008d5a:	e014      	b.n	8008d86 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008d5c:	f7fb facc 	bl	80042f8 <HAL_GetTick>
 8008d60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008d62:	e008      	b.n	8008d76 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008d64:	f7fb fac8 	bl	80042f8 <HAL_GetTick>
 8008d68:	4602      	mov	r2, r0
 8008d6a:	693b      	ldr	r3, [r7, #16]
 8008d6c:	1ad3      	subs	r3, r2, r3
 8008d6e:	2b64      	cmp	r3, #100	; 0x64
 8008d70:	d901      	bls.n	8008d76 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008d72:	2303      	movs	r3, #3
 8008d74:	e1f3      	b.n	800915e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008d76:	4b51      	ldr	r3, [pc, #324]	; (8008ebc <HAL_RCC_OscConfig+0x240>)
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d1f0      	bne.n	8008d64 <HAL_RCC_OscConfig+0xe8>
 8008d82:	e000      	b.n	8008d86 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008d84:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	f003 0302 	and.w	r3, r3, #2
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d063      	beq.n	8008e5a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008d92:	4b4a      	ldr	r3, [pc, #296]	; (8008ebc <HAL_RCC_OscConfig+0x240>)
 8008d94:	689b      	ldr	r3, [r3, #8]
 8008d96:	f003 030c 	and.w	r3, r3, #12
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d00b      	beq.n	8008db6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008d9e:	4b47      	ldr	r3, [pc, #284]	; (8008ebc <HAL_RCC_OscConfig+0x240>)
 8008da0:	689b      	ldr	r3, [r3, #8]
 8008da2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008da6:	2b08      	cmp	r3, #8
 8008da8:	d11c      	bne.n	8008de4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008daa:	4b44      	ldr	r3, [pc, #272]	; (8008ebc <HAL_RCC_OscConfig+0x240>)
 8008dac:	685b      	ldr	r3, [r3, #4]
 8008dae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d116      	bne.n	8008de4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008db6:	4b41      	ldr	r3, [pc, #260]	; (8008ebc <HAL_RCC_OscConfig+0x240>)
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	f003 0302 	and.w	r3, r3, #2
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d005      	beq.n	8008dce <HAL_RCC_OscConfig+0x152>
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	68db      	ldr	r3, [r3, #12]
 8008dc6:	2b01      	cmp	r3, #1
 8008dc8:	d001      	beq.n	8008dce <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8008dca:	2301      	movs	r3, #1
 8008dcc:	e1c7      	b.n	800915e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008dce:	4b3b      	ldr	r3, [pc, #236]	; (8008ebc <HAL_RCC_OscConfig+0x240>)
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	691b      	ldr	r3, [r3, #16]
 8008dda:	00db      	lsls	r3, r3, #3
 8008ddc:	4937      	ldr	r1, [pc, #220]	; (8008ebc <HAL_RCC_OscConfig+0x240>)
 8008dde:	4313      	orrs	r3, r2
 8008de0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008de2:	e03a      	b.n	8008e5a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	68db      	ldr	r3, [r3, #12]
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d020      	beq.n	8008e2e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008dec:	4b34      	ldr	r3, [pc, #208]	; (8008ec0 <HAL_RCC_OscConfig+0x244>)
 8008dee:	2201      	movs	r2, #1
 8008df0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008df2:	f7fb fa81 	bl	80042f8 <HAL_GetTick>
 8008df6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008df8:	e008      	b.n	8008e0c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008dfa:	f7fb fa7d 	bl	80042f8 <HAL_GetTick>
 8008dfe:	4602      	mov	r2, r0
 8008e00:	693b      	ldr	r3, [r7, #16]
 8008e02:	1ad3      	subs	r3, r2, r3
 8008e04:	2b02      	cmp	r3, #2
 8008e06:	d901      	bls.n	8008e0c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8008e08:	2303      	movs	r3, #3
 8008e0a:	e1a8      	b.n	800915e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008e0c:	4b2b      	ldr	r3, [pc, #172]	; (8008ebc <HAL_RCC_OscConfig+0x240>)
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	f003 0302 	and.w	r3, r3, #2
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d0f0      	beq.n	8008dfa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008e18:	4b28      	ldr	r3, [pc, #160]	; (8008ebc <HAL_RCC_OscConfig+0x240>)
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	691b      	ldr	r3, [r3, #16]
 8008e24:	00db      	lsls	r3, r3, #3
 8008e26:	4925      	ldr	r1, [pc, #148]	; (8008ebc <HAL_RCC_OscConfig+0x240>)
 8008e28:	4313      	orrs	r3, r2
 8008e2a:	600b      	str	r3, [r1, #0]
 8008e2c:	e015      	b.n	8008e5a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008e2e:	4b24      	ldr	r3, [pc, #144]	; (8008ec0 <HAL_RCC_OscConfig+0x244>)
 8008e30:	2200      	movs	r2, #0
 8008e32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008e34:	f7fb fa60 	bl	80042f8 <HAL_GetTick>
 8008e38:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008e3a:	e008      	b.n	8008e4e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008e3c:	f7fb fa5c 	bl	80042f8 <HAL_GetTick>
 8008e40:	4602      	mov	r2, r0
 8008e42:	693b      	ldr	r3, [r7, #16]
 8008e44:	1ad3      	subs	r3, r2, r3
 8008e46:	2b02      	cmp	r3, #2
 8008e48:	d901      	bls.n	8008e4e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8008e4a:	2303      	movs	r3, #3
 8008e4c:	e187      	b.n	800915e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008e4e:	4b1b      	ldr	r3, [pc, #108]	; (8008ebc <HAL_RCC_OscConfig+0x240>)
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	f003 0302 	and.w	r3, r3, #2
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d1f0      	bne.n	8008e3c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	f003 0308 	and.w	r3, r3, #8
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d036      	beq.n	8008ed4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	695b      	ldr	r3, [r3, #20]
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d016      	beq.n	8008e9c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008e6e:	4b15      	ldr	r3, [pc, #84]	; (8008ec4 <HAL_RCC_OscConfig+0x248>)
 8008e70:	2201      	movs	r2, #1
 8008e72:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008e74:	f7fb fa40 	bl	80042f8 <HAL_GetTick>
 8008e78:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008e7a:	e008      	b.n	8008e8e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008e7c:	f7fb fa3c 	bl	80042f8 <HAL_GetTick>
 8008e80:	4602      	mov	r2, r0
 8008e82:	693b      	ldr	r3, [r7, #16]
 8008e84:	1ad3      	subs	r3, r2, r3
 8008e86:	2b02      	cmp	r3, #2
 8008e88:	d901      	bls.n	8008e8e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8008e8a:	2303      	movs	r3, #3
 8008e8c:	e167      	b.n	800915e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008e8e:	4b0b      	ldr	r3, [pc, #44]	; (8008ebc <HAL_RCC_OscConfig+0x240>)
 8008e90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008e92:	f003 0302 	and.w	r3, r3, #2
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d0f0      	beq.n	8008e7c <HAL_RCC_OscConfig+0x200>
 8008e9a:	e01b      	b.n	8008ed4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008e9c:	4b09      	ldr	r3, [pc, #36]	; (8008ec4 <HAL_RCC_OscConfig+0x248>)
 8008e9e:	2200      	movs	r2, #0
 8008ea0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008ea2:	f7fb fa29 	bl	80042f8 <HAL_GetTick>
 8008ea6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008ea8:	e00e      	b.n	8008ec8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008eaa:	f7fb fa25 	bl	80042f8 <HAL_GetTick>
 8008eae:	4602      	mov	r2, r0
 8008eb0:	693b      	ldr	r3, [r7, #16]
 8008eb2:	1ad3      	subs	r3, r2, r3
 8008eb4:	2b02      	cmp	r3, #2
 8008eb6:	d907      	bls.n	8008ec8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8008eb8:	2303      	movs	r3, #3
 8008eba:	e150      	b.n	800915e <HAL_RCC_OscConfig+0x4e2>
 8008ebc:	40023800 	.word	0x40023800
 8008ec0:	42470000 	.word	0x42470000
 8008ec4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008ec8:	4b88      	ldr	r3, [pc, #544]	; (80090ec <HAL_RCC_OscConfig+0x470>)
 8008eca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008ecc:	f003 0302 	and.w	r3, r3, #2
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d1ea      	bne.n	8008eaa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	f003 0304 	and.w	r3, r3, #4
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	f000 8097 	beq.w	8009010 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008ee2:	2300      	movs	r3, #0
 8008ee4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008ee6:	4b81      	ldr	r3, [pc, #516]	; (80090ec <HAL_RCC_OscConfig+0x470>)
 8008ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008eea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d10f      	bne.n	8008f12 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008ef2:	2300      	movs	r3, #0
 8008ef4:	60bb      	str	r3, [r7, #8]
 8008ef6:	4b7d      	ldr	r3, [pc, #500]	; (80090ec <HAL_RCC_OscConfig+0x470>)
 8008ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008efa:	4a7c      	ldr	r2, [pc, #496]	; (80090ec <HAL_RCC_OscConfig+0x470>)
 8008efc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008f00:	6413      	str	r3, [r2, #64]	; 0x40
 8008f02:	4b7a      	ldr	r3, [pc, #488]	; (80090ec <HAL_RCC_OscConfig+0x470>)
 8008f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008f0a:	60bb      	str	r3, [r7, #8]
 8008f0c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008f0e:	2301      	movs	r3, #1
 8008f10:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008f12:	4b77      	ldr	r3, [pc, #476]	; (80090f0 <HAL_RCC_OscConfig+0x474>)
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d118      	bne.n	8008f50 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008f1e:	4b74      	ldr	r3, [pc, #464]	; (80090f0 <HAL_RCC_OscConfig+0x474>)
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	4a73      	ldr	r2, [pc, #460]	; (80090f0 <HAL_RCC_OscConfig+0x474>)
 8008f24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008f28:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008f2a:	f7fb f9e5 	bl	80042f8 <HAL_GetTick>
 8008f2e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008f30:	e008      	b.n	8008f44 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008f32:	f7fb f9e1 	bl	80042f8 <HAL_GetTick>
 8008f36:	4602      	mov	r2, r0
 8008f38:	693b      	ldr	r3, [r7, #16]
 8008f3a:	1ad3      	subs	r3, r2, r3
 8008f3c:	2b02      	cmp	r3, #2
 8008f3e:	d901      	bls.n	8008f44 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8008f40:	2303      	movs	r3, #3
 8008f42:	e10c      	b.n	800915e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008f44:	4b6a      	ldr	r3, [pc, #424]	; (80090f0 <HAL_RCC_OscConfig+0x474>)
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d0f0      	beq.n	8008f32 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	689b      	ldr	r3, [r3, #8]
 8008f54:	2b01      	cmp	r3, #1
 8008f56:	d106      	bne.n	8008f66 <HAL_RCC_OscConfig+0x2ea>
 8008f58:	4b64      	ldr	r3, [pc, #400]	; (80090ec <HAL_RCC_OscConfig+0x470>)
 8008f5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f5c:	4a63      	ldr	r2, [pc, #396]	; (80090ec <HAL_RCC_OscConfig+0x470>)
 8008f5e:	f043 0301 	orr.w	r3, r3, #1
 8008f62:	6713      	str	r3, [r2, #112]	; 0x70
 8008f64:	e01c      	b.n	8008fa0 <HAL_RCC_OscConfig+0x324>
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	689b      	ldr	r3, [r3, #8]
 8008f6a:	2b05      	cmp	r3, #5
 8008f6c:	d10c      	bne.n	8008f88 <HAL_RCC_OscConfig+0x30c>
 8008f6e:	4b5f      	ldr	r3, [pc, #380]	; (80090ec <HAL_RCC_OscConfig+0x470>)
 8008f70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f72:	4a5e      	ldr	r2, [pc, #376]	; (80090ec <HAL_RCC_OscConfig+0x470>)
 8008f74:	f043 0304 	orr.w	r3, r3, #4
 8008f78:	6713      	str	r3, [r2, #112]	; 0x70
 8008f7a:	4b5c      	ldr	r3, [pc, #368]	; (80090ec <HAL_RCC_OscConfig+0x470>)
 8008f7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f7e:	4a5b      	ldr	r2, [pc, #364]	; (80090ec <HAL_RCC_OscConfig+0x470>)
 8008f80:	f043 0301 	orr.w	r3, r3, #1
 8008f84:	6713      	str	r3, [r2, #112]	; 0x70
 8008f86:	e00b      	b.n	8008fa0 <HAL_RCC_OscConfig+0x324>
 8008f88:	4b58      	ldr	r3, [pc, #352]	; (80090ec <HAL_RCC_OscConfig+0x470>)
 8008f8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f8c:	4a57      	ldr	r2, [pc, #348]	; (80090ec <HAL_RCC_OscConfig+0x470>)
 8008f8e:	f023 0301 	bic.w	r3, r3, #1
 8008f92:	6713      	str	r3, [r2, #112]	; 0x70
 8008f94:	4b55      	ldr	r3, [pc, #340]	; (80090ec <HAL_RCC_OscConfig+0x470>)
 8008f96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f98:	4a54      	ldr	r2, [pc, #336]	; (80090ec <HAL_RCC_OscConfig+0x470>)
 8008f9a:	f023 0304 	bic.w	r3, r3, #4
 8008f9e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	689b      	ldr	r3, [r3, #8]
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d015      	beq.n	8008fd4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008fa8:	f7fb f9a6 	bl	80042f8 <HAL_GetTick>
 8008fac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008fae:	e00a      	b.n	8008fc6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008fb0:	f7fb f9a2 	bl	80042f8 <HAL_GetTick>
 8008fb4:	4602      	mov	r2, r0
 8008fb6:	693b      	ldr	r3, [r7, #16]
 8008fb8:	1ad3      	subs	r3, r2, r3
 8008fba:	f241 3288 	movw	r2, #5000	; 0x1388
 8008fbe:	4293      	cmp	r3, r2
 8008fc0:	d901      	bls.n	8008fc6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8008fc2:	2303      	movs	r3, #3
 8008fc4:	e0cb      	b.n	800915e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008fc6:	4b49      	ldr	r3, [pc, #292]	; (80090ec <HAL_RCC_OscConfig+0x470>)
 8008fc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008fca:	f003 0302 	and.w	r3, r3, #2
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d0ee      	beq.n	8008fb0 <HAL_RCC_OscConfig+0x334>
 8008fd2:	e014      	b.n	8008ffe <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008fd4:	f7fb f990 	bl	80042f8 <HAL_GetTick>
 8008fd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008fda:	e00a      	b.n	8008ff2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008fdc:	f7fb f98c 	bl	80042f8 <HAL_GetTick>
 8008fe0:	4602      	mov	r2, r0
 8008fe2:	693b      	ldr	r3, [r7, #16]
 8008fe4:	1ad3      	subs	r3, r2, r3
 8008fe6:	f241 3288 	movw	r2, #5000	; 0x1388
 8008fea:	4293      	cmp	r3, r2
 8008fec:	d901      	bls.n	8008ff2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8008fee:	2303      	movs	r3, #3
 8008ff0:	e0b5      	b.n	800915e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008ff2:	4b3e      	ldr	r3, [pc, #248]	; (80090ec <HAL_RCC_OscConfig+0x470>)
 8008ff4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ff6:	f003 0302 	and.w	r3, r3, #2
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d1ee      	bne.n	8008fdc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008ffe:	7dfb      	ldrb	r3, [r7, #23]
 8009000:	2b01      	cmp	r3, #1
 8009002:	d105      	bne.n	8009010 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009004:	4b39      	ldr	r3, [pc, #228]	; (80090ec <HAL_RCC_OscConfig+0x470>)
 8009006:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009008:	4a38      	ldr	r2, [pc, #224]	; (80090ec <HAL_RCC_OscConfig+0x470>)
 800900a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800900e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	699b      	ldr	r3, [r3, #24]
 8009014:	2b00      	cmp	r3, #0
 8009016:	f000 80a1 	beq.w	800915c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800901a:	4b34      	ldr	r3, [pc, #208]	; (80090ec <HAL_RCC_OscConfig+0x470>)
 800901c:	689b      	ldr	r3, [r3, #8]
 800901e:	f003 030c 	and.w	r3, r3, #12
 8009022:	2b08      	cmp	r3, #8
 8009024:	d05c      	beq.n	80090e0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	699b      	ldr	r3, [r3, #24]
 800902a:	2b02      	cmp	r3, #2
 800902c:	d141      	bne.n	80090b2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800902e:	4b31      	ldr	r3, [pc, #196]	; (80090f4 <HAL_RCC_OscConfig+0x478>)
 8009030:	2200      	movs	r2, #0
 8009032:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009034:	f7fb f960 	bl	80042f8 <HAL_GetTick>
 8009038:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800903a:	e008      	b.n	800904e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800903c:	f7fb f95c 	bl	80042f8 <HAL_GetTick>
 8009040:	4602      	mov	r2, r0
 8009042:	693b      	ldr	r3, [r7, #16]
 8009044:	1ad3      	subs	r3, r2, r3
 8009046:	2b02      	cmp	r3, #2
 8009048:	d901      	bls.n	800904e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800904a:	2303      	movs	r3, #3
 800904c:	e087      	b.n	800915e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800904e:	4b27      	ldr	r3, [pc, #156]	; (80090ec <HAL_RCC_OscConfig+0x470>)
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009056:	2b00      	cmp	r3, #0
 8009058:	d1f0      	bne.n	800903c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	69da      	ldr	r2, [r3, #28]
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	6a1b      	ldr	r3, [r3, #32]
 8009062:	431a      	orrs	r2, r3
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009068:	019b      	lsls	r3, r3, #6
 800906a:	431a      	orrs	r2, r3
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009070:	085b      	lsrs	r3, r3, #1
 8009072:	3b01      	subs	r3, #1
 8009074:	041b      	lsls	r3, r3, #16
 8009076:	431a      	orrs	r2, r3
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800907c:	061b      	lsls	r3, r3, #24
 800907e:	491b      	ldr	r1, [pc, #108]	; (80090ec <HAL_RCC_OscConfig+0x470>)
 8009080:	4313      	orrs	r3, r2
 8009082:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009084:	4b1b      	ldr	r3, [pc, #108]	; (80090f4 <HAL_RCC_OscConfig+0x478>)
 8009086:	2201      	movs	r2, #1
 8009088:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800908a:	f7fb f935 	bl	80042f8 <HAL_GetTick>
 800908e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009090:	e008      	b.n	80090a4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009092:	f7fb f931 	bl	80042f8 <HAL_GetTick>
 8009096:	4602      	mov	r2, r0
 8009098:	693b      	ldr	r3, [r7, #16]
 800909a:	1ad3      	subs	r3, r2, r3
 800909c:	2b02      	cmp	r3, #2
 800909e:	d901      	bls.n	80090a4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80090a0:	2303      	movs	r3, #3
 80090a2:	e05c      	b.n	800915e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80090a4:	4b11      	ldr	r3, [pc, #68]	; (80090ec <HAL_RCC_OscConfig+0x470>)
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d0f0      	beq.n	8009092 <HAL_RCC_OscConfig+0x416>
 80090b0:	e054      	b.n	800915c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80090b2:	4b10      	ldr	r3, [pc, #64]	; (80090f4 <HAL_RCC_OscConfig+0x478>)
 80090b4:	2200      	movs	r2, #0
 80090b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80090b8:	f7fb f91e 	bl	80042f8 <HAL_GetTick>
 80090bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80090be:	e008      	b.n	80090d2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80090c0:	f7fb f91a 	bl	80042f8 <HAL_GetTick>
 80090c4:	4602      	mov	r2, r0
 80090c6:	693b      	ldr	r3, [r7, #16]
 80090c8:	1ad3      	subs	r3, r2, r3
 80090ca:	2b02      	cmp	r3, #2
 80090cc:	d901      	bls.n	80090d2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80090ce:	2303      	movs	r3, #3
 80090d0:	e045      	b.n	800915e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80090d2:	4b06      	ldr	r3, [pc, #24]	; (80090ec <HAL_RCC_OscConfig+0x470>)
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d1f0      	bne.n	80090c0 <HAL_RCC_OscConfig+0x444>
 80090de:	e03d      	b.n	800915c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	699b      	ldr	r3, [r3, #24]
 80090e4:	2b01      	cmp	r3, #1
 80090e6:	d107      	bne.n	80090f8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80090e8:	2301      	movs	r3, #1
 80090ea:	e038      	b.n	800915e <HAL_RCC_OscConfig+0x4e2>
 80090ec:	40023800 	.word	0x40023800
 80090f0:	40007000 	.word	0x40007000
 80090f4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80090f8:	4b1b      	ldr	r3, [pc, #108]	; (8009168 <HAL_RCC_OscConfig+0x4ec>)
 80090fa:	685b      	ldr	r3, [r3, #4]
 80090fc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	699b      	ldr	r3, [r3, #24]
 8009102:	2b01      	cmp	r3, #1
 8009104:	d028      	beq.n	8009158 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009110:	429a      	cmp	r2, r3
 8009112:	d121      	bne.n	8009158 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800911e:	429a      	cmp	r2, r3
 8009120:	d11a      	bne.n	8009158 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009122:	68fa      	ldr	r2, [r7, #12]
 8009124:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8009128:	4013      	ands	r3, r2
 800912a:	687a      	ldr	r2, [r7, #4]
 800912c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800912e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009130:	4293      	cmp	r3, r2
 8009132:	d111      	bne.n	8009158 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800913e:	085b      	lsrs	r3, r3, #1
 8009140:	3b01      	subs	r3, #1
 8009142:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009144:	429a      	cmp	r2, r3
 8009146:	d107      	bne.n	8009158 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009152:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009154:	429a      	cmp	r2, r3
 8009156:	d001      	beq.n	800915c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8009158:	2301      	movs	r3, #1
 800915a:	e000      	b.n	800915e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800915c:	2300      	movs	r3, #0
}
 800915e:	4618      	mov	r0, r3
 8009160:	3718      	adds	r7, #24
 8009162:	46bd      	mov	sp, r7
 8009164:	bd80      	pop	{r7, pc}
 8009166:	bf00      	nop
 8009168:	40023800 	.word	0x40023800

0800916c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800916c:	b580      	push	{r7, lr}
 800916e:	b084      	sub	sp, #16
 8009170:	af00      	add	r7, sp, #0
 8009172:	6078      	str	r0, [r7, #4]
 8009174:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	2b00      	cmp	r3, #0
 800917a:	d101      	bne.n	8009180 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800917c:	2301      	movs	r3, #1
 800917e:	e0cc      	b.n	800931a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009180:	4b68      	ldr	r3, [pc, #416]	; (8009324 <HAL_RCC_ClockConfig+0x1b8>)
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	f003 0307 	and.w	r3, r3, #7
 8009188:	683a      	ldr	r2, [r7, #0]
 800918a:	429a      	cmp	r2, r3
 800918c:	d90c      	bls.n	80091a8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800918e:	4b65      	ldr	r3, [pc, #404]	; (8009324 <HAL_RCC_ClockConfig+0x1b8>)
 8009190:	683a      	ldr	r2, [r7, #0]
 8009192:	b2d2      	uxtb	r2, r2
 8009194:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009196:	4b63      	ldr	r3, [pc, #396]	; (8009324 <HAL_RCC_ClockConfig+0x1b8>)
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	f003 0307 	and.w	r3, r3, #7
 800919e:	683a      	ldr	r2, [r7, #0]
 80091a0:	429a      	cmp	r2, r3
 80091a2:	d001      	beq.n	80091a8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80091a4:	2301      	movs	r3, #1
 80091a6:	e0b8      	b.n	800931a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	f003 0302 	and.w	r3, r3, #2
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d020      	beq.n	80091f6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	f003 0304 	and.w	r3, r3, #4
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d005      	beq.n	80091cc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80091c0:	4b59      	ldr	r3, [pc, #356]	; (8009328 <HAL_RCC_ClockConfig+0x1bc>)
 80091c2:	689b      	ldr	r3, [r3, #8]
 80091c4:	4a58      	ldr	r2, [pc, #352]	; (8009328 <HAL_RCC_ClockConfig+0x1bc>)
 80091c6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80091ca:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	f003 0308 	and.w	r3, r3, #8
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d005      	beq.n	80091e4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80091d8:	4b53      	ldr	r3, [pc, #332]	; (8009328 <HAL_RCC_ClockConfig+0x1bc>)
 80091da:	689b      	ldr	r3, [r3, #8]
 80091dc:	4a52      	ldr	r2, [pc, #328]	; (8009328 <HAL_RCC_ClockConfig+0x1bc>)
 80091de:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80091e2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80091e4:	4b50      	ldr	r3, [pc, #320]	; (8009328 <HAL_RCC_ClockConfig+0x1bc>)
 80091e6:	689b      	ldr	r3, [r3, #8]
 80091e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	689b      	ldr	r3, [r3, #8]
 80091f0:	494d      	ldr	r1, [pc, #308]	; (8009328 <HAL_RCC_ClockConfig+0x1bc>)
 80091f2:	4313      	orrs	r3, r2
 80091f4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	f003 0301 	and.w	r3, r3, #1
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d044      	beq.n	800928c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	685b      	ldr	r3, [r3, #4]
 8009206:	2b01      	cmp	r3, #1
 8009208:	d107      	bne.n	800921a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800920a:	4b47      	ldr	r3, [pc, #284]	; (8009328 <HAL_RCC_ClockConfig+0x1bc>)
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009212:	2b00      	cmp	r3, #0
 8009214:	d119      	bne.n	800924a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009216:	2301      	movs	r3, #1
 8009218:	e07f      	b.n	800931a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	685b      	ldr	r3, [r3, #4]
 800921e:	2b02      	cmp	r3, #2
 8009220:	d003      	beq.n	800922a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009226:	2b03      	cmp	r3, #3
 8009228:	d107      	bne.n	800923a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800922a:	4b3f      	ldr	r3, [pc, #252]	; (8009328 <HAL_RCC_ClockConfig+0x1bc>)
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009232:	2b00      	cmp	r3, #0
 8009234:	d109      	bne.n	800924a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009236:	2301      	movs	r3, #1
 8009238:	e06f      	b.n	800931a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800923a:	4b3b      	ldr	r3, [pc, #236]	; (8009328 <HAL_RCC_ClockConfig+0x1bc>)
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	f003 0302 	and.w	r3, r3, #2
 8009242:	2b00      	cmp	r3, #0
 8009244:	d101      	bne.n	800924a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009246:	2301      	movs	r3, #1
 8009248:	e067      	b.n	800931a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800924a:	4b37      	ldr	r3, [pc, #220]	; (8009328 <HAL_RCC_ClockConfig+0x1bc>)
 800924c:	689b      	ldr	r3, [r3, #8]
 800924e:	f023 0203 	bic.w	r2, r3, #3
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	685b      	ldr	r3, [r3, #4]
 8009256:	4934      	ldr	r1, [pc, #208]	; (8009328 <HAL_RCC_ClockConfig+0x1bc>)
 8009258:	4313      	orrs	r3, r2
 800925a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800925c:	f7fb f84c 	bl	80042f8 <HAL_GetTick>
 8009260:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009262:	e00a      	b.n	800927a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009264:	f7fb f848 	bl	80042f8 <HAL_GetTick>
 8009268:	4602      	mov	r2, r0
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	1ad3      	subs	r3, r2, r3
 800926e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009272:	4293      	cmp	r3, r2
 8009274:	d901      	bls.n	800927a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8009276:	2303      	movs	r3, #3
 8009278:	e04f      	b.n	800931a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800927a:	4b2b      	ldr	r3, [pc, #172]	; (8009328 <HAL_RCC_ClockConfig+0x1bc>)
 800927c:	689b      	ldr	r3, [r3, #8]
 800927e:	f003 020c 	and.w	r2, r3, #12
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	685b      	ldr	r3, [r3, #4]
 8009286:	009b      	lsls	r3, r3, #2
 8009288:	429a      	cmp	r2, r3
 800928a:	d1eb      	bne.n	8009264 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800928c:	4b25      	ldr	r3, [pc, #148]	; (8009324 <HAL_RCC_ClockConfig+0x1b8>)
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	f003 0307 	and.w	r3, r3, #7
 8009294:	683a      	ldr	r2, [r7, #0]
 8009296:	429a      	cmp	r2, r3
 8009298:	d20c      	bcs.n	80092b4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800929a:	4b22      	ldr	r3, [pc, #136]	; (8009324 <HAL_RCC_ClockConfig+0x1b8>)
 800929c:	683a      	ldr	r2, [r7, #0]
 800929e:	b2d2      	uxtb	r2, r2
 80092a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80092a2:	4b20      	ldr	r3, [pc, #128]	; (8009324 <HAL_RCC_ClockConfig+0x1b8>)
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	f003 0307 	and.w	r3, r3, #7
 80092aa:	683a      	ldr	r2, [r7, #0]
 80092ac:	429a      	cmp	r2, r3
 80092ae:	d001      	beq.n	80092b4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80092b0:	2301      	movs	r3, #1
 80092b2:	e032      	b.n	800931a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	f003 0304 	and.w	r3, r3, #4
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d008      	beq.n	80092d2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80092c0:	4b19      	ldr	r3, [pc, #100]	; (8009328 <HAL_RCC_ClockConfig+0x1bc>)
 80092c2:	689b      	ldr	r3, [r3, #8]
 80092c4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	68db      	ldr	r3, [r3, #12]
 80092cc:	4916      	ldr	r1, [pc, #88]	; (8009328 <HAL_RCC_ClockConfig+0x1bc>)
 80092ce:	4313      	orrs	r3, r2
 80092d0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	f003 0308 	and.w	r3, r3, #8
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d009      	beq.n	80092f2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80092de:	4b12      	ldr	r3, [pc, #72]	; (8009328 <HAL_RCC_ClockConfig+0x1bc>)
 80092e0:	689b      	ldr	r3, [r3, #8]
 80092e2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	691b      	ldr	r3, [r3, #16]
 80092ea:	00db      	lsls	r3, r3, #3
 80092ec:	490e      	ldr	r1, [pc, #56]	; (8009328 <HAL_RCC_ClockConfig+0x1bc>)
 80092ee:	4313      	orrs	r3, r2
 80092f0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80092f2:	f000 f82d 	bl	8009350 <HAL_RCC_GetSysClockFreq>
 80092f6:	4602      	mov	r2, r0
 80092f8:	4b0b      	ldr	r3, [pc, #44]	; (8009328 <HAL_RCC_ClockConfig+0x1bc>)
 80092fa:	689b      	ldr	r3, [r3, #8]
 80092fc:	091b      	lsrs	r3, r3, #4
 80092fe:	f003 030f 	and.w	r3, r3, #15
 8009302:	490a      	ldr	r1, [pc, #40]	; (800932c <HAL_RCC_ClockConfig+0x1c0>)
 8009304:	5ccb      	ldrb	r3, [r1, r3]
 8009306:	fa22 f303 	lsr.w	r3, r2, r3
 800930a:	4a09      	ldr	r2, [pc, #36]	; (8009330 <HAL_RCC_ClockConfig+0x1c4>)
 800930c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800930e:	4b09      	ldr	r3, [pc, #36]	; (8009334 <HAL_RCC_ClockConfig+0x1c8>)
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	4618      	mov	r0, r3
 8009314:	f7fa ffac 	bl	8004270 <HAL_InitTick>

  return HAL_OK;
 8009318:	2300      	movs	r3, #0
}
 800931a:	4618      	mov	r0, r3
 800931c:	3710      	adds	r7, #16
 800931e:	46bd      	mov	sp, r7
 8009320:	bd80      	pop	{r7, pc}
 8009322:	bf00      	nop
 8009324:	40023c00 	.word	0x40023c00
 8009328:	40023800 	.word	0x40023800
 800932c:	080126fc 	.word	0x080126fc
 8009330:	200000b8 	.word	0x200000b8
 8009334:	200000bc 	.word	0x200000bc

08009338 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8009338:	b480      	push	{r7}
 800933a:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 800933c:	4b03      	ldr	r3, [pc, #12]	; (800934c <HAL_RCC_EnableCSS+0x14>)
 800933e:	2201      	movs	r2, #1
 8009340:	601a      	str	r2, [r3, #0]
}
 8009342:	bf00      	nop
 8009344:	46bd      	mov	sp, r7
 8009346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800934a:	4770      	bx	lr
 800934c:	4247004c 	.word	0x4247004c

08009350 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009350:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009354:	b094      	sub	sp, #80	; 0x50
 8009356:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8009358:	2300      	movs	r3, #0
 800935a:	647b      	str	r3, [r7, #68]	; 0x44
 800935c:	2300      	movs	r3, #0
 800935e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009360:	2300      	movs	r3, #0
 8009362:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8009364:	2300      	movs	r3, #0
 8009366:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009368:	4b79      	ldr	r3, [pc, #484]	; (8009550 <HAL_RCC_GetSysClockFreq+0x200>)
 800936a:	689b      	ldr	r3, [r3, #8]
 800936c:	f003 030c 	and.w	r3, r3, #12
 8009370:	2b08      	cmp	r3, #8
 8009372:	d00d      	beq.n	8009390 <HAL_RCC_GetSysClockFreq+0x40>
 8009374:	2b08      	cmp	r3, #8
 8009376:	f200 80e1 	bhi.w	800953c <HAL_RCC_GetSysClockFreq+0x1ec>
 800937a:	2b00      	cmp	r3, #0
 800937c:	d002      	beq.n	8009384 <HAL_RCC_GetSysClockFreq+0x34>
 800937e:	2b04      	cmp	r3, #4
 8009380:	d003      	beq.n	800938a <HAL_RCC_GetSysClockFreq+0x3a>
 8009382:	e0db      	b.n	800953c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8009384:	4b73      	ldr	r3, [pc, #460]	; (8009554 <HAL_RCC_GetSysClockFreq+0x204>)
 8009386:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8009388:	e0db      	b.n	8009542 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800938a:	4b73      	ldr	r3, [pc, #460]	; (8009558 <HAL_RCC_GetSysClockFreq+0x208>)
 800938c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800938e:	e0d8      	b.n	8009542 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009390:	4b6f      	ldr	r3, [pc, #444]	; (8009550 <HAL_RCC_GetSysClockFreq+0x200>)
 8009392:	685b      	ldr	r3, [r3, #4]
 8009394:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009398:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800939a:	4b6d      	ldr	r3, [pc, #436]	; (8009550 <HAL_RCC_GetSysClockFreq+0x200>)
 800939c:	685b      	ldr	r3, [r3, #4]
 800939e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d063      	beq.n	800946e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80093a6:	4b6a      	ldr	r3, [pc, #424]	; (8009550 <HAL_RCC_GetSysClockFreq+0x200>)
 80093a8:	685b      	ldr	r3, [r3, #4]
 80093aa:	099b      	lsrs	r3, r3, #6
 80093ac:	2200      	movs	r2, #0
 80093ae:	63bb      	str	r3, [r7, #56]	; 0x38
 80093b0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80093b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80093b8:	633b      	str	r3, [r7, #48]	; 0x30
 80093ba:	2300      	movs	r3, #0
 80093bc:	637b      	str	r3, [r7, #52]	; 0x34
 80093be:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80093c2:	4622      	mov	r2, r4
 80093c4:	462b      	mov	r3, r5
 80093c6:	f04f 0000 	mov.w	r0, #0
 80093ca:	f04f 0100 	mov.w	r1, #0
 80093ce:	0159      	lsls	r1, r3, #5
 80093d0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80093d4:	0150      	lsls	r0, r2, #5
 80093d6:	4602      	mov	r2, r0
 80093d8:	460b      	mov	r3, r1
 80093da:	4621      	mov	r1, r4
 80093dc:	1a51      	subs	r1, r2, r1
 80093de:	6139      	str	r1, [r7, #16]
 80093e0:	4629      	mov	r1, r5
 80093e2:	eb63 0301 	sbc.w	r3, r3, r1
 80093e6:	617b      	str	r3, [r7, #20]
 80093e8:	f04f 0200 	mov.w	r2, #0
 80093ec:	f04f 0300 	mov.w	r3, #0
 80093f0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80093f4:	4659      	mov	r1, fp
 80093f6:	018b      	lsls	r3, r1, #6
 80093f8:	4651      	mov	r1, sl
 80093fa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80093fe:	4651      	mov	r1, sl
 8009400:	018a      	lsls	r2, r1, #6
 8009402:	4651      	mov	r1, sl
 8009404:	ebb2 0801 	subs.w	r8, r2, r1
 8009408:	4659      	mov	r1, fp
 800940a:	eb63 0901 	sbc.w	r9, r3, r1
 800940e:	f04f 0200 	mov.w	r2, #0
 8009412:	f04f 0300 	mov.w	r3, #0
 8009416:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800941a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800941e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009422:	4690      	mov	r8, r2
 8009424:	4699      	mov	r9, r3
 8009426:	4623      	mov	r3, r4
 8009428:	eb18 0303 	adds.w	r3, r8, r3
 800942c:	60bb      	str	r3, [r7, #8]
 800942e:	462b      	mov	r3, r5
 8009430:	eb49 0303 	adc.w	r3, r9, r3
 8009434:	60fb      	str	r3, [r7, #12]
 8009436:	f04f 0200 	mov.w	r2, #0
 800943a:	f04f 0300 	mov.w	r3, #0
 800943e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8009442:	4629      	mov	r1, r5
 8009444:	024b      	lsls	r3, r1, #9
 8009446:	4621      	mov	r1, r4
 8009448:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800944c:	4621      	mov	r1, r4
 800944e:	024a      	lsls	r2, r1, #9
 8009450:	4610      	mov	r0, r2
 8009452:	4619      	mov	r1, r3
 8009454:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009456:	2200      	movs	r2, #0
 8009458:	62bb      	str	r3, [r7, #40]	; 0x28
 800945a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800945c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009460:	f7f7 fc32 	bl	8000cc8 <__aeabi_uldivmod>
 8009464:	4602      	mov	r2, r0
 8009466:	460b      	mov	r3, r1
 8009468:	4613      	mov	r3, r2
 800946a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800946c:	e058      	b.n	8009520 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800946e:	4b38      	ldr	r3, [pc, #224]	; (8009550 <HAL_RCC_GetSysClockFreq+0x200>)
 8009470:	685b      	ldr	r3, [r3, #4]
 8009472:	099b      	lsrs	r3, r3, #6
 8009474:	2200      	movs	r2, #0
 8009476:	4618      	mov	r0, r3
 8009478:	4611      	mov	r1, r2
 800947a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800947e:	623b      	str	r3, [r7, #32]
 8009480:	2300      	movs	r3, #0
 8009482:	627b      	str	r3, [r7, #36]	; 0x24
 8009484:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8009488:	4642      	mov	r2, r8
 800948a:	464b      	mov	r3, r9
 800948c:	f04f 0000 	mov.w	r0, #0
 8009490:	f04f 0100 	mov.w	r1, #0
 8009494:	0159      	lsls	r1, r3, #5
 8009496:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800949a:	0150      	lsls	r0, r2, #5
 800949c:	4602      	mov	r2, r0
 800949e:	460b      	mov	r3, r1
 80094a0:	4641      	mov	r1, r8
 80094a2:	ebb2 0a01 	subs.w	sl, r2, r1
 80094a6:	4649      	mov	r1, r9
 80094a8:	eb63 0b01 	sbc.w	fp, r3, r1
 80094ac:	f04f 0200 	mov.w	r2, #0
 80094b0:	f04f 0300 	mov.w	r3, #0
 80094b4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80094b8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80094bc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80094c0:	ebb2 040a 	subs.w	r4, r2, sl
 80094c4:	eb63 050b 	sbc.w	r5, r3, fp
 80094c8:	f04f 0200 	mov.w	r2, #0
 80094cc:	f04f 0300 	mov.w	r3, #0
 80094d0:	00eb      	lsls	r3, r5, #3
 80094d2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80094d6:	00e2      	lsls	r2, r4, #3
 80094d8:	4614      	mov	r4, r2
 80094da:	461d      	mov	r5, r3
 80094dc:	4643      	mov	r3, r8
 80094de:	18e3      	adds	r3, r4, r3
 80094e0:	603b      	str	r3, [r7, #0]
 80094e2:	464b      	mov	r3, r9
 80094e4:	eb45 0303 	adc.w	r3, r5, r3
 80094e8:	607b      	str	r3, [r7, #4]
 80094ea:	f04f 0200 	mov.w	r2, #0
 80094ee:	f04f 0300 	mov.w	r3, #0
 80094f2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80094f6:	4629      	mov	r1, r5
 80094f8:	028b      	lsls	r3, r1, #10
 80094fa:	4621      	mov	r1, r4
 80094fc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8009500:	4621      	mov	r1, r4
 8009502:	028a      	lsls	r2, r1, #10
 8009504:	4610      	mov	r0, r2
 8009506:	4619      	mov	r1, r3
 8009508:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800950a:	2200      	movs	r2, #0
 800950c:	61bb      	str	r3, [r7, #24]
 800950e:	61fa      	str	r2, [r7, #28]
 8009510:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009514:	f7f7 fbd8 	bl	8000cc8 <__aeabi_uldivmod>
 8009518:	4602      	mov	r2, r0
 800951a:	460b      	mov	r3, r1
 800951c:	4613      	mov	r3, r2
 800951e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8009520:	4b0b      	ldr	r3, [pc, #44]	; (8009550 <HAL_RCC_GetSysClockFreq+0x200>)
 8009522:	685b      	ldr	r3, [r3, #4]
 8009524:	0c1b      	lsrs	r3, r3, #16
 8009526:	f003 0303 	and.w	r3, r3, #3
 800952a:	3301      	adds	r3, #1
 800952c:	005b      	lsls	r3, r3, #1
 800952e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8009530:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009532:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009534:	fbb2 f3f3 	udiv	r3, r2, r3
 8009538:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800953a:	e002      	b.n	8009542 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800953c:	4b05      	ldr	r3, [pc, #20]	; (8009554 <HAL_RCC_GetSysClockFreq+0x204>)
 800953e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8009540:	bf00      	nop
    }
  }
  return sysclockfreq;
 8009542:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8009544:	4618      	mov	r0, r3
 8009546:	3750      	adds	r7, #80	; 0x50
 8009548:	46bd      	mov	sp, r7
 800954a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800954e:	bf00      	nop
 8009550:	40023800 	.word	0x40023800
 8009554:	00f42400 	.word	0x00f42400
 8009558:	007a1200 	.word	0x007a1200

0800955c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800955c:	b480      	push	{r7}
 800955e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009560:	4b03      	ldr	r3, [pc, #12]	; (8009570 <HAL_RCC_GetHCLKFreq+0x14>)
 8009562:	681b      	ldr	r3, [r3, #0]
}
 8009564:	4618      	mov	r0, r3
 8009566:	46bd      	mov	sp, r7
 8009568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800956c:	4770      	bx	lr
 800956e:	bf00      	nop
 8009570:	200000b8 	.word	0x200000b8

08009574 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009574:	b580      	push	{r7, lr}
 8009576:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8009578:	f7ff fff0 	bl	800955c <HAL_RCC_GetHCLKFreq>
 800957c:	4602      	mov	r2, r0
 800957e:	4b05      	ldr	r3, [pc, #20]	; (8009594 <HAL_RCC_GetPCLK1Freq+0x20>)
 8009580:	689b      	ldr	r3, [r3, #8]
 8009582:	0a9b      	lsrs	r3, r3, #10
 8009584:	f003 0307 	and.w	r3, r3, #7
 8009588:	4903      	ldr	r1, [pc, #12]	; (8009598 <HAL_RCC_GetPCLK1Freq+0x24>)
 800958a:	5ccb      	ldrb	r3, [r1, r3]
 800958c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009590:	4618      	mov	r0, r3
 8009592:	bd80      	pop	{r7, pc}
 8009594:	40023800 	.word	0x40023800
 8009598:	0801270c 	.word	0x0801270c

0800959c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800959c:	b580      	push	{r7, lr}
 800959e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80095a0:	f7ff ffdc 	bl	800955c <HAL_RCC_GetHCLKFreq>
 80095a4:	4602      	mov	r2, r0
 80095a6:	4b05      	ldr	r3, [pc, #20]	; (80095bc <HAL_RCC_GetPCLK2Freq+0x20>)
 80095a8:	689b      	ldr	r3, [r3, #8]
 80095aa:	0b5b      	lsrs	r3, r3, #13
 80095ac:	f003 0307 	and.w	r3, r3, #7
 80095b0:	4903      	ldr	r1, [pc, #12]	; (80095c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80095b2:	5ccb      	ldrb	r3, [r1, r3]
 80095b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80095b8:	4618      	mov	r0, r3
 80095ba:	bd80      	pop	{r7, pc}
 80095bc:	40023800 	.word	0x40023800
 80095c0:	0801270c 	.word	0x0801270c

080095c4 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 80095c4:	b580      	push	{r7, lr}
 80095c6:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 80095c8:	4b06      	ldr	r3, [pc, #24]	; (80095e4 <HAL_RCC_NMI_IRQHandler+0x20>)
 80095ca:	68db      	ldr	r3, [r3, #12]
 80095cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80095d0:	2b80      	cmp	r3, #128	; 0x80
 80095d2:	d104      	bne.n	80095de <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 80095d4:	f000 f80a 	bl	80095ec <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 80095d8:	4b03      	ldr	r3, [pc, #12]	; (80095e8 <HAL_RCC_NMI_IRQHandler+0x24>)
 80095da:	2280      	movs	r2, #128	; 0x80
 80095dc:	701a      	strb	r2, [r3, #0]
  }
}
 80095de:	bf00      	nop
 80095e0:	bd80      	pop	{r7, pc}
 80095e2:	bf00      	nop
 80095e4:	40023800 	.word	0x40023800
 80095e8:	4002380e 	.word	0x4002380e

080095ec <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 80095ec:	b480      	push	{r7}
 80095ee:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 80095f0:	bf00      	nop
 80095f2:	46bd      	mov	sp, r7
 80095f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095f8:	4770      	bx	lr
	...

080095fc <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80095fc:	b580      	push	{r7, lr}
 80095fe:	b086      	sub	sp, #24
 8009600:	af00      	add	r7, sp, #0
 8009602:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8009604:	2300      	movs	r3, #0
 8009606:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8009608:	2300      	movs	r3, #0
 800960a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	f003 0301 	and.w	r3, r3, #1
 8009614:	2b00      	cmp	r3, #0
 8009616:	d105      	bne.n	8009624 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8009620:	2b00      	cmp	r3, #0
 8009622:	d035      	beq.n	8009690 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8009624:	4b62      	ldr	r3, [pc, #392]	; (80097b0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8009626:	2200      	movs	r2, #0
 8009628:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800962a:	f7fa fe65 	bl	80042f8 <HAL_GetTick>
 800962e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8009630:	e008      	b.n	8009644 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8009632:	f7fa fe61 	bl	80042f8 <HAL_GetTick>
 8009636:	4602      	mov	r2, r0
 8009638:	697b      	ldr	r3, [r7, #20]
 800963a:	1ad3      	subs	r3, r2, r3
 800963c:	2b02      	cmp	r3, #2
 800963e:	d901      	bls.n	8009644 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009640:	2303      	movs	r3, #3
 8009642:	e0b0      	b.n	80097a6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8009644:	4b5b      	ldr	r3, [pc, #364]	; (80097b4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800964c:	2b00      	cmp	r3, #0
 800964e:	d1f0      	bne.n	8009632 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	685b      	ldr	r3, [r3, #4]
 8009654:	019a      	lsls	r2, r3, #6
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	689b      	ldr	r3, [r3, #8]
 800965a:	071b      	lsls	r3, r3, #28
 800965c:	4955      	ldr	r1, [pc, #340]	; (80097b4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800965e:	4313      	orrs	r3, r2
 8009660:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8009664:	4b52      	ldr	r3, [pc, #328]	; (80097b0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8009666:	2201      	movs	r2, #1
 8009668:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800966a:	f7fa fe45 	bl	80042f8 <HAL_GetTick>
 800966e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009670:	e008      	b.n	8009684 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8009672:	f7fa fe41 	bl	80042f8 <HAL_GetTick>
 8009676:	4602      	mov	r2, r0
 8009678:	697b      	ldr	r3, [r7, #20]
 800967a:	1ad3      	subs	r3, r2, r3
 800967c:	2b02      	cmp	r3, #2
 800967e:	d901      	bls.n	8009684 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009680:	2303      	movs	r3, #3
 8009682:	e090      	b.n	80097a6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009684:	4b4b      	ldr	r3, [pc, #300]	; (80097b4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800968c:	2b00      	cmp	r3, #0
 800968e:	d0f0      	beq.n	8009672 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	f003 0302 	and.w	r3, r3, #2
 8009698:	2b00      	cmp	r3, #0
 800969a:	f000 8083 	beq.w	80097a4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800969e:	2300      	movs	r3, #0
 80096a0:	60fb      	str	r3, [r7, #12]
 80096a2:	4b44      	ldr	r3, [pc, #272]	; (80097b4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80096a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096a6:	4a43      	ldr	r2, [pc, #268]	; (80097b4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80096a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80096ac:	6413      	str	r3, [r2, #64]	; 0x40
 80096ae:	4b41      	ldr	r3, [pc, #260]	; (80097b4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80096b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80096b6:	60fb      	str	r3, [r7, #12]
 80096b8:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80096ba:	4b3f      	ldr	r3, [pc, #252]	; (80097b8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	4a3e      	ldr	r2, [pc, #248]	; (80097b8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80096c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80096c4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80096c6:	f7fa fe17 	bl	80042f8 <HAL_GetTick>
 80096ca:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80096cc:	e008      	b.n	80096e0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80096ce:	f7fa fe13 	bl	80042f8 <HAL_GetTick>
 80096d2:	4602      	mov	r2, r0
 80096d4:	697b      	ldr	r3, [r7, #20]
 80096d6:	1ad3      	subs	r3, r2, r3
 80096d8:	2b02      	cmp	r3, #2
 80096da:	d901      	bls.n	80096e0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80096dc:	2303      	movs	r3, #3
 80096de:	e062      	b.n	80097a6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80096e0:	4b35      	ldr	r3, [pc, #212]	; (80097b8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d0f0      	beq.n	80096ce <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80096ec:	4b31      	ldr	r3, [pc, #196]	; (80097b4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80096ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80096f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80096f4:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80096f6:	693b      	ldr	r3, [r7, #16]
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d02f      	beq.n	800975c <HAL_RCCEx_PeriphCLKConfig+0x160>
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	68db      	ldr	r3, [r3, #12]
 8009700:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009704:	693a      	ldr	r2, [r7, #16]
 8009706:	429a      	cmp	r2, r3
 8009708:	d028      	beq.n	800975c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800970a:	4b2a      	ldr	r3, [pc, #168]	; (80097b4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800970c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800970e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009712:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8009714:	4b29      	ldr	r3, [pc, #164]	; (80097bc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8009716:	2201      	movs	r2, #1
 8009718:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800971a:	4b28      	ldr	r3, [pc, #160]	; (80097bc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800971c:	2200      	movs	r2, #0
 800971e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8009720:	4a24      	ldr	r2, [pc, #144]	; (80097b4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009722:	693b      	ldr	r3, [r7, #16]
 8009724:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8009726:	4b23      	ldr	r3, [pc, #140]	; (80097b4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009728:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800972a:	f003 0301 	and.w	r3, r3, #1
 800972e:	2b01      	cmp	r3, #1
 8009730:	d114      	bne.n	800975c <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8009732:	f7fa fde1 	bl	80042f8 <HAL_GetTick>
 8009736:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009738:	e00a      	b.n	8009750 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800973a:	f7fa fddd 	bl	80042f8 <HAL_GetTick>
 800973e:	4602      	mov	r2, r0
 8009740:	697b      	ldr	r3, [r7, #20]
 8009742:	1ad3      	subs	r3, r2, r3
 8009744:	f241 3288 	movw	r2, #5000	; 0x1388
 8009748:	4293      	cmp	r3, r2
 800974a:	d901      	bls.n	8009750 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 800974c:	2303      	movs	r3, #3
 800974e:	e02a      	b.n	80097a6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009750:	4b18      	ldr	r3, [pc, #96]	; (80097b4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009752:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009754:	f003 0302 	and.w	r3, r3, #2
 8009758:	2b00      	cmp	r3, #0
 800975a:	d0ee      	beq.n	800973a <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	68db      	ldr	r3, [r3, #12]
 8009760:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009764:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009768:	d10d      	bne.n	8009786 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800976a:	4b12      	ldr	r3, [pc, #72]	; (80097b4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800976c:	689b      	ldr	r3, [r3, #8]
 800976e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	68db      	ldr	r3, [r3, #12]
 8009776:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800977a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800977e:	490d      	ldr	r1, [pc, #52]	; (80097b4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009780:	4313      	orrs	r3, r2
 8009782:	608b      	str	r3, [r1, #8]
 8009784:	e005      	b.n	8009792 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8009786:	4b0b      	ldr	r3, [pc, #44]	; (80097b4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009788:	689b      	ldr	r3, [r3, #8]
 800978a:	4a0a      	ldr	r2, [pc, #40]	; (80097b4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800978c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8009790:	6093      	str	r3, [r2, #8]
 8009792:	4b08      	ldr	r3, [pc, #32]	; (80097b4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009794:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	68db      	ldr	r3, [r3, #12]
 800979a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800979e:	4905      	ldr	r1, [pc, #20]	; (80097b4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80097a0:	4313      	orrs	r3, r2
 80097a2:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80097a4:	2300      	movs	r3, #0
}
 80097a6:	4618      	mov	r0, r3
 80097a8:	3718      	adds	r7, #24
 80097aa:	46bd      	mov	sp, r7
 80097ac:	bd80      	pop	{r7, pc}
 80097ae:	bf00      	nop
 80097b0:	42470068 	.word	0x42470068
 80097b4:	40023800 	.word	0x40023800
 80097b8:	40007000 	.word	0x40007000
 80097bc:	42470e40 	.word	0x42470e40

080097c0 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80097c0:	b580      	push	{r7, lr}
 80097c2:	b084      	sub	sp, #16
 80097c4:	af00      	add	r7, sp, #0
 80097c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80097c8:	2301      	movs	r3, #1
 80097ca:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d101      	bne.n	80097d6 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80097d2:	2301      	movs	r3, #1
 80097d4:	e066      	b.n	80098a4 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	7f5b      	ldrb	r3, [r3, #29]
 80097da:	b2db      	uxtb	r3, r3
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d105      	bne.n	80097ec <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	2200      	movs	r2, #0
 80097e4:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80097e6:	6878      	ldr	r0, [r7, #4]
 80097e8:	f7f9 ff34 	bl	8003654 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	2202      	movs	r2, #2
 80097f0:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	22ca      	movs	r2, #202	; 0xca
 80097f8:	625a      	str	r2, [r3, #36]	; 0x24
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	2253      	movs	r2, #83	; 0x53
 8009800:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8009802:	6878      	ldr	r0, [r7, #4]
 8009804:	f000 fa45 	bl	8009c92 <RTC_EnterInitMode>
 8009808:	4603      	mov	r3, r0
 800980a:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 800980c:	7bfb      	ldrb	r3, [r7, #15]
 800980e:	2b00      	cmp	r3, #0
 8009810:	d12c      	bne.n	800986c <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	689b      	ldr	r3, [r3, #8]
 8009818:	687a      	ldr	r2, [r7, #4]
 800981a:	6812      	ldr	r2, [r2, #0]
 800981c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009820:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009824:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	6899      	ldr	r1, [r3, #8]
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	685a      	ldr	r2, [r3, #4]
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	691b      	ldr	r3, [r3, #16]
 8009834:	431a      	orrs	r2, r3
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	695b      	ldr	r3, [r3, #20]
 800983a:	431a      	orrs	r2, r3
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	430a      	orrs	r2, r1
 8009842:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	687a      	ldr	r2, [r7, #4]
 800984a:	68d2      	ldr	r2, [r2, #12]
 800984c:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	6919      	ldr	r1, [r3, #16]
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	689b      	ldr	r3, [r3, #8]
 8009858:	041a      	lsls	r2, r3, #16
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	430a      	orrs	r2, r1
 8009860:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8009862:	6878      	ldr	r0, [r7, #4]
 8009864:	f000 fa4c 	bl	8009d00 <RTC_ExitInitMode>
 8009868:	4603      	mov	r3, r0
 800986a:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800986c:	7bfb      	ldrb	r3, [r7, #15]
 800986e:	2b00      	cmp	r3, #0
 8009870:	d113      	bne.n	800989a <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8009880:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	699a      	ldr	r2, [r3, #24]
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	430a      	orrs	r2, r1
 8009892:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	2201      	movs	r2, #1
 8009898:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	22ff      	movs	r2, #255	; 0xff
 80098a0:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 80098a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80098a4:	4618      	mov	r0, r3
 80098a6:	3710      	adds	r7, #16
 80098a8:	46bd      	mov	sp, r7
 80098aa:	bd80      	pop	{r7, pc}

080098ac <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80098ac:	b590      	push	{r4, r7, lr}
 80098ae:	b087      	sub	sp, #28
 80098b0:	af00      	add	r7, sp, #0
 80098b2:	60f8      	str	r0, [r7, #12]
 80098b4:	60b9      	str	r1, [r7, #8]
 80098b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80098b8:	2300      	movs	r3, #0
 80098ba:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	7f1b      	ldrb	r3, [r3, #28]
 80098c0:	2b01      	cmp	r3, #1
 80098c2:	d101      	bne.n	80098c8 <HAL_RTC_SetTime+0x1c>
 80098c4:	2302      	movs	r3, #2
 80098c6:	e087      	b.n	80099d8 <HAL_RTC_SetTime+0x12c>
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	2201      	movs	r2, #1
 80098cc:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	2202      	movs	r2, #2
 80098d2:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d126      	bne.n	8009928 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	689b      	ldr	r3, [r3, #8]
 80098e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d102      	bne.n	80098ee <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80098e8:	68bb      	ldr	r3, [r7, #8]
 80098ea:	2200      	movs	r2, #0
 80098ec:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80098ee:	68bb      	ldr	r3, [r7, #8]
 80098f0:	781b      	ldrb	r3, [r3, #0]
 80098f2:	4618      	mov	r0, r3
 80098f4:	f000 fa29 	bl	8009d4a <RTC_ByteToBcd2>
 80098f8:	4603      	mov	r3, r0
 80098fa:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80098fc:	68bb      	ldr	r3, [r7, #8]
 80098fe:	785b      	ldrb	r3, [r3, #1]
 8009900:	4618      	mov	r0, r3
 8009902:	f000 fa22 	bl	8009d4a <RTC_ByteToBcd2>
 8009906:	4603      	mov	r3, r0
 8009908:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800990a:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 800990c:	68bb      	ldr	r3, [r7, #8]
 800990e:	789b      	ldrb	r3, [r3, #2]
 8009910:	4618      	mov	r0, r3
 8009912:	f000 fa1a 	bl	8009d4a <RTC_ByteToBcd2>
 8009916:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8009918:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 800991c:	68bb      	ldr	r3, [r7, #8]
 800991e:	78db      	ldrb	r3, [r3, #3]
 8009920:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8009922:	4313      	orrs	r3, r2
 8009924:	617b      	str	r3, [r7, #20]
 8009926:	e018      	b.n	800995a <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	689b      	ldr	r3, [r3, #8]
 800992e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009932:	2b00      	cmp	r3, #0
 8009934:	d102      	bne.n	800993c <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8009936:	68bb      	ldr	r3, [r7, #8]
 8009938:	2200      	movs	r2, #0
 800993a:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800993c:	68bb      	ldr	r3, [r7, #8]
 800993e:	781b      	ldrb	r3, [r3, #0]
 8009940:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8009942:	68bb      	ldr	r3, [r7, #8]
 8009944:	785b      	ldrb	r3, [r3, #1]
 8009946:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8009948:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 800994a:	68ba      	ldr	r2, [r7, #8]
 800994c:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800994e:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8009950:	68bb      	ldr	r3, [r7, #8]
 8009952:	78db      	ldrb	r3, [r3, #3]
 8009954:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8009956:	4313      	orrs	r3, r2
 8009958:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	22ca      	movs	r2, #202	; 0xca
 8009960:	625a      	str	r2, [r3, #36]	; 0x24
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	2253      	movs	r2, #83	; 0x53
 8009968:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800996a:	68f8      	ldr	r0, [r7, #12]
 800996c:	f000 f991 	bl	8009c92 <RTC_EnterInitMode>
 8009970:	4603      	mov	r3, r0
 8009972:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8009974:	7cfb      	ldrb	r3, [r7, #19]
 8009976:	2b00      	cmp	r3, #0
 8009978:	d120      	bne.n	80099bc <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	681a      	ldr	r2, [r3, #0]
 800997e:	697b      	ldr	r3, [r7, #20]
 8009980:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8009984:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8009988:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	689a      	ldr	r2, [r3, #8]
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8009998:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	6899      	ldr	r1, [r3, #8]
 80099a0:	68bb      	ldr	r3, [r7, #8]
 80099a2:	68da      	ldr	r2, [r3, #12]
 80099a4:	68bb      	ldr	r3, [r7, #8]
 80099a6:	691b      	ldr	r3, [r3, #16]
 80099a8:	431a      	orrs	r2, r3
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	430a      	orrs	r2, r1
 80099b0:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80099b2:	68f8      	ldr	r0, [r7, #12]
 80099b4:	f000 f9a4 	bl	8009d00 <RTC_ExitInitMode>
 80099b8:	4603      	mov	r3, r0
 80099ba:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80099bc:	7cfb      	ldrb	r3, [r7, #19]
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d102      	bne.n	80099c8 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	2201      	movs	r2, #1
 80099c6:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	22ff      	movs	r2, #255	; 0xff
 80099ce:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	2200      	movs	r2, #0
 80099d4:	771a      	strb	r2, [r3, #28]

  return status;
 80099d6:	7cfb      	ldrb	r3, [r7, #19]
}
 80099d8:	4618      	mov	r0, r3
 80099da:	371c      	adds	r7, #28
 80099dc:	46bd      	mov	sp, r7
 80099de:	bd90      	pop	{r4, r7, pc}

080099e0 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80099e0:	b580      	push	{r7, lr}
 80099e2:	b086      	sub	sp, #24
 80099e4:	af00      	add	r7, sp, #0
 80099e6:	60f8      	str	r0, [r7, #12]
 80099e8:	60b9      	str	r1, [r7, #8]
 80099ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80099ec:	2300      	movs	r3, #0
 80099ee:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80099f6:	68bb      	ldr	r3, [r7, #8]
 80099f8:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	691b      	ldr	r3, [r3, #16]
 8009a00:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8009a04:	68bb      	ldr	r3, [r7, #8]
 8009a06:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8009a12:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8009a16:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8009a18:	697b      	ldr	r3, [r7, #20]
 8009a1a:	0c1b      	lsrs	r3, r3, #16
 8009a1c:	b2db      	uxtb	r3, r3
 8009a1e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009a22:	b2da      	uxtb	r2, r3
 8009a24:	68bb      	ldr	r3, [r7, #8]
 8009a26:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8009a28:	697b      	ldr	r3, [r7, #20]
 8009a2a:	0a1b      	lsrs	r3, r3, #8
 8009a2c:	b2db      	uxtb	r3, r3
 8009a2e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009a32:	b2da      	uxtb	r2, r3
 8009a34:	68bb      	ldr	r3, [r7, #8]
 8009a36:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8009a38:	697b      	ldr	r3, [r7, #20]
 8009a3a:	b2db      	uxtb	r3, r3
 8009a3c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009a40:	b2da      	uxtb	r2, r3
 8009a42:	68bb      	ldr	r3, [r7, #8]
 8009a44:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8009a46:	697b      	ldr	r3, [r7, #20]
 8009a48:	0d9b      	lsrs	r3, r3, #22
 8009a4a:	b2db      	uxtb	r3, r3
 8009a4c:	f003 0301 	and.w	r3, r3, #1
 8009a50:	b2da      	uxtb	r2, r3
 8009a52:	68bb      	ldr	r3, [r7, #8]
 8009a54:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d11a      	bne.n	8009a92 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8009a5c:	68bb      	ldr	r3, [r7, #8]
 8009a5e:	781b      	ldrb	r3, [r3, #0]
 8009a60:	4618      	mov	r0, r3
 8009a62:	f000 f98f 	bl	8009d84 <RTC_Bcd2ToByte>
 8009a66:	4603      	mov	r3, r0
 8009a68:	461a      	mov	r2, r3
 8009a6a:	68bb      	ldr	r3, [r7, #8]
 8009a6c:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8009a6e:	68bb      	ldr	r3, [r7, #8]
 8009a70:	785b      	ldrb	r3, [r3, #1]
 8009a72:	4618      	mov	r0, r3
 8009a74:	f000 f986 	bl	8009d84 <RTC_Bcd2ToByte>
 8009a78:	4603      	mov	r3, r0
 8009a7a:	461a      	mov	r2, r3
 8009a7c:	68bb      	ldr	r3, [r7, #8]
 8009a7e:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8009a80:	68bb      	ldr	r3, [r7, #8]
 8009a82:	789b      	ldrb	r3, [r3, #2]
 8009a84:	4618      	mov	r0, r3
 8009a86:	f000 f97d 	bl	8009d84 <RTC_Bcd2ToByte>
 8009a8a:	4603      	mov	r3, r0
 8009a8c:	461a      	mov	r2, r3
 8009a8e:	68bb      	ldr	r3, [r7, #8]
 8009a90:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8009a92:	2300      	movs	r3, #0
}
 8009a94:	4618      	mov	r0, r3
 8009a96:	3718      	adds	r7, #24
 8009a98:	46bd      	mov	sp, r7
 8009a9a:	bd80      	pop	{r7, pc}

08009a9c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8009a9c:	b590      	push	{r4, r7, lr}
 8009a9e:	b087      	sub	sp, #28
 8009aa0:	af00      	add	r7, sp, #0
 8009aa2:	60f8      	str	r0, [r7, #12]
 8009aa4:	60b9      	str	r1, [r7, #8]
 8009aa6:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8009aa8:	2300      	movs	r3, #0
 8009aaa:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	7f1b      	ldrb	r3, [r3, #28]
 8009ab0:	2b01      	cmp	r3, #1
 8009ab2:	d101      	bne.n	8009ab8 <HAL_RTC_SetDate+0x1c>
 8009ab4:	2302      	movs	r3, #2
 8009ab6:	e071      	b.n	8009b9c <HAL_RTC_SetDate+0x100>
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	2201      	movs	r2, #1
 8009abc:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	2202      	movs	r2, #2
 8009ac2:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d10e      	bne.n	8009ae8 <HAL_RTC_SetDate+0x4c>
 8009aca:	68bb      	ldr	r3, [r7, #8]
 8009acc:	785b      	ldrb	r3, [r3, #1]
 8009ace:	f003 0310 	and.w	r3, r3, #16
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d008      	beq.n	8009ae8 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8009ad6:	68bb      	ldr	r3, [r7, #8]
 8009ad8:	785b      	ldrb	r3, [r3, #1]
 8009ada:	f023 0310 	bic.w	r3, r3, #16
 8009ade:	b2db      	uxtb	r3, r3
 8009ae0:	330a      	adds	r3, #10
 8009ae2:	b2da      	uxtb	r2, r3
 8009ae4:	68bb      	ldr	r3, [r7, #8]
 8009ae6:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d11c      	bne.n	8009b28 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8009aee:	68bb      	ldr	r3, [r7, #8]
 8009af0:	78db      	ldrb	r3, [r3, #3]
 8009af2:	4618      	mov	r0, r3
 8009af4:	f000 f929 	bl	8009d4a <RTC_ByteToBcd2>
 8009af8:	4603      	mov	r3, r0
 8009afa:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8009afc:	68bb      	ldr	r3, [r7, #8]
 8009afe:	785b      	ldrb	r3, [r3, #1]
 8009b00:	4618      	mov	r0, r3
 8009b02:	f000 f922 	bl	8009d4a <RTC_ByteToBcd2>
 8009b06:	4603      	mov	r3, r0
 8009b08:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8009b0a:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8009b0c:	68bb      	ldr	r3, [r7, #8]
 8009b0e:	789b      	ldrb	r3, [r3, #2]
 8009b10:	4618      	mov	r0, r3
 8009b12:	f000 f91a 	bl	8009d4a <RTC_ByteToBcd2>
 8009b16:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8009b18:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8009b1c:	68bb      	ldr	r3, [r7, #8]
 8009b1e:	781b      	ldrb	r3, [r3, #0]
 8009b20:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8009b22:	4313      	orrs	r3, r2
 8009b24:	617b      	str	r3, [r7, #20]
 8009b26:	e00e      	b.n	8009b46 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8009b28:	68bb      	ldr	r3, [r7, #8]
 8009b2a:	78db      	ldrb	r3, [r3, #3]
 8009b2c:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8009b2e:	68bb      	ldr	r3, [r7, #8]
 8009b30:	785b      	ldrb	r3, [r3, #1]
 8009b32:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8009b34:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8009b36:	68ba      	ldr	r2, [r7, #8]
 8009b38:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8009b3a:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8009b3c:	68bb      	ldr	r3, [r7, #8]
 8009b3e:	781b      	ldrb	r3, [r3, #0]
 8009b40:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8009b42:	4313      	orrs	r3, r2
 8009b44:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	22ca      	movs	r2, #202	; 0xca
 8009b4c:	625a      	str	r2, [r3, #36]	; 0x24
 8009b4e:	68fb      	ldr	r3, [r7, #12]
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	2253      	movs	r2, #83	; 0x53
 8009b54:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8009b56:	68f8      	ldr	r0, [r7, #12]
 8009b58:	f000 f89b 	bl	8009c92 <RTC_EnterInitMode>
 8009b5c:	4603      	mov	r3, r0
 8009b5e:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8009b60:	7cfb      	ldrb	r3, [r7, #19]
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d10c      	bne.n	8009b80 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	681a      	ldr	r2, [r3, #0]
 8009b6a:	697b      	ldr	r3, [r7, #20]
 8009b6c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8009b70:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8009b74:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8009b76:	68f8      	ldr	r0, [r7, #12]
 8009b78:	f000 f8c2 	bl	8009d00 <RTC_ExitInitMode>
 8009b7c:	4603      	mov	r3, r0
 8009b7e:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8009b80:	7cfb      	ldrb	r3, [r7, #19]
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d102      	bne.n	8009b8c <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	2201      	movs	r2, #1
 8009b8a:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	22ff      	movs	r2, #255	; 0xff
 8009b92:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	2200      	movs	r2, #0
 8009b98:	771a      	strb	r2, [r3, #28]

  return status;
 8009b9a:	7cfb      	ldrb	r3, [r7, #19]
}
 8009b9c:	4618      	mov	r0, r3
 8009b9e:	371c      	adds	r7, #28
 8009ba0:	46bd      	mov	sp, r7
 8009ba2:	bd90      	pop	{r4, r7, pc}

08009ba4 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8009ba4:	b580      	push	{r7, lr}
 8009ba6:	b086      	sub	sp, #24
 8009ba8:	af00      	add	r7, sp, #0
 8009baa:	60f8      	str	r0, [r7, #12]
 8009bac:	60b9      	str	r1, [r7, #8]
 8009bae:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8009bb0:	2300      	movs	r3, #0
 8009bb2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	685b      	ldr	r3, [r3, #4]
 8009bba:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8009bbe:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8009bc2:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8009bc4:	697b      	ldr	r3, [r7, #20]
 8009bc6:	0c1b      	lsrs	r3, r3, #16
 8009bc8:	b2da      	uxtb	r2, r3
 8009bca:	68bb      	ldr	r3, [r7, #8]
 8009bcc:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8009bce:	697b      	ldr	r3, [r7, #20]
 8009bd0:	0a1b      	lsrs	r3, r3, #8
 8009bd2:	b2db      	uxtb	r3, r3
 8009bd4:	f003 031f 	and.w	r3, r3, #31
 8009bd8:	b2da      	uxtb	r2, r3
 8009bda:	68bb      	ldr	r3, [r7, #8]
 8009bdc:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8009bde:	697b      	ldr	r3, [r7, #20]
 8009be0:	b2db      	uxtb	r3, r3
 8009be2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009be6:	b2da      	uxtb	r2, r3
 8009be8:	68bb      	ldr	r3, [r7, #8]
 8009bea:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8009bec:	697b      	ldr	r3, [r7, #20]
 8009bee:	0b5b      	lsrs	r3, r3, #13
 8009bf0:	b2db      	uxtb	r3, r3
 8009bf2:	f003 0307 	and.w	r3, r3, #7
 8009bf6:	b2da      	uxtb	r2, r3
 8009bf8:	68bb      	ldr	r3, [r7, #8]
 8009bfa:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d11a      	bne.n	8009c38 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8009c02:	68bb      	ldr	r3, [r7, #8]
 8009c04:	78db      	ldrb	r3, [r3, #3]
 8009c06:	4618      	mov	r0, r3
 8009c08:	f000 f8bc 	bl	8009d84 <RTC_Bcd2ToByte>
 8009c0c:	4603      	mov	r3, r0
 8009c0e:	461a      	mov	r2, r3
 8009c10:	68bb      	ldr	r3, [r7, #8]
 8009c12:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8009c14:	68bb      	ldr	r3, [r7, #8]
 8009c16:	785b      	ldrb	r3, [r3, #1]
 8009c18:	4618      	mov	r0, r3
 8009c1a:	f000 f8b3 	bl	8009d84 <RTC_Bcd2ToByte>
 8009c1e:	4603      	mov	r3, r0
 8009c20:	461a      	mov	r2, r3
 8009c22:	68bb      	ldr	r3, [r7, #8]
 8009c24:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8009c26:	68bb      	ldr	r3, [r7, #8]
 8009c28:	789b      	ldrb	r3, [r3, #2]
 8009c2a:	4618      	mov	r0, r3
 8009c2c:	f000 f8aa 	bl	8009d84 <RTC_Bcd2ToByte>
 8009c30:	4603      	mov	r3, r0
 8009c32:	461a      	mov	r2, r3
 8009c34:	68bb      	ldr	r3, [r7, #8]
 8009c36:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8009c38:	2300      	movs	r3, #0
}
 8009c3a:	4618      	mov	r0, r3
 8009c3c:	3718      	adds	r7, #24
 8009c3e:	46bd      	mov	sp, r7
 8009c40:	bd80      	pop	{r7, pc}

08009c42 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8009c42:	b580      	push	{r7, lr}
 8009c44:	b084      	sub	sp, #16
 8009c46:	af00      	add	r7, sp, #0
 8009c48:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8009c4a:	2300      	movs	r3, #0
 8009c4c:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	68da      	ldr	r2, [r3, #12]
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8009c5c:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009c5e:	f7fa fb4b 	bl	80042f8 <HAL_GetTick>
 8009c62:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8009c64:	e009      	b.n	8009c7a <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8009c66:	f7fa fb47 	bl	80042f8 <HAL_GetTick>
 8009c6a:	4602      	mov	r2, r0
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	1ad3      	subs	r3, r2, r3
 8009c70:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009c74:	d901      	bls.n	8009c7a <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8009c76:	2303      	movs	r3, #3
 8009c78:	e007      	b.n	8009c8a <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	68db      	ldr	r3, [r3, #12]
 8009c80:	f003 0320 	and.w	r3, r3, #32
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d0ee      	beq.n	8009c66 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8009c88:	2300      	movs	r3, #0
}
 8009c8a:	4618      	mov	r0, r3
 8009c8c:	3710      	adds	r7, #16
 8009c8e:	46bd      	mov	sp, r7
 8009c90:	bd80      	pop	{r7, pc}

08009c92 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8009c92:	b580      	push	{r7, lr}
 8009c94:	b084      	sub	sp, #16
 8009c96:	af00      	add	r7, sp, #0
 8009c98:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8009c9a:	2300      	movs	r3, #0
 8009c9c:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8009c9e:	2300      	movs	r3, #0
 8009ca0:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	68db      	ldr	r3, [r3, #12]
 8009ca8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d122      	bne.n	8009cf6 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	68da      	ldr	r2, [r3, #12]
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009cbe:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8009cc0:	f7fa fb1a 	bl	80042f8 <HAL_GetTick>
 8009cc4:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8009cc6:	e00c      	b.n	8009ce2 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8009cc8:	f7fa fb16 	bl	80042f8 <HAL_GetTick>
 8009ccc:	4602      	mov	r2, r0
 8009cce:	68bb      	ldr	r3, [r7, #8]
 8009cd0:	1ad3      	subs	r3, r2, r3
 8009cd2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009cd6:	d904      	bls.n	8009ce2 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	2204      	movs	r2, #4
 8009cdc:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8009cde:	2301      	movs	r3, #1
 8009ce0:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	68db      	ldr	r3, [r3, #12]
 8009ce8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d102      	bne.n	8009cf6 <RTC_EnterInitMode+0x64>
 8009cf0:	7bfb      	ldrb	r3, [r7, #15]
 8009cf2:	2b01      	cmp	r3, #1
 8009cf4:	d1e8      	bne.n	8009cc8 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8009cf6:	7bfb      	ldrb	r3, [r7, #15]
}
 8009cf8:	4618      	mov	r0, r3
 8009cfa:	3710      	adds	r7, #16
 8009cfc:	46bd      	mov	sp, r7
 8009cfe:	bd80      	pop	{r7, pc}

08009d00 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8009d00:	b580      	push	{r7, lr}
 8009d02:	b084      	sub	sp, #16
 8009d04:	af00      	add	r7, sp, #0
 8009d06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009d08:	2300      	movs	r3, #0
 8009d0a:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	68da      	ldr	r2, [r3, #12]
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009d1a:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	689b      	ldr	r3, [r3, #8]
 8009d22:	f003 0320 	and.w	r3, r3, #32
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d10a      	bne.n	8009d40 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009d2a:	6878      	ldr	r0, [r7, #4]
 8009d2c:	f7ff ff89 	bl	8009c42 <HAL_RTC_WaitForSynchro>
 8009d30:	4603      	mov	r3, r0
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d004      	beq.n	8009d40 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	2204      	movs	r2, #4
 8009d3a:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8009d3c:	2301      	movs	r3, #1
 8009d3e:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8009d40:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d42:	4618      	mov	r0, r3
 8009d44:	3710      	adds	r7, #16
 8009d46:	46bd      	mov	sp, r7
 8009d48:	bd80      	pop	{r7, pc}

08009d4a <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8009d4a:	b480      	push	{r7}
 8009d4c:	b085      	sub	sp, #20
 8009d4e:	af00      	add	r7, sp, #0
 8009d50:	4603      	mov	r3, r0
 8009d52:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 8009d54:	2300      	movs	r3, #0
 8009d56:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 8009d58:	e005      	b.n	8009d66 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8009d5a:	7bfb      	ldrb	r3, [r7, #15]
 8009d5c:	3301      	adds	r3, #1
 8009d5e:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 8009d60:	79fb      	ldrb	r3, [r7, #7]
 8009d62:	3b0a      	subs	r3, #10
 8009d64:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8009d66:	79fb      	ldrb	r3, [r7, #7]
 8009d68:	2b09      	cmp	r3, #9
 8009d6a:	d8f6      	bhi.n	8009d5a <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8009d6c:	7bfb      	ldrb	r3, [r7, #15]
 8009d6e:	011b      	lsls	r3, r3, #4
 8009d70:	b2da      	uxtb	r2, r3
 8009d72:	79fb      	ldrb	r3, [r7, #7]
 8009d74:	4313      	orrs	r3, r2
 8009d76:	b2db      	uxtb	r3, r3
}
 8009d78:	4618      	mov	r0, r3
 8009d7a:	3714      	adds	r7, #20
 8009d7c:	46bd      	mov	sp, r7
 8009d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d82:	4770      	bx	lr

08009d84 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8009d84:	b480      	push	{r7}
 8009d86:	b085      	sub	sp, #20
 8009d88:	af00      	add	r7, sp, #0
 8009d8a:	4603      	mov	r3, r0
 8009d8c:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 8009d8e:	2300      	movs	r3, #0
 8009d90:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8009d92:	79fb      	ldrb	r3, [r7, #7]
 8009d94:	091b      	lsrs	r3, r3, #4
 8009d96:	b2db      	uxtb	r3, r3
 8009d98:	461a      	mov	r2, r3
 8009d9a:	0092      	lsls	r2, r2, #2
 8009d9c:	4413      	add	r3, r2
 8009d9e:	005b      	lsls	r3, r3, #1
 8009da0:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 8009da2:	79fb      	ldrb	r3, [r7, #7]
 8009da4:	f003 030f 	and.w	r3, r3, #15
 8009da8:	b2da      	uxtb	r2, r3
 8009daa:	7bfb      	ldrb	r3, [r7, #15]
 8009dac:	4413      	add	r3, r2
 8009dae:	b2db      	uxtb	r3, r3
}
 8009db0:	4618      	mov	r0, r3
 8009db2:	3714      	adds	r7, #20
 8009db4:	46bd      	mov	sp, r7
 8009db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dba:	4770      	bx	lr

08009dbc <HAL_RTCEx_BKUPWrite>:
  *                                 to specify the register.
  * @param  Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8009dbc:	b480      	push	{r7}
 8009dbe:	b087      	sub	sp, #28
 8009dc0:	af00      	add	r7, sp, #0
 8009dc2:	60f8      	str	r0, [r7, #12]
 8009dc4:	60b9      	str	r1, [r7, #8]
 8009dc6:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 8009dc8:	2300      	movs	r3, #0
 8009dca:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	3350      	adds	r3, #80	; 0x50
 8009dd2:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8009dd4:	68bb      	ldr	r3, [r7, #8]
 8009dd6:	009b      	lsls	r3, r3, #2
 8009dd8:	697a      	ldr	r2, [r7, #20]
 8009dda:	4413      	add	r3, r2
 8009ddc:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8009dde:	697b      	ldr	r3, [r7, #20]
 8009de0:	687a      	ldr	r2, [r7, #4]
 8009de2:	601a      	str	r2, [r3, #0]
}
 8009de4:	bf00      	nop
 8009de6:	371c      	adds	r7, #28
 8009de8:	46bd      	mov	sp, r7
 8009dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dee:	4770      	bx	lr

08009df0 <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx (where x can be from 0 to 19)
  *                                 to specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8009df0:	b480      	push	{r7}
 8009df2:	b085      	sub	sp, #20
 8009df4:	af00      	add	r7, sp, #0
 8009df6:	6078      	str	r0, [r7, #4]
 8009df8:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 8009dfa:	2300      	movs	r3, #0
 8009dfc:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	3350      	adds	r3, #80	; 0x50
 8009e04:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 8009e06:	683b      	ldr	r3, [r7, #0]
 8009e08:	009b      	lsls	r3, r3, #2
 8009e0a:	68fa      	ldr	r2, [r7, #12]
 8009e0c:	4413      	add	r3, r2
 8009e0e:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	681b      	ldr	r3, [r3, #0]
}
 8009e14:	4618      	mov	r0, r3
 8009e16:	3714      	adds	r7, #20
 8009e18:	46bd      	mov	sp, r7
 8009e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e1e:	4770      	bx	lr

08009e20 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8009e20:	b580      	push	{r7, lr}
 8009e22:	b082      	sub	sp, #8
 8009e24:	af00      	add	r7, sp, #0
 8009e26:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d101      	bne.n	8009e32 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8009e2e:	2301      	movs	r3, #1
 8009e30:	e022      	b.n	8009e78 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009e38:	b2db      	uxtb	r3, r3
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d105      	bne.n	8009e4a <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	2200      	movs	r2, #0
 8009e42:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8009e44:	6878      	ldr	r0, [r7, #4]
 8009e46:	f7f9 fc51 	bl	80036ec <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	2203      	movs	r2, #3
 8009e4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8009e52:	6878      	ldr	r0, [r7, #4]
 8009e54:	f000 f814 	bl	8009e80 <HAL_SD_InitCard>
 8009e58:	4603      	mov	r3, r0
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d001      	beq.n	8009e62 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8009e5e:	2301      	movs	r3, #1
 8009e60:	e00a      	b.n	8009e78 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	2200      	movs	r2, #0
 8009e66:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	2200      	movs	r2, #0
 8009e6c:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	2201      	movs	r2, #1
 8009e72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8009e76:	2300      	movs	r3, #0
}
 8009e78:	4618      	mov	r0, r3
 8009e7a:	3708      	adds	r7, #8
 8009e7c:	46bd      	mov	sp, r7
 8009e7e:	bd80      	pop	{r7, pc}

08009e80 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8009e80:	b5b0      	push	{r4, r5, r7, lr}
 8009e82:	b08e      	sub	sp, #56	; 0x38
 8009e84:	af04      	add	r7, sp, #16
 8009e86:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8009e88:	2300      	movs	r3, #0
 8009e8a:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8009e8c:	2300      	movs	r3, #0
 8009e8e:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8009e90:	2300      	movs	r3, #0
 8009e92:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8009e94:	2300      	movs	r3, #0
 8009e96:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8009e98:	2300      	movs	r3, #0
 8009e9a:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8009e9c:	2376      	movs	r3, #118	; 0x76
 8009e9e:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	681d      	ldr	r5, [r3, #0]
 8009ea4:	466c      	mov	r4, sp
 8009ea6:	f107 0314 	add.w	r3, r7, #20
 8009eaa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009eae:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8009eb2:	f107 0308 	add.w	r3, r7, #8
 8009eb6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009eb8:	4628      	mov	r0, r5
 8009eba:	f003 f80b 	bl	800ced4 <SDIO_Init>
 8009ebe:	4603      	mov	r3, r0
 8009ec0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8009ec4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d001      	beq.n	8009ed0 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8009ecc:	2301      	movs	r3, #1
 8009ece:	e04f      	b.n	8009f70 <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8009ed0:	4b29      	ldr	r3, [pc, #164]	; (8009f78 <HAL_SD_InitCard+0xf8>)
 8009ed2:	2200      	movs	r2, #0
 8009ed4:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	4618      	mov	r0, r3
 8009edc:	f003 f843 	bl	800cf66 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8009ee0:	4b25      	ldr	r3, [pc, #148]	; (8009f78 <HAL_SD_InitCard+0xf8>)
 8009ee2:	2201      	movs	r2, #1
 8009ee4:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 8009ee6:	2002      	movs	r0, #2
 8009ee8:	f7fa fa12 	bl	8004310 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8009eec:	6878      	ldr	r0, [r7, #4]
 8009eee:	f001 f805 	bl	800aefc <SD_PowerON>
 8009ef2:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009ef4:	6a3b      	ldr	r3, [r7, #32]
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d00b      	beq.n	8009f12 <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	2201      	movs	r2, #1
 8009efe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009f06:	6a3b      	ldr	r3, [r7, #32]
 8009f08:	431a      	orrs	r2, r3
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8009f0e:	2301      	movs	r3, #1
 8009f10:	e02e      	b.n	8009f70 <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8009f12:	6878      	ldr	r0, [r7, #4]
 8009f14:	f000 ff24 	bl	800ad60 <SD_InitCard>
 8009f18:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009f1a:	6a3b      	ldr	r3, [r7, #32]
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	d00b      	beq.n	8009f38 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	2201      	movs	r2, #1
 8009f24:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009f2c:	6a3b      	ldr	r3, [r7, #32]
 8009f2e:	431a      	orrs	r2, r3
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8009f34:	2301      	movs	r3, #1
 8009f36:	e01b      	b.n	8009f70 <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009f40:	4618      	mov	r0, r3
 8009f42:	f003 f8a2 	bl	800d08a <SDMMC_CmdBlockLength>
 8009f46:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009f48:	6a3b      	ldr	r3, [r7, #32]
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d00f      	beq.n	8009f6e <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	4a0a      	ldr	r2, [pc, #40]	; (8009f7c <HAL_SD_InitCard+0xfc>)
 8009f54:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009f5a:	6a3b      	ldr	r3, [r7, #32]
 8009f5c:	431a      	orrs	r2, r3
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	2201      	movs	r2, #1
 8009f66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8009f6a:	2301      	movs	r3, #1
 8009f6c:	e000      	b.n	8009f70 <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 8009f6e:	2300      	movs	r3, #0
}
 8009f70:	4618      	mov	r0, r3
 8009f72:	3728      	adds	r7, #40	; 0x28
 8009f74:	46bd      	mov	sp, r7
 8009f76:	bdb0      	pop	{r4, r5, r7, pc}
 8009f78:	422580a0 	.word	0x422580a0
 8009f7c:	004005ff 	.word	0x004005ff

08009f80 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8009f80:	b580      	push	{r7, lr}
 8009f82:	b08c      	sub	sp, #48	; 0x30
 8009f84:	af00      	add	r7, sp, #0
 8009f86:	60f8      	str	r0, [r7, #12]
 8009f88:	60b9      	str	r1, [r7, #8]
 8009f8a:	607a      	str	r2, [r7, #4]
 8009f8c:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8009f92:	68bb      	ldr	r3, [r7, #8]
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d107      	bne.n	8009fa8 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f9c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8009fa4:	2301      	movs	r3, #1
 8009fa6:	e0c0      	b.n	800a12a <HAL_SD_ReadBlocks_DMA+0x1aa>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009fae:	b2db      	uxtb	r3, r3
 8009fb0:	2b01      	cmp	r3, #1
 8009fb2:	f040 80b9 	bne.w	800a128 <HAL_SD_ReadBlocks_DMA+0x1a8>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	2200      	movs	r2, #0
 8009fba:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8009fbc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009fbe:	683b      	ldr	r3, [r7, #0]
 8009fc0:	441a      	add	r2, r3
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009fc6:	429a      	cmp	r2, r3
 8009fc8:	d907      	bls.n	8009fda <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009fce:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8009fd6:	2301      	movs	r3, #1
 8009fd8:	e0a7      	b.n	800a12a <HAL_SD_ReadBlocks_DMA+0x1aa>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8009fda:	68fb      	ldr	r3, [r7, #12]
 8009fdc:	2203      	movs	r2, #3
 8009fde:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8009fe2:	68fb      	ldr	r3, [r7, #12]
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	2200      	movs	r2, #0
 8009fe8:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009ff0:	68fa      	ldr	r2, [r7, #12]
 8009ff2:	6812      	ldr	r2, [r2, #0]
 8009ff4:	f443 734a 	orr.w	r3, r3, #808	; 0x328
 8009ff8:	f043 0302 	orr.w	r3, r3, #2
 8009ffc:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a002:	4a4c      	ldr	r2, [pc, #304]	; (800a134 <HAL_SD_ReadBlocks_DMA+0x1b4>)
 800a004:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a00a:	4a4b      	ldr	r2, [pc, #300]	; (800a138 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 800a00c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a012:	2200      	movs	r2, #0
 800a014:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a01a:	2200      	movs	r2, #0
 800a01c:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a02e:	689a      	ldr	r2, [r3, #8]
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	430a      	orrs	r2, r1
 800a038:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	3380      	adds	r3, #128	; 0x80
 800a044:	4619      	mov	r1, r3
 800a046:	68ba      	ldr	r2, [r7, #8]
 800a048:	683b      	ldr	r3, [r7, #0]
 800a04a:	025b      	lsls	r3, r3, #9
 800a04c:	089b      	lsrs	r3, r3, #2
 800a04e:	f7fb fd65 	bl	8005b1c <HAL_DMA_Start_IT>
 800a052:	4603      	mov	r3, r0
 800a054:	2b00      	cmp	r3, #0
 800a056:	d017      	beq.n	800a088 <HAL_SD_ReadBlocks_DMA+0x108>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 800a066:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	4a33      	ldr	r2, [pc, #204]	; (800a13c <HAL_SD_ReadBlocks_DMA+0x1bc>)
 800a06e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a074:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	2201      	movs	r2, #1
 800a080:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800a084:	2301      	movs	r3, #1
 800a086:	e050      	b.n	800a12a <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 800a088:	4b2d      	ldr	r3, [pc, #180]	; (800a140 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800a08a:	2201      	movs	r2, #1
 800a08c:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a092:	2b01      	cmp	r3, #1
 800a094:	d002      	beq.n	800a09c <HAL_SD_ReadBlocks_DMA+0x11c>
      {
        add *= 512U;
 800a096:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a098:	025b      	lsls	r3, r3, #9
 800a09a:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800a09c:	f04f 33ff 	mov.w	r3, #4294967295
 800a0a0:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800a0a2:	683b      	ldr	r3, [r7, #0]
 800a0a4:	025b      	lsls	r3, r3, #9
 800a0a6:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800a0a8:	2390      	movs	r3, #144	; 0x90
 800a0aa:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800a0ac:	2302      	movs	r3, #2
 800a0ae:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800a0b0:	2300      	movs	r3, #0
 800a0b2:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800a0b4:	2301      	movs	r3, #1
 800a0b6:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	f107 0210 	add.w	r2, r7, #16
 800a0c0:	4611      	mov	r1, r2
 800a0c2:	4618      	mov	r0, r3
 800a0c4:	f002 ffb5 	bl	800d032 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 800a0c8:	683b      	ldr	r3, [r7, #0]
 800a0ca:	2b01      	cmp	r3, #1
 800a0cc:	d90a      	bls.n	800a0e4 <HAL_SD_ReadBlocks_DMA+0x164>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	2282      	movs	r2, #130	; 0x82
 800a0d2:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800a0d4:	68fb      	ldr	r3, [r7, #12]
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a0da:	4618      	mov	r0, r3
 800a0dc:	f003 f819 	bl	800d112 <SDMMC_CmdReadMultiBlock>
 800a0e0:	62f8      	str	r0, [r7, #44]	; 0x2c
 800a0e2:	e009      	b.n	800a0f8 <HAL_SD_ReadBlocks_DMA+0x178>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	2281      	movs	r2, #129	; 0x81
 800a0e8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a0f0:	4618      	mov	r0, r3
 800a0f2:	f002 ffec 	bl	800d0ce <SDMMC_CmdReadSingleBlock>
 800a0f6:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 800a0f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d012      	beq.n	800a124 <HAL_SD_ReadBlocks_DMA+0x1a4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	4a0e      	ldr	r2, [pc, #56]	; (800a13c <HAL_SD_ReadBlocks_DMA+0x1bc>)
 800a104:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a10a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a10c:	431a      	orrs	r2, r3
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	2201      	movs	r2, #1
 800a116:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	2200      	movs	r2, #0
 800a11e:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800a120:	2301      	movs	r3, #1
 800a122:	e002      	b.n	800a12a <HAL_SD_ReadBlocks_DMA+0x1aa>
      }

      return HAL_OK;
 800a124:	2300      	movs	r3, #0
 800a126:	e000      	b.n	800a12a <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
  }
  else
  {
    return HAL_BUSY;
 800a128:	2302      	movs	r3, #2
  }
}
 800a12a:	4618      	mov	r0, r3
 800a12c:	3730      	adds	r7, #48	; 0x30
 800a12e:	46bd      	mov	sp, r7
 800a130:	bd80      	pop	{r7, pc}
 800a132:	bf00      	nop
 800a134:	0800ab6f 	.word	0x0800ab6f
 800a138:	0800abe1 	.word	0x0800abe1
 800a13c:	004005ff 	.word	0x004005ff
 800a140:	4225858c 	.word	0x4225858c

0800a144 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800a144:	b580      	push	{r7, lr}
 800a146:	b08c      	sub	sp, #48	; 0x30
 800a148:	af00      	add	r7, sp, #0
 800a14a:	60f8      	str	r0, [r7, #12]
 800a14c:	60b9      	str	r1, [r7, #8]
 800a14e:	607a      	str	r2, [r7, #4]
 800a150:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800a156:	68bb      	ldr	r3, [r7, #8]
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d107      	bne.n	800a16c <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a160:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800a168:	2301      	movs	r3, #1
 800a16a:	e0c5      	b.n	800a2f8 <HAL_SD_WriteBlocks_DMA+0x1b4>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a172:	b2db      	uxtb	r3, r3
 800a174:	2b01      	cmp	r3, #1
 800a176:	f040 80be 	bne.w	800a2f6 <HAL_SD_WriteBlocks_DMA+0x1b2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	2200      	movs	r2, #0
 800a17e:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800a180:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a182:	683b      	ldr	r3, [r7, #0]
 800a184:	441a      	add	r2, r3
 800a186:	68fb      	ldr	r3, [r7, #12]
 800a188:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a18a:	429a      	cmp	r2, r3
 800a18c:	d907      	bls.n	800a19e <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a192:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800a19a:	2301      	movs	r3, #1
 800a19c:	e0ac      	b.n	800a2f8 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	2203      	movs	r2, #3
 800a1a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	2200      	movs	r2, #0
 800a1ac:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a1b4:	68fa      	ldr	r2, [r7, #12]
 800a1b6:	6812      	ldr	r2, [r2, #0]
 800a1b8:	f443 7306 	orr.w	r3, r3, #536	; 0x218
 800a1bc:	f043 0302 	orr.w	r3, r3, #2
 800a1c0:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a1c6:	4a4e      	ldr	r2, [pc, #312]	; (800a300 <HAL_SD_WriteBlocks_DMA+0x1bc>)
 800a1c8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a1ce:	4a4d      	ldr	r2, [pc, #308]	; (800a304 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 800a1d0:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a1d6:	2200      	movs	r2, #0
 800a1d8:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a1de:	2b01      	cmp	r3, #1
 800a1e0:	d002      	beq.n	800a1e8 <HAL_SD_WriteBlocks_DMA+0xa4>
    {
      add *= 512U;
 800a1e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1e4:	025b      	lsls	r3, r3, #9
 800a1e6:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800a1e8:	683b      	ldr	r3, [r7, #0]
 800a1ea:	2b01      	cmp	r3, #1
 800a1ec:	d90a      	bls.n	800a204 <HAL_SD_WriteBlocks_DMA+0xc0>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	22a0      	movs	r2, #160	; 0xa0
 800a1f2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a1fa:	4618      	mov	r0, r3
 800a1fc:	f002 ffcd 	bl	800d19a <SDMMC_CmdWriteMultiBlock>
 800a200:	62f8      	str	r0, [r7, #44]	; 0x2c
 800a202:	e009      	b.n	800a218 <HAL_SD_WriteBlocks_DMA+0xd4>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	2290      	movs	r2, #144	; 0x90
 800a208:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a210:	4618      	mov	r0, r3
 800a212:	f002 ffa0 	bl	800d156 <SDMMC_CmdWriteSingleBlock>
 800a216:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800a218:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d012      	beq.n	800a244 <HAL_SD_WriteBlocks_DMA+0x100>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	4a39      	ldr	r2, [pc, #228]	; (800a308 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 800a224:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a22a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a22c:	431a      	orrs	r2, r3
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	2201      	movs	r2, #1
 800a236:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	2200      	movs	r2, #0
 800a23e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800a240:	2301      	movs	r3, #1
 800a242:	e059      	b.n	800a2f8 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 800a244:	4b31      	ldr	r3, [pc, #196]	; (800a30c <HAL_SD_WriteBlocks_DMA+0x1c8>)
 800a246:	2201      	movs	r2, #1
 800a248:	601a      	str	r2, [r3, #0]

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a24e:	2240      	movs	r2, #64	; 0x40
 800a250:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a262:	689a      	ldr	r2, [r3, #8]
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	430a      	orrs	r2, r1
 800a26c:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800a272:	68b9      	ldr	r1, [r7, #8]
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	3380      	adds	r3, #128	; 0x80
 800a27a:	461a      	mov	r2, r3
 800a27c:	683b      	ldr	r3, [r7, #0]
 800a27e:	025b      	lsls	r3, r3, #9
 800a280:	089b      	lsrs	r3, r3, #2
 800a282:	f7fb fc4b 	bl	8005b1c <HAL_DMA_Start_IT>
 800a286:	4603      	mov	r3, r0
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d01c      	beq.n	800a2c6 <HAL_SD_WriteBlocks_DMA+0x182>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a292:	68fa      	ldr	r2, [r7, #12]
 800a294:	6812      	ldr	r2, [r2, #0]
 800a296:	f423 7306 	bic.w	r3, r3, #536	; 0x218
 800a29a:	f023 0302 	bic.w	r3, r3, #2
 800a29e:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	4a18      	ldr	r2, [pc, #96]	; (800a308 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 800a2a6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2ac:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	2201      	movs	r2, #1
 800a2b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	2200      	movs	r2, #0
 800a2c0:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800a2c2:	2301      	movs	r3, #1
 800a2c4:	e018      	b.n	800a2f8 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800a2c6:	f04f 33ff 	mov.w	r3, #4294967295
 800a2ca:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800a2cc:	683b      	ldr	r3, [r7, #0]
 800a2ce:	025b      	lsls	r3, r3, #9
 800a2d0:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800a2d2:	2390      	movs	r3, #144	; 0x90
 800a2d4:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 800a2d6:	2300      	movs	r3, #0
 800a2d8:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800a2da:	2300      	movs	r3, #0
 800a2dc:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800a2de:	2301      	movs	r3, #1
 800a2e0:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	f107 0210 	add.w	r2, r7, #16
 800a2ea:	4611      	mov	r1, r2
 800a2ec:	4618      	mov	r0, r3
 800a2ee:	f002 fea0 	bl	800d032 <SDIO_ConfigData>

      return HAL_OK;
 800a2f2:	2300      	movs	r3, #0
 800a2f4:	e000      	b.n	800a2f8 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_BUSY;
 800a2f6:	2302      	movs	r3, #2
  }
}
 800a2f8:	4618      	mov	r0, r3
 800a2fa:	3730      	adds	r7, #48	; 0x30
 800a2fc:	46bd      	mov	sp, r7
 800a2fe:	bd80      	pop	{r7, pc}
 800a300:	0800ab45 	.word	0x0800ab45
 800a304:	0800abe1 	.word	0x0800abe1
 800a308:	004005ff 	.word	0x004005ff
 800a30c:	4225858c 	.word	0x4225858c

0800a310 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800a310:	b580      	push	{r7, lr}
 800a312:	b084      	sub	sp, #16
 800a314:	af00      	add	r7, sp, #0
 800a316:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a31c:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a324:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a328:	2b00      	cmp	r3, #0
 800a32a:	d008      	beq.n	800a33e <HAL_SD_IRQHandler+0x2e>
 800a32c:	68fb      	ldr	r3, [r7, #12]
 800a32e:	f003 0308 	and.w	r3, r3, #8
 800a332:	2b00      	cmp	r3, #0
 800a334:	d003      	beq.n	800a33e <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800a336:	6878      	ldr	r0, [r7, #4]
 800a338:	f000 ffff 	bl	800b33a <SD_Read_IT>
 800a33c:	e165      	b.n	800a60a <HAL_SD_IRQHandler+0x2fa>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a344:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a348:	2b00      	cmp	r3, #0
 800a34a:	f000 808f 	beq.w	800a46c <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a356:	639a      	str	r2, [r3, #56]	; 0x38

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a35e:	687a      	ldr	r2, [r7, #4]
 800a360:	6812      	ldr	r2, [r2, #0]
 800a362:	f423 4343 	bic.w	r3, r3, #49920	; 0xc300
 800a366:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 800a36a:	63d3      	str	r3, [r2, #60]	; 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	f022 0201 	bic.w	r2, r2, #1
 800a37a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	f003 0308 	and.w	r3, r3, #8
 800a382:	2b00      	cmp	r3, #0
 800a384:	d039      	beq.n	800a3fa <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	f003 0302 	and.w	r3, r3, #2
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d104      	bne.n	800a39a <HAL_SD_IRQHandler+0x8a>
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	f003 0320 	and.w	r3, r3, #32
 800a396:	2b00      	cmp	r3, #0
 800a398:	d011      	beq.n	800a3be <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	4618      	mov	r0, r3
 800a3a0:	f002 ff1e 	bl	800d1e0 <SDMMC_CmdStopTransfer>
 800a3a4:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800a3a6:	68bb      	ldr	r3, [r7, #8]
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d008      	beq.n	800a3be <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a3b0:	68bb      	ldr	r3, [r7, #8]
 800a3b2:	431a      	orrs	r2, r3
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800a3b8:	6878      	ldr	r0, [r7, #4]
 800a3ba:	f000 f92f 	bl	800a61c <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	f240 523a 	movw	r2, #1338	; 0x53a
 800a3c6:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	2201      	movs	r2, #1
 800a3cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	2200      	movs	r2, #0
 800a3d4:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	f003 0301 	and.w	r3, r3, #1
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d104      	bne.n	800a3ea <HAL_SD_IRQHandler+0xda>
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	f003 0302 	and.w	r3, r3, #2
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d003      	beq.n	800a3f2 <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800a3ea:	6878      	ldr	r0, [r7, #4]
 800a3ec:	f003 fb8c 	bl	800db08 <HAL_SD_RxCpltCallback>
 800a3f0:	e10b      	b.n	800a60a <HAL_SD_IRQHandler+0x2fa>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800a3f2:	6878      	ldr	r0, [r7, #4]
 800a3f4:	f003 fb7e 	bl	800daf4 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800a3f8:	e107      	b.n	800a60a <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a400:	2b00      	cmp	r3, #0
 800a402:	f000 8102 	beq.w	800a60a <HAL_SD_IRQHandler+0x2fa>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	f003 0320 	and.w	r3, r3, #32
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d011      	beq.n	800a434 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	4618      	mov	r0, r3
 800a416:	f002 fee3 	bl	800d1e0 <SDMMC_CmdStopTransfer>
 800a41a:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800a41c:	68bb      	ldr	r3, [r7, #8]
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d008      	beq.n	800a434 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a426:	68bb      	ldr	r3, [r7, #8]
 800a428:	431a      	orrs	r2, r3
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800a42e:	6878      	ldr	r0, [r7, #4]
 800a430:	f000 f8f4 	bl	800a61c <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	f003 0301 	and.w	r3, r3, #1
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	f040 80e5 	bne.w	800a60a <HAL_SD_IRQHandler+0x2fa>
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	f003 0302 	and.w	r3, r3, #2
 800a446:	2b00      	cmp	r3, #0
 800a448:	f040 80df 	bne.w	800a60a <HAL_SD_IRQHandler+0x2fa>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	f022 0208 	bic.w	r2, r2, #8
 800a45a:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	2201      	movs	r2, #1
 800a460:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 800a464:	6878      	ldr	r0, [r7, #4]
 800a466:	f003 fb45 	bl	800daf4 <HAL_SD_TxCpltCallback>
}
 800a46a:	e0ce      	b.n	800a60a <HAL_SD_IRQHandler+0x2fa>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a472:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a476:	2b00      	cmp	r3, #0
 800a478:	d008      	beq.n	800a48c <HAL_SD_IRQHandler+0x17c>
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	f003 0308 	and.w	r3, r3, #8
 800a480:	2b00      	cmp	r3, #0
 800a482:	d003      	beq.n	800a48c <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 800a484:	6878      	ldr	r0, [r7, #4]
 800a486:	f000 ffa9 	bl	800b3dc <SD_Write_IT>
 800a48a:	e0be      	b.n	800a60a <HAL_SD_IRQHandler+0x2fa>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR | SDIO_FLAG_STBITERR) != RESET)
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a492:	f240 233a 	movw	r3, #570	; 0x23a
 800a496:	4013      	ands	r3, r2
 800a498:	2b00      	cmp	r3, #0
 800a49a:	f000 80b6 	beq.w	800a60a <HAL_SD_IRQHandler+0x2fa>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a4a4:	f003 0302 	and.w	r3, r3, #2
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	d005      	beq.n	800a4b8 <HAL_SD_IRQHandler+0x1a8>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4b0:	f043 0202 	orr.w	r2, r3, #2
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a4be:	f003 0308 	and.w	r3, r3, #8
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d005      	beq.n	800a4d2 <HAL_SD_IRQHandler+0x1c2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4ca:	f043 0208 	orr.w	r2, r3, #8
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a4d8:	f003 0320 	and.w	r3, r3, #32
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	d005      	beq.n	800a4ec <HAL_SD_IRQHandler+0x1dc>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4e4:	f043 0220 	orr.w	r2, r3, #32
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a4f2:	f003 0310 	and.w	r3, r3, #16
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d005      	beq.n	800a506 <HAL_SD_IRQHandler+0x1f6>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4fe:	f043 0210 	orr.w	r2, r3, #16
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR) != RESET)
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a50c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a510:	2b00      	cmp	r3, #0
 800a512:	d005      	beq.n	800a520 <HAL_SD_IRQHandler+0x210>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a518:	f043 0208 	orr.w	r2, r3, #8
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	f240 723a 	movw	r2, #1850	; 0x73a
 800a528:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a530:	687a      	ldr	r2, [r7, #4]
 800a532:	6812      	ldr	r2, [r2, #0]
 800a534:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 800a538:	f023 0302 	bic.w	r3, r3, #2
 800a53c:	63d3      	str	r3, [r2, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	4618      	mov	r0, r3
 800a544:	f002 fe4c 	bl	800d1e0 <SDMMC_CmdStopTransfer>
 800a548:	4602      	mov	r2, r0
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a54e:	431a      	orrs	r2, r3
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	f003 0308 	and.w	r3, r3, #8
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d00a      	beq.n	800a574 <HAL_SD_IRQHandler+0x264>
      hsd->State = HAL_SD_STATE_READY;
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	2201      	movs	r2, #1
 800a562:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	2200      	movs	r2, #0
 800a56a:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 800a56c:	6878      	ldr	r0, [r7, #4]
 800a56e:	f000 f855 	bl	800a61c <HAL_SD_ErrorCallback>
}
 800a572:	e04a      	b.n	800a60a <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d045      	beq.n	800a60a <HAL_SD_IRQHandler+0x2fa>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	f003 0310 	and.w	r3, r3, #16
 800a584:	2b00      	cmp	r3, #0
 800a586:	d104      	bne.n	800a592 <HAL_SD_IRQHandler+0x282>
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	f003 0320 	and.w	r3, r3, #32
 800a58e:	2b00      	cmp	r3, #0
 800a590:	d011      	beq.n	800a5b6 <HAL_SD_IRQHandler+0x2a6>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a596:	4a1f      	ldr	r2, [pc, #124]	; (800a614 <HAL_SD_IRQHandler+0x304>)
 800a598:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a59e:	4618      	mov	r0, r3
 800a5a0:	f7fb fb84 	bl	8005cac <HAL_DMA_Abort_IT>
 800a5a4:	4603      	mov	r3, r0
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	d02f      	beq.n	800a60a <HAL_SD_IRQHandler+0x2fa>
          SD_DMATxAbort(hsd->hdmatx);
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a5ae:	4618      	mov	r0, r3
 800a5b0:	f000 fb68 	bl	800ac84 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800a5b4:	e029      	b.n	800a60a <HAL_SD_IRQHandler+0x2fa>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	f003 0301 	and.w	r3, r3, #1
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d104      	bne.n	800a5ca <HAL_SD_IRQHandler+0x2ba>
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	f003 0302 	and.w	r3, r3, #2
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d011      	beq.n	800a5ee <HAL_SD_IRQHandler+0x2de>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5ce:	4a12      	ldr	r2, [pc, #72]	; (800a618 <HAL_SD_IRQHandler+0x308>)
 800a5d0:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5d6:	4618      	mov	r0, r3
 800a5d8:	f7fb fb68 	bl	8005cac <HAL_DMA_Abort_IT>
 800a5dc:	4603      	mov	r3, r0
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	d013      	beq.n	800a60a <HAL_SD_IRQHandler+0x2fa>
          SD_DMARxAbort(hsd->hdmarx);
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5e6:	4618      	mov	r0, r3
 800a5e8:	f000 fb83 	bl	800acf2 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800a5ec:	e00d      	b.n	800a60a <HAL_SD_IRQHandler+0x2fa>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	2200      	movs	r2, #0
 800a5f2:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	2201      	movs	r2, #1
 800a5f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	2200      	movs	r2, #0
 800a600:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 800a602:	6878      	ldr	r0, [r7, #4]
 800a604:	f003 fa6c 	bl	800dae0 <HAL_SD_AbortCallback>
}
 800a608:	e7ff      	b.n	800a60a <HAL_SD_IRQHandler+0x2fa>
 800a60a:	bf00      	nop
 800a60c:	3710      	adds	r7, #16
 800a60e:	46bd      	mov	sp, r7
 800a610:	bd80      	pop	{r7, pc}
 800a612:	bf00      	nop
 800a614:	0800ac85 	.word	0x0800ac85
 800a618:	0800acf3 	.word	0x0800acf3

0800a61c <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800a61c:	b480      	push	{r7}
 800a61e:	b083      	sub	sp, #12
 800a620:	af00      	add	r7, sp, #0
 800a622:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800a624:	bf00      	nop
 800a626:	370c      	adds	r7, #12
 800a628:	46bd      	mov	sp, r7
 800a62a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a62e:	4770      	bx	lr

0800a630 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800a630:	b480      	push	{r7}
 800a632:	b083      	sub	sp, #12
 800a634:	af00      	add	r7, sp, #0
 800a636:	6078      	str	r0, [r7, #4]
 800a638:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a63e:	0f9b      	lsrs	r3, r3, #30
 800a640:	b2da      	uxtb	r2, r3
 800a642:	683b      	ldr	r3, [r7, #0]
 800a644:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a64a:	0e9b      	lsrs	r3, r3, #26
 800a64c:	b2db      	uxtb	r3, r3
 800a64e:	f003 030f 	and.w	r3, r3, #15
 800a652:	b2da      	uxtb	r2, r3
 800a654:	683b      	ldr	r3, [r7, #0]
 800a656:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a65c:	0e1b      	lsrs	r3, r3, #24
 800a65e:	b2db      	uxtb	r3, r3
 800a660:	f003 0303 	and.w	r3, r3, #3
 800a664:	b2da      	uxtb	r2, r3
 800a666:	683b      	ldr	r3, [r7, #0]
 800a668:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a66e:	0c1b      	lsrs	r3, r3, #16
 800a670:	b2da      	uxtb	r2, r3
 800a672:	683b      	ldr	r3, [r7, #0]
 800a674:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a67a:	0a1b      	lsrs	r3, r3, #8
 800a67c:	b2da      	uxtb	r2, r3
 800a67e:	683b      	ldr	r3, [r7, #0]
 800a680:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a686:	b2da      	uxtb	r2, r3
 800a688:	683b      	ldr	r3, [r7, #0]
 800a68a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a690:	0d1b      	lsrs	r3, r3, #20
 800a692:	b29a      	uxth	r2, r3
 800a694:	683b      	ldr	r3, [r7, #0]
 800a696:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a69c:	0c1b      	lsrs	r3, r3, #16
 800a69e:	b2db      	uxtb	r3, r3
 800a6a0:	f003 030f 	and.w	r3, r3, #15
 800a6a4:	b2da      	uxtb	r2, r3
 800a6a6:	683b      	ldr	r3, [r7, #0]
 800a6a8:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a6ae:	0bdb      	lsrs	r3, r3, #15
 800a6b0:	b2db      	uxtb	r3, r3
 800a6b2:	f003 0301 	and.w	r3, r3, #1
 800a6b6:	b2da      	uxtb	r2, r3
 800a6b8:	683b      	ldr	r3, [r7, #0]
 800a6ba:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a6c0:	0b9b      	lsrs	r3, r3, #14
 800a6c2:	b2db      	uxtb	r3, r3
 800a6c4:	f003 0301 	and.w	r3, r3, #1
 800a6c8:	b2da      	uxtb	r2, r3
 800a6ca:	683b      	ldr	r3, [r7, #0]
 800a6cc:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a6d2:	0b5b      	lsrs	r3, r3, #13
 800a6d4:	b2db      	uxtb	r3, r3
 800a6d6:	f003 0301 	and.w	r3, r3, #1
 800a6da:	b2da      	uxtb	r2, r3
 800a6dc:	683b      	ldr	r3, [r7, #0]
 800a6de:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a6e4:	0b1b      	lsrs	r3, r3, #12
 800a6e6:	b2db      	uxtb	r3, r3
 800a6e8:	f003 0301 	and.w	r3, r3, #1
 800a6ec:	b2da      	uxtb	r2, r3
 800a6ee:	683b      	ldr	r3, [r7, #0]
 800a6f0:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800a6f2:	683b      	ldr	r3, [r7, #0]
 800a6f4:	2200      	movs	r2, #0
 800a6f6:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	d163      	bne.n	800a7c8 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a704:	009a      	lsls	r2, r3, #2
 800a706:	f640 73fc 	movw	r3, #4092	; 0xffc
 800a70a:	4013      	ands	r3, r2
 800a70c:	687a      	ldr	r2, [r7, #4]
 800a70e:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800a710:	0f92      	lsrs	r2, r2, #30
 800a712:	431a      	orrs	r2, r3
 800a714:	683b      	ldr	r3, [r7, #0]
 800a716:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a71c:	0edb      	lsrs	r3, r3, #27
 800a71e:	b2db      	uxtb	r3, r3
 800a720:	f003 0307 	and.w	r3, r3, #7
 800a724:	b2da      	uxtb	r2, r3
 800a726:	683b      	ldr	r3, [r7, #0]
 800a728:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a72e:	0e1b      	lsrs	r3, r3, #24
 800a730:	b2db      	uxtb	r3, r3
 800a732:	f003 0307 	and.w	r3, r3, #7
 800a736:	b2da      	uxtb	r2, r3
 800a738:	683b      	ldr	r3, [r7, #0]
 800a73a:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a740:	0d5b      	lsrs	r3, r3, #21
 800a742:	b2db      	uxtb	r3, r3
 800a744:	f003 0307 	and.w	r3, r3, #7
 800a748:	b2da      	uxtb	r2, r3
 800a74a:	683b      	ldr	r3, [r7, #0]
 800a74c:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a752:	0c9b      	lsrs	r3, r3, #18
 800a754:	b2db      	uxtb	r3, r3
 800a756:	f003 0307 	and.w	r3, r3, #7
 800a75a:	b2da      	uxtb	r2, r3
 800a75c:	683b      	ldr	r3, [r7, #0]
 800a75e:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a764:	0bdb      	lsrs	r3, r3, #15
 800a766:	b2db      	uxtb	r3, r3
 800a768:	f003 0307 	and.w	r3, r3, #7
 800a76c:	b2da      	uxtb	r2, r3
 800a76e:	683b      	ldr	r3, [r7, #0]
 800a770:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800a772:	683b      	ldr	r3, [r7, #0]
 800a774:	691b      	ldr	r3, [r3, #16]
 800a776:	1c5a      	adds	r2, r3, #1
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800a77c:	683b      	ldr	r3, [r7, #0]
 800a77e:	7e1b      	ldrb	r3, [r3, #24]
 800a780:	b2db      	uxtb	r3, r3
 800a782:	f003 0307 	and.w	r3, r3, #7
 800a786:	3302      	adds	r3, #2
 800a788:	2201      	movs	r2, #1
 800a78a:	fa02 f303 	lsl.w	r3, r2, r3
 800a78e:	687a      	ldr	r2, [r7, #4]
 800a790:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800a792:	fb03 f202 	mul.w	r2, r3, r2
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800a79a:	683b      	ldr	r3, [r7, #0]
 800a79c:	7a1b      	ldrb	r3, [r3, #8]
 800a79e:	b2db      	uxtb	r3, r3
 800a7a0:	f003 030f 	and.w	r3, r3, #15
 800a7a4:	2201      	movs	r2, #1
 800a7a6:	409a      	lsls	r2, r3
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a7b0:	687a      	ldr	r2, [r7, #4]
 800a7b2:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800a7b4:	0a52      	lsrs	r2, r2, #9
 800a7b6:	fb03 f202 	mul.w	r2, r3, r2
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a7c4:	661a      	str	r2, [r3, #96]	; 0x60
 800a7c6:	e031      	b.n	800a82c <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a7cc:	2b01      	cmp	r3, #1
 800a7ce:	d11d      	bne.n	800a80c <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a7d4:	041b      	lsls	r3, r3, #16
 800a7d6:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a7de:	0c1b      	lsrs	r3, r3, #16
 800a7e0:	431a      	orrs	r2, r3
 800a7e2:	683b      	ldr	r3, [r7, #0]
 800a7e4:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800a7e6:	683b      	ldr	r3, [r7, #0]
 800a7e8:	691b      	ldr	r3, [r3, #16]
 800a7ea:	3301      	adds	r3, #1
 800a7ec:	029a      	lsls	r2, r3, #10
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a800:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	661a      	str	r2, [r3, #96]	; 0x60
 800a80a:	e00f      	b.n	800a82c <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	4a58      	ldr	r2, [pc, #352]	; (800a974 <HAL_SD_GetCardCSD+0x344>)
 800a812:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a818:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	2201      	movs	r2, #1
 800a824:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800a828:	2301      	movs	r3, #1
 800a82a:	e09d      	b.n	800a968 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a830:	0b9b      	lsrs	r3, r3, #14
 800a832:	b2db      	uxtb	r3, r3
 800a834:	f003 0301 	and.w	r3, r3, #1
 800a838:	b2da      	uxtb	r2, r3
 800a83a:	683b      	ldr	r3, [r7, #0]
 800a83c:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a842:	09db      	lsrs	r3, r3, #7
 800a844:	b2db      	uxtb	r3, r3
 800a846:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a84a:	b2da      	uxtb	r2, r3
 800a84c:	683b      	ldr	r3, [r7, #0]
 800a84e:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a854:	b2db      	uxtb	r3, r3
 800a856:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a85a:	b2da      	uxtb	r2, r3
 800a85c:	683b      	ldr	r3, [r7, #0]
 800a85e:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a864:	0fdb      	lsrs	r3, r3, #31
 800a866:	b2da      	uxtb	r2, r3
 800a868:	683b      	ldr	r3, [r7, #0]
 800a86a:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a870:	0f5b      	lsrs	r3, r3, #29
 800a872:	b2db      	uxtb	r3, r3
 800a874:	f003 0303 	and.w	r3, r3, #3
 800a878:	b2da      	uxtb	r2, r3
 800a87a:	683b      	ldr	r3, [r7, #0]
 800a87c:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a882:	0e9b      	lsrs	r3, r3, #26
 800a884:	b2db      	uxtb	r3, r3
 800a886:	f003 0307 	and.w	r3, r3, #7
 800a88a:	b2da      	uxtb	r2, r3
 800a88c:	683b      	ldr	r3, [r7, #0]
 800a88e:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a894:	0d9b      	lsrs	r3, r3, #22
 800a896:	b2db      	uxtb	r3, r3
 800a898:	f003 030f 	and.w	r3, r3, #15
 800a89c:	b2da      	uxtb	r2, r3
 800a89e:	683b      	ldr	r3, [r7, #0]
 800a8a0:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a8a6:	0d5b      	lsrs	r3, r3, #21
 800a8a8:	b2db      	uxtb	r3, r3
 800a8aa:	f003 0301 	and.w	r3, r3, #1
 800a8ae:	b2da      	uxtb	r2, r3
 800a8b0:	683b      	ldr	r3, [r7, #0]
 800a8b2:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800a8b6:	683b      	ldr	r3, [r7, #0]
 800a8b8:	2200      	movs	r2, #0
 800a8ba:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a8c2:	0c1b      	lsrs	r3, r3, #16
 800a8c4:	b2db      	uxtb	r3, r3
 800a8c6:	f003 0301 	and.w	r3, r3, #1
 800a8ca:	b2da      	uxtb	r2, r3
 800a8cc:	683b      	ldr	r3, [r7, #0]
 800a8ce:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a8d6:	0bdb      	lsrs	r3, r3, #15
 800a8d8:	b2db      	uxtb	r3, r3
 800a8da:	f003 0301 	and.w	r3, r3, #1
 800a8de:	b2da      	uxtb	r2, r3
 800a8e0:	683b      	ldr	r3, [r7, #0]
 800a8e2:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a8ea:	0b9b      	lsrs	r3, r3, #14
 800a8ec:	b2db      	uxtb	r3, r3
 800a8ee:	f003 0301 	and.w	r3, r3, #1
 800a8f2:	b2da      	uxtb	r2, r3
 800a8f4:	683b      	ldr	r3, [r7, #0]
 800a8f6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a8fe:	0b5b      	lsrs	r3, r3, #13
 800a900:	b2db      	uxtb	r3, r3
 800a902:	f003 0301 	and.w	r3, r3, #1
 800a906:	b2da      	uxtb	r2, r3
 800a908:	683b      	ldr	r3, [r7, #0]
 800a90a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a912:	0b1b      	lsrs	r3, r3, #12
 800a914:	b2db      	uxtb	r3, r3
 800a916:	f003 0301 	and.w	r3, r3, #1
 800a91a:	b2da      	uxtb	r2, r3
 800a91c:	683b      	ldr	r3, [r7, #0]
 800a91e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a926:	0a9b      	lsrs	r3, r3, #10
 800a928:	b2db      	uxtb	r3, r3
 800a92a:	f003 0303 	and.w	r3, r3, #3
 800a92e:	b2da      	uxtb	r2, r3
 800a930:	683b      	ldr	r3, [r7, #0]
 800a932:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a93a:	0a1b      	lsrs	r3, r3, #8
 800a93c:	b2db      	uxtb	r3, r3
 800a93e:	f003 0303 	and.w	r3, r3, #3
 800a942:	b2da      	uxtb	r2, r3
 800a944:	683b      	ldr	r3, [r7, #0]
 800a946:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a94e:	085b      	lsrs	r3, r3, #1
 800a950:	b2db      	uxtb	r3, r3
 800a952:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a956:	b2da      	uxtb	r2, r3
 800a958:	683b      	ldr	r3, [r7, #0]
 800a95a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800a95e:	683b      	ldr	r3, [r7, #0]
 800a960:	2201      	movs	r2, #1
 800a962:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800a966:	2300      	movs	r3, #0
}
 800a968:	4618      	mov	r0, r3
 800a96a:	370c      	adds	r7, #12
 800a96c:	46bd      	mov	sp, r7
 800a96e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a972:	4770      	bx	lr
 800a974:	004005ff 	.word	0x004005ff

0800a978 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800a978:	b480      	push	{r7}
 800a97a:	b083      	sub	sp, #12
 800a97c:	af00      	add	r7, sp, #0
 800a97e:	6078      	str	r0, [r7, #4]
 800a980:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a986:	683b      	ldr	r3, [r7, #0]
 800a988:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a98e:	683b      	ldr	r3, [r7, #0]
 800a990:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a996:	683b      	ldr	r3, [r7, #0]
 800a998:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a99e:	683b      	ldr	r3, [r7, #0]
 800a9a0:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a9a6:	683b      	ldr	r3, [r7, #0]
 800a9a8:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800a9ae:	683b      	ldr	r3, [r7, #0]
 800a9b0:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a9b6:	683b      	ldr	r3, [r7, #0]
 800a9b8:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800a9be:	683b      	ldr	r3, [r7, #0]
 800a9c0:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800a9c2:	2300      	movs	r3, #0
}
 800a9c4:	4618      	mov	r0, r3
 800a9c6:	370c      	adds	r7, #12
 800a9c8:	46bd      	mov	sp, r7
 800a9ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ce:	4770      	bx	lr

0800a9d0 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800a9d0:	b5b0      	push	{r4, r5, r7, lr}
 800a9d2:	b08e      	sub	sp, #56	; 0x38
 800a9d4:	af04      	add	r7, sp, #16
 800a9d6:	6078      	str	r0, [r7, #4]
 800a9d8:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800a9da:	2300      	movs	r3, #0
 800a9dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	2203      	movs	r2, #3
 800a9e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a9ec:	2b03      	cmp	r3, #3
 800a9ee:	d02e      	beq.n	800aa4e <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 800a9f0:	683b      	ldr	r3, [r7, #0]
 800a9f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a9f6:	d106      	bne.n	800aa06 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a9fc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	639a      	str	r2, [r3, #56]	; 0x38
 800aa04:	e029      	b.n	800aa5a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 800aa06:	683b      	ldr	r3, [r7, #0]
 800aa08:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800aa0c:	d10a      	bne.n	800aa24 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800aa0e:	6878      	ldr	r0, [r7, #4]
 800aa10:	f000 fb2a 	bl	800b068 <SD_WideBus_Enable>
 800aa14:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800aa1a:	6a3b      	ldr	r3, [r7, #32]
 800aa1c:	431a      	orrs	r2, r3
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	639a      	str	r2, [r3, #56]	; 0x38
 800aa22:	e01a      	b.n	800aa5a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 800aa24:	683b      	ldr	r3, [r7, #0]
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	d10a      	bne.n	800aa40 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800aa2a:	6878      	ldr	r0, [r7, #4]
 800aa2c:	f000 fb67 	bl	800b0fe <SD_WideBus_Disable>
 800aa30:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800aa36:	6a3b      	ldr	r3, [r7, #32]
 800aa38:	431a      	orrs	r2, r3
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	639a      	str	r2, [r3, #56]	; 0x38
 800aa3e:	e00c      	b.n	800aa5a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa44:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	639a      	str	r2, [r3, #56]	; 0x38
 800aa4c:	e005      	b.n	800aa5a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa52:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	d00b      	beq.n	800aa7a <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	4a26      	ldr	r2, [pc, #152]	; (800ab00 <HAL_SD_ConfigWideBusOperation+0x130>)
 800aa68:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	2201      	movs	r2, #1
 800aa6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800aa72:	2301      	movs	r3, #1
 800aa74:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800aa78:	e01f      	b.n	800aaba <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	685b      	ldr	r3, [r3, #4]
 800aa7e:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	689b      	ldr	r3, [r3, #8]
 800aa84:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	68db      	ldr	r3, [r3, #12]
 800aa8a:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 800aa8c:	683b      	ldr	r3, [r7, #0]
 800aa8e:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	695b      	ldr	r3, [r3, #20]
 800aa94:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	699b      	ldr	r3, [r3, #24]
 800aa9a:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	681d      	ldr	r5, [r3, #0]
 800aaa0:	466c      	mov	r4, sp
 800aaa2:	f107 0314 	add.w	r3, r7, #20
 800aaa6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800aaaa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800aaae:	f107 0308 	add.w	r3, r7, #8
 800aab2:	cb0e      	ldmia	r3, {r1, r2, r3}
 800aab4:	4628      	mov	r0, r5
 800aab6:	f002 fa0d 	bl	800ced4 <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	f44f 7100 	mov.w	r1, #512	; 0x200
 800aac2:	4618      	mov	r0, r3
 800aac4:	f002 fae1 	bl	800d08a <SDMMC_CmdBlockLength>
 800aac8:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800aaca:	6a3b      	ldr	r3, [r7, #32]
 800aacc:	2b00      	cmp	r3, #0
 800aace:	d00c      	beq.n	800aaea <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	4a0a      	ldr	r2, [pc, #40]	; (800ab00 <HAL_SD_ConfigWideBusOperation+0x130>)
 800aad6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800aadc:	6a3b      	ldr	r3, [r7, #32]
 800aade:	431a      	orrs	r2, r3
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800aae4:	2301      	movs	r3, #1
 800aae6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	2201      	movs	r2, #1
 800aaee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 800aaf2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800aaf6:	4618      	mov	r0, r3
 800aaf8:	3728      	adds	r7, #40	; 0x28
 800aafa:	46bd      	mov	sp, r7
 800aafc:	bdb0      	pop	{r4, r5, r7, pc}
 800aafe:	bf00      	nop
 800ab00:	004005ff 	.word	0x004005ff

0800ab04 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800ab04:	b580      	push	{r7, lr}
 800ab06:	b086      	sub	sp, #24
 800ab08:	af00      	add	r7, sp, #0
 800ab0a:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800ab0c:	2300      	movs	r3, #0
 800ab0e:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800ab10:	f107 030c 	add.w	r3, r7, #12
 800ab14:	4619      	mov	r1, r3
 800ab16:	6878      	ldr	r0, [r7, #4]
 800ab18:	f000 fa7e 	bl	800b018 <SD_SendStatus>
 800ab1c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800ab1e:	697b      	ldr	r3, [r7, #20]
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	d005      	beq.n	800ab30 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ab28:	697b      	ldr	r3, [r7, #20]
 800ab2a:	431a      	orrs	r2, r3
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800ab30:	68fb      	ldr	r3, [r7, #12]
 800ab32:	0a5b      	lsrs	r3, r3, #9
 800ab34:	f003 030f 	and.w	r3, r3, #15
 800ab38:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800ab3a:	693b      	ldr	r3, [r7, #16]
}
 800ab3c:	4618      	mov	r0, r3
 800ab3e:	3718      	adds	r7, #24
 800ab40:	46bd      	mov	sp, r7
 800ab42:	bd80      	pop	{r7, pc}

0800ab44 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800ab44:	b480      	push	{r7}
 800ab46:	b085      	sub	sp, #20
 800ab48:	af00      	add	r7, sp, #0
 800ab4a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab50:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 800ab52:	68fb      	ldr	r3, [r7, #12]
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ab58:	68fb      	ldr	r3, [r7, #12]
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ab60:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800ab62:	bf00      	nop
 800ab64:	3714      	adds	r7, #20
 800ab66:	46bd      	mov	sp, r7
 800ab68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab6c:	4770      	bx	lr

0800ab6e <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800ab6e:	b580      	push	{r7, lr}
 800ab70:	b084      	sub	sp, #16
 800ab72:	af00      	add	r7, sp, #0
 800ab74:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab7a:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 800ab7c:	68fb      	ldr	r3, [r7, #12]
 800ab7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab80:	2b82      	cmp	r3, #130	; 0x82
 800ab82:	d111      	bne.n	800aba8 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800ab84:	68fb      	ldr	r3, [r7, #12]
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	4618      	mov	r0, r3
 800ab8a:	f002 fb29 	bl	800d1e0 <SDMMC_CmdStopTransfer>
 800ab8e:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 800ab90:	68bb      	ldr	r3, [r7, #8]
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	d008      	beq.n	800aba8 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 800ab96:	68fb      	ldr	r3, [r7, #12]
 800ab98:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ab9a:	68bb      	ldr	r3, [r7, #8]
 800ab9c:	431a      	orrs	r2, r3
 800ab9e:	68fb      	ldr	r3, [r7, #12]
 800aba0:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800aba2:	68f8      	ldr	r0, [r7, #12]
 800aba4:	f7ff fd3a 	bl	800a61c <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800aba8:	68fb      	ldr	r3, [r7, #12]
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800abae:	68fb      	ldr	r3, [r7, #12]
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	f022 0208 	bic.w	r2, r2, #8
 800abb6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800abb8:	68fb      	ldr	r3, [r7, #12]
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	f240 523a 	movw	r2, #1338	; 0x53a
 800abc0:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 800abc2:	68fb      	ldr	r3, [r7, #12]
 800abc4:	2201      	movs	r2, #1
 800abc6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800abca:	68fb      	ldr	r3, [r7, #12]
 800abcc:	2200      	movs	r2, #0
 800abce:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 800abd0:	68f8      	ldr	r0, [r7, #12]
 800abd2:	f002 ff99 	bl	800db08 <HAL_SD_RxCpltCallback>
#endif
}
 800abd6:	bf00      	nop
 800abd8:	3710      	adds	r7, #16
 800abda:	46bd      	mov	sp, r7
 800abdc:	bd80      	pop	{r7, pc}
	...

0800abe0 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 800abe0:	b580      	push	{r7, lr}
 800abe2:	b086      	sub	sp, #24
 800abe4:	af00      	add	r7, sp, #0
 800abe6:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800abec:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800abee:	6878      	ldr	r0, [r7, #4]
 800abf0:	f7fb fa16 	bl	8006020 <HAL_DMA_GetError>
 800abf4:	4603      	mov	r3, r0
 800abf6:	2b02      	cmp	r3, #2
 800abf8:	d03e      	beq.n	800ac78 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 800abfa:	697b      	ldr	r3, [r7, #20]
 800abfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abfe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ac00:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 800ac02:	697b      	ldr	r3, [r7, #20]
 800ac04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ac06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ac08:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800ac0a:	693b      	ldr	r3, [r7, #16]
 800ac0c:	2b01      	cmp	r3, #1
 800ac0e:	d002      	beq.n	800ac16 <SD_DMAError+0x36>
 800ac10:	68fb      	ldr	r3, [r7, #12]
 800ac12:	2b01      	cmp	r3, #1
 800ac14:	d12d      	bne.n	800ac72 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800ac16:	697b      	ldr	r3, [r7, #20]
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	4a19      	ldr	r2, [pc, #100]	; (800ac80 <SD_DMAError+0xa0>)
 800ac1c:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800ac1e:	697b      	ldr	r3, [r7, #20]
 800ac20:	681b      	ldr	r3, [r3, #0]
 800ac22:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ac24:	697b      	ldr	r3, [r7, #20]
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800ac2c:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800ac2e:	697b      	ldr	r3, [r7, #20]
 800ac30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac32:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800ac36:	697b      	ldr	r3, [r7, #20]
 800ac38:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800ac3a:	6978      	ldr	r0, [r7, #20]
 800ac3c:	f7ff ff62 	bl	800ab04 <HAL_SD_GetCardState>
 800ac40:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800ac42:	68bb      	ldr	r3, [r7, #8]
 800ac44:	2b06      	cmp	r3, #6
 800ac46:	d002      	beq.n	800ac4e <SD_DMAError+0x6e>
 800ac48:	68bb      	ldr	r3, [r7, #8]
 800ac4a:	2b05      	cmp	r3, #5
 800ac4c:	d10a      	bne.n	800ac64 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800ac4e:	697b      	ldr	r3, [r7, #20]
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	4618      	mov	r0, r3
 800ac54:	f002 fac4 	bl	800d1e0 <SDMMC_CmdStopTransfer>
 800ac58:	4602      	mov	r2, r0
 800ac5a:	697b      	ldr	r3, [r7, #20]
 800ac5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac5e:	431a      	orrs	r2, r3
 800ac60:	697b      	ldr	r3, [r7, #20]
 800ac62:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 800ac64:	697b      	ldr	r3, [r7, #20]
 800ac66:	2201      	movs	r2, #1
 800ac68:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800ac6c:	697b      	ldr	r3, [r7, #20]
 800ac6e:	2200      	movs	r2, #0
 800ac70:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 800ac72:	6978      	ldr	r0, [r7, #20]
 800ac74:	f7ff fcd2 	bl	800a61c <HAL_SD_ErrorCallback>
#endif
  }
}
 800ac78:	bf00      	nop
 800ac7a:	3718      	adds	r7, #24
 800ac7c:	46bd      	mov	sp, r7
 800ac7e:	bd80      	pop	{r7, pc}
 800ac80:	004005ff 	.word	0x004005ff

0800ac84 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 800ac84:	b580      	push	{r7, lr}
 800ac86:	b084      	sub	sp, #16
 800ac88:	af00      	add	r7, sp, #0
 800ac8a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac90:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800ac92:	68fb      	ldr	r3, [r7, #12]
 800ac94:	681b      	ldr	r3, [r3, #0]
 800ac96:	f240 523a 	movw	r2, #1338	; 0x53a
 800ac9a:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800ac9c:	68f8      	ldr	r0, [r7, #12]
 800ac9e:	f7ff ff31 	bl	800ab04 <HAL_SD_GetCardState>
 800aca2:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800aca4:	68fb      	ldr	r3, [r7, #12]
 800aca6:	2201      	movs	r2, #1
 800aca8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800acac:	68fb      	ldr	r3, [r7, #12]
 800acae:	2200      	movs	r2, #0
 800acb0:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800acb2:	68bb      	ldr	r3, [r7, #8]
 800acb4:	2b06      	cmp	r3, #6
 800acb6:	d002      	beq.n	800acbe <SD_DMATxAbort+0x3a>
 800acb8:	68bb      	ldr	r3, [r7, #8]
 800acba:	2b05      	cmp	r3, #5
 800acbc:	d10a      	bne.n	800acd4 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800acbe:	68fb      	ldr	r3, [r7, #12]
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	4618      	mov	r0, r3
 800acc4:	f002 fa8c 	bl	800d1e0 <SDMMC_CmdStopTransfer>
 800acc8:	4602      	mov	r2, r0
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800acce:	431a      	orrs	r2, r3
 800acd0:	68fb      	ldr	r3, [r7, #12]
 800acd2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800acd4:	68fb      	ldr	r3, [r7, #12]
 800acd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d103      	bne.n	800ace4 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800acdc:	68f8      	ldr	r0, [r7, #12]
 800acde:	f002 feff 	bl	800dae0 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800ace2:	e002      	b.n	800acea <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800ace4:	68f8      	ldr	r0, [r7, #12]
 800ace6:	f7ff fc99 	bl	800a61c <HAL_SD_ErrorCallback>
}
 800acea:	bf00      	nop
 800acec:	3710      	adds	r7, #16
 800acee:	46bd      	mov	sp, r7
 800acf0:	bd80      	pop	{r7, pc}

0800acf2 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 800acf2:	b580      	push	{r7, lr}
 800acf4:	b084      	sub	sp, #16
 800acf6:	af00      	add	r7, sp, #0
 800acf8:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800acfe:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800ad00:	68fb      	ldr	r3, [r7, #12]
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	f240 523a 	movw	r2, #1338	; 0x53a
 800ad08:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800ad0a:	68f8      	ldr	r0, [r7, #12]
 800ad0c:	f7ff fefa 	bl	800ab04 <HAL_SD_GetCardState>
 800ad10:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800ad12:	68fb      	ldr	r3, [r7, #12]
 800ad14:	2201      	movs	r2, #1
 800ad16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800ad1a:	68fb      	ldr	r3, [r7, #12]
 800ad1c:	2200      	movs	r2, #0
 800ad1e:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800ad20:	68bb      	ldr	r3, [r7, #8]
 800ad22:	2b06      	cmp	r3, #6
 800ad24:	d002      	beq.n	800ad2c <SD_DMARxAbort+0x3a>
 800ad26:	68bb      	ldr	r3, [r7, #8]
 800ad28:	2b05      	cmp	r3, #5
 800ad2a:	d10a      	bne.n	800ad42 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800ad2c:	68fb      	ldr	r3, [r7, #12]
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	4618      	mov	r0, r3
 800ad32:	f002 fa55 	bl	800d1e0 <SDMMC_CmdStopTransfer>
 800ad36:	4602      	mov	r2, r0
 800ad38:	68fb      	ldr	r3, [r7, #12]
 800ad3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad3c:	431a      	orrs	r2, r3
 800ad3e:	68fb      	ldr	r3, [r7, #12]
 800ad40:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800ad42:	68fb      	ldr	r3, [r7, #12]
 800ad44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	d103      	bne.n	800ad52 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800ad4a:	68f8      	ldr	r0, [r7, #12]
 800ad4c:	f002 fec8 	bl	800dae0 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800ad50:	e002      	b.n	800ad58 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800ad52:	68f8      	ldr	r0, [r7, #12]
 800ad54:	f7ff fc62 	bl	800a61c <HAL_SD_ErrorCallback>
}
 800ad58:	bf00      	nop
 800ad5a:	3710      	adds	r7, #16
 800ad5c:	46bd      	mov	sp, r7
 800ad5e:	bd80      	pop	{r7, pc}

0800ad60 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800ad60:	b5b0      	push	{r4, r5, r7, lr}
 800ad62:	b094      	sub	sp, #80	; 0x50
 800ad64:	af04      	add	r7, sp, #16
 800ad66:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800ad68:	2301      	movs	r3, #1
 800ad6a:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	681b      	ldr	r3, [r3, #0]
 800ad70:	4618      	mov	r0, r3
 800ad72:	f002 f906 	bl	800cf82 <SDIO_GetPowerState>
 800ad76:	4603      	mov	r3, r0
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	d102      	bne.n	800ad82 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800ad7c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800ad80:	e0b8      	b.n	800aef4 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ad86:	2b03      	cmp	r3, #3
 800ad88:	d02f      	beq.n	800adea <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	681b      	ldr	r3, [r3, #0]
 800ad8e:	4618      	mov	r0, r3
 800ad90:	f002 fb30 	bl	800d3f4 <SDMMC_CmdSendCID>
 800ad94:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800ad96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	d001      	beq.n	800ada0 <SD_InitCard+0x40>
    {
      return errorstate;
 800ad9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ad9e:	e0a9      	b.n	800aef4 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	681b      	ldr	r3, [r3, #0]
 800ada4:	2100      	movs	r1, #0
 800ada6:	4618      	mov	r0, r3
 800ada8:	f002 f930 	bl	800d00c <SDIO_GetResponse>
 800adac:	4602      	mov	r2, r0
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	2104      	movs	r1, #4
 800adb8:	4618      	mov	r0, r3
 800adba:	f002 f927 	bl	800d00c <SDIO_GetResponse>
 800adbe:	4602      	mov	r2, r0
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	2108      	movs	r1, #8
 800adca:	4618      	mov	r0, r3
 800adcc:	f002 f91e 	bl	800d00c <SDIO_GetResponse>
 800add0:	4602      	mov	r2, r0
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	210c      	movs	r1, #12
 800addc:	4618      	mov	r0, r3
 800adde:	f002 f915 	bl	800d00c <SDIO_GetResponse>
 800ade2:	4602      	mov	r2, r0
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800adee:	2b03      	cmp	r3, #3
 800adf0:	d00d      	beq.n	800ae0e <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	681b      	ldr	r3, [r3, #0]
 800adf6:	f107 020e 	add.w	r2, r7, #14
 800adfa:	4611      	mov	r1, r2
 800adfc:	4618      	mov	r0, r3
 800adfe:	f002 fb36 	bl	800d46e <SDMMC_CmdSetRelAdd>
 800ae02:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800ae04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d001      	beq.n	800ae0e <SD_InitCard+0xae>
    {
      return errorstate;
 800ae0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ae0c:	e072      	b.n	800aef4 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ae12:	2b03      	cmp	r3, #3
 800ae14:	d036      	beq.n	800ae84 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800ae16:	89fb      	ldrh	r3, [r7, #14]
 800ae18:	461a      	mov	r2, r3
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	681a      	ldr	r2, [r3, #0]
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ae26:	041b      	lsls	r3, r3, #16
 800ae28:	4619      	mov	r1, r3
 800ae2a:	4610      	mov	r0, r2
 800ae2c:	f002 fb00 	bl	800d430 <SDMMC_CmdSendCSD>
 800ae30:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800ae32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	d001      	beq.n	800ae3c <SD_InitCard+0xdc>
    {
      return errorstate;
 800ae38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ae3a:	e05b      	b.n	800aef4 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	2100      	movs	r1, #0
 800ae42:	4618      	mov	r0, r3
 800ae44:	f002 f8e2 	bl	800d00c <SDIO_GetResponse>
 800ae48:	4602      	mov	r2, r0
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	681b      	ldr	r3, [r3, #0]
 800ae52:	2104      	movs	r1, #4
 800ae54:	4618      	mov	r0, r3
 800ae56:	f002 f8d9 	bl	800d00c <SDIO_GetResponse>
 800ae5a:	4602      	mov	r2, r0
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	681b      	ldr	r3, [r3, #0]
 800ae64:	2108      	movs	r1, #8
 800ae66:	4618      	mov	r0, r3
 800ae68:	f002 f8d0 	bl	800d00c <SDIO_GetResponse>
 800ae6c:	4602      	mov	r2, r0
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	210c      	movs	r1, #12
 800ae78:	4618      	mov	r0, r3
 800ae7a:	f002 f8c7 	bl	800d00c <SDIO_GetResponse>
 800ae7e:	4602      	mov	r2, r0
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	681b      	ldr	r3, [r3, #0]
 800ae88:	2104      	movs	r1, #4
 800ae8a:	4618      	mov	r0, r3
 800ae8c:	f002 f8be 	bl	800d00c <SDIO_GetResponse>
 800ae90:	4603      	mov	r3, r0
 800ae92:	0d1a      	lsrs	r2, r3, #20
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800ae98:	f107 0310 	add.w	r3, r7, #16
 800ae9c:	4619      	mov	r1, r3
 800ae9e:	6878      	ldr	r0, [r7, #4]
 800aea0:	f7ff fbc6 	bl	800a630 <HAL_SD_GetCardCSD>
 800aea4:	4603      	mov	r3, r0
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	d002      	beq.n	800aeb0 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800aeaa:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800aeae:	e021      	b.n	800aef4 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	6819      	ldr	r1, [r3, #0]
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aeb8:	041b      	lsls	r3, r3, #16
 800aeba:	2200      	movs	r2, #0
 800aebc:	461c      	mov	r4, r3
 800aebe:	4615      	mov	r5, r2
 800aec0:	4622      	mov	r2, r4
 800aec2:	462b      	mov	r3, r5
 800aec4:	4608      	mov	r0, r1
 800aec6:	f002 f9ad 	bl	800d224 <SDMMC_CmdSelDesel>
 800aeca:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800aecc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aece:	2b00      	cmp	r3, #0
 800aed0:	d001      	beq.n	800aed6 <SD_InitCard+0x176>
  {
    return errorstate;
 800aed2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aed4:	e00e      	b.n	800aef4 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	681d      	ldr	r5, [r3, #0]
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	466c      	mov	r4, sp
 800aede:	f103 0210 	add.w	r2, r3, #16
 800aee2:	ca07      	ldmia	r2, {r0, r1, r2}
 800aee4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800aee8:	3304      	adds	r3, #4
 800aeea:	cb0e      	ldmia	r3, {r1, r2, r3}
 800aeec:	4628      	mov	r0, r5
 800aeee:	f001 fff1 	bl	800ced4 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800aef2:	2300      	movs	r3, #0
}
 800aef4:	4618      	mov	r0, r3
 800aef6:	3740      	adds	r7, #64	; 0x40
 800aef8:	46bd      	mov	sp, r7
 800aefa:	bdb0      	pop	{r4, r5, r7, pc}

0800aefc <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800aefc:	b580      	push	{r7, lr}
 800aefe:	b086      	sub	sp, #24
 800af00:	af00      	add	r7, sp, #0
 800af02:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800af04:	2300      	movs	r3, #0
 800af06:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800af08:	2300      	movs	r3, #0
 800af0a:	617b      	str	r3, [r7, #20]
 800af0c:	2300      	movs	r3, #0
 800af0e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	4618      	mov	r0, r3
 800af16:	f002 f9a8 	bl	800d26a <SDMMC_CmdGoIdleState>
 800af1a:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800af1c:	68fb      	ldr	r3, [r7, #12]
 800af1e:	2b00      	cmp	r3, #0
 800af20:	d001      	beq.n	800af26 <SD_PowerON+0x2a>
  {
    return errorstate;
 800af22:	68fb      	ldr	r3, [r7, #12]
 800af24:	e072      	b.n	800b00c <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	681b      	ldr	r3, [r3, #0]
 800af2a:	4618      	mov	r0, r3
 800af2c:	f002 f9bb 	bl	800d2a6 <SDMMC_CmdOperCond>
 800af30:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800af32:	68fb      	ldr	r3, [r7, #12]
 800af34:	2b00      	cmp	r3, #0
 800af36:	d00d      	beq.n	800af54 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	2200      	movs	r2, #0
 800af3c:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	681b      	ldr	r3, [r3, #0]
 800af42:	4618      	mov	r0, r3
 800af44:	f002 f991 	bl	800d26a <SDMMC_CmdGoIdleState>
 800af48:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800af4a:	68fb      	ldr	r3, [r7, #12]
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	d004      	beq.n	800af5a <SD_PowerON+0x5e>
    {
      return errorstate;
 800af50:	68fb      	ldr	r3, [r7, #12]
 800af52:	e05b      	b.n	800b00c <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	2201      	movs	r2, #1
 800af58:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800af5e:	2b01      	cmp	r3, #1
 800af60:	d137      	bne.n	800afd2 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	2100      	movs	r1, #0
 800af68:	4618      	mov	r0, r3
 800af6a:	f002 f9bb 	bl	800d2e4 <SDMMC_CmdAppCommand>
 800af6e:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800af70:	68fb      	ldr	r3, [r7, #12]
 800af72:	2b00      	cmp	r3, #0
 800af74:	d02d      	beq.n	800afd2 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800af76:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800af7a:	e047      	b.n	800b00c <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	681b      	ldr	r3, [r3, #0]
 800af80:	2100      	movs	r1, #0
 800af82:	4618      	mov	r0, r3
 800af84:	f002 f9ae 	bl	800d2e4 <SDMMC_CmdAppCommand>
 800af88:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800af8a:	68fb      	ldr	r3, [r7, #12]
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	d001      	beq.n	800af94 <SD_PowerON+0x98>
    {
      return errorstate;
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	e03b      	b.n	800b00c <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	491e      	ldr	r1, [pc, #120]	; (800b014 <SD_PowerON+0x118>)
 800af9a:	4618      	mov	r0, r3
 800af9c:	f002 f9c4 	bl	800d328 <SDMMC_CmdAppOperCommand>
 800afa0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800afa2:	68fb      	ldr	r3, [r7, #12]
 800afa4:	2b00      	cmp	r3, #0
 800afa6:	d002      	beq.n	800afae <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800afa8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800afac:	e02e      	b.n	800b00c <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	2100      	movs	r1, #0
 800afb4:	4618      	mov	r0, r3
 800afb6:	f002 f829 	bl	800d00c <SDIO_GetResponse>
 800afba:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800afbc:	697b      	ldr	r3, [r7, #20]
 800afbe:	0fdb      	lsrs	r3, r3, #31
 800afc0:	2b01      	cmp	r3, #1
 800afc2:	d101      	bne.n	800afc8 <SD_PowerON+0xcc>
 800afc4:	2301      	movs	r3, #1
 800afc6:	e000      	b.n	800afca <SD_PowerON+0xce>
 800afc8:	2300      	movs	r3, #0
 800afca:	613b      	str	r3, [r7, #16]

    count++;
 800afcc:	68bb      	ldr	r3, [r7, #8]
 800afce:	3301      	adds	r3, #1
 800afd0:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800afd2:	68bb      	ldr	r3, [r7, #8]
 800afd4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800afd8:	4293      	cmp	r3, r2
 800afda:	d802      	bhi.n	800afe2 <SD_PowerON+0xe6>
 800afdc:	693b      	ldr	r3, [r7, #16]
 800afde:	2b00      	cmp	r3, #0
 800afe0:	d0cc      	beq.n	800af7c <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800afe2:	68bb      	ldr	r3, [r7, #8]
 800afe4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800afe8:	4293      	cmp	r3, r2
 800afea:	d902      	bls.n	800aff2 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800afec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800aff0:	e00c      	b.n	800b00c <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800aff2:	697b      	ldr	r3, [r7, #20]
 800aff4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d003      	beq.n	800b004 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	2201      	movs	r2, #1
 800b000:	645a      	str	r2, [r3, #68]	; 0x44
 800b002:	e002      	b.n	800b00a <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	2200      	movs	r2, #0
 800b008:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800b00a:	2300      	movs	r3, #0
}
 800b00c:	4618      	mov	r0, r3
 800b00e:	3718      	adds	r7, #24
 800b010:	46bd      	mov	sp, r7
 800b012:	bd80      	pop	{r7, pc}
 800b014:	c1100000 	.word	0xc1100000

0800b018 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800b018:	b580      	push	{r7, lr}
 800b01a:	b084      	sub	sp, #16
 800b01c:	af00      	add	r7, sp, #0
 800b01e:	6078      	str	r0, [r7, #4]
 800b020:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800b022:	683b      	ldr	r3, [r7, #0]
 800b024:	2b00      	cmp	r3, #0
 800b026:	d102      	bne.n	800b02e <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800b028:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b02c:	e018      	b.n	800b060 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	681a      	ldr	r2, [r3, #0]
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b036:	041b      	lsls	r3, r3, #16
 800b038:	4619      	mov	r1, r3
 800b03a:	4610      	mov	r0, r2
 800b03c:	f002 fa38 	bl	800d4b0 <SDMMC_CmdSendStatus>
 800b040:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b042:	68fb      	ldr	r3, [r7, #12]
 800b044:	2b00      	cmp	r3, #0
 800b046:	d001      	beq.n	800b04c <SD_SendStatus+0x34>
  {
    return errorstate;
 800b048:	68fb      	ldr	r3, [r7, #12]
 800b04a:	e009      	b.n	800b060 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	2100      	movs	r1, #0
 800b052:	4618      	mov	r0, r3
 800b054:	f001 ffda 	bl	800d00c <SDIO_GetResponse>
 800b058:	4602      	mov	r2, r0
 800b05a:	683b      	ldr	r3, [r7, #0]
 800b05c:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800b05e:	2300      	movs	r3, #0
}
 800b060:	4618      	mov	r0, r3
 800b062:	3710      	adds	r7, #16
 800b064:	46bd      	mov	sp, r7
 800b066:	bd80      	pop	{r7, pc}

0800b068 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800b068:	b580      	push	{r7, lr}
 800b06a:	b086      	sub	sp, #24
 800b06c:	af00      	add	r7, sp, #0
 800b06e:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800b070:	2300      	movs	r3, #0
 800b072:	60fb      	str	r3, [r7, #12]
 800b074:	2300      	movs	r3, #0
 800b076:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	2100      	movs	r1, #0
 800b07e:	4618      	mov	r0, r3
 800b080:	f001 ffc4 	bl	800d00c <SDIO_GetResponse>
 800b084:	4603      	mov	r3, r0
 800b086:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b08a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b08e:	d102      	bne.n	800b096 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800b090:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b094:	e02f      	b.n	800b0f6 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800b096:	f107 030c 	add.w	r3, r7, #12
 800b09a:	4619      	mov	r1, r3
 800b09c:	6878      	ldr	r0, [r7, #4]
 800b09e:	f000 f879 	bl	800b194 <SD_FindSCR>
 800b0a2:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b0a4:	697b      	ldr	r3, [r7, #20]
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	d001      	beq.n	800b0ae <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800b0aa:	697b      	ldr	r3, [r7, #20]
 800b0ac:	e023      	b.n	800b0f6 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800b0ae:	693b      	ldr	r3, [r7, #16]
 800b0b0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	d01c      	beq.n	800b0f2 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	681a      	ldr	r2, [r3, #0]
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b0c0:	041b      	lsls	r3, r3, #16
 800b0c2:	4619      	mov	r1, r3
 800b0c4:	4610      	mov	r0, r2
 800b0c6:	f002 f90d 	bl	800d2e4 <SDMMC_CmdAppCommand>
 800b0ca:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b0cc:	697b      	ldr	r3, [r7, #20]
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	d001      	beq.n	800b0d6 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800b0d2:	697b      	ldr	r3, [r7, #20]
 800b0d4:	e00f      	b.n	800b0f6 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	681b      	ldr	r3, [r3, #0]
 800b0da:	2102      	movs	r1, #2
 800b0dc:	4618      	mov	r0, r3
 800b0de:	f002 f946 	bl	800d36e <SDMMC_CmdBusWidth>
 800b0e2:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b0e4:	697b      	ldr	r3, [r7, #20]
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	d001      	beq.n	800b0ee <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800b0ea:	697b      	ldr	r3, [r7, #20]
 800b0ec:	e003      	b.n	800b0f6 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800b0ee:	2300      	movs	r3, #0
 800b0f0:	e001      	b.n	800b0f6 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800b0f2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800b0f6:	4618      	mov	r0, r3
 800b0f8:	3718      	adds	r7, #24
 800b0fa:	46bd      	mov	sp, r7
 800b0fc:	bd80      	pop	{r7, pc}

0800b0fe <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800b0fe:	b580      	push	{r7, lr}
 800b100:	b086      	sub	sp, #24
 800b102:	af00      	add	r7, sp, #0
 800b104:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800b106:	2300      	movs	r3, #0
 800b108:	60fb      	str	r3, [r7, #12]
 800b10a:	2300      	movs	r3, #0
 800b10c:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	681b      	ldr	r3, [r3, #0]
 800b112:	2100      	movs	r1, #0
 800b114:	4618      	mov	r0, r3
 800b116:	f001 ff79 	bl	800d00c <SDIO_GetResponse>
 800b11a:	4603      	mov	r3, r0
 800b11c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b120:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b124:	d102      	bne.n	800b12c <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800b126:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b12a:	e02f      	b.n	800b18c <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800b12c:	f107 030c 	add.w	r3, r7, #12
 800b130:	4619      	mov	r1, r3
 800b132:	6878      	ldr	r0, [r7, #4]
 800b134:	f000 f82e 	bl	800b194 <SD_FindSCR>
 800b138:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b13a:	697b      	ldr	r3, [r7, #20]
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	d001      	beq.n	800b144 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800b140:	697b      	ldr	r3, [r7, #20]
 800b142:	e023      	b.n	800b18c <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800b144:	693b      	ldr	r3, [r7, #16]
 800b146:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	d01c      	beq.n	800b188 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	681a      	ldr	r2, [r3, #0]
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b156:	041b      	lsls	r3, r3, #16
 800b158:	4619      	mov	r1, r3
 800b15a:	4610      	mov	r0, r2
 800b15c:	f002 f8c2 	bl	800d2e4 <SDMMC_CmdAppCommand>
 800b160:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b162:	697b      	ldr	r3, [r7, #20]
 800b164:	2b00      	cmp	r3, #0
 800b166:	d001      	beq.n	800b16c <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800b168:	697b      	ldr	r3, [r7, #20]
 800b16a:	e00f      	b.n	800b18c <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	2100      	movs	r1, #0
 800b172:	4618      	mov	r0, r3
 800b174:	f002 f8fb 	bl	800d36e <SDMMC_CmdBusWidth>
 800b178:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b17a:	697b      	ldr	r3, [r7, #20]
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	d001      	beq.n	800b184 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800b180:	697b      	ldr	r3, [r7, #20]
 800b182:	e003      	b.n	800b18c <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800b184:	2300      	movs	r3, #0
 800b186:	e001      	b.n	800b18c <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800b188:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800b18c:	4618      	mov	r0, r3
 800b18e:	3718      	adds	r7, #24
 800b190:	46bd      	mov	sp, r7
 800b192:	bd80      	pop	{r7, pc}

0800b194 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800b194:	b590      	push	{r4, r7, lr}
 800b196:	b08f      	sub	sp, #60	; 0x3c
 800b198:	af00      	add	r7, sp, #0
 800b19a:	6078      	str	r0, [r7, #4]
 800b19c:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800b19e:	f7f9 f8ab 	bl	80042f8 <HAL_GetTick>
 800b1a2:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800b1a4:	2300      	movs	r3, #0
 800b1a6:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800b1a8:	2300      	movs	r3, #0
 800b1aa:	60bb      	str	r3, [r7, #8]
 800b1ac:	2300      	movs	r3, #0
 800b1ae:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800b1b0:	683b      	ldr	r3, [r7, #0]
 800b1b2:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	2108      	movs	r1, #8
 800b1ba:	4618      	mov	r0, r3
 800b1bc:	f001 ff65 	bl	800d08a <SDMMC_CmdBlockLength>
 800b1c0:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800b1c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	d001      	beq.n	800b1cc <SD_FindSCR+0x38>
  {
    return errorstate;
 800b1c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1ca:	e0b2      	b.n	800b332 <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	681a      	ldr	r2, [r3, #0]
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b1d4:	041b      	lsls	r3, r3, #16
 800b1d6:	4619      	mov	r1, r3
 800b1d8:	4610      	mov	r0, r2
 800b1da:	f002 f883 	bl	800d2e4 <SDMMC_CmdAppCommand>
 800b1de:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800b1e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1e2:	2b00      	cmp	r3, #0
 800b1e4:	d001      	beq.n	800b1ea <SD_FindSCR+0x56>
  {
    return errorstate;
 800b1e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1e8:	e0a3      	b.n	800b332 <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800b1ea:	f04f 33ff 	mov.w	r3, #4294967295
 800b1ee:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800b1f0:	2308      	movs	r3, #8
 800b1f2:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 800b1f4:	2330      	movs	r3, #48	; 0x30
 800b1f6:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800b1f8:	2302      	movs	r3, #2
 800b1fa:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800b1fc:	2300      	movs	r3, #0
 800b1fe:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 800b200:	2301      	movs	r3, #1
 800b202:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	681b      	ldr	r3, [r3, #0]
 800b208:	f107 0210 	add.w	r2, r7, #16
 800b20c:	4611      	mov	r1, r2
 800b20e:	4618      	mov	r0, r3
 800b210:	f001 ff0f 	bl	800d032 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	681b      	ldr	r3, [r3, #0]
 800b218:	4618      	mov	r0, r3
 800b21a:	f002 f8ca 	bl	800d3b2 <SDMMC_CmdSendSCR>
 800b21e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800b220:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b222:	2b00      	cmp	r3, #0
 800b224:	d02a      	beq.n	800b27c <SD_FindSCR+0xe8>
  {
    return errorstate;
 800b226:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b228:	e083      	b.n	800b332 <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	681b      	ldr	r3, [r3, #0]
 800b22e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b230:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b234:	2b00      	cmp	r3, #0
 800b236:	d00f      	beq.n	800b258 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	6819      	ldr	r1, [r3, #0]
 800b23c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b23e:	009b      	lsls	r3, r3, #2
 800b240:	f107 0208 	add.w	r2, r7, #8
 800b244:	18d4      	adds	r4, r2, r3
 800b246:	4608      	mov	r0, r1
 800b248:	f001 fe6f 	bl	800cf2a <SDIO_ReadFIFO>
 800b24c:	4603      	mov	r3, r0
 800b24e:	6023      	str	r3, [r4, #0]
      index++;
 800b250:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b252:	3301      	adds	r3, #1
 800b254:	637b      	str	r3, [r7, #52]	; 0x34
 800b256:	e006      	b.n	800b266 <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b25e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b262:	2b00      	cmp	r3, #0
 800b264:	d012      	beq.n	800b28c <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800b266:	f7f9 f847 	bl	80042f8 <HAL_GetTick>
 800b26a:	4602      	mov	r2, r0
 800b26c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b26e:	1ad3      	subs	r3, r2, r3
 800b270:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b274:	d102      	bne.n	800b27c <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800b276:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b27a:	e05a      	b.n	800b332 <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	681b      	ldr	r3, [r3, #0]
 800b280:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b282:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 800b286:	2b00      	cmp	r3, #0
 800b288:	d0cf      	beq.n	800b22a <SD_FindSCR+0x96>
 800b28a:	e000      	b.n	800b28e <SD_FindSCR+0xfa>
      break;
 800b28c:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	681b      	ldr	r3, [r3, #0]
 800b292:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b294:	f003 0308 	and.w	r3, r3, #8
 800b298:	2b00      	cmp	r3, #0
 800b29a:	d005      	beq.n	800b2a8 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	681b      	ldr	r3, [r3, #0]
 800b2a0:	2208      	movs	r2, #8
 800b2a2:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800b2a4:	2308      	movs	r3, #8
 800b2a6:	e044      	b.n	800b332 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	681b      	ldr	r3, [r3, #0]
 800b2ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b2ae:	f003 0302 	and.w	r3, r3, #2
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	d005      	beq.n	800b2c2 <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	681b      	ldr	r3, [r3, #0]
 800b2ba:	2202      	movs	r2, #2
 800b2bc:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800b2be:	2302      	movs	r3, #2
 800b2c0:	e037      	b.n	800b332 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	681b      	ldr	r3, [r3, #0]
 800b2c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b2c8:	f003 0320 	and.w	r3, r3, #32
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	d005      	beq.n	800b2dc <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	681b      	ldr	r3, [r3, #0]
 800b2d4:	2220      	movs	r2, #32
 800b2d6:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800b2d8:	2320      	movs	r3, #32
 800b2da:	e02a      	b.n	800b332 <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	f240 523a 	movw	r2, #1338	; 0x53a
 800b2e4:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800b2e6:	68fb      	ldr	r3, [r7, #12]
 800b2e8:	061a      	lsls	r2, r3, #24
 800b2ea:	68fb      	ldr	r3, [r7, #12]
 800b2ec:	021b      	lsls	r3, r3, #8
 800b2ee:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b2f2:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800b2f4:	68fb      	ldr	r3, [r7, #12]
 800b2f6:	0a1b      	lsrs	r3, r3, #8
 800b2f8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800b2fc:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800b2fe:	68fb      	ldr	r3, [r7, #12]
 800b300:	0e1b      	lsrs	r3, r3, #24
 800b302:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800b304:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b306:	601a      	str	r2, [r3, #0]
    scr++;
 800b308:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b30a:	3304      	adds	r3, #4
 800b30c:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800b30e:	68bb      	ldr	r3, [r7, #8]
 800b310:	061a      	lsls	r2, r3, #24
 800b312:	68bb      	ldr	r3, [r7, #8]
 800b314:	021b      	lsls	r3, r3, #8
 800b316:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b31a:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800b31c:	68bb      	ldr	r3, [r7, #8]
 800b31e:	0a1b      	lsrs	r3, r3, #8
 800b320:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800b324:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800b326:	68bb      	ldr	r3, [r7, #8]
 800b328:	0e1b      	lsrs	r3, r3, #24
 800b32a:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800b32c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b32e:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800b330:	2300      	movs	r3, #0
}
 800b332:	4618      	mov	r0, r3
 800b334:	373c      	adds	r7, #60	; 0x3c
 800b336:	46bd      	mov	sp, r7
 800b338:	bd90      	pop	{r4, r7, pc}

0800b33a <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800b33a:	b580      	push	{r7, lr}
 800b33c:	b086      	sub	sp, #24
 800b33e:	af00      	add	r7, sp, #0
 800b340:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b346:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b34c:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800b34e:	693b      	ldr	r3, [r7, #16]
 800b350:	2b00      	cmp	r3, #0
 800b352:	d03f      	beq.n	800b3d4 <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800b354:	2300      	movs	r3, #0
 800b356:	617b      	str	r3, [r7, #20]
 800b358:	e033      	b.n	800b3c2 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	681b      	ldr	r3, [r3, #0]
 800b35e:	4618      	mov	r0, r3
 800b360:	f001 fde3 	bl	800cf2a <SDIO_ReadFIFO>
 800b364:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 800b366:	68bb      	ldr	r3, [r7, #8]
 800b368:	b2da      	uxtb	r2, r3
 800b36a:	68fb      	ldr	r3, [r7, #12]
 800b36c:	701a      	strb	r2, [r3, #0]
      tmp++;
 800b36e:	68fb      	ldr	r3, [r7, #12]
 800b370:	3301      	adds	r3, #1
 800b372:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800b374:	693b      	ldr	r3, [r7, #16]
 800b376:	3b01      	subs	r3, #1
 800b378:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800b37a:	68bb      	ldr	r3, [r7, #8]
 800b37c:	0a1b      	lsrs	r3, r3, #8
 800b37e:	b2da      	uxtb	r2, r3
 800b380:	68fb      	ldr	r3, [r7, #12]
 800b382:	701a      	strb	r2, [r3, #0]
      tmp++;
 800b384:	68fb      	ldr	r3, [r7, #12]
 800b386:	3301      	adds	r3, #1
 800b388:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800b38a:	693b      	ldr	r3, [r7, #16]
 800b38c:	3b01      	subs	r3, #1
 800b38e:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800b390:	68bb      	ldr	r3, [r7, #8]
 800b392:	0c1b      	lsrs	r3, r3, #16
 800b394:	b2da      	uxtb	r2, r3
 800b396:	68fb      	ldr	r3, [r7, #12]
 800b398:	701a      	strb	r2, [r3, #0]
      tmp++;
 800b39a:	68fb      	ldr	r3, [r7, #12]
 800b39c:	3301      	adds	r3, #1
 800b39e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800b3a0:	693b      	ldr	r3, [r7, #16]
 800b3a2:	3b01      	subs	r3, #1
 800b3a4:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800b3a6:	68bb      	ldr	r3, [r7, #8]
 800b3a8:	0e1b      	lsrs	r3, r3, #24
 800b3aa:	b2da      	uxtb	r2, r3
 800b3ac:	68fb      	ldr	r3, [r7, #12]
 800b3ae:	701a      	strb	r2, [r3, #0]
      tmp++;
 800b3b0:	68fb      	ldr	r3, [r7, #12]
 800b3b2:	3301      	adds	r3, #1
 800b3b4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800b3b6:	693b      	ldr	r3, [r7, #16]
 800b3b8:	3b01      	subs	r3, #1
 800b3ba:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800b3bc:	697b      	ldr	r3, [r7, #20]
 800b3be:	3301      	adds	r3, #1
 800b3c0:	617b      	str	r3, [r7, #20]
 800b3c2:	697b      	ldr	r3, [r7, #20]
 800b3c4:	2b07      	cmp	r3, #7
 800b3c6:	d9c8      	bls.n	800b35a <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	68fa      	ldr	r2, [r7, #12]
 800b3cc:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	693a      	ldr	r2, [r7, #16]
 800b3d2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 800b3d4:	bf00      	nop
 800b3d6:	3718      	adds	r7, #24
 800b3d8:	46bd      	mov	sp, r7
 800b3da:	bd80      	pop	{r7, pc}

0800b3dc <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800b3dc:	b580      	push	{r7, lr}
 800b3de:	b086      	sub	sp, #24
 800b3e0:	af00      	add	r7, sp, #0
 800b3e2:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	6a1b      	ldr	r3, [r3, #32]
 800b3e8:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3ee:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800b3f0:	693b      	ldr	r3, [r7, #16]
 800b3f2:	2b00      	cmp	r3, #0
 800b3f4:	d043      	beq.n	800b47e <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800b3f6:	2300      	movs	r3, #0
 800b3f8:	617b      	str	r3, [r7, #20]
 800b3fa:	e037      	b.n	800b46c <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800b3fc:	68fb      	ldr	r3, [r7, #12]
 800b3fe:	781b      	ldrb	r3, [r3, #0]
 800b400:	60bb      	str	r3, [r7, #8]
      tmp++;
 800b402:	68fb      	ldr	r3, [r7, #12]
 800b404:	3301      	adds	r3, #1
 800b406:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800b408:	693b      	ldr	r3, [r7, #16]
 800b40a:	3b01      	subs	r3, #1
 800b40c:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800b40e:	68fb      	ldr	r3, [r7, #12]
 800b410:	781b      	ldrb	r3, [r3, #0]
 800b412:	021a      	lsls	r2, r3, #8
 800b414:	68bb      	ldr	r3, [r7, #8]
 800b416:	4313      	orrs	r3, r2
 800b418:	60bb      	str	r3, [r7, #8]
      tmp++;
 800b41a:	68fb      	ldr	r3, [r7, #12]
 800b41c:	3301      	adds	r3, #1
 800b41e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800b420:	693b      	ldr	r3, [r7, #16]
 800b422:	3b01      	subs	r3, #1
 800b424:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800b426:	68fb      	ldr	r3, [r7, #12]
 800b428:	781b      	ldrb	r3, [r3, #0]
 800b42a:	041a      	lsls	r2, r3, #16
 800b42c:	68bb      	ldr	r3, [r7, #8]
 800b42e:	4313      	orrs	r3, r2
 800b430:	60bb      	str	r3, [r7, #8]
      tmp++;
 800b432:	68fb      	ldr	r3, [r7, #12]
 800b434:	3301      	adds	r3, #1
 800b436:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800b438:	693b      	ldr	r3, [r7, #16]
 800b43a:	3b01      	subs	r3, #1
 800b43c:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800b43e:	68fb      	ldr	r3, [r7, #12]
 800b440:	781b      	ldrb	r3, [r3, #0]
 800b442:	061a      	lsls	r2, r3, #24
 800b444:	68bb      	ldr	r3, [r7, #8]
 800b446:	4313      	orrs	r3, r2
 800b448:	60bb      	str	r3, [r7, #8]
      tmp++;
 800b44a:	68fb      	ldr	r3, [r7, #12]
 800b44c:	3301      	adds	r3, #1
 800b44e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800b450:	693b      	ldr	r3, [r7, #16]
 800b452:	3b01      	subs	r3, #1
 800b454:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	681b      	ldr	r3, [r3, #0]
 800b45a:	f107 0208 	add.w	r2, r7, #8
 800b45e:	4611      	mov	r1, r2
 800b460:	4618      	mov	r0, r3
 800b462:	f001 fd6f 	bl	800cf44 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800b466:	697b      	ldr	r3, [r7, #20]
 800b468:	3301      	adds	r3, #1
 800b46a:	617b      	str	r3, [r7, #20]
 800b46c:	697b      	ldr	r3, [r7, #20]
 800b46e:	2b07      	cmp	r3, #7
 800b470:	d9c4      	bls.n	800b3fc <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	68fa      	ldr	r2, [r7, #12]
 800b476:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	693a      	ldr	r2, [r7, #16]
 800b47c:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800b47e:	bf00      	nop
 800b480:	3718      	adds	r7, #24
 800b482:	46bd      	mov	sp, r7
 800b484:	bd80      	pop	{r7, pc}

0800b486 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b486:	b580      	push	{r7, lr}
 800b488:	b082      	sub	sp, #8
 800b48a:	af00      	add	r7, sp, #0
 800b48c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	2b00      	cmp	r3, #0
 800b492:	d101      	bne.n	800b498 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b494:	2301      	movs	r3, #1
 800b496:	e041      	b.n	800b51c <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b49e:	b2db      	uxtb	r3, r3
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	d106      	bne.n	800b4b2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	2200      	movs	r2, #0
 800b4a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b4ac:	6878      	ldr	r0, [r7, #4]
 800b4ae:	f7f8 fccf 	bl	8003e50 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	2202      	movs	r2, #2
 800b4b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	681a      	ldr	r2, [r3, #0]
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	3304      	adds	r3, #4
 800b4c2:	4619      	mov	r1, r3
 800b4c4:	4610      	mov	r0, r2
 800b4c6:	f000 fac3 	bl	800ba50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	2201      	movs	r2, #1
 800b4ce:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	2201      	movs	r2, #1
 800b4d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	2201      	movs	r2, #1
 800b4de:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	2201      	movs	r2, #1
 800b4e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	2201      	movs	r2, #1
 800b4ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	2201      	movs	r2, #1
 800b4f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	2201      	movs	r2, #1
 800b4fe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	2201      	movs	r2, #1
 800b506:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	2201      	movs	r2, #1
 800b50e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	2201      	movs	r2, #1
 800b516:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b51a:	2300      	movs	r3, #0
}
 800b51c:	4618      	mov	r0, r3
 800b51e:	3708      	adds	r7, #8
 800b520:	46bd      	mov	sp, r7
 800b522:	bd80      	pop	{r7, pc}

0800b524 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b524:	b480      	push	{r7}
 800b526:	b085      	sub	sp, #20
 800b528:	af00      	add	r7, sp, #0
 800b52a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b532:	b2db      	uxtb	r3, r3
 800b534:	2b01      	cmp	r3, #1
 800b536:	d001      	beq.n	800b53c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b538:	2301      	movs	r3, #1
 800b53a:	e04e      	b.n	800b5da <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	2202      	movs	r2, #2
 800b540:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	681b      	ldr	r3, [r3, #0]
 800b548:	68da      	ldr	r2, [r3, #12]
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	681b      	ldr	r3, [r3, #0]
 800b54e:	f042 0201 	orr.w	r2, r2, #1
 800b552:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	681b      	ldr	r3, [r3, #0]
 800b558:	4a23      	ldr	r2, [pc, #140]	; (800b5e8 <HAL_TIM_Base_Start_IT+0xc4>)
 800b55a:	4293      	cmp	r3, r2
 800b55c:	d022      	beq.n	800b5a4 <HAL_TIM_Base_Start_IT+0x80>
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	681b      	ldr	r3, [r3, #0]
 800b562:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b566:	d01d      	beq.n	800b5a4 <HAL_TIM_Base_Start_IT+0x80>
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	4a1f      	ldr	r2, [pc, #124]	; (800b5ec <HAL_TIM_Base_Start_IT+0xc8>)
 800b56e:	4293      	cmp	r3, r2
 800b570:	d018      	beq.n	800b5a4 <HAL_TIM_Base_Start_IT+0x80>
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	681b      	ldr	r3, [r3, #0]
 800b576:	4a1e      	ldr	r2, [pc, #120]	; (800b5f0 <HAL_TIM_Base_Start_IT+0xcc>)
 800b578:	4293      	cmp	r3, r2
 800b57a:	d013      	beq.n	800b5a4 <HAL_TIM_Base_Start_IT+0x80>
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	681b      	ldr	r3, [r3, #0]
 800b580:	4a1c      	ldr	r2, [pc, #112]	; (800b5f4 <HAL_TIM_Base_Start_IT+0xd0>)
 800b582:	4293      	cmp	r3, r2
 800b584:	d00e      	beq.n	800b5a4 <HAL_TIM_Base_Start_IT+0x80>
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	4a1b      	ldr	r2, [pc, #108]	; (800b5f8 <HAL_TIM_Base_Start_IT+0xd4>)
 800b58c:	4293      	cmp	r3, r2
 800b58e:	d009      	beq.n	800b5a4 <HAL_TIM_Base_Start_IT+0x80>
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	681b      	ldr	r3, [r3, #0]
 800b594:	4a19      	ldr	r2, [pc, #100]	; (800b5fc <HAL_TIM_Base_Start_IT+0xd8>)
 800b596:	4293      	cmp	r3, r2
 800b598:	d004      	beq.n	800b5a4 <HAL_TIM_Base_Start_IT+0x80>
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	681b      	ldr	r3, [r3, #0]
 800b59e:	4a18      	ldr	r2, [pc, #96]	; (800b600 <HAL_TIM_Base_Start_IT+0xdc>)
 800b5a0:	4293      	cmp	r3, r2
 800b5a2:	d111      	bne.n	800b5c8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	681b      	ldr	r3, [r3, #0]
 800b5a8:	689b      	ldr	r3, [r3, #8]
 800b5aa:	f003 0307 	and.w	r3, r3, #7
 800b5ae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b5b0:	68fb      	ldr	r3, [r7, #12]
 800b5b2:	2b06      	cmp	r3, #6
 800b5b4:	d010      	beq.n	800b5d8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	681b      	ldr	r3, [r3, #0]
 800b5ba:	681a      	ldr	r2, [r3, #0]
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	681b      	ldr	r3, [r3, #0]
 800b5c0:	f042 0201 	orr.w	r2, r2, #1
 800b5c4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b5c6:	e007      	b.n	800b5d8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	681b      	ldr	r3, [r3, #0]
 800b5cc:	681a      	ldr	r2, [r3, #0]
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	681b      	ldr	r3, [r3, #0]
 800b5d2:	f042 0201 	orr.w	r2, r2, #1
 800b5d6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b5d8:	2300      	movs	r3, #0
}
 800b5da:	4618      	mov	r0, r3
 800b5dc:	3714      	adds	r7, #20
 800b5de:	46bd      	mov	sp, r7
 800b5e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5e4:	4770      	bx	lr
 800b5e6:	bf00      	nop
 800b5e8:	40010000 	.word	0x40010000
 800b5ec:	40000400 	.word	0x40000400
 800b5f0:	40000800 	.word	0x40000800
 800b5f4:	40000c00 	.word	0x40000c00
 800b5f8:	40010400 	.word	0x40010400
 800b5fc:	40014000 	.word	0x40014000
 800b600:	40001800 	.word	0x40001800

0800b604 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800b604:	b480      	push	{r7}
 800b606:	b083      	sub	sp, #12
 800b608:	af00      	add	r7, sp, #0
 800b60a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	681b      	ldr	r3, [r3, #0]
 800b610:	68da      	ldr	r2, [r3, #12]
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	681b      	ldr	r3, [r3, #0]
 800b616:	f022 0201 	bic.w	r2, r2, #1
 800b61a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	681b      	ldr	r3, [r3, #0]
 800b620:	6a1a      	ldr	r2, [r3, #32]
 800b622:	f241 1311 	movw	r3, #4369	; 0x1111
 800b626:	4013      	ands	r3, r2
 800b628:	2b00      	cmp	r3, #0
 800b62a:	d10f      	bne.n	800b64c <HAL_TIM_Base_Stop_IT+0x48>
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	6a1a      	ldr	r2, [r3, #32]
 800b632:	f240 4344 	movw	r3, #1092	; 0x444
 800b636:	4013      	ands	r3, r2
 800b638:	2b00      	cmp	r3, #0
 800b63a:	d107      	bne.n	800b64c <HAL_TIM_Base_Stop_IT+0x48>
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	681b      	ldr	r3, [r3, #0]
 800b640:	681a      	ldr	r2, [r3, #0]
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	681b      	ldr	r3, [r3, #0]
 800b646:	f022 0201 	bic.w	r2, r2, #1
 800b64a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	2201      	movs	r2, #1
 800b650:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800b654:	2300      	movs	r3, #0
}
 800b656:	4618      	mov	r0, r3
 800b658:	370c      	adds	r7, #12
 800b65a:	46bd      	mov	sp, r7
 800b65c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b660:	4770      	bx	lr

0800b662 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b662:	b580      	push	{r7, lr}
 800b664:	b082      	sub	sp, #8
 800b666:	af00      	add	r7, sp, #0
 800b668:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	681b      	ldr	r3, [r3, #0]
 800b66e:	691b      	ldr	r3, [r3, #16]
 800b670:	f003 0302 	and.w	r3, r3, #2
 800b674:	2b02      	cmp	r3, #2
 800b676:	d122      	bne.n	800b6be <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	681b      	ldr	r3, [r3, #0]
 800b67c:	68db      	ldr	r3, [r3, #12]
 800b67e:	f003 0302 	and.w	r3, r3, #2
 800b682:	2b02      	cmp	r3, #2
 800b684:	d11b      	bne.n	800b6be <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	681b      	ldr	r3, [r3, #0]
 800b68a:	f06f 0202 	mvn.w	r2, #2
 800b68e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	2201      	movs	r2, #1
 800b694:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	681b      	ldr	r3, [r3, #0]
 800b69a:	699b      	ldr	r3, [r3, #24]
 800b69c:	f003 0303 	and.w	r3, r3, #3
 800b6a0:	2b00      	cmp	r3, #0
 800b6a2:	d003      	beq.n	800b6ac <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b6a4:	6878      	ldr	r0, [r7, #4]
 800b6a6:	f000 f9b5 	bl	800ba14 <HAL_TIM_IC_CaptureCallback>
 800b6aa:	e005      	b.n	800b6b8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b6ac:	6878      	ldr	r0, [r7, #4]
 800b6ae:	f000 f9a7 	bl	800ba00 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b6b2:	6878      	ldr	r0, [r7, #4]
 800b6b4:	f000 f9b8 	bl	800ba28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	2200      	movs	r2, #0
 800b6bc:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	681b      	ldr	r3, [r3, #0]
 800b6c2:	691b      	ldr	r3, [r3, #16]
 800b6c4:	f003 0304 	and.w	r3, r3, #4
 800b6c8:	2b04      	cmp	r3, #4
 800b6ca:	d122      	bne.n	800b712 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	681b      	ldr	r3, [r3, #0]
 800b6d0:	68db      	ldr	r3, [r3, #12]
 800b6d2:	f003 0304 	and.w	r3, r3, #4
 800b6d6:	2b04      	cmp	r3, #4
 800b6d8:	d11b      	bne.n	800b712 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	681b      	ldr	r3, [r3, #0]
 800b6de:	f06f 0204 	mvn.w	r2, #4
 800b6e2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	2202      	movs	r2, #2
 800b6e8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	681b      	ldr	r3, [r3, #0]
 800b6ee:	699b      	ldr	r3, [r3, #24]
 800b6f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b6f4:	2b00      	cmp	r3, #0
 800b6f6:	d003      	beq.n	800b700 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b6f8:	6878      	ldr	r0, [r7, #4]
 800b6fa:	f000 f98b 	bl	800ba14 <HAL_TIM_IC_CaptureCallback>
 800b6fe:	e005      	b.n	800b70c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b700:	6878      	ldr	r0, [r7, #4]
 800b702:	f000 f97d 	bl	800ba00 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b706:	6878      	ldr	r0, [r7, #4]
 800b708:	f000 f98e 	bl	800ba28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	2200      	movs	r2, #0
 800b710:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	681b      	ldr	r3, [r3, #0]
 800b716:	691b      	ldr	r3, [r3, #16]
 800b718:	f003 0308 	and.w	r3, r3, #8
 800b71c:	2b08      	cmp	r3, #8
 800b71e:	d122      	bne.n	800b766 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	681b      	ldr	r3, [r3, #0]
 800b724:	68db      	ldr	r3, [r3, #12]
 800b726:	f003 0308 	and.w	r3, r3, #8
 800b72a:	2b08      	cmp	r3, #8
 800b72c:	d11b      	bne.n	800b766 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	681b      	ldr	r3, [r3, #0]
 800b732:	f06f 0208 	mvn.w	r2, #8
 800b736:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	2204      	movs	r2, #4
 800b73c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	681b      	ldr	r3, [r3, #0]
 800b742:	69db      	ldr	r3, [r3, #28]
 800b744:	f003 0303 	and.w	r3, r3, #3
 800b748:	2b00      	cmp	r3, #0
 800b74a:	d003      	beq.n	800b754 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b74c:	6878      	ldr	r0, [r7, #4]
 800b74e:	f000 f961 	bl	800ba14 <HAL_TIM_IC_CaptureCallback>
 800b752:	e005      	b.n	800b760 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b754:	6878      	ldr	r0, [r7, #4]
 800b756:	f000 f953 	bl	800ba00 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b75a:	6878      	ldr	r0, [r7, #4]
 800b75c:	f000 f964 	bl	800ba28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	2200      	movs	r2, #0
 800b764:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	691b      	ldr	r3, [r3, #16]
 800b76c:	f003 0310 	and.w	r3, r3, #16
 800b770:	2b10      	cmp	r3, #16
 800b772:	d122      	bne.n	800b7ba <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	681b      	ldr	r3, [r3, #0]
 800b778:	68db      	ldr	r3, [r3, #12]
 800b77a:	f003 0310 	and.w	r3, r3, #16
 800b77e:	2b10      	cmp	r3, #16
 800b780:	d11b      	bne.n	800b7ba <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	681b      	ldr	r3, [r3, #0]
 800b786:	f06f 0210 	mvn.w	r2, #16
 800b78a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	2208      	movs	r2, #8
 800b790:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	681b      	ldr	r3, [r3, #0]
 800b796:	69db      	ldr	r3, [r3, #28]
 800b798:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b79c:	2b00      	cmp	r3, #0
 800b79e:	d003      	beq.n	800b7a8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b7a0:	6878      	ldr	r0, [r7, #4]
 800b7a2:	f000 f937 	bl	800ba14 <HAL_TIM_IC_CaptureCallback>
 800b7a6:	e005      	b.n	800b7b4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b7a8:	6878      	ldr	r0, [r7, #4]
 800b7aa:	f000 f929 	bl	800ba00 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b7ae:	6878      	ldr	r0, [r7, #4]
 800b7b0:	f000 f93a 	bl	800ba28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	2200      	movs	r2, #0
 800b7b8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	681b      	ldr	r3, [r3, #0]
 800b7be:	691b      	ldr	r3, [r3, #16]
 800b7c0:	f003 0301 	and.w	r3, r3, #1
 800b7c4:	2b01      	cmp	r3, #1
 800b7c6:	d10e      	bne.n	800b7e6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	681b      	ldr	r3, [r3, #0]
 800b7cc:	68db      	ldr	r3, [r3, #12]
 800b7ce:	f003 0301 	and.w	r3, r3, #1
 800b7d2:	2b01      	cmp	r3, #1
 800b7d4:	d107      	bne.n	800b7e6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	681b      	ldr	r3, [r3, #0]
 800b7da:	f06f 0201 	mvn.w	r2, #1
 800b7de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b7e0:	6878      	ldr	r0, [r7, #4]
 800b7e2:	f7f7 f9ef 	bl	8002bc4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	681b      	ldr	r3, [r3, #0]
 800b7ea:	691b      	ldr	r3, [r3, #16]
 800b7ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b7f0:	2b80      	cmp	r3, #128	; 0x80
 800b7f2:	d10e      	bne.n	800b812 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	681b      	ldr	r3, [r3, #0]
 800b7f8:	68db      	ldr	r3, [r3, #12]
 800b7fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b7fe:	2b80      	cmp	r3, #128	; 0x80
 800b800:	d107      	bne.n	800b812 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	681b      	ldr	r3, [r3, #0]
 800b806:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800b80a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b80c:	6878      	ldr	r0, [r7, #4]
 800b80e:	f000 fadf 	bl	800bdd0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	681b      	ldr	r3, [r3, #0]
 800b816:	691b      	ldr	r3, [r3, #16]
 800b818:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b81c:	2b40      	cmp	r3, #64	; 0x40
 800b81e:	d10e      	bne.n	800b83e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	681b      	ldr	r3, [r3, #0]
 800b824:	68db      	ldr	r3, [r3, #12]
 800b826:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b82a:	2b40      	cmp	r3, #64	; 0x40
 800b82c:	d107      	bne.n	800b83e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	681b      	ldr	r3, [r3, #0]
 800b832:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b836:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b838:	6878      	ldr	r0, [r7, #4]
 800b83a:	f000 f8ff 	bl	800ba3c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	681b      	ldr	r3, [r3, #0]
 800b842:	691b      	ldr	r3, [r3, #16]
 800b844:	f003 0320 	and.w	r3, r3, #32
 800b848:	2b20      	cmp	r3, #32
 800b84a:	d10e      	bne.n	800b86a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	681b      	ldr	r3, [r3, #0]
 800b850:	68db      	ldr	r3, [r3, #12]
 800b852:	f003 0320 	and.w	r3, r3, #32
 800b856:	2b20      	cmp	r3, #32
 800b858:	d107      	bne.n	800b86a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	681b      	ldr	r3, [r3, #0]
 800b85e:	f06f 0220 	mvn.w	r2, #32
 800b862:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b864:	6878      	ldr	r0, [r7, #4]
 800b866:	f000 faa9 	bl	800bdbc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b86a:	bf00      	nop
 800b86c:	3708      	adds	r7, #8
 800b86e:	46bd      	mov	sp, r7
 800b870:	bd80      	pop	{r7, pc}

0800b872 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b872:	b580      	push	{r7, lr}
 800b874:	b084      	sub	sp, #16
 800b876:	af00      	add	r7, sp, #0
 800b878:	6078      	str	r0, [r7, #4]
 800b87a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b87c:	2300      	movs	r3, #0
 800b87e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b886:	2b01      	cmp	r3, #1
 800b888:	d101      	bne.n	800b88e <HAL_TIM_ConfigClockSource+0x1c>
 800b88a:	2302      	movs	r3, #2
 800b88c:	e0b4      	b.n	800b9f8 <HAL_TIM_ConfigClockSource+0x186>
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	2201      	movs	r2, #1
 800b892:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	2202      	movs	r2, #2
 800b89a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	681b      	ldr	r3, [r3, #0]
 800b8a2:	689b      	ldr	r3, [r3, #8]
 800b8a4:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b8a6:	68bb      	ldr	r3, [r7, #8]
 800b8a8:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800b8ac:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b8ae:	68bb      	ldr	r3, [r7, #8]
 800b8b0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b8b4:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	681b      	ldr	r3, [r3, #0]
 800b8ba:	68ba      	ldr	r2, [r7, #8]
 800b8bc:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b8be:	683b      	ldr	r3, [r7, #0]
 800b8c0:	681b      	ldr	r3, [r3, #0]
 800b8c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b8c6:	d03e      	beq.n	800b946 <HAL_TIM_ConfigClockSource+0xd4>
 800b8c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b8cc:	f200 8087 	bhi.w	800b9de <HAL_TIM_ConfigClockSource+0x16c>
 800b8d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b8d4:	f000 8086 	beq.w	800b9e4 <HAL_TIM_ConfigClockSource+0x172>
 800b8d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b8dc:	d87f      	bhi.n	800b9de <HAL_TIM_ConfigClockSource+0x16c>
 800b8de:	2b70      	cmp	r3, #112	; 0x70
 800b8e0:	d01a      	beq.n	800b918 <HAL_TIM_ConfigClockSource+0xa6>
 800b8e2:	2b70      	cmp	r3, #112	; 0x70
 800b8e4:	d87b      	bhi.n	800b9de <HAL_TIM_ConfigClockSource+0x16c>
 800b8e6:	2b60      	cmp	r3, #96	; 0x60
 800b8e8:	d050      	beq.n	800b98c <HAL_TIM_ConfigClockSource+0x11a>
 800b8ea:	2b60      	cmp	r3, #96	; 0x60
 800b8ec:	d877      	bhi.n	800b9de <HAL_TIM_ConfigClockSource+0x16c>
 800b8ee:	2b50      	cmp	r3, #80	; 0x50
 800b8f0:	d03c      	beq.n	800b96c <HAL_TIM_ConfigClockSource+0xfa>
 800b8f2:	2b50      	cmp	r3, #80	; 0x50
 800b8f4:	d873      	bhi.n	800b9de <HAL_TIM_ConfigClockSource+0x16c>
 800b8f6:	2b40      	cmp	r3, #64	; 0x40
 800b8f8:	d058      	beq.n	800b9ac <HAL_TIM_ConfigClockSource+0x13a>
 800b8fa:	2b40      	cmp	r3, #64	; 0x40
 800b8fc:	d86f      	bhi.n	800b9de <HAL_TIM_ConfigClockSource+0x16c>
 800b8fe:	2b30      	cmp	r3, #48	; 0x30
 800b900:	d064      	beq.n	800b9cc <HAL_TIM_ConfigClockSource+0x15a>
 800b902:	2b30      	cmp	r3, #48	; 0x30
 800b904:	d86b      	bhi.n	800b9de <HAL_TIM_ConfigClockSource+0x16c>
 800b906:	2b20      	cmp	r3, #32
 800b908:	d060      	beq.n	800b9cc <HAL_TIM_ConfigClockSource+0x15a>
 800b90a:	2b20      	cmp	r3, #32
 800b90c:	d867      	bhi.n	800b9de <HAL_TIM_ConfigClockSource+0x16c>
 800b90e:	2b00      	cmp	r3, #0
 800b910:	d05c      	beq.n	800b9cc <HAL_TIM_ConfigClockSource+0x15a>
 800b912:	2b10      	cmp	r3, #16
 800b914:	d05a      	beq.n	800b9cc <HAL_TIM_ConfigClockSource+0x15a>
 800b916:	e062      	b.n	800b9de <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	6818      	ldr	r0, [r3, #0]
 800b91c:	683b      	ldr	r3, [r7, #0]
 800b91e:	6899      	ldr	r1, [r3, #8]
 800b920:	683b      	ldr	r3, [r7, #0]
 800b922:	685a      	ldr	r2, [r3, #4]
 800b924:	683b      	ldr	r3, [r7, #0]
 800b926:	68db      	ldr	r3, [r3, #12]
 800b928:	f000 f9ac 	bl	800bc84 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	681b      	ldr	r3, [r3, #0]
 800b930:	689b      	ldr	r3, [r3, #8]
 800b932:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b934:	68bb      	ldr	r3, [r7, #8]
 800b936:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800b93a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	68ba      	ldr	r2, [r7, #8]
 800b942:	609a      	str	r2, [r3, #8]
      break;
 800b944:	e04f      	b.n	800b9e6 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	6818      	ldr	r0, [r3, #0]
 800b94a:	683b      	ldr	r3, [r7, #0]
 800b94c:	6899      	ldr	r1, [r3, #8]
 800b94e:	683b      	ldr	r3, [r7, #0]
 800b950:	685a      	ldr	r2, [r3, #4]
 800b952:	683b      	ldr	r3, [r7, #0]
 800b954:	68db      	ldr	r3, [r3, #12]
 800b956:	f000 f995 	bl	800bc84 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	681b      	ldr	r3, [r3, #0]
 800b95e:	689a      	ldr	r2, [r3, #8]
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	681b      	ldr	r3, [r3, #0]
 800b964:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b968:	609a      	str	r2, [r3, #8]
      break;
 800b96a:	e03c      	b.n	800b9e6 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	6818      	ldr	r0, [r3, #0]
 800b970:	683b      	ldr	r3, [r7, #0]
 800b972:	6859      	ldr	r1, [r3, #4]
 800b974:	683b      	ldr	r3, [r7, #0]
 800b976:	68db      	ldr	r3, [r3, #12]
 800b978:	461a      	mov	r2, r3
 800b97a:	f000 f909 	bl	800bb90 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	681b      	ldr	r3, [r3, #0]
 800b982:	2150      	movs	r1, #80	; 0x50
 800b984:	4618      	mov	r0, r3
 800b986:	f000 f962 	bl	800bc4e <TIM_ITRx_SetConfig>
      break;
 800b98a:	e02c      	b.n	800b9e6 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	6818      	ldr	r0, [r3, #0]
 800b990:	683b      	ldr	r3, [r7, #0]
 800b992:	6859      	ldr	r1, [r3, #4]
 800b994:	683b      	ldr	r3, [r7, #0]
 800b996:	68db      	ldr	r3, [r3, #12]
 800b998:	461a      	mov	r2, r3
 800b99a:	f000 f928 	bl	800bbee <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	681b      	ldr	r3, [r3, #0]
 800b9a2:	2160      	movs	r1, #96	; 0x60
 800b9a4:	4618      	mov	r0, r3
 800b9a6:	f000 f952 	bl	800bc4e <TIM_ITRx_SetConfig>
      break;
 800b9aa:	e01c      	b.n	800b9e6 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	6818      	ldr	r0, [r3, #0]
 800b9b0:	683b      	ldr	r3, [r7, #0]
 800b9b2:	6859      	ldr	r1, [r3, #4]
 800b9b4:	683b      	ldr	r3, [r7, #0]
 800b9b6:	68db      	ldr	r3, [r3, #12]
 800b9b8:	461a      	mov	r2, r3
 800b9ba:	f000 f8e9 	bl	800bb90 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	681b      	ldr	r3, [r3, #0]
 800b9c2:	2140      	movs	r1, #64	; 0x40
 800b9c4:	4618      	mov	r0, r3
 800b9c6:	f000 f942 	bl	800bc4e <TIM_ITRx_SetConfig>
      break;
 800b9ca:	e00c      	b.n	800b9e6 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	681a      	ldr	r2, [r3, #0]
 800b9d0:	683b      	ldr	r3, [r7, #0]
 800b9d2:	681b      	ldr	r3, [r3, #0]
 800b9d4:	4619      	mov	r1, r3
 800b9d6:	4610      	mov	r0, r2
 800b9d8:	f000 f939 	bl	800bc4e <TIM_ITRx_SetConfig>
      break;
 800b9dc:	e003      	b.n	800b9e6 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800b9de:	2301      	movs	r3, #1
 800b9e0:	73fb      	strb	r3, [r7, #15]
      break;
 800b9e2:	e000      	b.n	800b9e6 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800b9e4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	2201      	movs	r2, #1
 800b9ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	2200      	movs	r2, #0
 800b9f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b9f6:	7bfb      	ldrb	r3, [r7, #15]
}
 800b9f8:	4618      	mov	r0, r3
 800b9fa:	3710      	adds	r7, #16
 800b9fc:	46bd      	mov	sp, r7
 800b9fe:	bd80      	pop	{r7, pc}

0800ba00 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ba00:	b480      	push	{r7}
 800ba02:	b083      	sub	sp, #12
 800ba04:	af00      	add	r7, sp, #0
 800ba06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800ba08:	bf00      	nop
 800ba0a:	370c      	adds	r7, #12
 800ba0c:	46bd      	mov	sp, r7
 800ba0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba12:	4770      	bx	lr

0800ba14 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800ba14:	b480      	push	{r7}
 800ba16:	b083      	sub	sp, #12
 800ba18:	af00      	add	r7, sp, #0
 800ba1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800ba1c:	bf00      	nop
 800ba1e:	370c      	adds	r7, #12
 800ba20:	46bd      	mov	sp, r7
 800ba22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba26:	4770      	bx	lr

0800ba28 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800ba28:	b480      	push	{r7}
 800ba2a:	b083      	sub	sp, #12
 800ba2c:	af00      	add	r7, sp, #0
 800ba2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800ba30:	bf00      	nop
 800ba32:	370c      	adds	r7, #12
 800ba34:	46bd      	mov	sp, r7
 800ba36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba3a:	4770      	bx	lr

0800ba3c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800ba3c:	b480      	push	{r7}
 800ba3e:	b083      	sub	sp, #12
 800ba40:	af00      	add	r7, sp, #0
 800ba42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800ba44:	bf00      	nop
 800ba46:	370c      	adds	r7, #12
 800ba48:	46bd      	mov	sp, r7
 800ba4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba4e:	4770      	bx	lr

0800ba50 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800ba50:	b480      	push	{r7}
 800ba52:	b085      	sub	sp, #20
 800ba54:	af00      	add	r7, sp, #0
 800ba56:	6078      	str	r0, [r7, #4]
 800ba58:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	681b      	ldr	r3, [r3, #0]
 800ba5e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	4a40      	ldr	r2, [pc, #256]	; (800bb64 <TIM_Base_SetConfig+0x114>)
 800ba64:	4293      	cmp	r3, r2
 800ba66:	d013      	beq.n	800ba90 <TIM_Base_SetConfig+0x40>
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ba6e:	d00f      	beq.n	800ba90 <TIM_Base_SetConfig+0x40>
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	4a3d      	ldr	r2, [pc, #244]	; (800bb68 <TIM_Base_SetConfig+0x118>)
 800ba74:	4293      	cmp	r3, r2
 800ba76:	d00b      	beq.n	800ba90 <TIM_Base_SetConfig+0x40>
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	4a3c      	ldr	r2, [pc, #240]	; (800bb6c <TIM_Base_SetConfig+0x11c>)
 800ba7c:	4293      	cmp	r3, r2
 800ba7e:	d007      	beq.n	800ba90 <TIM_Base_SetConfig+0x40>
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	4a3b      	ldr	r2, [pc, #236]	; (800bb70 <TIM_Base_SetConfig+0x120>)
 800ba84:	4293      	cmp	r3, r2
 800ba86:	d003      	beq.n	800ba90 <TIM_Base_SetConfig+0x40>
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	4a3a      	ldr	r2, [pc, #232]	; (800bb74 <TIM_Base_SetConfig+0x124>)
 800ba8c:	4293      	cmp	r3, r2
 800ba8e:	d108      	bne.n	800baa2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ba90:	68fb      	ldr	r3, [r7, #12]
 800ba92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ba96:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ba98:	683b      	ldr	r3, [r7, #0]
 800ba9a:	685b      	ldr	r3, [r3, #4]
 800ba9c:	68fa      	ldr	r2, [r7, #12]
 800ba9e:	4313      	orrs	r3, r2
 800baa0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	4a2f      	ldr	r2, [pc, #188]	; (800bb64 <TIM_Base_SetConfig+0x114>)
 800baa6:	4293      	cmp	r3, r2
 800baa8:	d02b      	beq.n	800bb02 <TIM_Base_SetConfig+0xb2>
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bab0:	d027      	beq.n	800bb02 <TIM_Base_SetConfig+0xb2>
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	4a2c      	ldr	r2, [pc, #176]	; (800bb68 <TIM_Base_SetConfig+0x118>)
 800bab6:	4293      	cmp	r3, r2
 800bab8:	d023      	beq.n	800bb02 <TIM_Base_SetConfig+0xb2>
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	4a2b      	ldr	r2, [pc, #172]	; (800bb6c <TIM_Base_SetConfig+0x11c>)
 800babe:	4293      	cmp	r3, r2
 800bac0:	d01f      	beq.n	800bb02 <TIM_Base_SetConfig+0xb2>
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	4a2a      	ldr	r2, [pc, #168]	; (800bb70 <TIM_Base_SetConfig+0x120>)
 800bac6:	4293      	cmp	r3, r2
 800bac8:	d01b      	beq.n	800bb02 <TIM_Base_SetConfig+0xb2>
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	4a29      	ldr	r2, [pc, #164]	; (800bb74 <TIM_Base_SetConfig+0x124>)
 800bace:	4293      	cmp	r3, r2
 800bad0:	d017      	beq.n	800bb02 <TIM_Base_SetConfig+0xb2>
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	4a28      	ldr	r2, [pc, #160]	; (800bb78 <TIM_Base_SetConfig+0x128>)
 800bad6:	4293      	cmp	r3, r2
 800bad8:	d013      	beq.n	800bb02 <TIM_Base_SetConfig+0xb2>
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	4a27      	ldr	r2, [pc, #156]	; (800bb7c <TIM_Base_SetConfig+0x12c>)
 800bade:	4293      	cmp	r3, r2
 800bae0:	d00f      	beq.n	800bb02 <TIM_Base_SetConfig+0xb2>
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	4a26      	ldr	r2, [pc, #152]	; (800bb80 <TIM_Base_SetConfig+0x130>)
 800bae6:	4293      	cmp	r3, r2
 800bae8:	d00b      	beq.n	800bb02 <TIM_Base_SetConfig+0xb2>
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	4a25      	ldr	r2, [pc, #148]	; (800bb84 <TIM_Base_SetConfig+0x134>)
 800baee:	4293      	cmp	r3, r2
 800baf0:	d007      	beq.n	800bb02 <TIM_Base_SetConfig+0xb2>
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	4a24      	ldr	r2, [pc, #144]	; (800bb88 <TIM_Base_SetConfig+0x138>)
 800baf6:	4293      	cmp	r3, r2
 800baf8:	d003      	beq.n	800bb02 <TIM_Base_SetConfig+0xb2>
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	4a23      	ldr	r2, [pc, #140]	; (800bb8c <TIM_Base_SetConfig+0x13c>)
 800bafe:	4293      	cmp	r3, r2
 800bb00:	d108      	bne.n	800bb14 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800bb02:	68fb      	ldr	r3, [r7, #12]
 800bb04:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bb08:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800bb0a:	683b      	ldr	r3, [r7, #0]
 800bb0c:	68db      	ldr	r3, [r3, #12]
 800bb0e:	68fa      	ldr	r2, [r7, #12]
 800bb10:	4313      	orrs	r3, r2
 800bb12:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800bb14:	68fb      	ldr	r3, [r7, #12]
 800bb16:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800bb1a:	683b      	ldr	r3, [r7, #0]
 800bb1c:	695b      	ldr	r3, [r3, #20]
 800bb1e:	4313      	orrs	r3, r2
 800bb20:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	68fa      	ldr	r2, [r7, #12]
 800bb26:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800bb28:	683b      	ldr	r3, [r7, #0]
 800bb2a:	689a      	ldr	r2, [r3, #8]
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800bb30:	683b      	ldr	r3, [r7, #0]
 800bb32:	681a      	ldr	r2, [r3, #0]
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	4a0a      	ldr	r2, [pc, #40]	; (800bb64 <TIM_Base_SetConfig+0x114>)
 800bb3c:	4293      	cmp	r3, r2
 800bb3e:	d003      	beq.n	800bb48 <TIM_Base_SetConfig+0xf8>
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	4a0c      	ldr	r2, [pc, #48]	; (800bb74 <TIM_Base_SetConfig+0x124>)
 800bb44:	4293      	cmp	r3, r2
 800bb46:	d103      	bne.n	800bb50 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800bb48:	683b      	ldr	r3, [r7, #0]
 800bb4a:	691a      	ldr	r2, [r3, #16]
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	2201      	movs	r2, #1
 800bb54:	615a      	str	r2, [r3, #20]
}
 800bb56:	bf00      	nop
 800bb58:	3714      	adds	r7, #20
 800bb5a:	46bd      	mov	sp, r7
 800bb5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb60:	4770      	bx	lr
 800bb62:	bf00      	nop
 800bb64:	40010000 	.word	0x40010000
 800bb68:	40000400 	.word	0x40000400
 800bb6c:	40000800 	.word	0x40000800
 800bb70:	40000c00 	.word	0x40000c00
 800bb74:	40010400 	.word	0x40010400
 800bb78:	40014000 	.word	0x40014000
 800bb7c:	40014400 	.word	0x40014400
 800bb80:	40014800 	.word	0x40014800
 800bb84:	40001800 	.word	0x40001800
 800bb88:	40001c00 	.word	0x40001c00
 800bb8c:	40002000 	.word	0x40002000

0800bb90 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bb90:	b480      	push	{r7}
 800bb92:	b087      	sub	sp, #28
 800bb94:	af00      	add	r7, sp, #0
 800bb96:	60f8      	str	r0, [r7, #12]
 800bb98:	60b9      	str	r1, [r7, #8]
 800bb9a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800bb9c:	68fb      	ldr	r3, [r7, #12]
 800bb9e:	6a1b      	ldr	r3, [r3, #32]
 800bba0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800bba2:	68fb      	ldr	r3, [r7, #12]
 800bba4:	6a1b      	ldr	r3, [r3, #32]
 800bba6:	f023 0201 	bic.w	r2, r3, #1
 800bbaa:	68fb      	ldr	r3, [r7, #12]
 800bbac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bbae:	68fb      	ldr	r3, [r7, #12]
 800bbb0:	699b      	ldr	r3, [r3, #24]
 800bbb2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800bbb4:	693b      	ldr	r3, [r7, #16]
 800bbb6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800bbba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	011b      	lsls	r3, r3, #4
 800bbc0:	693a      	ldr	r2, [r7, #16]
 800bbc2:	4313      	orrs	r3, r2
 800bbc4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800bbc6:	697b      	ldr	r3, [r7, #20]
 800bbc8:	f023 030a 	bic.w	r3, r3, #10
 800bbcc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800bbce:	697a      	ldr	r2, [r7, #20]
 800bbd0:	68bb      	ldr	r3, [r7, #8]
 800bbd2:	4313      	orrs	r3, r2
 800bbd4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800bbd6:	68fb      	ldr	r3, [r7, #12]
 800bbd8:	693a      	ldr	r2, [r7, #16]
 800bbda:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bbdc:	68fb      	ldr	r3, [r7, #12]
 800bbde:	697a      	ldr	r2, [r7, #20]
 800bbe0:	621a      	str	r2, [r3, #32]
}
 800bbe2:	bf00      	nop
 800bbe4:	371c      	adds	r7, #28
 800bbe6:	46bd      	mov	sp, r7
 800bbe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbec:	4770      	bx	lr

0800bbee <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bbee:	b480      	push	{r7}
 800bbf0:	b087      	sub	sp, #28
 800bbf2:	af00      	add	r7, sp, #0
 800bbf4:	60f8      	str	r0, [r7, #12]
 800bbf6:	60b9      	str	r1, [r7, #8]
 800bbf8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800bbfa:	68fb      	ldr	r3, [r7, #12]
 800bbfc:	6a1b      	ldr	r3, [r3, #32]
 800bbfe:	f023 0210 	bic.w	r2, r3, #16
 800bc02:	68fb      	ldr	r3, [r7, #12]
 800bc04:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bc06:	68fb      	ldr	r3, [r7, #12]
 800bc08:	699b      	ldr	r3, [r3, #24]
 800bc0a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800bc0c:	68fb      	ldr	r3, [r7, #12]
 800bc0e:	6a1b      	ldr	r3, [r3, #32]
 800bc10:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800bc12:	697b      	ldr	r3, [r7, #20]
 800bc14:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800bc18:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	031b      	lsls	r3, r3, #12
 800bc1e:	697a      	ldr	r2, [r7, #20]
 800bc20:	4313      	orrs	r3, r2
 800bc22:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800bc24:	693b      	ldr	r3, [r7, #16]
 800bc26:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800bc2a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800bc2c:	68bb      	ldr	r3, [r7, #8]
 800bc2e:	011b      	lsls	r3, r3, #4
 800bc30:	693a      	ldr	r2, [r7, #16]
 800bc32:	4313      	orrs	r3, r2
 800bc34:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800bc36:	68fb      	ldr	r3, [r7, #12]
 800bc38:	697a      	ldr	r2, [r7, #20]
 800bc3a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bc3c:	68fb      	ldr	r3, [r7, #12]
 800bc3e:	693a      	ldr	r2, [r7, #16]
 800bc40:	621a      	str	r2, [r3, #32]
}
 800bc42:	bf00      	nop
 800bc44:	371c      	adds	r7, #28
 800bc46:	46bd      	mov	sp, r7
 800bc48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc4c:	4770      	bx	lr

0800bc4e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800bc4e:	b480      	push	{r7}
 800bc50:	b085      	sub	sp, #20
 800bc52:	af00      	add	r7, sp, #0
 800bc54:	6078      	str	r0, [r7, #4]
 800bc56:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	689b      	ldr	r3, [r3, #8]
 800bc5c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800bc5e:	68fb      	ldr	r3, [r7, #12]
 800bc60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bc64:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800bc66:	683a      	ldr	r2, [r7, #0]
 800bc68:	68fb      	ldr	r3, [r7, #12]
 800bc6a:	4313      	orrs	r3, r2
 800bc6c:	f043 0307 	orr.w	r3, r3, #7
 800bc70:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	68fa      	ldr	r2, [r7, #12]
 800bc76:	609a      	str	r2, [r3, #8]
}
 800bc78:	bf00      	nop
 800bc7a:	3714      	adds	r7, #20
 800bc7c:	46bd      	mov	sp, r7
 800bc7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc82:	4770      	bx	lr

0800bc84 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800bc84:	b480      	push	{r7}
 800bc86:	b087      	sub	sp, #28
 800bc88:	af00      	add	r7, sp, #0
 800bc8a:	60f8      	str	r0, [r7, #12]
 800bc8c:	60b9      	str	r1, [r7, #8]
 800bc8e:	607a      	str	r2, [r7, #4]
 800bc90:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800bc92:	68fb      	ldr	r3, [r7, #12]
 800bc94:	689b      	ldr	r3, [r3, #8]
 800bc96:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bc98:	697b      	ldr	r3, [r7, #20]
 800bc9a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800bc9e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800bca0:	683b      	ldr	r3, [r7, #0]
 800bca2:	021a      	lsls	r2, r3, #8
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	431a      	orrs	r2, r3
 800bca8:	68bb      	ldr	r3, [r7, #8]
 800bcaa:	4313      	orrs	r3, r2
 800bcac:	697a      	ldr	r2, [r7, #20]
 800bcae:	4313      	orrs	r3, r2
 800bcb0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bcb2:	68fb      	ldr	r3, [r7, #12]
 800bcb4:	697a      	ldr	r2, [r7, #20]
 800bcb6:	609a      	str	r2, [r3, #8]
}
 800bcb8:	bf00      	nop
 800bcba:	371c      	adds	r7, #28
 800bcbc:	46bd      	mov	sp, r7
 800bcbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcc2:	4770      	bx	lr

0800bcc4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800bcc4:	b480      	push	{r7}
 800bcc6:	b085      	sub	sp, #20
 800bcc8:	af00      	add	r7, sp, #0
 800bcca:	6078      	str	r0, [r7, #4]
 800bccc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bcd4:	2b01      	cmp	r3, #1
 800bcd6:	d101      	bne.n	800bcdc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800bcd8:	2302      	movs	r3, #2
 800bcda:	e05a      	b.n	800bd92 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	2201      	movs	r2, #1
 800bce0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	2202      	movs	r2, #2
 800bce8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	681b      	ldr	r3, [r3, #0]
 800bcf0:	685b      	ldr	r3, [r3, #4]
 800bcf2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	681b      	ldr	r3, [r3, #0]
 800bcf8:	689b      	ldr	r3, [r3, #8]
 800bcfa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800bcfc:	68fb      	ldr	r3, [r7, #12]
 800bcfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bd02:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800bd04:	683b      	ldr	r3, [r7, #0]
 800bd06:	681b      	ldr	r3, [r3, #0]
 800bd08:	68fa      	ldr	r2, [r7, #12]
 800bd0a:	4313      	orrs	r3, r2
 800bd0c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	681b      	ldr	r3, [r3, #0]
 800bd12:	68fa      	ldr	r2, [r7, #12]
 800bd14:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	681b      	ldr	r3, [r3, #0]
 800bd1a:	4a21      	ldr	r2, [pc, #132]	; (800bda0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800bd1c:	4293      	cmp	r3, r2
 800bd1e:	d022      	beq.n	800bd66 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	681b      	ldr	r3, [r3, #0]
 800bd24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bd28:	d01d      	beq.n	800bd66 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	681b      	ldr	r3, [r3, #0]
 800bd2e:	4a1d      	ldr	r2, [pc, #116]	; (800bda4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800bd30:	4293      	cmp	r3, r2
 800bd32:	d018      	beq.n	800bd66 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	681b      	ldr	r3, [r3, #0]
 800bd38:	4a1b      	ldr	r2, [pc, #108]	; (800bda8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800bd3a:	4293      	cmp	r3, r2
 800bd3c:	d013      	beq.n	800bd66 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	681b      	ldr	r3, [r3, #0]
 800bd42:	4a1a      	ldr	r2, [pc, #104]	; (800bdac <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800bd44:	4293      	cmp	r3, r2
 800bd46:	d00e      	beq.n	800bd66 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	681b      	ldr	r3, [r3, #0]
 800bd4c:	4a18      	ldr	r2, [pc, #96]	; (800bdb0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800bd4e:	4293      	cmp	r3, r2
 800bd50:	d009      	beq.n	800bd66 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	681b      	ldr	r3, [r3, #0]
 800bd56:	4a17      	ldr	r2, [pc, #92]	; (800bdb4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800bd58:	4293      	cmp	r3, r2
 800bd5a:	d004      	beq.n	800bd66 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	681b      	ldr	r3, [r3, #0]
 800bd60:	4a15      	ldr	r2, [pc, #84]	; (800bdb8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800bd62:	4293      	cmp	r3, r2
 800bd64:	d10c      	bne.n	800bd80 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800bd66:	68bb      	ldr	r3, [r7, #8]
 800bd68:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bd6c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800bd6e:	683b      	ldr	r3, [r7, #0]
 800bd70:	685b      	ldr	r3, [r3, #4]
 800bd72:	68ba      	ldr	r2, [r7, #8]
 800bd74:	4313      	orrs	r3, r2
 800bd76:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	681b      	ldr	r3, [r3, #0]
 800bd7c:	68ba      	ldr	r2, [r7, #8]
 800bd7e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	2201      	movs	r2, #1
 800bd84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	2200      	movs	r2, #0
 800bd8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800bd90:	2300      	movs	r3, #0
}
 800bd92:	4618      	mov	r0, r3
 800bd94:	3714      	adds	r7, #20
 800bd96:	46bd      	mov	sp, r7
 800bd98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd9c:	4770      	bx	lr
 800bd9e:	bf00      	nop
 800bda0:	40010000 	.word	0x40010000
 800bda4:	40000400 	.word	0x40000400
 800bda8:	40000800 	.word	0x40000800
 800bdac:	40000c00 	.word	0x40000c00
 800bdb0:	40010400 	.word	0x40010400
 800bdb4:	40014000 	.word	0x40014000
 800bdb8:	40001800 	.word	0x40001800

0800bdbc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800bdbc:	b480      	push	{r7}
 800bdbe:	b083      	sub	sp, #12
 800bdc0:	af00      	add	r7, sp, #0
 800bdc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800bdc4:	bf00      	nop
 800bdc6:	370c      	adds	r7, #12
 800bdc8:	46bd      	mov	sp, r7
 800bdca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdce:	4770      	bx	lr

0800bdd0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800bdd0:	b480      	push	{r7}
 800bdd2:	b083      	sub	sp, #12
 800bdd4:	af00      	add	r7, sp, #0
 800bdd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800bdd8:	bf00      	nop
 800bdda:	370c      	adds	r7, #12
 800bddc:	46bd      	mov	sp, r7
 800bdde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bde2:	4770      	bx	lr

0800bde4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800bde4:	b580      	push	{r7, lr}
 800bde6:	b082      	sub	sp, #8
 800bde8:	af00      	add	r7, sp, #0
 800bdea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	2b00      	cmp	r3, #0
 800bdf0:	d101      	bne.n	800bdf6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800bdf2:	2301      	movs	r3, #1
 800bdf4:	e03f      	b.n	800be76 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bdfc:	b2db      	uxtb	r3, r3
 800bdfe:	2b00      	cmp	r3, #0
 800be00:	d106      	bne.n	800be10 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	2200      	movs	r2, #0
 800be06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800be0a:	6878      	ldr	r0, [r7, #4]
 800be0c:	f7f8 f91e 	bl	800404c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	2224      	movs	r2, #36	; 0x24
 800be14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	681b      	ldr	r3, [r3, #0]
 800be1c:	68da      	ldr	r2, [r3, #12]
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	681b      	ldr	r3, [r3, #0]
 800be22:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800be26:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800be28:	6878      	ldr	r0, [r7, #4]
 800be2a:	f000 fddf 	bl	800c9ec <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	681b      	ldr	r3, [r3, #0]
 800be32:	691a      	ldr	r2, [r3, #16]
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	681b      	ldr	r3, [r3, #0]
 800be38:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800be3c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	681b      	ldr	r3, [r3, #0]
 800be42:	695a      	ldr	r2, [r3, #20]
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	681b      	ldr	r3, [r3, #0]
 800be48:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800be4c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	681b      	ldr	r3, [r3, #0]
 800be52:	68da      	ldr	r2, [r3, #12]
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	681b      	ldr	r3, [r3, #0]
 800be58:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800be5c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	2200      	movs	r2, #0
 800be62:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	2220      	movs	r2, #32
 800be68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	2220      	movs	r2, #32
 800be70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800be74:	2300      	movs	r3, #0
}
 800be76:	4618      	mov	r0, r3
 800be78:	3708      	adds	r7, #8
 800be7a:	46bd      	mov	sp, r7
 800be7c:	bd80      	pop	{r7, pc}

0800be7e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800be7e:	b580      	push	{r7, lr}
 800be80:	b08a      	sub	sp, #40	; 0x28
 800be82:	af02      	add	r7, sp, #8
 800be84:	60f8      	str	r0, [r7, #12]
 800be86:	60b9      	str	r1, [r7, #8]
 800be88:	603b      	str	r3, [r7, #0]
 800be8a:	4613      	mov	r3, r2
 800be8c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800be8e:	2300      	movs	r3, #0
 800be90:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800be92:	68fb      	ldr	r3, [r7, #12]
 800be94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800be98:	b2db      	uxtb	r3, r3
 800be9a:	2b20      	cmp	r3, #32
 800be9c:	d17c      	bne.n	800bf98 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800be9e:	68bb      	ldr	r3, [r7, #8]
 800bea0:	2b00      	cmp	r3, #0
 800bea2:	d002      	beq.n	800beaa <HAL_UART_Transmit+0x2c>
 800bea4:	88fb      	ldrh	r3, [r7, #6]
 800bea6:	2b00      	cmp	r3, #0
 800bea8:	d101      	bne.n	800beae <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800beaa:	2301      	movs	r3, #1
 800beac:	e075      	b.n	800bf9a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800beae:	68fb      	ldr	r3, [r7, #12]
 800beb0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800beb4:	2b01      	cmp	r3, #1
 800beb6:	d101      	bne.n	800bebc <HAL_UART_Transmit+0x3e>
 800beb8:	2302      	movs	r3, #2
 800beba:	e06e      	b.n	800bf9a <HAL_UART_Transmit+0x11c>
 800bebc:	68fb      	ldr	r3, [r7, #12]
 800bebe:	2201      	movs	r2, #1
 800bec0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bec4:	68fb      	ldr	r3, [r7, #12]
 800bec6:	2200      	movs	r2, #0
 800bec8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800beca:	68fb      	ldr	r3, [r7, #12]
 800becc:	2221      	movs	r2, #33	; 0x21
 800bece:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800bed2:	f7f8 fa11 	bl	80042f8 <HAL_GetTick>
 800bed6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800bed8:	68fb      	ldr	r3, [r7, #12]
 800beda:	88fa      	ldrh	r2, [r7, #6]
 800bedc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800bede:	68fb      	ldr	r3, [r7, #12]
 800bee0:	88fa      	ldrh	r2, [r7, #6]
 800bee2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bee4:	68fb      	ldr	r3, [r7, #12]
 800bee6:	689b      	ldr	r3, [r3, #8]
 800bee8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800beec:	d108      	bne.n	800bf00 <HAL_UART_Transmit+0x82>
 800beee:	68fb      	ldr	r3, [r7, #12]
 800bef0:	691b      	ldr	r3, [r3, #16]
 800bef2:	2b00      	cmp	r3, #0
 800bef4:	d104      	bne.n	800bf00 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800bef6:	2300      	movs	r3, #0
 800bef8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800befa:	68bb      	ldr	r3, [r7, #8]
 800befc:	61bb      	str	r3, [r7, #24]
 800befe:	e003      	b.n	800bf08 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800bf00:	68bb      	ldr	r3, [r7, #8]
 800bf02:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800bf04:	2300      	movs	r3, #0
 800bf06:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800bf08:	68fb      	ldr	r3, [r7, #12]
 800bf0a:	2200      	movs	r2, #0
 800bf0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800bf10:	e02a      	b.n	800bf68 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800bf12:	683b      	ldr	r3, [r7, #0]
 800bf14:	9300      	str	r3, [sp, #0]
 800bf16:	697b      	ldr	r3, [r7, #20]
 800bf18:	2200      	movs	r2, #0
 800bf1a:	2180      	movs	r1, #128	; 0x80
 800bf1c:	68f8      	ldr	r0, [r7, #12]
 800bf1e:	f000 fb1f 	bl	800c560 <UART_WaitOnFlagUntilTimeout>
 800bf22:	4603      	mov	r3, r0
 800bf24:	2b00      	cmp	r3, #0
 800bf26:	d001      	beq.n	800bf2c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800bf28:	2303      	movs	r3, #3
 800bf2a:	e036      	b.n	800bf9a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800bf2c:	69fb      	ldr	r3, [r7, #28]
 800bf2e:	2b00      	cmp	r3, #0
 800bf30:	d10b      	bne.n	800bf4a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800bf32:	69bb      	ldr	r3, [r7, #24]
 800bf34:	881b      	ldrh	r3, [r3, #0]
 800bf36:	461a      	mov	r2, r3
 800bf38:	68fb      	ldr	r3, [r7, #12]
 800bf3a:	681b      	ldr	r3, [r3, #0]
 800bf3c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800bf40:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800bf42:	69bb      	ldr	r3, [r7, #24]
 800bf44:	3302      	adds	r3, #2
 800bf46:	61bb      	str	r3, [r7, #24]
 800bf48:	e007      	b.n	800bf5a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800bf4a:	69fb      	ldr	r3, [r7, #28]
 800bf4c:	781a      	ldrb	r2, [r3, #0]
 800bf4e:	68fb      	ldr	r3, [r7, #12]
 800bf50:	681b      	ldr	r3, [r3, #0]
 800bf52:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800bf54:	69fb      	ldr	r3, [r7, #28]
 800bf56:	3301      	adds	r3, #1
 800bf58:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800bf5a:	68fb      	ldr	r3, [r7, #12]
 800bf5c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800bf5e:	b29b      	uxth	r3, r3
 800bf60:	3b01      	subs	r3, #1
 800bf62:	b29a      	uxth	r2, r3
 800bf64:	68fb      	ldr	r3, [r7, #12]
 800bf66:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800bf68:	68fb      	ldr	r3, [r7, #12]
 800bf6a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800bf6c:	b29b      	uxth	r3, r3
 800bf6e:	2b00      	cmp	r3, #0
 800bf70:	d1cf      	bne.n	800bf12 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800bf72:	683b      	ldr	r3, [r7, #0]
 800bf74:	9300      	str	r3, [sp, #0]
 800bf76:	697b      	ldr	r3, [r7, #20]
 800bf78:	2200      	movs	r2, #0
 800bf7a:	2140      	movs	r1, #64	; 0x40
 800bf7c:	68f8      	ldr	r0, [r7, #12]
 800bf7e:	f000 faef 	bl	800c560 <UART_WaitOnFlagUntilTimeout>
 800bf82:	4603      	mov	r3, r0
 800bf84:	2b00      	cmp	r3, #0
 800bf86:	d001      	beq.n	800bf8c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800bf88:	2303      	movs	r3, #3
 800bf8a:	e006      	b.n	800bf9a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800bf8c:	68fb      	ldr	r3, [r7, #12]
 800bf8e:	2220      	movs	r2, #32
 800bf90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800bf94:	2300      	movs	r3, #0
 800bf96:	e000      	b.n	800bf9a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800bf98:	2302      	movs	r3, #2
  }
}
 800bf9a:	4618      	mov	r0, r3
 800bf9c:	3720      	adds	r7, #32
 800bf9e:	46bd      	mov	sp, r7
 800bfa0:	bd80      	pop	{r7, pc}

0800bfa2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800bfa2:	b580      	push	{r7, lr}
 800bfa4:	b084      	sub	sp, #16
 800bfa6:	af00      	add	r7, sp, #0
 800bfa8:	60f8      	str	r0, [r7, #12]
 800bfaa:	60b9      	str	r1, [r7, #8]
 800bfac:	4613      	mov	r3, r2
 800bfae:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800bfb0:	68fb      	ldr	r3, [r7, #12]
 800bfb2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800bfb6:	b2db      	uxtb	r3, r3
 800bfb8:	2b20      	cmp	r3, #32
 800bfba:	d11d      	bne.n	800bff8 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800bfbc:	68bb      	ldr	r3, [r7, #8]
 800bfbe:	2b00      	cmp	r3, #0
 800bfc0:	d002      	beq.n	800bfc8 <HAL_UART_Receive_IT+0x26>
 800bfc2:	88fb      	ldrh	r3, [r7, #6]
 800bfc4:	2b00      	cmp	r3, #0
 800bfc6:	d101      	bne.n	800bfcc <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800bfc8:	2301      	movs	r3, #1
 800bfca:	e016      	b.n	800bffa <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800bfcc:	68fb      	ldr	r3, [r7, #12]
 800bfce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bfd2:	2b01      	cmp	r3, #1
 800bfd4:	d101      	bne.n	800bfda <HAL_UART_Receive_IT+0x38>
 800bfd6:	2302      	movs	r3, #2
 800bfd8:	e00f      	b.n	800bffa <HAL_UART_Receive_IT+0x58>
 800bfda:	68fb      	ldr	r3, [r7, #12]
 800bfdc:	2201      	movs	r2, #1
 800bfde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bfe2:	68fb      	ldr	r3, [r7, #12]
 800bfe4:	2200      	movs	r2, #0
 800bfe6:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800bfe8:	88fb      	ldrh	r3, [r7, #6]
 800bfea:	461a      	mov	r2, r3
 800bfec:	68b9      	ldr	r1, [r7, #8]
 800bfee:	68f8      	ldr	r0, [r7, #12]
 800bff0:	f000 fb24 	bl	800c63c <UART_Start_Receive_IT>
 800bff4:	4603      	mov	r3, r0
 800bff6:	e000      	b.n	800bffa <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800bff8:	2302      	movs	r3, #2
  }
}
 800bffa:	4618      	mov	r0, r3
 800bffc:	3710      	adds	r7, #16
 800bffe:	46bd      	mov	sp, r7
 800c000:	bd80      	pop	{r7, pc}
	...

0800c004 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800c004:	b580      	push	{r7, lr}
 800c006:	b0ba      	sub	sp, #232	; 0xe8
 800c008:	af00      	add	r7, sp, #0
 800c00a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	681b      	ldr	r3, [r3, #0]
 800c010:	681b      	ldr	r3, [r3, #0]
 800c012:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	681b      	ldr	r3, [r3, #0]
 800c01a:	68db      	ldr	r3, [r3, #12]
 800c01c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	681b      	ldr	r3, [r3, #0]
 800c024:	695b      	ldr	r3, [r3, #20]
 800c026:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800c02a:	2300      	movs	r3, #0
 800c02c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800c030:	2300      	movs	r3, #0
 800c032:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800c036:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c03a:	f003 030f 	and.w	r3, r3, #15
 800c03e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800c042:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c046:	2b00      	cmp	r3, #0
 800c048:	d10f      	bne.n	800c06a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800c04a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c04e:	f003 0320 	and.w	r3, r3, #32
 800c052:	2b00      	cmp	r3, #0
 800c054:	d009      	beq.n	800c06a <HAL_UART_IRQHandler+0x66>
 800c056:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c05a:	f003 0320 	and.w	r3, r3, #32
 800c05e:	2b00      	cmp	r3, #0
 800c060:	d003      	beq.n	800c06a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800c062:	6878      	ldr	r0, [r7, #4]
 800c064:	f000 fc07 	bl	800c876 <UART_Receive_IT>
      return;
 800c068:	e256      	b.n	800c518 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800c06a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c06e:	2b00      	cmp	r3, #0
 800c070:	f000 80de 	beq.w	800c230 <HAL_UART_IRQHandler+0x22c>
 800c074:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c078:	f003 0301 	and.w	r3, r3, #1
 800c07c:	2b00      	cmp	r3, #0
 800c07e:	d106      	bne.n	800c08e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800c080:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c084:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800c088:	2b00      	cmp	r3, #0
 800c08a:	f000 80d1 	beq.w	800c230 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800c08e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c092:	f003 0301 	and.w	r3, r3, #1
 800c096:	2b00      	cmp	r3, #0
 800c098:	d00b      	beq.n	800c0b2 <HAL_UART_IRQHandler+0xae>
 800c09a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c09e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	d005      	beq.n	800c0b2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c0aa:	f043 0201 	orr.w	r2, r3, #1
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800c0b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c0b6:	f003 0304 	and.w	r3, r3, #4
 800c0ba:	2b00      	cmp	r3, #0
 800c0bc:	d00b      	beq.n	800c0d6 <HAL_UART_IRQHandler+0xd2>
 800c0be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c0c2:	f003 0301 	and.w	r3, r3, #1
 800c0c6:	2b00      	cmp	r3, #0
 800c0c8:	d005      	beq.n	800c0d6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c0ce:	f043 0202 	orr.w	r2, r3, #2
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800c0d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c0da:	f003 0302 	and.w	r3, r3, #2
 800c0de:	2b00      	cmp	r3, #0
 800c0e0:	d00b      	beq.n	800c0fa <HAL_UART_IRQHandler+0xf6>
 800c0e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c0e6:	f003 0301 	and.w	r3, r3, #1
 800c0ea:	2b00      	cmp	r3, #0
 800c0ec:	d005      	beq.n	800c0fa <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c0f2:	f043 0204 	orr.w	r2, r3, #4
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800c0fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c0fe:	f003 0308 	and.w	r3, r3, #8
 800c102:	2b00      	cmp	r3, #0
 800c104:	d011      	beq.n	800c12a <HAL_UART_IRQHandler+0x126>
 800c106:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c10a:	f003 0320 	and.w	r3, r3, #32
 800c10e:	2b00      	cmp	r3, #0
 800c110:	d105      	bne.n	800c11e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800c112:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c116:	f003 0301 	and.w	r3, r3, #1
 800c11a:	2b00      	cmp	r3, #0
 800c11c:	d005      	beq.n	800c12a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c122:	f043 0208 	orr.w	r2, r3, #8
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c12e:	2b00      	cmp	r3, #0
 800c130:	f000 81ed 	beq.w	800c50e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800c134:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c138:	f003 0320 	and.w	r3, r3, #32
 800c13c:	2b00      	cmp	r3, #0
 800c13e:	d008      	beq.n	800c152 <HAL_UART_IRQHandler+0x14e>
 800c140:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c144:	f003 0320 	and.w	r3, r3, #32
 800c148:	2b00      	cmp	r3, #0
 800c14a:	d002      	beq.n	800c152 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800c14c:	6878      	ldr	r0, [r7, #4]
 800c14e:	f000 fb92 	bl	800c876 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	681b      	ldr	r3, [r3, #0]
 800c156:	695b      	ldr	r3, [r3, #20]
 800c158:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c15c:	2b40      	cmp	r3, #64	; 0x40
 800c15e:	bf0c      	ite	eq
 800c160:	2301      	moveq	r3, #1
 800c162:	2300      	movne	r3, #0
 800c164:	b2db      	uxtb	r3, r3
 800c166:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c16e:	f003 0308 	and.w	r3, r3, #8
 800c172:	2b00      	cmp	r3, #0
 800c174:	d103      	bne.n	800c17e <HAL_UART_IRQHandler+0x17a>
 800c176:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c17a:	2b00      	cmp	r3, #0
 800c17c:	d04f      	beq.n	800c21e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800c17e:	6878      	ldr	r0, [r7, #4]
 800c180:	f000 fa9a 	bl	800c6b8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	681b      	ldr	r3, [r3, #0]
 800c188:	695b      	ldr	r3, [r3, #20]
 800c18a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c18e:	2b40      	cmp	r3, #64	; 0x40
 800c190:	d141      	bne.n	800c216 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	681b      	ldr	r3, [r3, #0]
 800c196:	3314      	adds	r3, #20
 800c198:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c19c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c1a0:	e853 3f00 	ldrex	r3, [r3]
 800c1a4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800c1a8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c1ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c1b0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	681b      	ldr	r3, [r3, #0]
 800c1b8:	3314      	adds	r3, #20
 800c1ba:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800c1be:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800c1c2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c1c6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800c1ca:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800c1ce:	e841 2300 	strex	r3, r2, [r1]
 800c1d2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800c1d6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c1da:	2b00      	cmp	r3, #0
 800c1dc:	d1d9      	bne.n	800c192 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c1e2:	2b00      	cmp	r3, #0
 800c1e4:	d013      	beq.n	800c20e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c1ea:	4a7d      	ldr	r2, [pc, #500]	; (800c3e0 <HAL_UART_IRQHandler+0x3dc>)
 800c1ec:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c1f2:	4618      	mov	r0, r3
 800c1f4:	f7f9 fd5a 	bl	8005cac <HAL_DMA_Abort_IT>
 800c1f8:	4603      	mov	r3, r0
 800c1fa:	2b00      	cmp	r3, #0
 800c1fc:	d016      	beq.n	800c22c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c202:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c204:	687a      	ldr	r2, [r7, #4]
 800c206:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800c208:	4610      	mov	r0, r2
 800c20a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c20c:	e00e      	b.n	800c22c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800c20e:	6878      	ldr	r0, [r7, #4]
 800c210:	f000 f990 	bl	800c534 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c214:	e00a      	b.n	800c22c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c216:	6878      	ldr	r0, [r7, #4]
 800c218:	f000 f98c 	bl	800c534 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c21c:	e006      	b.n	800c22c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800c21e:	6878      	ldr	r0, [r7, #4]
 800c220:	f000 f988 	bl	800c534 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	2200      	movs	r2, #0
 800c228:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800c22a:	e170      	b.n	800c50e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c22c:	bf00      	nop
    return;
 800c22e:	e16e      	b.n	800c50e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c234:	2b01      	cmp	r3, #1
 800c236:	f040 814a 	bne.w	800c4ce <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800c23a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c23e:	f003 0310 	and.w	r3, r3, #16
 800c242:	2b00      	cmp	r3, #0
 800c244:	f000 8143 	beq.w	800c4ce <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800c248:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c24c:	f003 0310 	and.w	r3, r3, #16
 800c250:	2b00      	cmp	r3, #0
 800c252:	f000 813c 	beq.w	800c4ce <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800c256:	2300      	movs	r3, #0
 800c258:	60bb      	str	r3, [r7, #8]
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	681b      	ldr	r3, [r3, #0]
 800c25e:	681b      	ldr	r3, [r3, #0]
 800c260:	60bb      	str	r3, [r7, #8]
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	681b      	ldr	r3, [r3, #0]
 800c266:	685b      	ldr	r3, [r3, #4]
 800c268:	60bb      	str	r3, [r7, #8]
 800c26a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	681b      	ldr	r3, [r3, #0]
 800c270:	695b      	ldr	r3, [r3, #20]
 800c272:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c276:	2b40      	cmp	r3, #64	; 0x40
 800c278:	f040 80b4 	bne.w	800c3e4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c280:	681b      	ldr	r3, [r3, #0]
 800c282:	685b      	ldr	r3, [r3, #4]
 800c284:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800c288:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800c28c:	2b00      	cmp	r3, #0
 800c28e:	f000 8140 	beq.w	800c512 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800c296:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c29a:	429a      	cmp	r2, r3
 800c29c:	f080 8139 	bcs.w	800c512 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c2a6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c2ac:	69db      	ldr	r3, [r3, #28]
 800c2ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c2b2:	f000 8088 	beq.w	800c3c6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	681b      	ldr	r3, [r3, #0]
 800c2ba:	330c      	adds	r3, #12
 800c2bc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c2c0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c2c4:	e853 3f00 	ldrex	r3, [r3]
 800c2c8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800c2cc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c2d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c2d4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	681b      	ldr	r3, [r3, #0]
 800c2dc:	330c      	adds	r3, #12
 800c2de:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800c2e2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800c2e6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c2ea:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800c2ee:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800c2f2:	e841 2300 	strex	r3, r2, [r1]
 800c2f6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800c2fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c2fe:	2b00      	cmp	r3, #0
 800c300:	d1d9      	bne.n	800c2b6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	681b      	ldr	r3, [r3, #0]
 800c306:	3314      	adds	r3, #20
 800c308:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c30a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c30c:	e853 3f00 	ldrex	r3, [r3]
 800c310:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800c312:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c314:	f023 0301 	bic.w	r3, r3, #1
 800c318:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	681b      	ldr	r3, [r3, #0]
 800c320:	3314      	adds	r3, #20
 800c322:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800c326:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800c32a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c32c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800c32e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800c332:	e841 2300 	strex	r3, r2, [r1]
 800c336:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800c338:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c33a:	2b00      	cmp	r3, #0
 800c33c:	d1e1      	bne.n	800c302 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	681b      	ldr	r3, [r3, #0]
 800c342:	3314      	adds	r3, #20
 800c344:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c346:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c348:	e853 3f00 	ldrex	r3, [r3]
 800c34c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800c34e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c350:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c354:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	681b      	ldr	r3, [r3, #0]
 800c35c:	3314      	adds	r3, #20
 800c35e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800c362:	66fa      	str	r2, [r7, #108]	; 0x6c
 800c364:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c366:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800c368:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800c36a:	e841 2300 	strex	r3, r2, [r1]
 800c36e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800c370:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c372:	2b00      	cmp	r3, #0
 800c374:	d1e3      	bne.n	800c33e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	2220      	movs	r2, #32
 800c37a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	2200      	movs	r2, #0
 800c382:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	681b      	ldr	r3, [r3, #0]
 800c388:	330c      	adds	r3, #12
 800c38a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c38c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c38e:	e853 3f00 	ldrex	r3, [r3]
 800c392:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800c394:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c396:	f023 0310 	bic.w	r3, r3, #16
 800c39a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	681b      	ldr	r3, [r3, #0]
 800c3a2:	330c      	adds	r3, #12
 800c3a4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800c3a8:	65ba      	str	r2, [r7, #88]	; 0x58
 800c3aa:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c3ac:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c3ae:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c3b0:	e841 2300 	strex	r3, r2, [r1]
 800c3b4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800c3b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c3b8:	2b00      	cmp	r3, #0
 800c3ba:	d1e3      	bne.n	800c384 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c3c0:	4618      	mov	r0, r3
 800c3c2:	f7f9 fc03 	bl	8005bcc <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c3ce:	b29b      	uxth	r3, r3
 800c3d0:	1ad3      	subs	r3, r2, r3
 800c3d2:	b29b      	uxth	r3, r3
 800c3d4:	4619      	mov	r1, r3
 800c3d6:	6878      	ldr	r0, [r7, #4]
 800c3d8:	f000 f8b6 	bl	800c548 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800c3dc:	e099      	b.n	800c512 <HAL_UART_IRQHandler+0x50e>
 800c3de:	bf00      	nop
 800c3e0:	0800c77f 	.word	0x0800c77f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c3ec:	b29b      	uxth	r3, r3
 800c3ee:	1ad3      	subs	r3, r2, r3
 800c3f0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c3f8:	b29b      	uxth	r3, r3
 800c3fa:	2b00      	cmp	r3, #0
 800c3fc:	f000 808b 	beq.w	800c516 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800c400:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c404:	2b00      	cmp	r3, #0
 800c406:	f000 8086 	beq.w	800c516 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	681b      	ldr	r3, [r3, #0]
 800c40e:	330c      	adds	r3, #12
 800c410:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c412:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c414:	e853 3f00 	ldrex	r3, [r3]
 800c418:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c41a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c41c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c420:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	681b      	ldr	r3, [r3, #0]
 800c428:	330c      	adds	r3, #12
 800c42a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800c42e:	647a      	str	r2, [r7, #68]	; 0x44
 800c430:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c432:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c434:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c436:	e841 2300 	strex	r3, r2, [r1]
 800c43a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c43c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c43e:	2b00      	cmp	r3, #0
 800c440:	d1e3      	bne.n	800c40a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	681b      	ldr	r3, [r3, #0]
 800c446:	3314      	adds	r3, #20
 800c448:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c44a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c44c:	e853 3f00 	ldrex	r3, [r3]
 800c450:	623b      	str	r3, [r7, #32]
   return(result);
 800c452:	6a3b      	ldr	r3, [r7, #32]
 800c454:	f023 0301 	bic.w	r3, r3, #1
 800c458:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	681b      	ldr	r3, [r3, #0]
 800c460:	3314      	adds	r3, #20
 800c462:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800c466:	633a      	str	r2, [r7, #48]	; 0x30
 800c468:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c46a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c46c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c46e:	e841 2300 	strex	r3, r2, [r1]
 800c472:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c474:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c476:	2b00      	cmp	r3, #0
 800c478:	d1e3      	bne.n	800c442 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	2220      	movs	r2, #32
 800c47e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	2200      	movs	r2, #0
 800c486:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	681b      	ldr	r3, [r3, #0]
 800c48c:	330c      	adds	r3, #12
 800c48e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c490:	693b      	ldr	r3, [r7, #16]
 800c492:	e853 3f00 	ldrex	r3, [r3]
 800c496:	60fb      	str	r3, [r7, #12]
   return(result);
 800c498:	68fb      	ldr	r3, [r7, #12]
 800c49a:	f023 0310 	bic.w	r3, r3, #16
 800c49e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	681b      	ldr	r3, [r3, #0]
 800c4a6:	330c      	adds	r3, #12
 800c4a8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800c4ac:	61fa      	str	r2, [r7, #28]
 800c4ae:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c4b0:	69b9      	ldr	r1, [r7, #24]
 800c4b2:	69fa      	ldr	r2, [r7, #28]
 800c4b4:	e841 2300 	strex	r3, r2, [r1]
 800c4b8:	617b      	str	r3, [r7, #20]
   return(result);
 800c4ba:	697b      	ldr	r3, [r7, #20]
 800c4bc:	2b00      	cmp	r3, #0
 800c4be:	d1e3      	bne.n	800c488 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800c4c0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c4c4:	4619      	mov	r1, r3
 800c4c6:	6878      	ldr	r0, [r7, #4]
 800c4c8:	f000 f83e 	bl	800c548 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800c4cc:	e023      	b.n	800c516 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800c4ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c4d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c4d6:	2b00      	cmp	r3, #0
 800c4d8:	d009      	beq.n	800c4ee <HAL_UART_IRQHandler+0x4ea>
 800c4da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c4de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c4e2:	2b00      	cmp	r3, #0
 800c4e4:	d003      	beq.n	800c4ee <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800c4e6:	6878      	ldr	r0, [r7, #4]
 800c4e8:	f000 f95d 	bl	800c7a6 <UART_Transmit_IT>
    return;
 800c4ec:	e014      	b.n	800c518 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800c4ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c4f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c4f6:	2b00      	cmp	r3, #0
 800c4f8:	d00e      	beq.n	800c518 <HAL_UART_IRQHandler+0x514>
 800c4fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c4fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c502:	2b00      	cmp	r3, #0
 800c504:	d008      	beq.n	800c518 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800c506:	6878      	ldr	r0, [r7, #4]
 800c508:	f000 f99d 	bl	800c846 <UART_EndTransmit_IT>
    return;
 800c50c:	e004      	b.n	800c518 <HAL_UART_IRQHandler+0x514>
    return;
 800c50e:	bf00      	nop
 800c510:	e002      	b.n	800c518 <HAL_UART_IRQHandler+0x514>
      return;
 800c512:	bf00      	nop
 800c514:	e000      	b.n	800c518 <HAL_UART_IRQHandler+0x514>
      return;
 800c516:	bf00      	nop
  }
}
 800c518:	37e8      	adds	r7, #232	; 0xe8
 800c51a:	46bd      	mov	sp, r7
 800c51c:	bd80      	pop	{r7, pc}
 800c51e:	bf00      	nop

0800c520 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800c520:	b480      	push	{r7}
 800c522:	b083      	sub	sp, #12
 800c524:	af00      	add	r7, sp, #0
 800c526:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800c528:	bf00      	nop
 800c52a:	370c      	adds	r7, #12
 800c52c:	46bd      	mov	sp, r7
 800c52e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c532:	4770      	bx	lr

0800c534 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800c534:	b480      	push	{r7}
 800c536:	b083      	sub	sp, #12
 800c538:	af00      	add	r7, sp, #0
 800c53a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800c53c:	bf00      	nop
 800c53e:	370c      	adds	r7, #12
 800c540:	46bd      	mov	sp, r7
 800c542:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c546:	4770      	bx	lr

0800c548 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800c548:	b480      	push	{r7}
 800c54a:	b083      	sub	sp, #12
 800c54c:	af00      	add	r7, sp, #0
 800c54e:	6078      	str	r0, [r7, #4]
 800c550:	460b      	mov	r3, r1
 800c552:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800c554:	bf00      	nop
 800c556:	370c      	adds	r7, #12
 800c558:	46bd      	mov	sp, r7
 800c55a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c55e:	4770      	bx	lr

0800c560 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800c560:	b580      	push	{r7, lr}
 800c562:	b090      	sub	sp, #64	; 0x40
 800c564:	af00      	add	r7, sp, #0
 800c566:	60f8      	str	r0, [r7, #12]
 800c568:	60b9      	str	r1, [r7, #8]
 800c56a:	603b      	str	r3, [r7, #0]
 800c56c:	4613      	mov	r3, r2
 800c56e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c570:	e050      	b.n	800c614 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c572:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c574:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c578:	d04c      	beq.n	800c614 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800c57a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c57c:	2b00      	cmp	r3, #0
 800c57e:	d007      	beq.n	800c590 <UART_WaitOnFlagUntilTimeout+0x30>
 800c580:	f7f7 feba 	bl	80042f8 <HAL_GetTick>
 800c584:	4602      	mov	r2, r0
 800c586:	683b      	ldr	r3, [r7, #0]
 800c588:	1ad3      	subs	r3, r2, r3
 800c58a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c58c:	429a      	cmp	r2, r3
 800c58e:	d241      	bcs.n	800c614 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800c590:	68fb      	ldr	r3, [r7, #12]
 800c592:	681b      	ldr	r3, [r3, #0]
 800c594:	330c      	adds	r3, #12
 800c596:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c598:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c59a:	e853 3f00 	ldrex	r3, [r3]
 800c59e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c5a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5a2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800c5a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c5a8:	68fb      	ldr	r3, [r7, #12]
 800c5aa:	681b      	ldr	r3, [r3, #0]
 800c5ac:	330c      	adds	r3, #12
 800c5ae:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c5b0:	637a      	str	r2, [r7, #52]	; 0x34
 800c5b2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c5b4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c5b6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c5b8:	e841 2300 	strex	r3, r2, [r1]
 800c5bc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800c5be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5c0:	2b00      	cmp	r3, #0
 800c5c2:	d1e5      	bne.n	800c590 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c5c4:	68fb      	ldr	r3, [r7, #12]
 800c5c6:	681b      	ldr	r3, [r3, #0]
 800c5c8:	3314      	adds	r3, #20
 800c5ca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5cc:	697b      	ldr	r3, [r7, #20]
 800c5ce:	e853 3f00 	ldrex	r3, [r3]
 800c5d2:	613b      	str	r3, [r7, #16]
   return(result);
 800c5d4:	693b      	ldr	r3, [r7, #16]
 800c5d6:	f023 0301 	bic.w	r3, r3, #1
 800c5da:	63bb      	str	r3, [r7, #56]	; 0x38
 800c5dc:	68fb      	ldr	r3, [r7, #12]
 800c5de:	681b      	ldr	r3, [r3, #0]
 800c5e0:	3314      	adds	r3, #20
 800c5e2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c5e4:	623a      	str	r2, [r7, #32]
 800c5e6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c5e8:	69f9      	ldr	r1, [r7, #28]
 800c5ea:	6a3a      	ldr	r2, [r7, #32]
 800c5ec:	e841 2300 	strex	r3, r2, [r1]
 800c5f0:	61bb      	str	r3, [r7, #24]
   return(result);
 800c5f2:	69bb      	ldr	r3, [r7, #24]
 800c5f4:	2b00      	cmp	r3, #0
 800c5f6:	d1e5      	bne.n	800c5c4 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800c5f8:	68fb      	ldr	r3, [r7, #12]
 800c5fa:	2220      	movs	r2, #32
 800c5fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800c600:	68fb      	ldr	r3, [r7, #12]
 800c602:	2220      	movs	r2, #32
 800c604:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800c608:	68fb      	ldr	r3, [r7, #12]
 800c60a:	2200      	movs	r2, #0
 800c60c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800c610:	2303      	movs	r3, #3
 800c612:	e00f      	b.n	800c634 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c614:	68fb      	ldr	r3, [r7, #12]
 800c616:	681b      	ldr	r3, [r3, #0]
 800c618:	681a      	ldr	r2, [r3, #0]
 800c61a:	68bb      	ldr	r3, [r7, #8]
 800c61c:	4013      	ands	r3, r2
 800c61e:	68ba      	ldr	r2, [r7, #8]
 800c620:	429a      	cmp	r2, r3
 800c622:	bf0c      	ite	eq
 800c624:	2301      	moveq	r3, #1
 800c626:	2300      	movne	r3, #0
 800c628:	b2db      	uxtb	r3, r3
 800c62a:	461a      	mov	r2, r3
 800c62c:	79fb      	ldrb	r3, [r7, #7]
 800c62e:	429a      	cmp	r2, r3
 800c630:	d09f      	beq.n	800c572 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800c632:	2300      	movs	r3, #0
}
 800c634:	4618      	mov	r0, r3
 800c636:	3740      	adds	r7, #64	; 0x40
 800c638:	46bd      	mov	sp, r7
 800c63a:	bd80      	pop	{r7, pc}

0800c63c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c63c:	b480      	push	{r7}
 800c63e:	b085      	sub	sp, #20
 800c640:	af00      	add	r7, sp, #0
 800c642:	60f8      	str	r0, [r7, #12]
 800c644:	60b9      	str	r1, [r7, #8]
 800c646:	4613      	mov	r3, r2
 800c648:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800c64a:	68fb      	ldr	r3, [r7, #12]
 800c64c:	68ba      	ldr	r2, [r7, #8]
 800c64e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800c650:	68fb      	ldr	r3, [r7, #12]
 800c652:	88fa      	ldrh	r2, [r7, #6]
 800c654:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800c656:	68fb      	ldr	r3, [r7, #12]
 800c658:	88fa      	ldrh	r2, [r7, #6]
 800c65a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c65c:	68fb      	ldr	r3, [r7, #12]
 800c65e:	2200      	movs	r2, #0
 800c660:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800c662:	68fb      	ldr	r3, [r7, #12]
 800c664:	2222      	movs	r2, #34	; 0x22
 800c666:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c66a:	68fb      	ldr	r3, [r7, #12]
 800c66c:	2200      	movs	r2, #0
 800c66e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800c672:	68fb      	ldr	r3, [r7, #12]
 800c674:	691b      	ldr	r3, [r3, #16]
 800c676:	2b00      	cmp	r3, #0
 800c678:	d007      	beq.n	800c68a <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800c67a:	68fb      	ldr	r3, [r7, #12]
 800c67c:	681b      	ldr	r3, [r3, #0]
 800c67e:	68da      	ldr	r2, [r3, #12]
 800c680:	68fb      	ldr	r3, [r7, #12]
 800c682:	681b      	ldr	r3, [r3, #0]
 800c684:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c688:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800c68a:	68fb      	ldr	r3, [r7, #12]
 800c68c:	681b      	ldr	r3, [r3, #0]
 800c68e:	695a      	ldr	r2, [r3, #20]
 800c690:	68fb      	ldr	r3, [r7, #12]
 800c692:	681b      	ldr	r3, [r3, #0]
 800c694:	f042 0201 	orr.w	r2, r2, #1
 800c698:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800c69a:	68fb      	ldr	r3, [r7, #12]
 800c69c:	681b      	ldr	r3, [r3, #0]
 800c69e:	68da      	ldr	r2, [r3, #12]
 800c6a0:	68fb      	ldr	r3, [r7, #12]
 800c6a2:	681b      	ldr	r3, [r3, #0]
 800c6a4:	f042 0220 	orr.w	r2, r2, #32
 800c6a8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800c6aa:	2300      	movs	r3, #0
}
 800c6ac:	4618      	mov	r0, r3
 800c6ae:	3714      	adds	r7, #20
 800c6b0:	46bd      	mov	sp, r7
 800c6b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6b6:	4770      	bx	lr

0800c6b8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c6b8:	b480      	push	{r7}
 800c6ba:	b095      	sub	sp, #84	; 0x54
 800c6bc:	af00      	add	r7, sp, #0
 800c6be:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	681b      	ldr	r3, [r3, #0]
 800c6c4:	330c      	adds	r3, #12
 800c6c6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c6c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c6ca:	e853 3f00 	ldrex	r3, [r3]
 800c6ce:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800c6d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6d2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c6d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	681b      	ldr	r3, [r3, #0]
 800c6dc:	330c      	adds	r3, #12
 800c6de:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c6e0:	643a      	str	r2, [r7, #64]	; 0x40
 800c6e2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c6e4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c6e6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c6e8:	e841 2300 	strex	r3, r2, [r1]
 800c6ec:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c6ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6f0:	2b00      	cmp	r3, #0
 800c6f2:	d1e5      	bne.n	800c6c0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	681b      	ldr	r3, [r3, #0]
 800c6f8:	3314      	adds	r3, #20
 800c6fa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c6fc:	6a3b      	ldr	r3, [r7, #32]
 800c6fe:	e853 3f00 	ldrex	r3, [r3]
 800c702:	61fb      	str	r3, [r7, #28]
   return(result);
 800c704:	69fb      	ldr	r3, [r7, #28]
 800c706:	f023 0301 	bic.w	r3, r3, #1
 800c70a:	64bb      	str	r3, [r7, #72]	; 0x48
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	681b      	ldr	r3, [r3, #0]
 800c710:	3314      	adds	r3, #20
 800c712:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c714:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c716:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c718:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c71a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c71c:	e841 2300 	strex	r3, r2, [r1]
 800c720:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c724:	2b00      	cmp	r3, #0
 800c726:	d1e5      	bne.n	800c6f4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c72c:	2b01      	cmp	r3, #1
 800c72e:	d119      	bne.n	800c764 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	681b      	ldr	r3, [r3, #0]
 800c734:	330c      	adds	r3, #12
 800c736:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c738:	68fb      	ldr	r3, [r7, #12]
 800c73a:	e853 3f00 	ldrex	r3, [r3]
 800c73e:	60bb      	str	r3, [r7, #8]
   return(result);
 800c740:	68bb      	ldr	r3, [r7, #8]
 800c742:	f023 0310 	bic.w	r3, r3, #16
 800c746:	647b      	str	r3, [r7, #68]	; 0x44
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	681b      	ldr	r3, [r3, #0]
 800c74c:	330c      	adds	r3, #12
 800c74e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c750:	61ba      	str	r2, [r7, #24]
 800c752:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c754:	6979      	ldr	r1, [r7, #20]
 800c756:	69ba      	ldr	r2, [r7, #24]
 800c758:	e841 2300 	strex	r3, r2, [r1]
 800c75c:	613b      	str	r3, [r7, #16]
   return(result);
 800c75e:	693b      	ldr	r3, [r7, #16]
 800c760:	2b00      	cmp	r3, #0
 800c762:	d1e5      	bne.n	800c730 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	2220      	movs	r2, #32
 800c768:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	2200      	movs	r2, #0
 800c770:	631a      	str	r2, [r3, #48]	; 0x30
}
 800c772:	bf00      	nop
 800c774:	3754      	adds	r7, #84	; 0x54
 800c776:	46bd      	mov	sp, r7
 800c778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c77c:	4770      	bx	lr

0800c77e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c77e:	b580      	push	{r7, lr}
 800c780:	b084      	sub	sp, #16
 800c782:	af00      	add	r7, sp, #0
 800c784:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c78a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800c78c:	68fb      	ldr	r3, [r7, #12]
 800c78e:	2200      	movs	r2, #0
 800c790:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800c792:	68fb      	ldr	r3, [r7, #12]
 800c794:	2200      	movs	r2, #0
 800c796:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c798:	68f8      	ldr	r0, [r7, #12]
 800c79a:	f7ff fecb 	bl	800c534 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c79e:	bf00      	nop
 800c7a0:	3710      	adds	r7, #16
 800c7a2:	46bd      	mov	sp, r7
 800c7a4:	bd80      	pop	{r7, pc}

0800c7a6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800c7a6:	b480      	push	{r7}
 800c7a8:	b085      	sub	sp, #20
 800c7aa:	af00      	add	r7, sp, #0
 800c7ac:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c7b4:	b2db      	uxtb	r3, r3
 800c7b6:	2b21      	cmp	r3, #33	; 0x21
 800c7b8:	d13e      	bne.n	800c838 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	689b      	ldr	r3, [r3, #8]
 800c7be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c7c2:	d114      	bne.n	800c7ee <UART_Transmit_IT+0x48>
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	691b      	ldr	r3, [r3, #16]
 800c7c8:	2b00      	cmp	r3, #0
 800c7ca:	d110      	bne.n	800c7ee <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	6a1b      	ldr	r3, [r3, #32]
 800c7d0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800c7d2:	68fb      	ldr	r3, [r7, #12]
 800c7d4:	881b      	ldrh	r3, [r3, #0]
 800c7d6:	461a      	mov	r2, r3
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	681b      	ldr	r3, [r3, #0]
 800c7dc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c7e0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	6a1b      	ldr	r3, [r3, #32]
 800c7e6:	1c9a      	adds	r2, r3, #2
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	621a      	str	r2, [r3, #32]
 800c7ec:	e008      	b.n	800c800 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	6a1b      	ldr	r3, [r3, #32]
 800c7f2:	1c59      	adds	r1, r3, #1
 800c7f4:	687a      	ldr	r2, [r7, #4]
 800c7f6:	6211      	str	r1, [r2, #32]
 800c7f8:	781a      	ldrb	r2, [r3, #0]
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	681b      	ldr	r3, [r3, #0]
 800c7fe:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800c804:	b29b      	uxth	r3, r3
 800c806:	3b01      	subs	r3, #1
 800c808:	b29b      	uxth	r3, r3
 800c80a:	687a      	ldr	r2, [r7, #4]
 800c80c:	4619      	mov	r1, r3
 800c80e:	84d1      	strh	r1, [r2, #38]	; 0x26
 800c810:	2b00      	cmp	r3, #0
 800c812:	d10f      	bne.n	800c834 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	681b      	ldr	r3, [r3, #0]
 800c818:	68da      	ldr	r2, [r3, #12]
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	681b      	ldr	r3, [r3, #0]
 800c81e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c822:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	681b      	ldr	r3, [r3, #0]
 800c828:	68da      	ldr	r2, [r3, #12]
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	681b      	ldr	r3, [r3, #0]
 800c82e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c832:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800c834:	2300      	movs	r3, #0
 800c836:	e000      	b.n	800c83a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800c838:	2302      	movs	r3, #2
  }
}
 800c83a:	4618      	mov	r0, r3
 800c83c:	3714      	adds	r7, #20
 800c83e:	46bd      	mov	sp, r7
 800c840:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c844:	4770      	bx	lr

0800c846 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c846:	b580      	push	{r7, lr}
 800c848:	b082      	sub	sp, #8
 800c84a:	af00      	add	r7, sp, #0
 800c84c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	681b      	ldr	r3, [r3, #0]
 800c852:	68da      	ldr	r2, [r3, #12]
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	681b      	ldr	r3, [r3, #0]
 800c858:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c85c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	2220      	movs	r2, #32
 800c862:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c866:	6878      	ldr	r0, [r7, #4]
 800c868:	f7ff fe5a 	bl	800c520 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800c86c:	2300      	movs	r3, #0
}
 800c86e:	4618      	mov	r0, r3
 800c870:	3708      	adds	r7, #8
 800c872:	46bd      	mov	sp, r7
 800c874:	bd80      	pop	{r7, pc}

0800c876 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800c876:	b580      	push	{r7, lr}
 800c878:	b08c      	sub	sp, #48	; 0x30
 800c87a:	af00      	add	r7, sp, #0
 800c87c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c884:	b2db      	uxtb	r3, r3
 800c886:	2b22      	cmp	r3, #34	; 0x22
 800c888:	f040 80ab 	bne.w	800c9e2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	689b      	ldr	r3, [r3, #8]
 800c890:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c894:	d117      	bne.n	800c8c6 <UART_Receive_IT+0x50>
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	691b      	ldr	r3, [r3, #16]
 800c89a:	2b00      	cmp	r3, #0
 800c89c:	d113      	bne.n	800c8c6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800c89e:	2300      	movs	r3, #0
 800c8a0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c8a6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	681b      	ldr	r3, [r3, #0]
 800c8ac:	685b      	ldr	r3, [r3, #4]
 800c8ae:	b29b      	uxth	r3, r3
 800c8b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c8b4:	b29a      	uxth	r2, r3
 800c8b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8b8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c8be:	1c9a      	adds	r2, r3, #2
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	629a      	str	r2, [r3, #40]	; 0x28
 800c8c4:	e026      	b.n	800c914 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c8ca:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800c8cc:	2300      	movs	r3, #0
 800c8ce:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	689b      	ldr	r3, [r3, #8]
 800c8d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c8d8:	d007      	beq.n	800c8ea <UART_Receive_IT+0x74>
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	689b      	ldr	r3, [r3, #8]
 800c8de:	2b00      	cmp	r3, #0
 800c8e0:	d10a      	bne.n	800c8f8 <UART_Receive_IT+0x82>
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	691b      	ldr	r3, [r3, #16]
 800c8e6:	2b00      	cmp	r3, #0
 800c8e8:	d106      	bne.n	800c8f8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	681b      	ldr	r3, [r3, #0]
 800c8ee:	685b      	ldr	r3, [r3, #4]
 800c8f0:	b2da      	uxtb	r2, r3
 800c8f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8f4:	701a      	strb	r2, [r3, #0]
 800c8f6:	e008      	b.n	800c90a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	681b      	ldr	r3, [r3, #0]
 800c8fc:	685b      	ldr	r3, [r3, #4]
 800c8fe:	b2db      	uxtb	r3, r3
 800c900:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c904:	b2da      	uxtb	r2, r3
 800c906:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c908:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c90e:	1c5a      	adds	r2, r3, #1
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c918:	b29b      	uxth	r3, r3
 800c91a:	3b01      	subs	r3, #1
 800c91c:	b29b      	uxth	r3, r3
 800c91e:	687a      	ldr	r2, [r7, #4]
 800c920:	4619      	mov	r1, r3
 800c922:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800c924:	2b00      	cmp	r3, #0
 800c926:	d15a      	bne.n	800c9de <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	681b      	ldr	r3, [r3, #0]
 800c92c:	68da      	ldr	r2, [r3, #12]
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	681b      	ldr	r3, [r3, #0]
 800c932:	f022 0220 	bic.w	r2, r2, #32
 800c936:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	681b      	ldr	r3, [r3, #0]
 800c93c:	68da      	ldr	r2, [r3, #12]
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	681b      	ldr	r3, [r3, #0]
 800c942:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c946:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	681b      	ldr	r3, [r3, #0]
 800c94c:	695a      	ldr	r2, [r3, #20]
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	681b      	ldr	r3, [r3, #0]
 800c952:	f022 0201 	bic.w	r2, r2, #1
 800c956:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	2220      	movs	r2, #32
 800c95c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c964:	2b01      	cmp	r3, #1
 800c966:	d135      	bne.n	800c9d4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	2200      	movs	r2, #0
 800c96c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	681b      	ldr	r3, [r3, #0]
 800c972:	330c      	adds	r3, #12
 800c974:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c976:	697b      	ldr	r3, [r7, #20]
 800c978:	e853 3f00 	ldrex	r3, [r3]
 800c97c:	613b      	str	r3, [r7, #16]
   return(result);
 800c97e:	693b      	ldr	r3, [r7, #16]
 800c980:	f023 0310 	bic.w	r3, r3, #16
 800c984:	627b      	str	r3, [r7, #36]	; 0x24
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	681b      	ldr	r3, [r3, #0]
 800c98a:	330c      	adds	r3, #12
 800c98c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c98e:	623a      	str	r2, [r7, #32]
 800c990:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c992:	69f9      	ldr	r1, [r7, #28]
 800c994:	6a3a      	ldr	r2, [r7, #32]
 800c996:	e841 2300 	strex	r3, r2, [r1]
 800c99a:	61bb      	str	r3, [r7, #24]
   return(result);
 800c99c:	69bb      	ldr	r3, [r7, #24]
 800c99e:	2b00      	cmp	r3, #0
 800c9a0:	d1e5      	bne.n	800c96e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	681b      	ldr	r3, [r3, #0]
 800c9a6:	681b      	ldr	r3, [r3, #0]
 800c9a8:	f003 0310 	and.w	r3, r3, #16
 800c9ac:	2b10      	cmp	r3, #16
 800c9ae:	d10a      	bne.n	800c9c6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800c9b0:	2300      	movs	r3, #0
 800c9b2:	60fb      	str	r3, [r7, #12]
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	681b      	ldr	r3, [r3, #0]
 800c9b8:	681b      	ldr	r3, [r3, #0]
 800c9ba:	60fb      	str	r3, [r7, #12]
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	681b      	ldr	r3, [r3, #0]
 800c9c0:	685b      	ldr	r3, [r3, #4]
 800c9c2:	60fb      	str	r3, [r7, #12]
 800c9c4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800c9ca:	4619      	mov	r1, r3
 800c9cc:	6878      	ldr	r0, [r7, #4]
 800c9ce:	f7ff fdbb 	bl	800c548 <HAL_UARTEx_RxEventCallback>
 800c9d2:	e002      	b.n	800c9da <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800c9d4:	6878      	ldr	r0, [r7, #4]
 800c9d6:	f7f5 fe01 	bl	80025dc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800c9da:	2300      	movs	r3, #0
 800c9dc:	e002      	b.n	800c9e4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800c9de:	2300      	movs	r3, #0
 800c9e0:	e000      	b.n	800c9e4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800c9e2:	2302      	movs	r3, #2
  }
}
 800c9e4:	4618      	mov	r0, r3
 800c9e6:	3730      	adds	r7, #48	; 0x30
 800c9e8:	46bd      	mov	sp, r7
 800c9ea:	bd80      	pop	{r7, pc}

0800c9ec <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c9ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c9f0:	b0c0      	sub	sp, #256	; 0x100
 800c9f2:	af00      	add	r7, sp, #0
 800c9f4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c9f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c9fc:	681b      	ldr	r3, [r3, #0]
 800c9fe:	691b      	ldr	r3, [r3, #16]
 800ca00:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800ca04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ca08:	68d9      	ldr	r1, [r3, #12]
 800ca0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ca0e:	681a      	ldr	r2, [r3, #0]
 800ca10:	ea40 0301 	orr.w	r3, r0, r1
 800ca14:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800ca16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ca1a:	689a      	ldr	r2, [r3, #8]
 800ca1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ca20:	691b      	ldr	r3, [r3, #16]
 800ca22:	431a      	orrs	r2, r3
 800ca24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ca28:	695b      	ldr	r3, [r3, #20]
 800ca2a:	431a      	orrs	r2, r3
 800ca2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ca30:	69db      	ldr	r3, [r3, #28]
 800ca32:	4313      	orrs	r3, r2
 800ca34:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800ca38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ca3c:	681b      	ldr	r3, [r3, #0]
 800ca3e:	68db      	ldr	r3, [r3, #12]
 800ca40:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800ca44:	f021 010c 	bic.w	r1, r1, #12
 800ca48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ca4c:	681a      	ldr	r2, [r3, #0]
 800ca4e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800ca52:	430b      	orrs	r3, r1
 800ca54:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800ca56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ca5a:	681b      	ldr	r3, [r3, #0]
 800ca5c:	695b      	ldr	r3, [r3, #20]
 800ca5e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800ca62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ca66:	6999      	ldr	r1, [r3, #24]
 800ca68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ca6c:	681a      	ldr	r2, [r3, #0]
 800ca6e:	ea40 0301 	orr.w	r3, r0, r1
 800ca72:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800ca74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ca78:	681a      	ldr	r2, [r3, #0]
 800ca7a:	4b8f      	ldr	r3, [pc, #572]	; (800ccb8 <UART_SetConfig+0x2cc>)
 800ca7c:	429a      	cmp	r2, r3
 800ca7e:	d005      	beq.n	800ca8c <UART_SetConfig+0xa0>
 800ca80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ca84:	681a      	ldr	r2, [r3, #0]
 800ca86:	4b8d      	ldr	r3, [pc, #564]	; (800ccbc <UART_SetConfig+0x2d0>)
 800ca88:	429a      	cmp	r2, r3
 800ca8a:	d104      	bne.n	800ca96 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800ca8c:	f7fc fd86 	bl	800959c <HAL_RCC_GetPCLK2Freq>
 800ca90:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800ca94:	e003      	b.n	800ca9e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800ca96:	f7fc fd6d 	bl	8009574 <HAL_RCC_GetPCLK1Freq>
 800ca9a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ca9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800caa2:	69db      	ldr	r3, [r3, #28]
 800caa4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800caa8:	f040 810c 	bne.w	800ccc4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800caac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800cab0:	2200      	movs	r2, #0
 800cab2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800cab6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800caba:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800cabe:	4622      	mov	r2, r4
 800cac0:	462b      	mov	r3, r5
 800cac2:	1891      	adds	r1, r2, r2
 800cac4:	65b9      	str	r1, [r7, #88]	; 0x58
 800cac6:	415b      	adcs	r3, r3
 800cac8:	65fb      	str	r3, [r7, #92]	; 0x5c
 800caca:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800cace:	4621      	mov	r1, r4
 800cad0:	eb12 0801 	adds.w	r8, r2, r1
 800cad4:	4629      	mov	r1, r5
 800cad6:	eb43 0901 	adc.w	r9, r3, r1
 800cada:	f04f 0200 	mov.w	r2, #0
 800cade:	f04f 0300 	mov.w	r3, #0
 800cae2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800cae6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800caea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800caee:	4690      	mov	r8, r2
 800caf0:	4699      	mov	r9, r3
 800caf2:	4623      	mov	r3, r4
 800caf4:	eb18 0303 	adds.w	r3, r8, r3
 800caf8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800cafc:	462b      	mov	r3, r5
 800cafe:	eb49 0303 	adc.w	r3, r9, r3
 800cb02:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800cb06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cb0a:	685b      	ldr	r3, [r3, #4]
 800cb0c:	2200      	movs	r2, #0
 800cb0e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800cb12:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800cb16:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800cb1a:	460b      	mov	r3, r1
 800cb1c:	18db      	adds	r3, r3, r3
 800cb1e:	653b      	str	r3, [r7, #80]	; 0x50
 800cb20:	4613      	mov	r3, r2
 800cb22:	eb42 0303 	adc.w	r3, r2, r3
 800cb26:	657b      	str	r3, [r7, #84]	; 0x54
 800cb28:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800cb2c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800cb30:	f7f4 f8ca 	bl	8000cc8 <__aeabi_uldivmod>
 800cb34:	4602      	mov	r2, r0
 800cb36:	460b      	mov	r3, r1
 800cb38:	4b61      	ldr	r3, [pc, #388]	; (800ccc0 <UART_SetConfig+0x2d4>)
 800cb3a:	fba3 2302 	umull	r2, r3, r3, r2
 800cb3e:	095b      	lsrs	r3, r3, #5
 800cb40:	011c      	lsls	r4, r3, #4
 800cb42:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800cb46:	2200      	movs	r2, #0
 800cb48:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800cb4c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800cb50:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800cb54:	4642      	mov	r2, r8
 800cb56:	464b      	mov	r3, r9
 800cb58:	1891      	adds	r1, r2, r2
 800cb5a:	64b9      	str	r1, [r7, #72]	; 0x48
 800cb5c:	415b      	adcs	r3, r3
 800cb5e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cb60:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800cb64:	4641      	mov	r1, r8
 800cb66:	eb12 0a01 	adds.w	sl, r2, r1
 800cb6a:	4649      	mov	r1, r9
 800cb6c:	eb43 0b01 	adc.w	fp, r3, r1
 800cb70:	f04f 0200 	mov.w	r2, #0
 800cb74:	f04f 0300 	mov.w	r3, #0
 800cb78:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800cb7c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800cb80:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800cb84:	4692      	mov	sl, r2
 800cb86:	469b      	mov	fp, r3
 800cb88:	4643      	mov	r3, r8
 800cb8a:	eb1a 0303 	adds.w	r3, sl, r3
 800cb8e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800cb92:	464b      	mov	r3, r9
 800cb94:	eb4b 0303 	adc.w	r3, fp, r3
 800cb98:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800cb9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cba0:	685b      	ldr	r3, [r3, #4]
 800cba2:	2200      	movs	r2, #0
 800cba4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800cba8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800cbac:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800cbb0:	460b      	mov	r3, r1
 800cbb2:	18db      	adds	r3, r3, r3
 800cbb4:	643b      	str	r3, [r7, #64]	; 0x40
 800cbb6:	4613      	mov	r3, r2
 800cbb8:	eb42 0303 	adc.w	r3, r2, r3
 800cbbc:	647b      	str	r3, [r7, #68]	; 0x44
 800cbbe:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800cbc2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800cbc6:	f7f4 f87f 	bl	8000cc8 <__aeabi_uldivmod>
 800cbca:	4602      	mov	r2, r0
 800cbcc:	460b      	mov	r3, r1
 800cbce:	4611      	mov	r1, r2
 800cbd0:	4b3b      	ldr	r3, [pc, #236]	; (800ccc0 <UART_SetConfig+0x2d4>)
 800cbd2:	fba3 2301 	umull	r2, r3, r3, r1
 800cbd6:	095b      	lsrs	r3, r3, #5
 800cbd8:	2264      	movs	r2, #100	; 0x64
 800cbda:	fb02 f303 	mul.w	r3, r2, r3
 800cbde:	1acb      	subs	r3, r1, r3
 800cbe0:	00db      	lsls	r3, r3, #3
 800cbe2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800cbe6:	4b36      	ldr	r3, [pc, #216]	; (800ccc0 <UART_SetConfig+0x2d4>)
 800cbe8:	fba3 2302 	umull	r2, r3, r3, r2
 800cbec:	095b      	lsrs	r3, r3, #5
 800cbee:	005b      	lsls	r3, r3, #1
 800cbf0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800cbf4:	441c      	add	r4, r3
 800cbf6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800cbfa:	2200      	movs	r2, #0
 800cbfc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800cc00:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800cc04:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800cc08:	4642      	mov	r2, r8
 800cc0a:	464b      	mov	r3, r9
 800cc0c:	1891      	adds	r1, r2, r2
 800cc0e:	63b9      	str	r1, [r7, #56]	; 0x38
 800cc10:	415b      	adcs	r3, r3
 800cc12:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cc14:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800cc18:	4641      	mov	r1, r8
 800cc1a:	1851      	adds	r1, r2, r1
 800cc1c:	6339      	str	r1, [r7, #48]	; 0x30
 800cc1e:	4649      	mov	r1, r9
 800cc20:	414b      	adcs	r3, r1
 800cc22:	637b      	str	r3, [r7, #52]	; 0x34
 800cc24:	f04f 0200 	mov.w	r2, #0
 800cc28:	f04f 0300 	mov.w	r3, #0
 800cc2c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800cc30:	4659      	mov	r1, fp
 800cc32:	00cb      	lsls	r3, r1, #3
 800cc34:	4651      	mov	r1, sl
 800cc36:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800cc3a:	4651      	mov	r1, sl
 800cc3c:	00ca      	lsls	r2, r1, #3
 800cc3e:	4610      	mov	r0, r2
 800cc40:	4619      	mov	r1, r3
 800cc42:	4603      	mov	r3, r0
 800cc44:	4642      	mov	r2, r8
 800cc46:	189b      	adds	r3, r3, r2
 800cc48:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800cc4c:	464b      	mov	r3, r9
 800cc4e:	460a      	mov	r2, r1
 800cc50:	eb42 0303 	adc.w	r3, r2, r3
 800cc54:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800cc58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cc5c:	685b      	ldr	r3, [r3, #4]
 800cc5e:	2200      	movs	r2, #0
 800cc60:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800cc64:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800cc68:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800cc6c:	460b      	mov	r3, r1
 800cc6e:	18db      	adds	r3, r3, r3
 800cc70:	62bb      	str	r3, [r7, #40]	; 0x28
 800cc72:	4613      	mov	r3, r2
 800cc74:	eb42 0303 	adc.w	r3, r2, r3
 800cc78:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cc7a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800cc7e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800cc82:	f7f4 f821 	bl	8000cc8 <__aeabi_uldivmod>
 800cc86:	4602      	mov	r2, r0
 800cc88:	460b      	mov	r3, r1
 800cc8a:	4b0d      	ldr	r3, [pc, #52]	; (800ccc0 <UART_SetConfig+0x2d4>)
 800cc8c:	fba3 1302 	umull	r1, r3, r3, r2
 800cc90:	095b      	lsrs	r3, r3, #5
 800cc92:	2164      	movs	r1, #100	; 0x64
 800cc94:	fb01 f303 	mul.w	r3, r1, r3
 800cc98:	1ad3      	subs	r3, r2, r3
 800cc9a:	00db      	lsls	r3, r3, #3
 800cc9c:	3332      	adds	r3, #50	; 0x32
 800cc9e:	4a08      	ldr	r2, [pc, #32]	; (800ccc0 <UART_SetConfig+0x2d4>)
 800cca0:	fba2 2303 	umull	r2, r3, r2, r3
 800cca4:	095b      	lsrs	r3, r3, #5
 800cca6:	f003 0207 	and.w	r2, r3, #7
 800ccaa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ccae:	681b      	ldr	r3, [r3, #0]
 800ccb0:	4422      	add	r2, r4
 800ccb2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800ccb4:	e105      	b.n	800cec2 <UART_SetConfig+0x4d6>
 800ccb6:	bf00      	nop
 800ccb8:	40011000 	.word	0x40011000
 800ccbc:	40011400 	.word	0x40011400
 800ccc0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800ccc4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ccc8:	2200      	movs	r2, #0
 800ccca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800ccce:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800ccd2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800ccd6:	4642      	mov	r2, r8
 800ccd8:	464b      	mov	r3, r9
 800ccda:	1891      	adds	r1, r2, r2
 800ccdc:	6239      	str	r1, [r7, #32]
 800ccde:	415b      	adcs	r3, r3
 800cce0:	627b      	str	r3, [r7, #36]	; 0x24
 800cce2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800cce6:	4641      	mov	r1, r8
 800cce8:	1854      	adds	r4, r2, r1
 800ccea:	4649      	mov	r1, r9
 800ccec:	eb43 0501 	adc.w	r5, r3, r1
 800ccf0:	f04f 0200 	mov.w	r2, #0
 800ccf4:	f04f 0300 	mov.w	r3, #0
 800ccf8:	00eb      	lsls	r3, r5, #3
 800ccfa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800ccfe:	00e2      	lsls	r2, r4, #3
 800cd00:	4614      	mov	r4, r2
 800cd02:	461d      	mov	r5, r3
 800cd04:	4643      	mov	r3, r8
 800cd06:	18e3      	adds	r3, r4, r3
 800cd08:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800cd0c:	464b      	mov	r3, r9
 800cd0e:	eb45 0303 	adc.w	r3, r5, r3
 800cd12:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800cd16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cd1a:	685b      	ldr	r3, [r3, #4]
 800cd1c:	2200      	movs	r2, #0
 800cd1e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800cd22:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800cd26:	f04f 0200 	mov.w	r2, #0
 800cd2a:	f04f 0300 	mov.w	r3, #0
 800cd2e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800cd32:	4629      	mov	r1, r5
 800cd34:	008b      	lsls	r3, r1, #2
 800cd36:	4621      	mov	r1, r4
 800cd38:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800cd3c:	4621      	mov	r1, r4
 800cd3e:	008a      	lsls	r2, r1, #2
 800cd40:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800cd44:	f7f3 ffc0 	bl	8000cc8 <__aeabi_uldivmod>
 800cd48:	4602      	mov	r2, r0
 800cd4a:	460b      	mov	r3, r1
 800cd4c:	4b60      	ldr	r3, [pc, #384]	; (800ced0 <UART_SetConfig+0x4e4>)
 800cd4e:	fba3 2302 	umull	r2, r3, r3, r2
 800cd52:	095b      	lsrs	r3, r3, #5
 800cd54:	011c      	lsls	r4, r3, #4
 800cd56:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800cd5a:	2200      	movs	r2, #0
 800cd5c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800cd60:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800cd64:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800cd68:	4642      	mov	r2, r8
 800cd6a:	464b      	mov	r3, r9
 800cd6c:	1891      	adds	r1, r2, r2
 800cd6e:	61b9      	str	r1, [r7, #24]
 800cd70:	415b      	adcs	r3, r3
 800cd72:	61fb      	str	r3, [r7, #28]
 800cd74:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800cd78:	4641      	mov	r1, r8
 800cd7a:	1851      	adds	r1, r2, r1
 800cd7c:	6139      	str	r1, [r7, #16]
 800cd7e:	4649      	mov	r1, r9
 800cd80:	414b      	adcs	r3, r1
 800cd82:	617b      	str	r3, [r7, #20]
 800cd84:	f04f 0200 	mov.w	r2, #0
 800cd88:	f04f 0300 	mov.w	r3, #0
 800cd8c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800cd90:	4659      	mov	r1, fp
 800cd92:	00cb      	lsls	r3, r1, #3
 800cd94:	4651      	mov	r1, sl
 800cd96:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800cd9a:	4651      	mov	r1, sl
 800cd9c:	00ca      	lsls	r2, r1, #3
 800cd9e:	4610      	mov	r0, r2
 800cda0:	4619      	mov	r1, r3
 800cda2:	4603      	mov	r3, r0
 800cda4:	4642      	mov	r2, r8
 800cda6:	189b      	adds	r3, r3, r2
 800cda8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800cdac:	464b      	mov	r3, r9
 800cdae:	460a      	mov	r2, r1
 800cdb0:	eb42 0303 	adc.w	r3, r2, r3
 800cdb4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800cdb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cdbc:	685b      	ldr	r3, [r3, #4]
 800cdbe:	2200      	movs	r2, #0
 800cdc0:	67bb      	str	r3, [r7, #120]	; 0x78
 800cdc2:	67fa      	str	r2, [r7, #124]	; 0x7c
 800cdc4:	f04f 0200 	mov.w	r2, #0
 800cdc8:	f04f 0300 	mov.w	r3, #0
 800cdcc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800cdd0:	4649      	mov	r1, r9
 800cdd2:	008b      	lsls	r3, r1, #2
 800cdd4:	4641      	mov	r1, r8
 800cdd6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800cdda:	4641      	mov	r1, r8
 800cddc:	008a      	lsls	r2, r1, #2
 800cdde:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800cde2:	f7f3 ff71 	bl	8000cc8 <__aeabi_uldivmod>
 800cde6:	4602      	mov	r2, r0
 800cde8:	460b      	mov	r3, r1
 800cdea:	4b39      	ldr	r3, [pc, #228]	; (800ced0 <UART_SetConfig+0x4e4>)
 800cdec:	fba3 1302 	umull	r1, r3, r3, r2
 800cdf0:	095b      	lsrs	r3, r3, #5
 800cdf2:	2164      	movs	r1, #100	; 0x64
 800cdf4:	fb01 f303 	mul.w	r3, r1, r3
 800cdf8:	1ad3      	subs	r3, r2, r3
 800cdfa:	011b      	lsls	r3, r3, #4
 800cdfc:	3332      	adds	r3, #50	; 0x32
 800cdfe:	4a34      	ldr	r2, [pc, #208]	; (800ced0 <UART_SetConfig+0x4e4>)
 800ce00:	fba2 2303 	umull	r2, r3, r2, r3
 800ce04:	095b      	lsrs	r3, r3, #5
 800ce06:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ce0a:	441c      	add	r4, r3
 800ce0c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ce10:	2200      	movs	r2, #0
 800ce12:	673b      	str	r3, [r7, #112]	; 0x70
 800ce14:	677a      	str	r2, [r7, #116]	; 0x74
 800ce16:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800ce1a:	4642      	mov	r2, r8
 800ce1c:	464b      	mov	r3, r9
 800ce1e:	1891      	adds	r1, r2, r2
 800ce20:	60b9      	str	r1, [r7, #8]
 800ce22:	415b      	adcs	r3, r3
 800ce24:	60fb      	str	r3, [r7, #12]
 800ce26:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800ce2a:	4641      	mov	r1, r8
 800ce2c:	1851      	adds	r1, r2, r1
 800ce2e:	6039      	str	r1, [r7, #0]
 800ce30:	4649      	mov	r1, r9
 800ce32:	414b      	adcs	r3, r1
 800ce34:	607b      	str	r3, [r7, #4]
 800ce36:	f04f 0200 	mov.w	r2, #0
 800ce3a:	f04f 0300 	mov.w	r3, #0
 800ce3e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800ce42:	4659      	mov	r1, fp
 800ce44:	00cb      	lsls	r3, r1, #3
 800ce46:	4651      	mov	r1, sl
 800ce48:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800ce4c:	4651      	mov	r1, sl
 800ce4e:	00ca      	lsls	r2, r1, #3
 800ce50:	4610      	mov	r0, r2
 800ce52:	4619      	mov	r1, r3
 800ce54:	4603      	mov	r3, r0
 800ce56:	4642      	mov	r2, r8
 800ce58:	189b      	adds	r3, r3, r2
 800ce5a:	66bb      	str	r3, [r7, #104]	; 0x68
 800ce5c:	464b      	mov	r3, r9
 800ce5e:	460a      	mov	r2, r1
 800ce60:	eb42 0303 	adc.w	r3, r2, r3
 800ce64:	66fb      	str	r3, [r7, #108]	; 0x6c
 800ce66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ce6a:	685b      	ldr	r3, [r3, #4]
 800ce6c:	2200      	movs	r2, #0
 800ce6e:	663b      	str	r3, [r7, #96]	; 0x60
 800ce70:	667a      	str	r2, [r7, #100]	; 0x64
 800ce72:	f04f 0200 	mov.w	r2, #0
 800ce76:	f04f 0300 	mov.w	r3, #0
 800ce7a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800ce7e:	4649      	mov	r1, r9
 800ce80:	008b      	lsls	r3, r1, #2
 800ce82:	4641      	mov	r1, r8
 800ce84:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800ce88:	4641      	mov	r1, r8
 800ce8a:	008a      	lsls	r2, r1, #2
 800ce8c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800ce90:	f7f3 ff1a 	bl	8000cc8 <__aeabi_uldivmod>
 800ce94:	4602      	mov	r2, r0
 800ce96:	460b      	mov	r3, r1
 800ce98:	4b0d      	ldr	r3, [pc, #52]	; (800ced0 <UART_SetConfig+0x4e4>)
 800ce9a:	fba3 1302 	umull	r1, r3, r3, r2
 800ce9e:	095b      	lsrs	r3, r3, #5
 800cea0:	2164      	movs	r1, #100	; 0x64
 800cea2:	fb01 f303 	mul.w	r3, r1, r3
 800cea6:	1ad3      	subs	r3, r2, r3
 800cea8:	011b      	lsls	r3, r3, #4
 800ceaa:	3332      	adds	r3, #50	; 0x32
 800ceac:	4a08      	ldr	r2, [pc, #32]	; (800ced0 <UART_SetConfig+0x4e4>)
 800ceae:	fba2 2303 	umull	r2, r3, r2, r3
 800ceb2:	095b      	lsrs	r3, r3, #5
 800ceb4:	f003 020f 	and.w	r2, r3, #15
 800ceb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cebc:	681b      	ldr	r3, [r3, #0]
 800cebe:	4422      	add	r2, r4
 800cec0:	609a      	str	r2, [r3, #8]
}
 800cec2:	bf00      	nop
 800cec4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800cec8:	46bd      	mov	sp, r7
 800ceca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800cece:	bf00      	nop
 800ced0:	51eb851f 	.word	0x51eb851f

0800ced4 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800ced4:	b084      	sub	sp, #16
 800ced6:	b480      	push	{r7}
 800ced8:	b085      	sub	sp, #20
 800ceda:	af00      	add	r7, sp, #0
 800cedc:	6078      	str	r0, [r7, #4]
 800cede:	f107 001c 	add.w	r0, r7, #28
 800cee2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800cee6:	2300      	movs	r3, #0
 800cee8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800ceea:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800ceec:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800ceee:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800cef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800cef2:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800cef4:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800cef6:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800cef8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800cefa:	431a      	orrs	r2, r3
             Init.ClockDiv
 800cefc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800cefe:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800cf00:	68fa      	ldr	r2, [r7, #12]
 800cf02:	4313      	orrs	r3, r2
 800cf04:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	685b      	ldr	r3, [r3, #4]
 800cf0a:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800cf0e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800cf12:	68fa      	ldr	r2, [r7, #12]
 800cf14:	431a      	orrs	r2, r3
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800cf1a:	2300      	movs	r3, #0
}
 800cf1c:	4618      	mov	r0, r3
 800cf1e:	3714      	adds	r7, #20
 800cf20:	46bd      	mov	sp, r7
 800cf22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf26:	b004      	add	sp, #16
 800cf28:	4770      	bx	lr

0800cf2a <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800cf2a:	b480      	push	{r7}
 800cf2c:	b083      	sub	sp, #12
 800cf2e:	af00      	add	r7, sp, #0
 800cf30:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800cf38:	4618      	mov	r0, r3
 800cf3a:	370c      	adds	r7, #12
 800cf3c:	46bd      	mov	sp, r7
 800cf3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf42:	4770      	bx	lr

0800cf44 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 800cf44:	b480      	push	{r7}
 800cf46:	b083      	sub	sp, #12
 800cf48:	af00      	add	r7, sp, #0
 800cf4a:	6078      	str	r0, [r7, #4]
 800cf4c:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800cf4e:	683b      	ldr	r3, [r7, #0]
 800cf50:	681a      	ldr	r2, [r3, #0]
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800cf58:	2300      	movs	r3, #0
}
 800cf5a:	4618      	mov	r0, r3
 800cf5c:	370c      	adds	r7, #12
 800cf5e:	46bd      	mov	sp, r7
 800cf60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf64:	4770      	bx	lr

0800cf66 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800cf66:	b480      	push	{r7}
 800cf68:	b083      	sub	sp, #12
 800cf6a:	af00      	add	r7, sp, #0
 800cf6c:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	2203      	movs	r2, #3
 800cf72:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800cf74:	2300      	movs	r3, #0
}
 800cf76:	4618      	mov	r0, r3
 800cf78:	370c      	adds	r7, #12
 800cf7a:	46bd      	mov	sp, r7
 800cf7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf80:	4770      	bx	lr

0800cf82 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800cf82:	b480      	push	{r7}
 800cf84:	b083      	sub	sp, #12
 800cf86:	af00      	add	r7, sp, #0
 800cf88:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	681b      	ldr	r3, [r3, #0]
 800cf8e:	f003 0303 	and.w	r3, r3, #3
}
 800cf92:	4618      	mov	r0, r3
 800cf94:	370c      	adds	r7, #12
 800cf96:	46bd      	mov	sp, r7
 800cf98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf9c:	4770      	bx	lr

0800cf9e <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800cf9e:	b480      	push	{r7}
 800cfa0:	b085      	sub	sp, #20
 800cfa2:	af00      	add	r7, sp, #0
 800cfa4:	6078      	str	r0, [r7, #4]
 800cfa6:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800cfa8:	2300      	movs	r3, #0
 800cfaa:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800cfac:	683b      	ldr	r3, [r7, #0]
 800cfae:	681a      	ldr	r2, [r3, #0]
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800cfb4:	683b      	ldr	r3, [r7, #0]
 800cfb6:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800cfb8:	683b      	ldr	r3, [r7, #0]
 800cfba:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800cfbc:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800cfbe:	683b      	ldr	r3, [r7, #0]
 800cfc0:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800cfc2:	431a      	orrs	r2, r3
                       Command->CPSM);
 800cfc4:	683b      	ldr	r3, [r7, #0]
 800cfc6:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800cfc8:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800cfca:	68fa      	ldr	r2, [r7, #12]
 800cfcc:	4313      	orrs	r3, r2
 800cfce:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	68db      	ldr	r3, [r3, #12]
 800cfd4:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800cfd8:	f023 030f 	bic.w	r3, r3, #15
 800cfdc:	68fa      	ldr	r2, [r7, #12]
 800cfde:	431a      	orrs	r2, r3
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800cfe4:	2300      	movs	r3, #0
}
 800cfe6:	4618      	mov	r0, r3
 800cfe8:	3714      	adds	r7, #20
 800cfea:	46bd      	mov	sp, r7
 800cfec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cff0:	4770      	bx	lr

0800cff2 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800cff2:	b480      	push	{r7}
 800cff4:	b083      	sub	sp, #12
 800cff6:	af00      	add	r7, sp, #0
 800cff8:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	691b      	ldr	r3, [r3, #16]
 800cffe:	b2db      	uxtb	r3, r3
}
 800d000:	4618      	mov	r0, r3
 800d002:	370c      	adds	r7, #12
 800d004:	46bd      	mov	sp, r7
 800d006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d00a:	4770      	bx	lr

0800d00c <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800d00c:	b480      	push	{r7}
 800d00e:	b085      	sub	sp, #20
 800d010:	af00      	add	r7, sp, #0
 800d012:	6078      	str	r0, [r7, #4]
 800d014:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	3314      	adds	r3, #20
 800d01a:	461a      	mov	r2, r3
 800d01c:	683b      	ldr	r3, [r7, #0]
 800d01e:	4413      	add	r3, r2
 800d020:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800d022:	68fb      	ldr	r3, [r7, #12]
 800d024:	681b      	ldr	r3, [r3, #0]
}  
 800d026:	4618      	mov	r0, r3
 800d028:	3714      	adds	r7, #20
 800d02a:	46bd      	mov	sp, r7
 800d02c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d030:	4770      	bx	lr

0800d032 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800d032:	b480      	push	{r7}
 800d034:	b085      	sub	sp, #20
 800d036:	af00      	add	r7, sp, #0
 800d038:	6078      	str	r0, [r7, #4]
 800d03a:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800d03c:	2300      	movs	r3, #0
 800d03e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800d040:	683b      	ldr	r3, [r7, #0]
 800d042:	681a      	ldr	r2, [r3, #0]
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800d048:	683b      	ldr	r3, [r7, #0]
 800d04a:	685a      	ldr	r2, [r3, #4]
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800d050:	683b      	ldr	r3, [r7, #0]
 800d052:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800d054:	683b      	ldr	r3, [r7, #0]
 800d056:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800d058:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800d05a:	683b      	ldr	r3, [r7, #0]
 800d05c:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800d05e:	431a      	orrs	r2, r3
                       Data->DPSM);
 800d060:	683b      	ldr	r3, [r7, #0]
 800d062:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800d064:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800d066:	68fa      	ldr	r2, [r7, #12]
 800d068:	4313      	orrs	r3, r2
 800d06a:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d070:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800d074:	68fb      	ldr	r3, [r7, #12]
 800d076:	431a      	orrs	r2, r3
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800d07c:	2300      	movs	r3, #0

}
 800d07e:	4618      	mov	r0, r3
 800d080:	3714      	adds	r7, #20
 800d082:	46bd      	mov	sp, r7
 800d084:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d088:	4770      	bx	lr

0800d08a <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800d08a:	b580      	push	{r7, lr}
 800d08c:	b088      	sub	sp, #32
 800d08e:	af00      	add	r7, sp, #0
 800d090:	6078      	str	r0, [r7, #4]
 800d092:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800d094:	683b      	ldr	r3, [r7, #0]
 800d096:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800d098:	2310      	movs	r3, #16
 800d09a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d09c:	2340      	movs	r3, #64	; 0x40
 800d09e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d0a0:	2300      	movs	r3, #0
 800d0a2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d0a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d0a8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d0aa:	f107 0308 	add.w	r3, r7, #8
 800d0ae:	4619      	mov	r1, r3
 800d0b0:	6878      	ldr	r0, [r7, #4]
 800d0b2:	f7ff ff74 	bl	800cf9e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800d0b6:	f241 3288 	movw	r2, #5000	; 0x1388
 800d0ba:	2110      	movs	r1, #16
 800d0bc:	6878      	ldr	r0, [r7, #4]
 800d0be:	f000 fa19 	bl	800d4f4 <SDMMC_GetCmdResp1>
 800d0c2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d0c4:	69fb      	ldr	r3, [r7, #28]
}
 800d0c6:	4618      	mov	r0, r3
 800d0c8:	3720      	adds	r7, #32
 800d0ca:	46bd      	mov	sp, r7
 800d0cc:	bd80      	pop	{r7, pc}

0800d0ce <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800d0ce:	b580      	push	{r7, lr}
 800d0d0:	b088      	sub	sp, #32
 800d0d2:	af00      	add	r7, sp, #0
 800d0d4:	6078      	str	r0, [r7, #4]
 800d0d6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800d0d8:	683b      	ldr	r3, [r7, #0]
 800d0da:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800d0dc:	2311      	movs	r3, #17
 800d0de:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d0e0:	2340      	movs	r3, #64	; 0x40
 800d0e2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d0e4:	2300      	movs	r3, #0
 800d0e6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d0e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d0ec:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d0ee:	f107 0308 	add.w	r3, r7, #8
 800d0f2:	4619      	mov	r1, r3
 800d0f4:	6878      	ldr	r0, [r7, #4]
 800d0f6:	f7ff ff52 	bl	800cf9e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800d0fa:	f241 3288 	movw	r2, #5000	; 0x1388
 800d0fe:	2111      	movs	r1, #17
 800d100:	6878      	ldr	r0, [r7, #4]
 800d102:	f000 f9f7 	bl	800d4f4 <SDMMC_GetCmdResp1>
 800d106:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d108:	69fb      	ldr	r3, [r7, #28]
}
 800d10a:	4618      	mov	r0, r3
 800d10c:	3720      	adds	r7, #32
 800d10e:	46bd      	mov	sp, r7
 800d110:	bd80      	pop	{r7, pc}

0800d112 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800d112:	b580      	push	{r7, lr}
 800d114:	b088      	sub	sp, #32
 800d116:	af00      	add	r7, sp, #0
 800d118:	6078      	str	r0, [r7, #4]
 800d11a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800d11c:	683b      	ldr	r3, [r7, #0]
 800d11e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800d120:	2312      	movs	r3, #18
 800d122:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d124:	2340      	movs	r3, #64	; 0x40
 800d126:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d128:	2300      	movs	r3, #0
 800d12a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d12c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d130:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d132:	f107 0308 	add.w	r3, r7, #8
 800d136:	4619      	mov	r1, r3
 800d138:	6878      	ldr	r0, [r7, #4]
 800d13a:	f7ff ff30 	bl	800cf9e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800d13e:	f241 3288 	movw	r2, #5000	; 0x1388
 800d142:	2112      	movs	r1, #18
 800d144:	6878      	ldr	r0, [r7, #4]
 800d146:	f000 f9d5 	bl	800d4f4 <SDMMC_GetCmdResp1>
 800d14a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d14c:	69fb      	ldr	r3, [r7, #28]
}
 800d14e:	4618      	mov	r0, r3
 800d150:	3720      	adds	r7, #32
 800d152:	46bd      	mov	sp, r7
 800d154:	bd80      	pop	{r7, pc}

0800d156 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800d156:	b580      	push	{r7, lr}
 800d158:	b088      	sub	sp, #32
 800d15a:	af00      	add	r7, sp, #0
 800d15c:	6078      	str	r0, [r7, #4]
 800d15e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800d160:	683b      	ldr	r3, [r7, #0]
 800d162:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800d164:	2318      	movs	r3, #24
 800d166:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d168:	2340      	movs	r3, #64	; 0x40
 800d16a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d16c:	2300      	movs	r3, #0
 800d16e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d170:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d174:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d176:	f107 0308 	add.w	r3, r7, #8
 800d17a:	4619      	mov	r1, r3
 800d17c:	6878      	ldr	r0, [r7, #4]
 800d17e:	f7ff ff0e 	bl	800cf9e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800d182:	f241 3288 	movw	r2, #5000	; 0x1388
 800d186:	2118      	movs	r1, #24
 800d188:	6878      	ldr	r0, [r7, #4]
 800d18a:	f000 f9b3 	bl	800d4f4 <SDMMC_GetCmdResp1>
 800d18e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d190:	69fb      	ldr	r3, [r7, #28]
}
 800d192:	4618      	mov	r0, r3
 800d194:	3720      	adds	r7, #32
 800d196:	46bd      	mov	sp, r7
 800d198:	bd80      	pop	{r7, pc}

0800d19a <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800d19a:	b580      	push	{r7, lr}
 800d19c:	b088      	sub	sp, #32
 800d19e:	af00      	add	r7, sp, #0
 800d1a0:	6078      	str	r0, [r7, #4]
 800d1a2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800d1a4:	683b      	ldr	r3, [r7, #0]
 800d1a6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800d1a8:	2319      	movs	r3, #25
 800d1aa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d1ac:	2340      	movs	r3, #64	; 0x40
 800d1ae:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d1b0:	2300      	movs	r3, #0
 800d1b2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d1b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d1b8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d1ba:	f107 0308 	add.w	r3, r7, #8
 800d1be:	4619      	mov	r1, r3
 800d1c0:	6878      	ldr	r0, [r7, #4]
 800d1c2:	f7ff feec 	bl	800cf9e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800d1c6:	f241 3288 	movw	r2, #5000	; 0x1388
 800d1ca:	2119      	movs	r1, #25
 800d1cc:	6878      	ldr	r0, [r7, #4]
 800d1ce:	f000 f991 	bl	800d4f4 <SDMMC_GetCmdResp1>
 800d1d2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d1d4:	69fb      	ldr	r3, [r7, #28]
}
 800d1d6:	4618      	mov	r0, r3
 800d1d8:	3720      	adds	r7, #32
 800d1da:	46bd      	mov	sp, r7
 800d1dc:	bd80      	pop	{r7, pc}
	...

0800d1e0 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800d1e0:	b580      	push	{r7, lr}
 800d1e2:	b088      	sub	sp, #32
 800d1e4:	af00      	add	r7, sp, #0
 800d1e6:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800d1e8:	2300      	movs	r3, #0
 800d1ea:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800d1ec:	230c      	movs	r3, #12
 800d1ee:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d1f0:	2340      	movs	r3, #64	; 0x40
 800d1f2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d1f4:	2300      	movs	r3, #0
 800d1f6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d1f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d1fc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d1fe:	f107 0308 	add.w	r3, r7, #8
 800d202:	4619      	mov	r1, r3
 800d204:	6878      	ldr	r0, [r7, #4]
 800d206:	f7ff feca 	bl	800cf9e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800d20a:	4a05      	ldr	r2, [pc, #20]	; (800d220 <SDMMC_CmdStopTransfer+0x40>)
 800d20c:	210c      	movs	r1, #12
 800d20e:	6878      	ldr	r0, [r7, #4]
 800d210:	f000 f970 	bl	800d4f4 <SDMMC_GetCmdResp1>
 800d214:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d216:	69fb      	ldr	r3, [r7, #28]
}
 800d218:	4618      	mov	r0, r3
 800d21a:	3720      	adds	r7, #32
 800d21c:	46bd      	mov	sp, r7
 800d21e:	bd80      	pop	{r7, pc}
 800d220:	05f5e100 	.word	0x05f5e100

0800d224 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800d224:	b580      	push	{r7, lr}
 800d226:	b08a      	sub	sp, #40	; 0x28
 800d228:	af00      	add	r7, sp, #0
 800d22a:	60f8      	str	r0, [r7, #12]
 800d22c:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800d230:	683b      	ldr	r3, [r7, #0]
 800d232:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800d234:	2307      	movs	r3, #7
 800d236:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d238:	2340      	movs	r3, #64	; 0x40
 800d23a:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d23c:	2300      	movs	r3, #0
 800d23e:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d240:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d244:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d246:	f107 0310 	add.w	r3, r7, #16
 800d24a:	4619      	mov	r1, r3
 800d24c:	68f8      	ldr	r0, [r7, #12]
 800d24e:	f7ff fea6 	bl	800cf9e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800d252:	f241 3288 	movw	r2, #5000	; 0x1388
 800d256:	2107      	movs	r1, #7
 800d258:	68f8      	ldr	r0, [r7, #12]
 800d25a:	f000 f94b 	bl	800d4f4 <SDMMC_GetCmdResp1>
 800d25e:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800d260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d262:	4618      	mov	r0, r3
 800d264:	3728      	adds	r7, #40	; 0x28
 800d266:	46bd      	mov	sp, r7
 800d268:	bd80      	pop	{r7, pc}

0800d26a <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800d26a:	b580      	push	{r7, lr}
 800d26c:	b088      	sub	sp, #32
 800d26e:	af00      	add	r7, sp, #0
 800d270:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800d272:	2300      	movs	r3, #0
 800d274:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800d276:	2300      	movs	r3, #0
 800d278:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800d27a:	2300      	movs	r3, #0
 800d27c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d27e:	2300      	movs	r3, #0
 800d280:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d282:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d286:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d288:	f107 0308 	add.w	r3, r7, #8
 800d28c:	4619      	mov	r1, r3
 800d28e:	6878      	ldr	r0, [r7, #4]
 800d290:	f7ff fe85 	bl	800cf9e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800d294:	6878      	ldr	r0, [r7, #4]
 800d296:	f000 fb65 	bl	800d964 <SDMMC_GetCmdError>
 800d29a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d29c:	69fb      	ldr	r3, [r7, #28]
}
 800d29e:	4618      	mov	r0, r3
 800d2a0:	3720      	adds	r7, #32
 800d2a2:	46bd      	mov	sp, r7
 800d2a4:	bd80      	pop	{r7, pc}

0800d2a6 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800d2a6:	b580      	push	{r7, lr}
 800d2a8:	b088      	sub	sp, #32
 800d2aa:	af00      	add	r7, sp, #0
 800d2ac:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800d2ae:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800d2b2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800d2b4:	2308      	movs	r3, #8
 800d2b6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d2b8:	2340      	movs	r3, #64	; 0x40
 800d2ba:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d2bc:	2300      	movs	r3, #0
 800d2be:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d2c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d2c4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d2c6:	f107 0308 	add.w	r3, r7, #8
 800d2ca:	4619      	mov	r1, r3
 800d2cc:	6878      	ldr	r0, [r7, #4]
 800d2ce:	f7ff fe66 	bl	800cf9e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800d2d2:	6878      	ldr	r0, [r7, #4]
 800d2d4:	f000 faf8 	bl	800d8c8 <SDMMC_GetCmdResp7>
 800d2d8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d2da:	69fb      	ldr	r3, [r7, #28]
}
 800d2dc:	4618      	mov	r0, r3
 800d2de:	3720      	adds	r7, #32
 800d2e0:	46bd      	mov	sp, r7
 800d2e2:	bd80      	pop	{r7, pc}

0800d2e4 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800d2e4:	b580      	push	{r7, lr}
 800d2e6:	b088      	sub	sp, #32
 800d2e8:	af00      	add	r7, sp, #0
 800d2ea:	6078      	str	r0, [r7, #4]
 800d2ec:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800d2ee:	683b      	ldr	r3, [r7, #0]
 800d2f0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800d2f2:	2337      	movs	r3, #55	; 0x37
 800d2f4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d2f6:	2340      	movs	r3, #64	; 0x40
 800d2f8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d2fa:	2300      	movs	r3, #0
 800d2fc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d2fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d302:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d304:	f107 0308 	add.w	r3, r7, #8
 800d308:	4619      	mov	r1, r3
 800d30a:	6878      	ldr	r0, [r7, #4]
 800d30c:	f7ff fe47 	bl	800cf9e <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800d310:	f241 3288 	movw	r2, #5000	; 0x1388
 800d314:	2137      	movs	r1, #55	; 0x37
 800d316:	6878      	ldr	r0, [r7, #4]
 800d318:	f000 f8ec 	bl	800d4f4 <SDMMC_GetCmdResp1>
 800d31c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d31e:	69fb      	ldr	r3, [r7, #28]
}
 800d320:	4618      	mov	r0, r3
 800d322:	3720      	adds	r7, #32
 800d324:	46bd      	mov	sp, r7
 800d326:	bd80      	pop	{r7, pc}

0800d328 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800d328:	b580      	push	{r7, lr}
 800d32a:	b088      	sub	sp, #32
 800d32c:	af00      	add	r7, sp, #0
 800d32e:	6078      	str	r0, [r7, #4]
 800d330:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800d332:	683b      	ldr	r3, [r7, #0]
 800d334:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d338:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d33c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800d33e:	2329      	movs	r3, #41	; 0x29
 800d340:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d342:	2340      	movs	r3, #64	; 0x40
 800d344:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d346:	2300      	movs	r3, #0
 800d348:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d34a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d34e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d350:	f107 0308 	add.w	r3, r7, #8
 800d354:	4619      	mov	r1, r3
 800d356:	6878      	ldr	r0, [r7, #4]
 800d358:	f7ff fe21 	bl	800cf9e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800d35c:	6878      	ldr	r0, [r7, #4]
 800d35e:	f000 f9ff 	bl	800d760 <SDMMC_GetCmdResp3>
 800d362:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d364:	69fb      	ldr	r3, [r7, #28]
}
 800d366:	4618      	mov	r0, r3
 800d368:	3720      	adds	r7, #32
 800d36a:	46bd      	mov	sp, r7
 800d36c:	bd80      	pop	{r7, pc}

0800d36e <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 800d36e:	b580      	push	{r7, lr}
 800d370:	b088      	sub	sp, #32
 800d372:	af00      	add	r7, sp, #0
 800d374:	6078      	str	r0, [r7, #4]
 800d376:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800d378:	683b      	ldr	r3, [r7, #0]
 800d37a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800d37c:	2306      	movs	r3, #6
 800d37e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d380:	2340      	movs	r3, #64	; 0x40
 800d382:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d384:	2300      	movs	r3, #0
 800d386:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d388:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d38c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d38e:	f107 0308 	add.w	r3, r7, #8
 800d392:	4619      	mov	r1, r3
 800d394:	6878      	ldr	r0, [r7, #4]
 800d396:	f7ff fe02 	bl	800cf9e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 800d39a:	f241 3288 	movw	r2, #5000	; 0x1388
 800d39e:	2106      	movs	r1, #6
 800d3a0:	6878      	ldr	r0, [r7, #4]
 800d3a2:	f000 f8a7 	bl	800d4f4 <SDMMC_GetCmdResp1>
 800d3a6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d3a8:	69fb      	ldr	r3, [r7, #28]
}
 800d3aa:	4618      	mov	r0, r3
 800d3ac:	3720      	adds	r7, #32
 800d3ae:	46bd      	mov	sp, r7
 800d3b0:	bd80      	pop	{r7, pc}

0800d3b2 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 800d3b2:	b580      	push	{r7, lr}
 800d3b4:	b088      	sub	sp, #32
 800d3b6:	af00      	add	r7, sp, #0
 800d3b8:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800d3ba:	2300      	movs	r3, #0
 800d3bc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800d3be:	2333      	movs	r3, #51	; 0x33
 800d3c0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d3c2:	2340      	movs	r3, #64	; 0x40
 800d3c4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d3c6:	2300      	movs	r3, #0
 800d3c8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d3ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d3ce:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d3d0:	f107 0308 	add.w	r3, r7, #8
 800d3d4:	4619      	mov	r1, r3
 800d3d6:	6878      	ldr	r0, [r7, #4]
 800d3d8:	f7ff fde1 	bl	800cf9e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 800d3dc:	f241 3288 	movw	r2, #5000	; 0x1388
 800d3e0:	2133      	movs	r1, #51	; 0x33
 800d3e2:	6878      	ldr	r0, [r7, #4]
 800d3e4:	f000 f886 	bl	800d4f4 <SDMMC_GetCmdResp1>
 800d3e8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d3ea:	69fb      	ldr	r3, [r7, #28]
}
 800d3ec:	4618      	mov	r0, r3
 800d3ee:	3720      	adds	r7, #32
 800d3f0:	46bd      	mov	sp, r7
 800d3f2:	bd80      	pop	{r7, pc}

0800d3f4 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800d3f4:	b580      	push	{r7, lr}
 800d3f6:	b088      	sub	sp, #32
 800d3f8:	af00      	add	r7, sp, #0
 800d3fa:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800d3fc:	2300      	movs	r3, #0
 800d3fe:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800d400:	2302      	movs	r3, #2
 800d402:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800d404:	23c0      	movs	r3, #192	; 0xc0
 800d406:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d408:	2300      	movs	r3, #0
 800d40a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d40c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d410:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d412:	f107 0308 	add.w	r3, r7, #8
 800d416:	4619      	mov	r1, r3
 800d418:	6878      	ldr	r0, [r7, #4]
 800d41a:	f7ff fdc0 	bl	800cf9e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800d41e:	6878      	ldr	r0, [r7, #4]
 800d420:	f000 f956 	bl	800d6d0 <SDMMC_GetCmdResp2>
 800d424:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d426:	69fb      	ldr	r3, [r7, #28]
}
 800d428:	4618      	mov	r0, r3
 800d42a:	3720      	adds	r7, #32
 800d42c:	46bd      	mov	sp, r7
 800d42e:	bd80      	pop	{r7, pc}

0800d430 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800d430:	b580      	push	{r7, lr}
 800d432:	b088      	sub	sp, #32
 800d434:	af00      	add	r7, sp, #0
 800d436:	6078      	str	r0, [r7, #4]
 800d438:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800d43a:	683b      	ldr	r3, [r7, #0]
 800d43c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800d43e:	2309      	movs	r3, #9
 800d440:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800d442:	23c0      	movs	r3, #192	; 0xc0
 800d444:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d446:	2300      	movs	r3, #0
 800d448:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d44a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d44e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d450:	f107 0308 	add.w	r3, r7, #8
 800d454:	4619      	mov	r1, r3
 800d456:	6878      	ldr	r0, [r7, #4]
 800d458:	f7ff fda1 	bl	800cf9e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800d45c:	6878      	ldr	r0, [r7, #4]
 800d45e:	f000 f937 	bl	800d6d0 <SDMMC_GetCmdResp2>
 800d462:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d464:	69fb      	ldr	r3, [r7, #28]
}
 800d466:	4618      	mov	r0, r3
 800d468:	3720      	adds	r7, #32
 800d46a:	46bd      	mov	sp, r7
 800d46c:	bd80      	pop	{r7, pc}

0800d46e <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800d46e:	b580      	push	{r7, lr}
 800d470:	b088      	sub	sp, #32
 800d472:	af00      	add	r7, sp, #0
 800d474:	6078      	str	r0, [r7, #4]
 800d476:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800d478:	2300      	movs	r3, #0
 800d47a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800d47c:	2303      	movs	r3, #3
 800d47e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d480:	2340      	movs	r3, #64	; 0x40
 800d482:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d484:	2300      	movs	r3, #0
 800d486:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d488:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d48c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d48e:	f107 0308 	add.w	r3, r7, #8
 800d492:	4619      	mov	r1, r3
 800d494:	6878      	ldr	r0, [r7, #4]
 800d496:	f7ff fd82 	bl	800cf9e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800d49a:	683a      	ldr	r2, [r7, #0]
 800d49c:	2103      	movs	r1, #3
 800d49e:	6878      	ldr	r0, [r7, #4]
 800d4a0:	f000 f99c 	bl	800d7dc <SDMMC_GetCmdResp6>
 800d4a4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d4a6:	69fb      	ldr	r3, [r7, #28]
}
 800d4a8:	4618      	mov	r0, r3
 800d4aa:	3720      	adds	r7, #32
 800d4ac:	46bd      	mov	sp, r7
 800d4ae:	bd80      	pop	{r7, pc}

0800d4b0 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800d4b0:	b580      	push	{r7, lr}
 800d4b2:	b088      	sub	sp, #32
 800d4b4:	af00      	add	r7, sp, #0
 800d4b6:	6078      	str	r0, [r7, #4]
 800d4b8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800d4ba:	683b      	ldr	r3, [r7, #0]
 800d4bc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800d4be:	230d      	movs	r3, #13
 800d4c0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d4c2:	2340      	movs	r3, #64	; 0x40
 800d4c4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d4c6:	2300      	movs	r3, #0
 800d4c8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d4ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d4ce:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d4d0:	f107 0308 	add.w	r3, r7, #8
 800d4d4:	4619      	mov	r1, r3
 800d4d6:	6878      	ldr	r0, [r7, #4]
 800d4d8:	f7ff fd61 	bl	800cf9e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800d4dc:	f241 3288 	movw	r2, #5000	; 0x1388
 800d4e0:	210d      	movs	r1, #13
 800d4e2:	6878      	ldr	r0, [r7, #4]
 800d4e4:	f000 f806 	bl	800d4f4 <SDMMC_GetCmdResp1>
 800d4e8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d4ea:	69fb      	ldr	r3, [r7, #28]
}
 800d4ec:	4618      	mov	r0, r3
 800d4ee:	3720      	adds	r7, #32
 800d4f0:	46bd      	mov	sp, r7
 800d4f2:	bd80      	pop	{r7, pc}

0800d4f4 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800d4f4:	b580      	push	{r7, lr}
 800d4f6:	b088      	sub	sp, #32
 800d4f8:	af00      	add	r7, sp, #0
 800d4fa:	60f8      	str	r0, [r7, #12]
 800d4fc:	460b      	mov	r3, r1
 800d4fe:	607a      	str	r2, [r7, #4]
 800d500:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800d502:	4b70      	ldr	r3, [pc, #448]	; (800d6c4 <SDMMC_GetCmdResp1+0x1d0>)
 800d504:	681b      	ldr	r3, [r3, #0]
 800d506:	4a70      	ldr	r2, [pc, #448]	; (800d6c8 <SDMMC_GetCmdResp1+0x1d4>)
 800d508:	fba2 2303 	umull	r2, r3, r2, r3
 800d50c:	0a5a      	lsrs	r2, r3, #9
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	fb02 f303 	mul.w	r3, r2, r3
 800d514:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800d516:	69fb      	ldr	r3, [r7, #28]
 800d518:	1e5a      	subs	r2, r3, #1
 800d51a:	61fa      	str	r2, [r7, #28]
 800d51c:	2b00      	cmp	r3, #0
 800d51e:	d102      	bne.n	800d526 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d520:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d524:	e0c9      	b.n	800d6ba <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 800d526:	68fb      	ldr	r3, [r7, #12]
 800d528:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d52a:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d52c:	69bb      	ldr	r3, [r7, #24]
 800d52e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800d532:	2b00      	cmp	r3, #0
 800d534:	d0ef      	beq.n	800d516 <SDMMC_GetCmdResp1+0x22>
 800d536:	69bb      	ldr	r3, [r7, #24]
 800d538:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d53c:	2b00      	cmp	r3, #0
 800d53e:	d1ea      	bne.n	800d516 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800d540:	68fb      	ldr	r3, [r7, #12]
 800d542:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d544:	f003 0304 	and.w	r3, r3, #4
 800d548:	2b00      	cmp	r3, #0
 800d54a:	d004      	beq.n	800d556 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800d54c:	68fb      	ldr	r3, [r7, #12]
 800d54e:	2204      	movs	r2, #4
 800d550:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d552:	2304      	movs	r3, #4
 800d554:	e0b1      	b.n	800d6ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800d556:	68fb      	ldr	r3, [r7, #12]
 800d558:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d55a:	f003 0301 	and.w	r3, r3, #1
 800d55e:	2b00      	cmp	r3, #0
 800d560:	d004      	beq.n	800d56c <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800d562:	68fb      	ldr	r3, [r7, #12]
 800d564:	2201      	movs	r2, #1
 800d566:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d568:	2301      	movs	r3, #1
 800d56a:	e0a6      	b.n	800d6ba <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800d56c:	68fb      	ldr	r3, [r7, #12]
 800d56e:	22c5      	movs	r2, #197	; 0xc5
 800d570:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800d572:	68f8      	ldr	r0, [r7, #12]
 800d574:	f7ff fd3d 	bl	800cff2 <SDIO_GetCommandResponse>
 800d578:	4603      	mov	r3, r0
 800d57a:	461a      	mov	r2, r3
 800d57c:	7afb      	ldrb	r3, [r7, #11]
 800d57e:	4293      	cmp	r3, r2
 800d580:	d001      	beq.n	800d586 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d582:	2301      	movs	r3, #1
 800d584:	e099      	b.n	800d6ba <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800d586:	2100      	movs	r1, #0
 800d588:	68f8      	ldr	r0, [r7, #12]
 800d58a:	f7ff fd3f 	bl	800d00c <SDIO_GetResponse>
 800d58e:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800d590:	697a      	ldr	r2, [r7, #20]
 800d592:	4b4e      	ldr	r3, [pc, #312]	; (800d6cc <SDMMC_GetCmdResp1+0x1d8>)
 800d594:	4013      	ands	r3, r2
 800d596:	2b00      	cmp	r3, #0
 800d598:	d101      	bne.n	800d59e <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800d59a:	2300      	movs	r3, #0
 800d59c:	e08d      	b.n	800d6ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800d59e:	697b      	ldr	r3, [r7, #20]
 800d5a0:	2b00      	cmp	r3, #0
 800d5a2:	da02      	bge.n	800d5aa <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800d5a4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800d5a8:	e087      	b.n	800d6ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800d5aa:	697b      	ldr	r3, [r7, #20]
 800d5ac:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800d5b0:	2b00      	cmp	r3, #0
 800d5b2:	d001      	beq.n	800d5b8 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800d5b4:	2340      	movs	r3, #64	; 0x40
 800d5b6:	e080      	b.n	800d6ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800d5b8:	697b      	ldr	r3, [r7, #20]
 800d5ba:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d5be:	2b00      	cmp	r3, #0
 800d5c0:	d001      	beq.n	800d5c6 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800d5c2:	2380      	movs	r3, #128	; 0x80
 800d5c4:	e079      	b.n	800d6ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800d5c6:	697b      	ldr	r3, [r7, #20]
 800d5c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d5cc:	2b00      	cmp	r3, #0
 800d5ce:	d002      	beq.n	800d5d6 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800d5d0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d5d4:	e071      	b.n	800d6ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800d5d6:	697b      	ldr	r3, [r7, #20]
 800d5d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d5dc:	2b00      	cmp	r3, #0
 800d5de:	d002      	beq.n	800d5e6 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800d5e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d5e4:	e069      	b.n	800d6ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800d5e6:	697b      	ldr	r3, [r7, #20]
 800d5e8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800d5ec:	2b00      	cmp	r3, #0
 800d5ee:	d002      	beq.n	800d5f6 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800d5f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d5f4:	e061      	b.n	800d6ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800d5f6:	697b      	ldr	r3, [r7, #20]
 800d5f8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800d5fc:	2b00      	cmp	r3, #0
 800d5fe:	d002      	beq.n	800d606 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800d600:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d604:	e059      	b.n	800d6ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800d606:	697b      	ldr	r3, [r7, #20]
 800d608:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d60c:	2b00      	cmp	r3, #0
 800d60e:	d002      	beq.n	800d616 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800d610:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d614:	e051      	b.n	800d6ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800d616:	697b      	ldr	r3, [r7, #20]
 800d618:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d61c:	2b00      	cmp	r3, #0
 800d61e:	d002      	beq.n	800d626 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800d620:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800d624:	e049      	b.n	800d6ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800d626:	697b      	ldr	r3, [r7, #20]
 800d628:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800d62c:	2b00      	cmp	r3, #0
 800d62e:	d002      	beq.n	800d636 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800d630:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800d634:	e041      	b.n	800d6ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800d636:	697b      	ldr	r3, [r7, #20]
 800d638:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d63c:	2b00      	cmp	r3, #0
 800d63e:	d002      	beq.n	800d646 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800d640:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d644:	e039      	b.n	800d6ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800d646:	697b      	ldr	r3, [r7, #20]
 800d648:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800d64c:	2b00      	cmp	r3, #0
 800d64e:	d002      	beq.n	800d656 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800d650:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800d654:	e031      	b.n	800d6ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800d656:	697b      	ldr	r3, [r7, #20]
 800d658:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d65c:	2b00      	cmp	r3, #0
 800d65e:	d002      	beq.n	800d666 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800d660:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800d664:	e029      	b.n	800d6ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800d666:	697b      	ldr	r3, [r7, #20]
 800d668:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d66c:	2b00      	cmp	r3, #0
 800d66e:	d002      	beq.n	800d676 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800d670:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800d674:	e021      	b.n	800d6ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800d676:	697b      	ldr	r3, [r7, #20]
 800d678:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d67c:	2b00      	cmp	r3, #0
 800d67e:	d002      	beq.n	800d686 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800d680:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800d684:	e019      	b.n	800d6ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800d686:	697b      	ldr	r3, [r7, #20]
 800d688:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d68c:	2b00      	cmp	r3, #0
 800d68e:	d002      	beq.n	800d696 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800d690:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800d694:	e011      	b.n	800d6ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800d696:	697b      	ldr	r3, [r7, #20]
 800d698:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800d69c:	2b00      	cmp	r3, #0
 800d69e:	d002      	beq.n	800d6a6 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800d6a0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800d6a4:	e009      	b.n	800d6ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800d6a6:	697b      	ldr	r3, [r7, #20]
 800d6a8:	f003 0308 	and.w	r3, r3, #8
 800d6ac:	2b00      	cmp	r3, #0
 800d6ae:	d002      	beq.n	800d6b6 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800d6b0:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800d6b4:	e001      	b.n	800d6ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800d6b6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800d6ba:	4618      	mov	r0, r3
 800d6bc:	3720      	adds	r7, #32
 800d6be:	46bd      	mov	sp, r7
 800d6c0:	bd80      	pop	{r7, pc}
 800d6c2:	bf00      	nop
 800d6c4:	200000b8 	.word	0x200000b8
 800d6c8:	10624dd3 	.word	0x10624dd3
 800d6cc:	fdffe008 	.word	0xfdffe008

0800d6d0 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800d6d0:	b480      	push	{r7}
 800d6d2:	b085      	sub	sp, #20
 800d6d4:	af00      	add	r7, sp, #0
 800d6d6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d6d8:	4b1f      	ldr	r3, [pc, #124]	; (800d758 <SDMMC_GetCmdResp2+0x88>)
 800d6da:	681b      	ldr	r3, [r3, #0]
 800d6dc:	4a1f      	ldr	r2, [pc, #124]	; (800d75c <SDMMC_GetCmdResp2+0x8c>)
 800d6de:	fba2 2303 	umull	r2, r3, r2, r3
 800d6e2:	0a5b      	lsrs	r3, r3, #9
 800d6e4:	f241 3288 	movw	r2, #5000	; 0x1388
 800d6e8:	fb02 f303 	mul.w	r3, r2, r3
 800d6ec:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800d6ee:	68fb      	ldr	r3, [r7, #12]
 800d6f0:	1e5a      	subs	r2, r3, #1
 800d6f2:	60fa      	str	r2, [r7, #12]
 800d6f4:	2b00      	cmp	r3, #0
 800d6f6:	d102      	bne.n	800d6fe <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d6f8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d6fc:	e026      	b.n	800d74c <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d702:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d704:	68bb      	ldr	r3, [r7, #8]
 800d706:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800d70a:	2b00      	cmp	r3, #0
 800d70c:	d0ef      	beq.n	800d6ee <SDMMC_GetCmdResp2+0x1e>
 800d70e:	68bb      	ldr	r3, [r7, #8]
 800d710:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d714:	2b00      	cmp	r3, #0
 800d716:	d1ea      	bne.n	800d6ee <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d71c:	f003 0304 	and.w	r3, r3, #4
 800d720:	2b00      	cmp	r3, #0
 800d722:	d004      	beq.n	800d72e <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	2204      	movs	r2, #4
 800d728:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d72a:	2304      	movs	r3, #4
 800d72c:	e00e      	b.n	800d74c <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d732:	f003 0301 	and.w	r3, r3, #1
 800d736:	2b00      	cmp	r3, #0
 800d738:	d004      	beq.n	800d744 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	2201      	movs	r2, #1
 800d73e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d740:	2301      	movs	r3, #1
 800d742:	e003      	b.n	800d74c <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	22c5      	movs	r2, #197	; 0xc5
 800d748:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800d74a:	2300      	movs	r3, #0
}
 800d74c:	4618      	mov	r0, r3
 800d74e:	3714      	adds	r7, #20
 800d750:	46bd      	mov	sp, r7
 800d752:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d756:	4770      	bx	lr
 800d758:	200000b8 	.word	0x200000b8
 800d75c:	10624dd3 	.word	0x10624dd3

0800d760 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800d760:	b480      	push	{r7}
 800d762:	b085      	sub	sp, #20
 800d764:	af00      	add	r7, sp, #0
 800d766:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d768:	4b1a      	ldr	r3, [pc, #104]	; (800d7d4 <SDMMC_GetCmdResp3+0x74>)
 800d76a:	681b      	ldr	r3, [r3, #0]
 800d76c:	4a1a      	ldr	r2, [pc, #104]	; (800d7d8 <SDMMC_GetCmdResp3+0x78>)
 800d76e:	fba2 2303 	umull	r2, r3, r2, r3
 800d772:	0a5b      	lsrs	r3, r3, #9
 800d774:	f241 3288 	movw	r2, #5000	; 0x1388
 800d778:	fb02 f303 	mul.w	r3, r2, r3
 800d77c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800d77e:	68fb      	ldr	r3, [r7, #12]
 800d780:	1e5a      	subs	r2, r3, #1
 800d782:	60fa      	str	r2, [r7, #12]
 800d784:	2b00      	cmp	r3, #0
 800d786:	d102      	bne.n	800d78e <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d788:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d78c:	e01b      	b.n	800d7c6 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d792:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d794:	68bb      	ldr	r3, [r7, #8]
 800d796:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800d79a:	2b00      	cmp	r3, #0
 800d79c:	d0ef      	beq.n	800d77e <SDMMC_GetCmdResp3+0x1e>
 800d79e:	68bb      	ldr	r3, [r7, #8]
 800d7a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d7a4:	2b00      	cmp	r3, #0
 800d7a6:	d1ea      	bne.n	800d77e <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d7ac:	f003 0304 	and.w	r3, r3, #4
 800d7b0:	2b00      	cmp	r3, #0
 800d7b2:	d004      	beq.n	800d7be <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	2204      	movs	r2, #4
 800d7b8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d7ba:	2304      	movs	r3, #4
 800d7bc:	e003      	b.n	800d7c6 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800d7be:	687b      	ldr	r3, [r7, #4]
 800d7c0:	22c5      	movs	r2, #197	; 0xc5
 800d7c2:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800d7c4:	2300      	movs	r3, #0
}
 800d7c6:	4618      	mov	r0, r3
 800d7c8:	3714      	adds	r7, #20
 800d7ca:	46bd      	mov	sp, r7
 800d7cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7d0:	4770      	bx	lr
 800d7d2:	bf00      	nop
 800d7d4:	200000b8 	.word	0x200000b8
 800d7d8:	10624dd3 	.word	0x10624dd3

0800d7dc <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800d7dc:	b580      	push	{r7, lr}
 800d7de:	b088      	sub	sp, #32
 800d7e0:	af00      	add	r7, sp, #0
 800d7e2:	60f8      	str	r0, [r7, #12]
 800d7e4:	460b      	mov	r3, r1
 800d7e6:	607a      	str	r2, [r7, #4]
 800d7e8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d7ea:	4b35      	ldr	r3, [pc, #212]	; (800d8c0 <SDMMC_GetCmdResp6+0xe4>)
 800d7ec:	681b      	ldr	r3, [r3, #0]
 800d7ee:	4a35      	ldr	r2, [pc, #212]	; (800d8c4 <SDMMC_GetCmdResp6+0xe8>)
 800d7f0:	fba2 2303 	umull	r2, r3, r2, r3
 800d7f4:	0a5b      	lsrs	r3, r3, #9
 800d7f6:	f241 3288 	movw	r2, #5000	; 0x1388
 800d7fa:	fb02 f303 	mul.w	r3, r2, r3
 800d7fe:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800d800:	69fb      	ldr	r3, [r7, #28]
 800d802:	1e5a      	subs	r2, r3, #1
 800d804:	61fa      	str	r2, [r7, #28]
 800d806:	2b00      	cmp	r3, #0
 800d808:	d102      	bne.n	800d810 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d80a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d80e:	e052      	b.n	800d8b6 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 800d810:	68fb      	ldr	r3, [r7, #12]
 800d812:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d814:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d816:	69bb      	ldr	r3, [r7, #24]
 800d818:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800d81c:	2b00      	cmp	r3, #0
 800d81e:	d0ef      	beq.n	800d800 <SDMMC_GetCmdResp6+0x24>
 800d820:	69bb      	ldr	r3, [r7, #24]
 800d822:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d826:	2b00      	cmp	r3, #0
 800d828:	d1ea      	bne.n	800d800 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800d82a:	68fb      	ldr	r3, [r7, #12]
 800d82c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d82e:	f003 0304 	and.w	r3, r3, #4
 800d832:	2b00      	cmp	r3, #0
 800d834:	d004      	beq.n	800d840 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800d836:	68fb      	ldr	r3, [r7, #12]
 800d838:	2204      	movs	r2, #4
 800d83a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d83c:	2304      	movs	r3, #4
 800d83e:	e03a      	b.n	800d8b6 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800d840:	68fb      	ldr	r3, [r7, #12]
 800d842:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d844:	f003 0301 	and.w	r3, r3, #1
 800d848:	2b00      	cmp	r3, #0
 800d84a:	d004      	beq.n	800d856 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800d84c:	68fb      	ldr	r3, [r7, #12]
 800d84e:	2201      	movs	r2, #1
 800d850:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d852:	2301      	movs	r3, #1
 800d854:	e02f      	b.n	800d8b6 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800d856:	68f8      	ldr	r0, [r7, #12]
 800d858:	f7ff fbcb 	bl	800cff2 <SDIO_GetCommandResponse>
 800d85c:	4603      	mov	r3, r0
 800d85e:	461a      	mov	r2, r3
 800d860:	7afb      	ldrb	r3, [r7, #11]
 800d862:	4293      	cmp	r3, r2
 800d864:	d001      	beq.n	800d86a <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d866:	2301      	movs	r3, #1
 800d868:	e025      	b.n	800d8b6 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800d86a:	68fb      	ldr	r3, [r7, #12]
 800d86c:	22c5      	movs	r2, #197	; 0xc5
 800d86e:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800d870:	2100      	movs	r1, #0
 800d872:	68f8      	ldr	r0, [r7, #12]
 800d874:	f7ff fbca 	bl	800d00c <SDIO_GetResponse>
 800d878:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800d87a:	697b      	ldr	r3, [r7, #20]
 800d87c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800d880:	2b00      	cmp	r3, #0
 800d882:	d106      	bne.n	800d892 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800d884:	697b      	ldr	r3, [r7, #20]
 800d886:	0c1b      	lsrs	r3, r3, #16
 800d888:	b29a      	uxth	r2, r3
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800d88e:	2300      	movs	r3, #0
 800d890:	e011      	b.n	800d8b6 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800d892:	697b      	ldr	r3, [r7, #20]
 800d894:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d898:	2b00      	cmp	r3, #0
 800d89a:	d002      	beq.n	800d8a2 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800d89c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800d8a0:	e009      	b.n	800d8b6 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800d8a2:	697b      	ldr	r3, [r7, #20]
 800d8a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d8a8:	2b00      	cmp	r3, #0
 800d8aa:	d002      	beq.n	800d8b2 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800d8ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d8b0:	e001      	b.n	800d8b6 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800d8b2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800d8b6:	4618      	mov	r0, r3
 800d8b8:	3720      	adds	r7, #32
 800d8ba:	46bd      	mov	sp, r7
 800d8bc:	bd80      	pop	{r7, pc}
 800d8be:	bf00      	nop
 800d8c0:	200000b8 	.word	0x200000b8
 800d8c4:	10624dd3 	.word	0x10624dd3

0800d8c8 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800d8c8:	b480      	push	{r7}
 800d8ca:	b085      	sub	sp, #20
 800d8cc:	af00      	add	r7, sp, #0
 800d8ce:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d8d0:	4b22      	ldr	r3, [pc, #136]	; (800d95c <SDMMC_GetCmdResp7+0x94>)
 800d8d2:	681b      	ldr	r3, [r3, #0]
 800d8d4:	4a22      	ldr	r2, [pc, #136]	; (800d960 <SDMMC_GetCmdResp7+0x98>)
 800d8d6:	fba2 2303 	umull	r2, r3, r2, r3
 800d8da:	0a5b      	lsrs	r3, r3, #9
 800d8dc:	f241 3288 	movw	r2, #5000	; 0x1388
 800d8e0:	fb02 f303 	mul.w	r3, r2, r3
 800d8e4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800d8e6:	68fb      	ldr	r3, [r7, #12]
 800d8e8:	1e5a      	subs	r2, r3, #1
 800d8ea:	60fa      	str	r2, [r7, #12]
 800d8ec:	2b00      	cmp	r3, #0
 800d8ee:	d102      	bne.n	800d8f6 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d8f0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d8f4:	e02c      	b.n	800d950 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d8fa:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d8fc:	68bb      	ldr	r3, [r7, #8]
 800d8fe:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800d902:	2b00      	cmp	r3, #0
 800d904:	d0ef      	beq.n	800d8e6 <SDMMC_GetCmdResp7+0x1e>
 800d906:	68bb      	ldr	r3, [r7, #8]
 800d908:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d90c:	2b00      	cmp	r3, #0
 800d90e:	d1ea      	bne.n	800d8e6 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d914:	f003 0304 	and.w	r3, r3, #4
 800d918:	2b00      	cmp	r3, #0
 800d91a:	d004      	beq.n	800d926 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	2204      	movs	r2, #4
 800d920:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d922:	2304      	movs	r3, #4
 800d924:	e014      	b.n	800d950 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d92a:	f003 0301 	and.w	r3, r3, #1
 800d92e:	2b00      	cmp	r3, #0
 800d930:	d004      	beq.n	800d93c <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800d932:	687b      	ldr	r3, [r7, #4]
 800d934:	2201      	movs	r2, #1
 800d936:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d938:	2301      	movs	r3, #1
 800d93a:	e009      	b.n	800d950 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d940:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d944:	2b00      	cmp	r3, #0
 800d946:	d002      	beq.n	800d94e <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	2240      	movs	r2, #64	; 0x40
 800d94c:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800d94e:	2300      	movs	r3, #0
  
}
 800d950:	4618      	mov	r0, r3
 800d952:	3714      	adds	r7, #20
 800d954:	46bd      	mov	sp, r7
 800d956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d95a:	4770      	bx	lr
 800d95c:	200000b8 	.word	0x200000b8
 800d960:	10624dd3 	.word	0x10624dd3

0800d964 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800d964:	b480      	push	{r7}
 800d966:	b085      	sub	sp, #20
 800d968:	af00      	add	r7, sp, #0
 800d96a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d96c:	4b11      	ldr	r3, [pc, #68]	; (800d9b4 <SDMMC_GetCmdError+0x50>)
 800d96e:	681b      	ldr	r3, [r3, #0]
 800d970:	4a11      	ldr	r2, [pc, #68]	; (800d9b8 <SDMMC_GetCmdError+0x54>)
 800d972:	fba2 2303 	umull	r2, r3, r2, r3
 800d976:	0a5b      	lsrs	r3, r3, #9
 800d978:	f241 3288 	movw	r2, #5000	; 0x1388
 800d97c:	fb02 f303 	mul.w	r3, r2, r3
 800d980:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800d982:	68fb      	ldr	r3, [r7, #12]
 800d984:	1e5a      	subs	r2, r3, #1
 800d986:	60fa      	str	r2, [r7, #12]
 800d988:	2b00      	cmp	r3, #0
 800d98a:	d102      	bne.n	800d992 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d98c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d990:	e009      	b.n	800d9a6 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d996:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d99a:	2b00      	cmp	r3, #0
 800d99c:	d0f1      	beq.n	800d982 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	22c5      	movs	r2, #197	; 0xc5
 800d9a2:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800d9a4:	2300      	movs	r3, #0
}
 800d9a6:	4618      	mov	r0, r3
 800d9a8:	3714      	adds	r7, #20
 800d9aa:	46bd      	mov	sp, r7
 800d9ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9b0:	4770      	bx	lr
 800d9b2:	bf00      	nop
 800d9b4:	200000b8 	.word	0x200000b8
 800d9b8:	10624dd3 	.word	0x10624dd3

0800d9bc <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800d9bc:	b580      	push	{r7, lr}
 800d9be:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800d9c0:	4904      	ldr	r1, [pc, #16]	; (800d9d4 <MX_FATFS_Init+0x18>)
 800d9c2:	4805      	ldr	r0, [pc, #20]	; (800d9d8 <MX_FATFS_Init+0x1c>)
 800d9c4:	f003 f820 	bl	8010a08 <FATFS_LinkDriver>
 800d9c8:	4603      	mov	r3, r0
 800d9ca:	461a      	mov	r2, r3
 800d9cc:	4b03      	ldr	r3, [pc, #12]	; (800d9dc <MX_FATFS_Init+0x20>)
 800d9ce:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800d9d0:	bf00      	nop
 800d9d2:	bd80      	pop	{r7, pc}
 800d9d4:	2001180c 	.word	0x2001180c
 800d9d8:	0801271c 	.word	0x0801271c
 800d9dc:	20011808 	.word	0x20011808

0800d9e0 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800d9e0:	b480      	push	{r7}
 800d9e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800d9e4:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800d9e6:	4618      	mov	r0, r3
 800d9e8:	46bd      	mov	sp, r7
 800d9ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9ee:	4770      	bx	lr

0800d9f0 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800d9f0:	b580      	push	{r7, lr}
 800d9f2:	b082      	sub	sp, #8
 800d9f4:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800d9f6:	2300      	movs	r3, #0
 800d9f8:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800d9fa:	f000 f8a4 	bl	800db46 <BSP_SD_IsDetected>
 800d9fe:	4603      	mov	r3, r0
 800da00:	2b01      	cmp	r3, #1
 800da02:	d001      	beq.n	800da08 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800da04:	2301      	movs	r3, #1
 800da06:	e012      	b.n	800da2e <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800da08:	480b      	ldr	r0, [pc, #44]	; (800da38 <BSP_SD_Init+0x48>)
 800da0a:	f7fc fa09 	bl	8009e20 <HAL_SD_Init>
 800da0e:	4603      	mov	r3, r0
 800da10:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800da12:	79fb      	ldrb	r3, [r7, #7]
 800da14:	2b00      	cmp	r3, #0
 800da16:	d109      	bne.n	800da2c <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 800da18:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800da1c:	4806      	ldr	r0, [pc, #24]	; (800da38 <BSP_SD_Init+0x48>)
 800da1e:	f7fc ffd7 	bl	800a9d0 <HAL_SD_ConfigWideBusOperation>
 800da22:	4603      	mov	r3, r0
 800da24:	2b00      	cmp	r3, #0
 800da26:	d001      	beq.n	800da2c <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800da28:	2301      	movs	r3, #1
 800da2a:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800da2c:	79fb      	ldrb	r3, [r7, #7]
}
 800da2e:	4618      	mov	r0, r3
 800da30:	3708      	adds	r7, #8
 800da32:	46bd      	mov	sp, r7
 800da34:	bd80      	pop	{r7, pc}
 800da36:	bf00      	nop
 800da38:	200114d0 	.word	0x200114d0

0800da3c <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800da3c:	b580      	push	{r7, lr}
 800da3e:	b086      	sub	sp, #24
 800da40:	af00      	add	r7, sp, #0
 800da42:	60f8      	str	r0, [r7, #12]
 800da44:	60b9      	str	r1, [r7, #8]
 800da46:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800da48:	2300      	movs	r3, #0
 800da4a:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	68ba      	ldr	r2, [r7, #8]
 800da50:	68f9      	ldr	r1, [r7, #12]
 800da52:	4806      	ldr	r0, [pc, #24]	; (800da6c <BSP_SD_ReadBlocks_DMA+0x30>)
 800da54:	f7fc fa94 	bl	8009f80 <HAL_SD_ReadBlocks_DMA>
 800da58:	4603      	mov	r3, r0
 800da5a:	2b00      	cmp	r3, #0
 800da5c:	d001      	beq.n	800da62 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800da5e:	2301      	movs	r3, #1
 800da60:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800da62:	7dfb      	ldrb	r3, [r7, #23]
}
 800da64:	4618      	mov	r0, r3
 800da66:	3718      	adds	r7, #24
 800da68:	46bd      	mov	sp, r7
 800da6a:	bd80      	pop	{r7, pc}
 800da6c:	200114d0 	.word	0x200114d0

0800da70 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800da70:	b580      	push	{r7, lr}
 800da72:	b086      	sub	sp, #24
 800da74:	af00      	add	r7, sp, #0
 800da76:	60f8      	str	r0, [r7, #12]
 800da78:	60b9      	str	r1, [r7, #8]
 800da7a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800da7c:	2300      	movs	r3, #0
 800da7e:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800da80:	687b      	ldr	r3, [r7, #4]
 800da82:	68ba      	ldr	r2, [r7, #8]
 800da84:	68f9      	ldr	r1, [r7, #12]
 800da86:	4806      	ldr	r0, [pc, #24]	; (800daa0 <BSP_SD_WriteBlocks_DMA+0x30>)
 800da88:	f7fc fb5c 	bl	800a144 <HAL_SD_WriteBlocks_DMA>
 800da8c:	4603      	mov	r3, r0
 800da8e:	2b00      	cmp	r3, #0
 800da90:	d001      	beq.n	800da96 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800da92:	2301      	movs	r3, #1
 800da94:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800da96:	7dfb      	ldrb	r3, [r7, #23]
}
 800da98:	4618      	mov	r0, r3
 800da9a:	3718      	adds	r7, #24
 800da9c:	46bd      	mov	sp, r7
 800da9e:	bd80      	pop	{r7, pc}
 800daa0:	200114d0 	.word	0x200114d0

0800daa4 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800daa4:	b580      	push	{r7, lr}
 800daa6:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800daa8:	4805      	ldr	r0, [pc, #20]	; (800dac0 <BSP_SD_GetCardState+0x1c>)
 800daaa:	f7fd f82b 	bl	800ab04 <HAL_SD_GetCardState>
 800daae:	4603      	mov	r3, r0
 800dab0:	2b04      	cmp	r3, #4
 800dab2:	bf14      	ite	ne
 800dab4:	2301      	movne	r3, #1
 800dab6:	2300      	moveq	r3, #0
 800dab8:	b2db      	uxtb	r3, r3
}
 800daba:	4618      	mov	r0, r3
 800dabc:	bd80      	pop	{r7, pc}
 800dabe:	bf00      	nop
 800dac0:	200114d0 	.word	0x200114d0

0800dac4 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800dac4:	b580      	push	{r7, lr}
 800dac6:	b082      	sub	sp, #8
 800dac8:	af00      	add	r7, sp, #0
 800daca:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800dacc:	6879      	ldr	r1, [r7, #4]
 800dace:	4803      	ldr	r0, [pc, #12]	; (800dadc <BSP_SD_GetCardInfo+0x18>)
 800dad0:	f7fc ff52 	bl	800a978 <HAL_SD_GetCardInfo>
}
 800dad4:	bf00      	nop
 800dad6:	3708      	adds	r7, #8
 800dad8:	46bd      	mov	sp, r7
 800dada:	bd80      	pop	{r7, pc}
 800dadc:	200114d0 	.word	0x200114d0

0800dae0 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 800dae0:	b580      	push	{r7, lr}
 800dae2:	b082      	sub	sp, #8
 800dae4:	af00      	add	r7, sp, #0
 800dae6:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 800dae8:	f000 f818 	bl	800db1c <BSP_SD_AbortCallback>
}
 800daec:	bf00      	nop
 800daee:	3708      	adds	r7, #8
 800daf0:	46bd      	mov	sp, r7
 800daf2:	bd80      	pop	{r7, pc}

0800daf4 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800daf4:	b580      	push	{r7, lr}
 800daf6:	b082      	sub	sp, #8
 800daf8:	af00      	add	r7, sp, #0
 800dafa:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800dafc:	f000 f815 	bl	800db2a <BSP_SD_WriteCpltCallback>
}
 800db00:	bf00      	nop
 800db02:	3708      	adds	r7, #8
 800db04:	46bd      	mov	sp, r7
 800db06:	bd80      	pop	{r7, pc}

0800db08 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800db08:	b580      	push	{r7, lr}
 800db0a:	b082      	sub	sp, #8
 800db0c:	af00      	add	r7, sp, #0
 800db0e:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800db10:	f000 f812 	bl	800db38 <BSP_SD_ReadCpltCallback>
}
 800db14:	bf00      	nop
 800db16:	3708      	adds	r7, #8
 800db18:	46bd      	mov	sp, r7
 800db1a:	bd80      	pop	{r7, pc}

0800db1c <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 800db1c:	b480      	push	{r7}
 800db1e:	af00      	add	r7, sp, #0

}
 800db20:	bf00      	nop
 800db22:	46bd      	mov	sp, r7
 800db24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db28:	4770      	bx	lr

0800db2a <BSP_SD_WriteCpltCallback>:
  * @brief BSP Tx Transfer completed callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_WriteCpltCallback(void)
{
 800db2a:	b480      	push	{r7}
 800db2c:	af00      	add	r7, sp, #0

}
 800db2e:	bf00      	nop
 800db30:	46bd      	mov	sp, r7
 800db32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db36:	4770      	bx	lr

0800db38 <BSP_SD_ReadCpltCallback>:
  * @brief BSP Rx Transfer completed callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_ReadCpltCallback(void)
{
 800db38:	b480      	push	{r7}
 800db3a:	af00      	add	r7, sp, #0

}
 800db3c:	bf00      	nop
 800db3e:	46bd      	mov	sp, r7
 800db40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db44:	4770      	bx	lr

0800db46 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800db46:	b480      	push	{r7}
 800db48:	b083      	sub	sp, #12
 800db4a:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800db4c:	2301      	movs	r3, #1
 800db4e:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 800db50:	79fb      	ldrb	r3, [r7, #7]
 800db52:	b2db      	uxtb	r3, r3
}
 800db54:	4618      	mov	r0, r3
 800db56:	370c      	adds	r7, #12
 800db58:	46bd      	mov	sp, r7
 800db5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db5e:	4770      	bx	lr

0800db60 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800db60:	b580      	push	{r7, lr}
 800db62:	b082      	sub	sp, #8
 800db64:	af00      	add	r7, sp, #0
 800db66:	4603      	mov	r3, r0
 800db68:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800db6a:	4b0b      	ldr	r3, [pc, #44]	; (800db98 <SD_CheckStatus+0x38>)
 800db6c:	2201      	movs	r2, #1
 800db6e:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800db70:	f7ff ff98 	bl	800daa4 <BSP_SD_GetCardState>
 800db74:	4603      	mov	r3, r0
 800db76:	2b00      	cmp	r3, #0
 800db78:	d107      	bne.n	800db8a <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800db7a:	4b07      	ldr	r3, [pc, #28]	; (800db98 <SD_CheckStatus+0x38>)
 800db7c:	781b      	ldrb	r3, [r3, #0]
 800db7e:	b2db      	uxtb	r3, r3
 800db80:	f023 0301 	bic.w	r3, r3, #1
 800db84:	b2da      	uxtb	r2, r3
 800db86:	4b04      	ldr	r3, [pc, #16]	; (800db98 <SD_CheckStatus+0x38>)
 800db88:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800db8a:	4b03      	ldr	r3, [pc, #12]	; (800db98 <SD_CheckStatus+0x38>)
 800db8c:	781b      	ldrb	r3, [r3, #0]
 800db8e:	b2db      	uxtb	r3, r3
}
 800db90:	4618      	mov	r0, r3
 800db92:	3708      	adds	r7, #8
 800db94:	46bd      	mov	sp, r7
 800db96:	bd80      	pop	{r7, pc}
 800db98:	200000c1 	.word	0x200000c1

0800db9c <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800db9c:	b580      	push	{r7, lr}
 800db9e:	b082      	sub	sp, #8
 800dba0:	af00      	add	r7, sp, #0
 800dba2:	4603      	mov	r3, r0
 800dba4:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800dba6:	4b0b      	ldr	r3, [pc, #44]	; (800dbd4 <SD_initialize+0x38>)
 800dba8:	2201      	movs	r2, #1
 800dbaa:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800dbac:	f7ff ff20 	bl	800d9f0 <BSP_SD_Init>
 800dbb0:	4603      	mov	r3, r0
 800dbb2:	2b00      	cmp	r3, #0
 800dbb4:	d107      	bne.n	800dbc6 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 800dbb6:	79fb      	ldrb	r3, [r7, #7]
 800dbb8:	4618      	mov	r0, r3
 800dbba:	f7ff ffd1 	bl	800db60 <SD_CheckStatus>
 800dbbe:	4603      	mov	r3, r0
 800dbc0:	461a      	mov	r2, r3
 800dbc2:	4b04      	ldr	r3, [pc, #16]	; (800dbd4 <SD_initialize+0x38>)
 800dbc4:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800dbc6:	4b03      	ldr	r3, [pc, #12]	; (800dbd4 <SD_initialize+0x38>)
 800dbc8:	781b      	ldrb	r3, [r3, #0]
 800dbca:	b2db      	uxtb	r3, r3
}
 800dbcc:	4618      	mov	r0, r3
 800dbce:	3708      	adds	r7, #8
 800dbd0:	46bd      	mov	sp, r7
 800dbd2:	bd80      	pop	{r7, pc}
 800dbd4:	200000c1 	.word	0x200000c1

0800dbd8 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800dbd8:	b580      	push	{r7, lr}
 800dbda:	b082      	sub	sp, #8
 800dbdc:	af00      	add	r7, sp, #0
 800dbde:	4603      	mov	r3, r0
 800dbe0:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800dbe2:	79fb      	ldrb	r3, [r7, #7]
 800dbe4:	4618      	mov	r0, r3
 800dbe6:	f7ff ffbb 	bl	800db60 <SD_CheckStatus>
 800dbea:	4603      	mov	r3, r0
}
 800dbec:	4618      	mov	r0, r3
 800dbee:	3708      	adds	r7, #8
 800dbf0:	46bd      	mov	sp, r7
 800dbf2:	bd80      	pop	{r7, pc}

0800dbf4 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800dbf4:	b580      	push	{r7, lr}
 800dbf6:	b086      	sub	sp, #24
 800dbf8:	af00      	add	r7, sp, #0
 800dbfa:	60b9      	str	r1, [r7, #8]
 800dbfc:	607a      	str	r2, [r7, #4]
 800dbfe:	603b      	str	r3, [r7, #0]
 800dc00:	4603      	mov	r3, r0
 800dc02:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800dc04:	2301      	movs	r3, #1
 800dc06:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 800dc08:	683a      	ldr	r2, [r7, #0]
 800dc0a:	6879      	ldr	r1, [r7, #4]
 800dc0c:	68b8      	ldr	r0, [r7, #8]
 800dc0e:	f7ff ff15 	bl	800da3c <BSP_SD_ReadBlocks_DMA>
 800dc12:	4603      	mov	r3, r0
 800dc14:	2b00      	cmp	r3, #0
 800dc16:	d107      	bne.n	800dc28 <SD_read+0x34>
                       (uint32_t) (sector),
                       count) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 800dc18:	bf00      	nop
 800dc1a:	f7ff ff43 	bl	800daa4 <BSP_SD_GetCardState>
 800dc1e:	4603      	mov	r3, r0
 800dc20:	2b00      	cmp	r3, #0
 800dc22:	d1fa      	bne.n	800dc1a <SD_read+0x26>
    {
    }
    res = RES_OK;
 800dc24:	2300      	movs	r3, #0
 800dc26:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800dc28:	7dfb      	ldrb	r3, [r7, #23]
}
 800dc2a:	4618      	mov	r0, r3
 800dc2c:	3718      	adds	r7, #24
 800dc2e:	46bd      	mov	sp, r7
 800dc30:	bd80      	pop	{r7, pc}

0800dc32 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800dc32:	b580      	push	{r7, lr}
 800dc34:	b086      	sub	sp, #24
 800dc36:	af00      	add	r7, sp, #0
 800dc38:	60b9      	str	r1, [r7, #8]
 800dc3a:	607a      	str	r2, [r7, #4]
 800dc3c:	603b      	str	r3, [r7, #0]
 800dc3e:	4603      	mov	r3, r0
 800dc40:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800dc42:	2301      	movs	r3, #1
 800dc44:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800dc46:	683a      	ldr	r2, [r7, #0]
 800dc48:	6879      	ldr	r1, [r7, #4]
 800dc4a:	68b8      	ldr	r0, [r7, #8]
 800dc4c:	f7ff ff10 	bl	800da70 <BSP_SD_WriteBlocks_DMA>
 800dc50:	4603      	mov	r3, r0
 800dc52:	2b00      	cmp	r3, #0
 800dc54:	d107      	bne.n	800dc66 <SD_write+0x34>
                        (uint32_t)(sector),
                        count) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800dc56:	bf00      	nop
 800dc58:	f7ff ff24 	bl	800daa4 <BSP_SD_GetCardState>
 800dc5c:	4603      	mov	r3, r0
 800dc5e:	2b00      	cmp	r3, #0
 800dc60:	d1fa      	bne.n	800dc58 <SD_write+0x26>
    {
    }
    res = RES_OK;
 800dc62:	2300      	movs	r3, #0
 800dc64:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800dc66:	7dfb      	ldrb	r3, [r7, #23]
}
 800dc68:	4618      	mov	r0, r3
 800dc6a:	3718      	adds	r7, #24
 800dc6c:	46bd      	mov	sp, r7
 800dc6e:	bd80      	pop	{r7, pc}

0800dc70 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800dc70:	b580      	push	{r7, lr}
 800dc72:	b08c      	sub	sp, #48	; 0x30
 800dc74:	af00      	add	r7, sp, #0
 800dc76:	4603      	mov	r3, r0
 800dc78:	603a      	str	r2, [r7, #0]
 800dc7a:	71fb      	strb	r3, [r7, #7]
 800dc7c:	460b      	mov	r3, r1
 800dc7e:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800dc80:	2301      	movs	r3, #1
 800dc82:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800dc86:	4b25      	ldr	r3, [pc, #148]	; (800dd1c <SD_ioctl+0xac>)
 800dc88:	781b      	ldrb	r3, [r3, #0]
 800dc8a:	b2db      	uxtb	r3, r3
 800dc8c:	f003 0301 	and.w	r3, r3, #1
 800dc90:	2b00      	cmp	r3, #0
 800dc92:	d001      	beq.n	800dc98 <SD_ioctl+0x28>
 800dc94:	2303      	movs	r3, #3
 800dc96:	e03c      	b.n	800dd12 <SD_ioctl+0xa2>

  switch (cmd)
 800dc98:	79bb      	ldrb	r3, [r7, #6]
 800dc9a:	2b03      	cmp	r3, #3
 800dc9c:	d834      	bhi.n	800dd08 <SD_ioctl+0x98>
 800dc9e:	a201      	add	r2, pc, #4	; (adr r2, 800dca4 <SD_ioctl+0x34>)
 800dca0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dca4:	0800dcb5 	.word	0x0800dcb5
 800dca8:	0800dcbd 	.word	0x0800dcbd
 800dcac:	0800dcd5 	.word	0x0800dcd5
 800dcb0:	0800dcef 	.word	0x0800dcef
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800dcb4:	2300      	movs	r3, #0
 800dcb6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800dcba:	e028      	b.n	800dd0e <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800dcbc:	f107 030c 	add.w	r3, r7, #12
 800dcc0:	4618      	mov	r0, r3
 800dcc2:	f7ff feff 	bl	800dac4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800dcc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dcc8:	683b      	ldr	r3, [r7, #0]
 800dcca:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800dccc:	2300      	movs	r3, #0
 800dcce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800dcd2:	e01c      	b.n	800dd0e <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800dcd4:	f107 030c 	add.w	r3, r7, #12
 800dcd8:	4618      	mov	r0, r3
 800dcda:	f7ff fef3 	bl	800dac4 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800dcde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dce0:	b29a      	uxth	r2, r3
 800dce2:	683b      	ldr	r3, [r7, #0]
 800dce4:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800dce6:	2300      	movs	r3, #0
 800dce8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800dcec:	e00f      	b.n	800dd0e <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800dcee:	f107 030c 	add.w	r3, r7, #12
 800dcf2:	4618      	mov	r0, r3
 800dcf4:	f7ff fee6 	bl	800dac4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800dcf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcfa:	0a5a      	lsrs	r2, r3, #9
 800dcfc:	683b      	ldr	r3, [r7, #0]
 800dcfe:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800dd00:	2300      	movs	r3, #0
 800dd02:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800dd06:	e002      	b.n	800dd0e <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800dd08:	2304      	movs	r3, #4
 800dd0a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800dd0e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800dd12:	4618      	mov	r0, r3
 800dd14:	3730      	adds	r7, #48	; 0x30
 800dd16:	46bd      	mov	sp, r7
 800dd18:	bd80      	pop	{r7, pc}
 800dd1a:	bf00      	nop
 800dd1c:	200000c1 	.word	0x200000c1

0800dd20 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800dd20:	b580      	push	{r7, lr}
 800dd22:	b084      	sub	sp, #16
 800dd24:	af00      	add	r7, sp, #0
 800dd26:	4603      	mov	r3, r0
 800dd28:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800dd2a:	79fb      	ldrb	r3, [r7, #7]
 800dd2c:	4a08      	ldr	r2, [pc, #32]	; (800dd50 <disk_status+0x30>)
 800dd2e:	009b      	lsls	r3, r3, #2
 800dd30:	4413      	add	r3, r2
 800dd32:	685b      	ldr	r3, [r3, #4]
 800dd34:	685b      	ldr	r3, [r3, #4]
 800dd36:	79fa      	ldrb	r2, [r7, #7]
 800dd38:	4905      	ldr	r1, [pc, #20]	; (800dd50 <disk_status+0x30>)
 800dd3a:	440a      	add	r2, r1
 800dd3c:	7a12      	ldrb	r2, [r2, #8]
 800dd3e:	4610      	mov	r0, r2
 800dd40:	4798      	blx	r3
 800dd42:	4603      	mov	r3, r0
 800dd44:	73fb      	strb	r3, [r7, #15]
  return stat;
 800dd46:	7bfb      	ldrb	r3, [r7, #15]
}
 800dd48:	4618      	mov	r0, r3
 800dd4a:	3710      	adds	r7, #16
 800dd4c:	46bd      	mov	sp, r7
 800dd4e:	bd80      	pop	{r7, pc}
 800dd50:	20011a38 	.word	0x20011a38

0800dd54 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800dd54:	b580      	push	{r7, lr}
 800dd56:	b084      	sub	sp, #16
 800dd58:	af00      	add	r7, sp, #0
 800dd5a:	4603      	mov	r3, r0
 800dd5c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800dd5e:	2300      	movs	r3, #0
 800dd60:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800dd62:	79fb      	ldrb	r3, [r7, #7]
 800dd64:	4a0d      	ldr	r2, [pc, #52]	; (800dd9c <disk_initialize+0x48>)
 800dd66:	5cd3      	ldrb	r3, [r2, r3]
 800dd68:	2b00      	cmp	r3, #0
 800dd6a:	d111      	bne.n	800dd90 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800dd6c:	79fb      	ldrb	r3, [r7, #7]
 800dd6e:	4a0b      	ldr	r2, [pc, #44]	; (800dd9c <disk_initialize+0x48>)
 800dd70:	2101      	movs	r1, #1
 800dd72:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800dd74:	79fb      	ldrb	r3, [r7, #7]
 800dd76:	4a09      	ldr	r2, [pc, #36]	; (800dd9c <disk_initialize+0x48>)
 800dd78:	009b      	lsls	r3, r3, #2
 800dd7a:	4413      	add	r3, r2
 800dd7c:	685b      	ldr	r3, [r3, #4]
 800dd7e:	681b      	ldr	r3, [r3, #0]
 800dd80:	79fa      	ldrb	r2, [r7, #7]
 800dd82:	4906      	ldr	r1, [pc, #24]	; (800dd9c <disk_initialize+0x48>)
 800dd84:	440a      	add	r2, r1
 800dd86:	7a12      	ldrb	r2, [r2, #8]
 800dd88:	4610      	mov	r0, r2
 800dd8a:	4798      	blx	r3
 800dd8c:	4603      	mov	r3, r0
 800dd8e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800dd90:	7bfb      	ldrb	r3, [r7, #15]
}
 800dd92:	4618      	mov	r0, r3
 800dd94:	3710      	adds	r7, #16
 800dd96:	46bd      	mov	sp, r7
 800dd98:	bd80      	pop	{r7, pc}
 800dd9a:	bf00      	nop
 800dd9c:	20011a38 	.word	0x20011a38

0800dda0 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800dda0:	b590      	push	{r4, r7, lr}
 800dda2:	b087      	sub	sp, #28
 800dda4:	af00      	add	r7, sp, #0
 800dda6:	60b9      	str	r1, [r7, #8]
 800dda8:	607a      	str	r2, [r7, #4]
 800ddaa:	603b      	str	r3, [r7, #0]
 800ddac:	4603      	mov	r3, r0
 800ddae:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800ddb0:	7bfb      	ldrb	r3, [r7, #15]
 800ddb2:	4a0a      	ldr	r2, [pc, #40]	; (800dddc <disk_read+0x3c>)
 800ddb4:	009b      	lsls	r3, r3, #2
 800ddb6:	4413      	add	r3, r2
 800ddb8:	685b      	ldr	r3, [r3, #4]
 800ddba:	689c      	ldr	r4, [r3, #8]
 800ddbc:	7bfb      	ldrb	r3, [r7, #15]
 800ddbe:	4a07      	ldr	r2, [pc, #28]	; (800dddc <disk_read+0x3c>)
 800ddc0:	4413      	add	r3, r2
 800ddc2:	7a18      	ldrb	r0, [r3, #8]
 800ddc4:	683b      	ldr	r3, [r7, #0]
 800ddc6:	687a      	ldr	r2, [r7, #4]
 800ddc8:	68b9      	ldr	r1, [r7, #8]
 800ddca:	47a0      	blx	r4
 800ddcc:	4603      	mov	r3, r0
 800ddce:	75fb      	strb	r3, [r7, #23]
  return res;
 800ddd0:	7dfb      	ldrb	r3, [r7, #23]
}
 800ddd2:	4618      	mov	r0, r3
 800ddd4:	371c      	adds	r7, #28
 800ddd6:	46bd      	mov	sp, r7
 800ddd8:	bd90      	pop	{r4, r7, pc}
 800ddda:	bf00      	nop
 800dddc:	20011a38 	.word	0x20011a38

0800dde0 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800dde0:	b590      	push	{r4, r7, lr}
 800dde2:	b087      	sub	sp, #28
 800dde4:	af00      	add	r7, sp, #0
 800dde6:	60b9      	str	r1, [r7, #8]
 800dde8:	607a      	str	r2, [r7, #4]
 800ddea:	603b      	str	r3, [r7, #0]
 800ddec:	4603      	mov	r3, r0
 800ddee:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800ddf0:	7bfb      	ldrb	r3, [r7, #15]
 800ddf2:	4a0a      	ldr	r2, [pc, #40]	; (800de1c <disk_write+0x3c>)
 800ddf4:	009b      	lsls	r3, r3, #2
 800ddf6:	4413      	add	r3, r2
 800ddf8:	685b      	ldr	r3, [r3, #4]
 800ddfa:	68dc      	ldr	r4, [r3, #12]
 800ddfc:	7bfb      	ldrb	r3, [r7, #15]
 800ddfe:	4a07      	ldr	r2, [pc, #28]	; (800de1c <disk_write+0x3c>)
 800de00:	4413      	add	r3, r2
 800de02:	7a18      	ldrb	r0, [r3, #8]
 800de04:	683b      	ldr	r3, [r7, #0]
 800de06:	687a      	ldr	r2, [r7, #4]
 800de08:	68b9      	ldr	r1, [r7, #8]
 800de0a:	47a0      	blx	r4
 800de0c:	4603      	mov	r3, r0
 800de0e:	75fb      	strb	r3, [r7, #23]
  return res;
 800de10:	7dfb      	ldrb	r3, [r7, #23]
}
 800de12:	4618      	mov	r0, r3
 800de14:	371c      	adds	r7, #28
 800de16:	46bd      	mov	sp, r7
 800de18:	bd90      	pop	{r4, r7, pc}
 800de1a:	bf00      	nop
 800de1c:	20011a38 	.word	0x20011a38

0800de20 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800de20:	b580      	push	{r7, lr}
 800de22:	b084      	sub	sp, #16
 800de24:	af00      	add	r7, sp, #0
 800de26:	4603      	mov	r3, r0
 800de28:	603a      	str	r2, [r7, #0]
 800de2a:	71fb      	strb	r3, [r7, #7]
 800de2c:	460b      	mov	r3, r1
 800de2e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800de30:	79fb      	ldrb	r3, [r7, #7]
 800de32:	4a09      	ldr	r2, [pc, #36]	; (800de58 <disk_ioctl+0x38>)
 800de34:	009b      	lsls	r3, r3, #2
 800de36:	4413      	add	r3, r2
 800de38:	685b      	ldr	r3, [r3, #4]
 800de3a:	691b      	ldr	r3, [r3, #16]
 800de3c:	79fa      	ldrb	r2, [r7, #7]
 800de3e:	4906      	ldr	r1, [pc, #24]	; (800de58 <disk_ioctl+0x38>)
 800de40:	440a      	add	r2, r1
 800de42:	7a10      	ldrb	r0, [r2, #8]
 800de44:	79b9      	ldrb	r1, [r7, #6]
 800de46:	683a      	ldr	r2, [r7, #0]
 800de48:	4798      	blx	r3
 800de4a:	4603      	mov	r3, r0
 800de4c:	73fb      	strb	r3, [r7, #15]
  return res;
 800de4e:	7bfb      	ldrb	r3, [r7, #15]
}
 800de50:	4618      	mov	r0, r3
 800de52:	3710      	adds	r7, #16
 800de54:	46bd      	mov	sp, r7
 800de56:	bd80      	pop	{r7, pc}
 800de58:	20011a38 	.word	0x20011a38

0800de5c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800de5c:	b480      	push	{r7}
 800de5e:	b085      	sub	sp, #20
 800de60:	af00      	add	r7, sp, #0
 800de62:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800de64:	687b      	ldr	r3, [r7, #4]
 800de66:	3301      	adds	r3, #1
 800de68:	781b      	ldrb	r3, [r3, #0]
 800de6a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800de6c:	89fb      	ldrh	r3, [r7, #14]
 800de6e:	021b      	lsls	r3, r3, #8
 800de70:	b21a      	sxth	r2, r3
 800de72:	687b      	ldr	r3, [r7, #4]
 800de74:	781b      	ldrb	r3, [r3, #0]
 800de76:	b21b      	sxth	r3, r3
 800de78:	4313      	orrs	r3, r2
 800de7a:	b21b      	sxth	r3, r3
 800de7c:	81fb      	strh	r3, [r7, #14]
	return rv;
 800de7e:	89fb      	ldrh	r3, [r7, #14]
}
 800de80:	4618      	mov	r0, r3
 800de82:	3714      	adds	r7, #20
 800de84:	46bd      	mov	sp, r7
 800de86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de8a:	4770      	bx	lr

0800de8c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800de8c:	b480      	push	{r7}
 800de8e:	b085      	sub	sp, #20
 800de90:	af00      	add	r7, sp, #0
 800de92:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800de94:	687b      	ldr	r3, [r7, #4]
 800de96:	3303      	adds	r3, #3
 800de98:	781b      	ldrb	r3, [r3, #0]
 800de9a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800de9c:	68fb      	ldr	r3, [r7, #12]
 800de9e:	021b      	lsls	r3, r3, #8
 800dea0:	687a      	ldr	r2, [r7, #4]
 800dea2:	3202      	adds	r2, #2
 800dea4:	7812      	ldrb	r2, [r2, #0]
 800dea6:	4313      	orrs	r3, r2
 800dea8:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800deaa:	68fb      	ldr	r3, [r7, #12]
 800deac:	021b      	lsls	r3, r3, #8
 800deae:	687a      	ldr	r2, [r7, #4]
 800deb0:	3201      	adds	r2, #1
 800deb2:	7812      	ldrb	r2, [r2, #0]
 800deb4:	4313      	orrs	r3, r2
 800deb6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800deb8:	68fb      	ldr	r3, [r7, #12]
 800deba:	021b      	lsls	r3, r3, #8
 800debc:	687a      	ldr	r2, [r7, #4]
 800debe:	7812      	ldrb	r2, [r2, #0]
 800dec0:	4313      	orrs	r3, r2
 800dec2:	60fb      	str	r3, [r7, #12]
	return rv;
 800dec4:	68fb      	ldr	r3, [r7, #12]
}
 800dec6:	4618      	mov	r0, r3
 800dec8:	3714      	adds	r7, #20
 800deca:	46bd      	mov	sp, r7
 800decc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ded0:	4770      	bx	lr

0800ded2 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800ded2:	b480      	push	{r7}
 800ded4:	b083      	sub	sp, #12
 800ded6:	af00      	add	r7, sp, #0
 800ded8:	6078      	str	r0, [r7, #4]
 800deda:	460b      	mov	r3, r1
 800dedc:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800dede:	687b      	ldr	r3, [r7, #4]
 800dee0:	1c5a      	adds	r2, r3, #1
 800dee2:	607a      	str	r2, [r7, #4]
 800dee4:	887a      	ldrh	r2, [r7, #2]
 800dee6:	b2d2      	uxtb	r2, r2
 800dee8:	701a      	strb	r2, [r3, #0]
 800deea:	887b      	ldrh	r3, [r7, #2]
 800deec:	0a1b      	lsrs	r3, r3, #8
 800deee:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800def0:	687b      	ldr	r3, [r7, #4]
 800def2:	1c5a      	adds	r2, r3, #1
 800def4:	607a      	str	r2, [r7, #4]
 800def6:	887a      	ldrh	r2, [r7, #2]
 800def8:	b2d2      	uxtb	r2, r2
 800defa:	701a      	strb	r2, [r3, #0]
}
 800defc:	bf00      	nop
 800defe:	370c      	adds	r7, #12
 800df00:	46bd      	mov	sp, r7
 800df02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df06:	4770      	bx	lr

0800df08 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800df08:	b480      	push	{r7}
 800df0a:	b083      	sub	sp, #12
 800df0c:	af00      	add	r7, sp, #0
 800df0e:	6078      	str	r0, [r7, #4]
 800df10:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800df12:	687b      	ldr	r3, [r7, #4]
 800df14:	1c5a      	adds	r2, r3, #1
 800df16:	607a      	str	r2, [r7, #4]
 800df18:	683a      	ldr	r2, [r7, #0]
 800df1a:	b2d2      	uxtb	r2, r2
 800df1c:	701a      	strb	r2, [r3, #0]
 800df1e:	683b      	ldr	r3, [r7, #0]
 800df20:	0a1b      	lsrs	r3, r3, #8
 800df22:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800df24:	687b      	ldr	r3, [r7, #4]
 800df26:	1c5a      	adds	r2, r3, #1
 800df28:	607a      	str	r2, [r7, #4]
 800df2a:	683a      	ldr	r2, [r7, #0]
 800df2c:	b2d2      	uxtb	r2, r2
 800df2e:	701a      	strb	r2, [r3, #0]
 800df30:	683b      	ldr	r3, [r7, #0]
 800df32:	0a1b      	lsrs	r3, r3, #8
 800df34:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800df36:	687b      	ldr	r3, [r7, #4]
 800df38:	1c5a      	adds	r2, r3, #1
 800df3a:	607a      	str	r2, [r7, #4]
 800df3c:	683a      	ldr	r2, [r7, #0]
 800df3e:	b2d2      	uxtb	r2, r2
 800df40:	701a      	strb	r2, [r3, #0]
 800df42:	683b      	ldr	r3, [r7, #0]
 800df44:	0a1b      	lsrs	r3, r3, #8
 800df46:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800df48:	687b      	ldr	r3, [r7, #4]
 800df4a:	1c5a      	adds	r2, r3, #1
 800df4c:	607a      	str	r2, [r7, #4]
 800df4e:	683a      	ldr	r2, [r7, #0]
 800df50:	b2d2      	uxtb	r2, r2
 800df52:	701a      	strb	r2, [r3, #0]
}
 800df54:	bf00      	nop
 800df56:	370c      	adds	r7, #12
 800df58:	46bd      	mov	sp, r7
 800df5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df5e:	4770      	bx	lr

0800df60 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800df60:	b480      	push	{r7}
 800df62:	b087      	sub	sp, #28
 800df64:	af00      	add	r7, sp, #0
 800df66:	60f8      	str	r0, [r7, #12]
 800df68:	60b9      	str	r1, [r7, #8]
 800df6a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800df6c:	68fb      	ldr	r3, [r7, #12]
 800df6e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800df70:	68bb      	ldr	r3, [r7, #8]
 800df72:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800df74:	687b      	ldr	r3, [r7, #4]
 800df76:	2b00      	cmp	r3, #0
 800df78:	d00d      	beq.n	800df96 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800df7a:	693a      	ldr	r2, [r7, #16]
 800df7c:	1c53      	adds	r3, r2, #1
 800df7e:	613b      	str	r3, [r7, #16]
 800df80:	697b      	ldr	r3, [r7, #20]
 800df82:	1c59      	adds	r1, r3, #1
 800df84:	6179      	str	r1, [r7, #20]
 800df86:	7812      	ldrb	r2, [r2, #0]
 800df88:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800df8a:	687b      	ldr	r3, [r7, #4]
 800df8c:	3b01      	subs	r3, #1
 800df8e:	607b      	str	r3, [r7, #4]
 800df90:	687b      	ldr	r3, [r7, #4]
 800df92:	2b00      	cmp	r3, #0
 800df94:	d1f1      	bne.n	800df7a <mem_cpy+0x1a>
	}
}
 800df96:	bf00      	nop
 800df98:	371c      	adds	r7, #28
 800df9a:	46bd      	mov	sp, r7
 800df9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfa0:	4770      	bx	lr

0800dfa2 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800dfa2:	b480      	push	{r7}
 800dfa4:	b087      	sub	sp, #28
 800dfa6:	af00      	add	r7, sp, #0
 800dfa8:	60f8      	str	r0, [r7, #12]
 800dfaa:	60b9      	str	r1, [r7, #8]
 800dfac:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800dfae:	68fb      	ldr	r3, [r7, #12]
 800dfb0:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800dfb2:	697b      	ldr	r3, [r7, #20]
 800dfb4:	1c5a      	adds	r2, r3, #1
 800dfb6:	617a      	str	r2, [r7, #20]
 800dfb8:	68ba      	ldr	r2, [r7, #8]
 800dfba:	b2d2      	uxtb	r2, r2
 800dfbc:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800dfbe:	687b      	ldr	r3, [r7, #4]
 800dfc0:	3b01      	subs	r3, #1
 800dfc2:	607b      	str	r3, [r7, #4]
 800dfc4:	687b      	ldr	r3, [r7, #4]
 800dfc6:	2b00      	cmp	r3, #0
 800dfc8:	d1f3      	bne.n	800dfb2 <mem_set+0x10>
}
 800dfca:	bf00      	nop
 800dfcc:	bf00      	nop
 800dfce:	371c      	adds	r7, #28
 800dfd0:	46bd      	mov	sp, r7
 800dfd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfd6:	4770      	bx	lr

0800dfd8 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800dfd8:	b480      	push	{r7}
 800dfda:	b089      	sub	sp, #36	; 0x24
 800dfdc:	af00      	add	r7, sp, #0
 800dfde:	60f8      	str	r0, [r7, #12]
 800dfe0:	60b9      	str	r1, [r7, #8]
 800dfe2:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800dfe4:	68fb      	ldr	r3, [r7, #12]
 800dfe6:	61fb      	str	r3, [r7, #28]
 800dfe8:	68bb      	ldr	r3, [r7, #8]
 800dfea:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800dfec:	2300      	movs	r3, #0
 800dfee:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800dff0:	69fb      	ldr	r3, [r7, #28]
 800dff2:	1c5a      	adds	r2, r3, #1
 800dff4:	61fa      	str	r2, [r7, #28]
 800dff6:	781b      	ldrb	r3, [r3, #0]
 800dff8:	4619      	mov	r1, r3
 800dffa:	69bb      	ldr	r3, [r7, #24]
 800dffc:	1c5a      	adds	r2, r3, #1
 800dffe:	61ba      	str	r2, [r7, #24]
 800e000:	781b      	ldrb	r3, [r3, #0]
 800e002:	1acb      	subs	r3, r1, r3
 800e004:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800e006:	687b      	ldr	r3, [r7, #4]
 800e008:	3b01      	subs	r3, #1
 800e00a:	607b      	str	r3, [r7, #4]
 800e00c:	687b      	ldr	r3, [r7, #4]
 800e00e:	2b00      	cmp	r3, #0
 800e010:	d002      	beq.n	800e018 <mem_cmp+0x40>
 800e012:	697b      	ldr	r3, [r7, #20]
 800e014:	2b00      	cmp	r3, #0
 800e016:	d0eb      	beq.n	800dff0 <mem_cmp+0x18>

	return r;
 800e018:	697b      	ldr	r3, [r7, #20]
}
 800e01a:	4618      	mov	r0, r3
 800e01c:	3724      	adds	r7, #36	; 0x24
 800e01e:	46bd      	mov	sp, r7
 800e020:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e024:	4770      	bx	lr

0800e026 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800e026:	b480      	push	{r7}
 800e028:	b083      	sub	sp, #12
 800e02a:	af00      	add	r7, sp, #0
 800e02c:	6078      	str	r0, [r7, #4]
 800e02e:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800e030:	e002      	b.n	800e038 <chk_chr+0x12>
 800e032:	687b      	ldr	r3, [r7, #4]
 800e034:	3301      	adds	r3, #1
 800e036:	607b      	str	r3, [r7, #4]
 800e038:	687b      	ldr	r3, [r7, #4]
 800e03a:	781b      	ldrb	r3, [r3, #0]
 800e03c:	2b00      	cmp	r3, #0
 800e03e:	d005      	beq.n	800e04c <chk_chr+0x26>
 800e040:	687b      	ldr	r3, [r7, #4]
 800e042:	781b      	ldrb	r3, [r3, #0]
 800e044:	461a      	mov	r2, r3
 800e046:	683b      	ldr	r3, [r7, #0]
 800e048:	4293      	cmp	r3, r2
 800e04a:	d1f2      	bne.n	800e032 <chk_chr+0xc>
	return *str;
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	781b      	ldrb	r3, [r3, #0]
}
 800e050:	4618      	mov	r0, r3
 800e052:	370c      	adds	r7, #12
 800e054:	46bd      	mov	sp, r7
 800e056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e05a:	4770      	bx	lr

0800e05c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800e05c:	b480      	push	{r7}
 800e05e:	b085      	sub	sp, #20
 800e060:	af00      	add	r7, sp, #0
 800e062:	6078      	str	r0, [r7, #4]
 800e064:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800e066:	2300      	movs	r3, #0
 800e068:	60bb      	str	r3, [r7, #8]
 800e06a:	68bb      	ldr	r3, [r7, #8]
 800e06c:	60fb      	str	r3, [r7, #12]
 800e06e:	e029      	b.n	800e0c4 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800e070:	4a27      	ldr	r2, [pc, #156]	; (800e110 <chk_lock+0xb4>)
 800e072:	68fb      	ldr	r3, [r7, #12]
 800e074:	011b      	lsls	r3, r3, #4
 800e076:	4413      	add	r3, r2
 800e078:	681b      	ldr	r3, [r3, #0]
 800e07a:	2b00      	cmp	r3, #0
 800e07c:	d01d      	beq.n	800e0ba <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800e07e:	4a24      	ldr	r2, [pc, #144]	; (800e110 <chk_lock+0xb4>)
 800e080:	68fb      	ldr	r3, [r7, #12]
 800e082:	011b      	lsls	r3, r3, #4
 800e084:	4413      	add	r3, r2
 800e086:	681a      	ldr	r2, [r3, #0]
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	681b      	ldr	r3, [r3, #0]
 800e08c:	429a      	cmp	r2, r3
 800e08e:	d116      	bne.n	800e0be <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800e090:	4a1f      	ldr	r2, [pc, #124]	; (800e110 <chk_lock+0xb4>)
 800e092:	68fb      	ldr	r3, [r7, #12]
 800e094:	011b      	lsls	r3, r3, #4
 800e096:	4413      	add	r3, r2
 800e098:	3304      	adds	r3, #4
 800e09a:	681a      	ldr	r2, [r3, #0]
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800e0a0:	429a      	cmp	r2, r3
 800e0a2:	d10c      	bne.n	800e0be <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800e0a4:	4a1a      	ldr	r2, [pc, #104]	; (800e110 <chk_lock+0xb4>)
 800e0a6:	68fb      	ldr	r3, [r7, #12]
 800e0a8:	011b      	lsls	r3, r3, #4
 800e0aa:	4413      	add	r3, r2
 800e0ac:	3308      	adds	r3, #8
 800e0ae:	681a      	ldr	r2, [r3, #0]
 800e0b0:	687b      	ldr	r3, [r7, #4]
 800e0b2:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800e0b4:	429a      	cmp	r2, r3
 800e0b6:	d102      	bne.n	800e0be <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800e0b8:	e007      	b.n	800e0ca <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800e0ba:	2301      	movs	r3, #1
 800e0bc:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800e0be:	68fb      	ldr	r3, [r7, #12]
 800e0c0:	3301      	adds	r3, #1
 800e0c2:	60fb      	str	r3, [r7, #12]
 800e0c4:	68fb      	ldr	r3, [r7, #12]
 800e0c6:	2b01      	cmp	r3, #1
 800e0c8:	d9d2      	bls.n	800e070 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800e0ca:	68fb      	ldr	r3, [r7, #12]
 800e0cc:	2b02      	cmp	r3, #2
 800e0ce:	d109      	bne.n	800e0e4 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800e0d0:	68bb      	ldr	r3, [r7, #8]
 800e0d2:	2b00      	cmp	r3, #0
 800e0d4:	d102      	bne.n	800e0dc <chk_lock+0x80>
 800e0d6:	683b      	ldr	r3, [r7, #0]
 800e0d8:	2b02      	cmp	r3, #2
 800e0da:	d101      	bne.n	800e0e0 <chk_lock+0x84>
 800e0dc:	2300      	movs	r3, #0
 800e0de:	e010      	b.n	800e102 <chk_lock+0xa6>
 800e0e0:	2312      	movs	r3, #18
 800e0e2:	e00e      	b.n	800e102 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800e0e4:	683b      	ldr	r3, [r7, #0]
 800e0e6:	2b00      	cmp	r3, #0
 800e0e8:	d108      	bne.n	800e0fc <chk_lock+0xa0>
 800e0ea:	4a09      	ldr	r2, [pc, #36]	; (800e110 <chk_lock+0xb4>)
 800e0ec:	68fb      	ldr	r3, [r7, #12]
 800e0ee:	011b      	lsls	r3, r3, #4
 800e0f0:	4413      	add	r3, r2
 800e0f2:	330c      	adds	r3, #12
 800e0f4:	881b      	ldrh	r3, [r3, #0]
 800e0f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e0fa:	d101      	bne.n	800e100 <chk_lock+0xa4>
 800e0fc:	2310      	movs	r3, #16
 800e0fe:	e000      	b.n	800e102 <chk_lock+0xa6>
 800e100:	2300      	movs	r3, #0
}
 800e102:	4618      	mov	r0, r3
 800e104:	3714      	adds	r7, #20
 800e106:	46bd      	mov	sp, r7
 800e108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e10c:	4770      	bx	lr
 800e10e:	bf00      	nop
 800e110:	20011818 	.word	0x20011818

0800e114 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800e114:	b480      	push	{r7}
 800e116:	b083      	sub	sp, #12
 800e118:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800e11a:	2300      	movs	r3, #0
 800e11c:	607b      	str	r3, [r7, #4]
 800e11e:	e002      	b.n	800e126 <enq_lock+0x12>
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	3301      	adds	r3, #1
 800e124:	607b      	str	r3, [r7, #4]
 800e126:	687b      	ldr	r3, [r7, #4]
 800e128:	2b01      	cmp	r3, #1
 800e12a:	d806      	bhi.n	800e13a <enq_lock+0x26>
 800e12c:	4a09      	ldr	r2, [pc, #36]	; (800e154 <enq_lock+0x40>)
 800e12e:	687b      	ldr	r3, [r7, #4]
 800e130:	011b      	lsls	r3, r3, #4
 800e132:	4413      	add	r3, r2
 800e134:	681b      	ldr	r3, [r3, #0]
 800e136:	2b00      	cmp	r3, #0
 800e138:	d1f2      	bne.n	800e120 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800e13a:	687b      	ldr	r3, [r7, #4]
 800e13c:	2b02      	cmp	r3, #2
 800e13e:	bf14      	ite	ne
 800e140:	2301      	movne	r3, #1
 800e142:	2300      	moveq	r3, #0
 800e144:	b2db      	uxtb	r3, r3
}
 800e146:	4618      	mov	r0, r3
 800e148:	370c      	adds	r7, #12
 800e14a:	46bd      	mov	sp, r7
 800e14c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e150:	4770      	bx	lr
 800e152:	bf00      	nop
 800e154:	20011818 	.word	0x20011818

0800e158 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800e158:	b480      	push	{r7}
 800e15a:	b085      	sub	sp, #20
 800e15c:	af00      	add	r7, sp, #0
 800e15e:	6078      	str	r0, [r7, #4]
 800e160:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800e162:	2300      	movs	r3, #0
 800e164:	60fb      	str	r3, [r7, #12]
 800e166:	e01f      	b.n	800e1a8 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800e168:	4a41      	ldr	r2, [pc, #260]	; (800e270 <inc_lock+0x118>)
 800e16a:	68fb      	ldr	r3, [r7, #12]
 800e16c:	011b      	lsls	r3, r3, #4
 800e16e:	4413      	add	r3, r2
 800e170:	681a      	ldr	r2, [r3, #0]
 800e172:	687b      	ldr	r3, [r7, #4]
 800e174:	681b      	ldr	r3, [r3, #0]
 800e176:	429a      	cmp	r2, r3
 800e178:	d113      	bne.n	800e1a2 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800e17a:	4a3d      	ldr	r2, [pc, #244]	; (800e270 <inc_lock+0x118>)
 800e17c:	68fb      	ldr	r3, [r7, #12]
 800e17e:	011b      	lsls	r3, r3, #4
 800e180:	4413      	add	r3, r2
 800e182:	3304      	adds	r3, #4
 800e184:	681a      	ldr	r2, [r3, #0]
 800e186:	687b      	ldr	r3, [r7, #4]
 800e188:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800e18a:	429a      	cmp	r2, r3
 800e18c:	d109      	bne.n	800e1a2 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800e18e:	4a38      	ldr	r2, [pc, #224]	; (800e270 <inc_lock+0x118>)
 800e190:	68fb      	ldr	r3, [r7, #12]
 800e192:	011b      	lsls	r3, r3, #4
 800e194:	4413      	add	r3, r2
 800e196:	3308      	adds	r3, #8
 800e198:	681a      	ldr	r2, [r3, #0]
 800e19a:	687b      	ldr	r3, [r7, #4]
 800e19c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800e19e:	429a      	cmp	r2, r3
 800e1a0:	d006      	beq.n	800e1b0 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800e1a2:	68fb      	ldr	r3, [r7, #12]
 800e1a4:	3301      	adds	r3, #1
 800e1a6:	60fb      	str	r3, [r7, #12]
 800e1a8:	68fb      	ldr	r3, [r7, #12]
 800e1aa:	2b01      	cmp	r3, #1
 800e1ac:	d9dc      	bls.n	800e168 <inc_lock+0x10>
 800e1ae:	e000      	b.n	800e1b2 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800e1b0:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800e1b2:	68fb      	ldr	r3, [r7, #12]
 800e1b4:	2b02      	cmp	r3, #2
 800e1b6:	d132      	bne.n	800e21e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800e1b8:	2300      	movs	r3, #0
 800e1ba:	60fb      	str	r3, [r7, #12]
 800e1bc:	e002      	b.n	800e1c4 <inc_lock+0x6c>
 800e1be:	68fb      	ldr	r3, [r7, #12]
 800e1c0:	3301      	adds	r3, #1
 800e1c2:	60fb      	str	r3, [r7, #12]
 800e1c4:	68fb      	ldr	r3, [r7, #12]
 800e1c6:	2b01      	cmp	r3, #1
 800e1c8:	d806      	bhi.n	800e1d8 <inc_lock+0x80>
 800e1ca:	4a29      	ldr	r2, [pc, #164]	; (800e270 <inc_lock+0x118>)
 800e1cc:	68fb      	ldr	r3, [r7, #12]
 800e1ce:	011b      	lsls	r3, r3, #4
 800e1d0:	4413      	add	r3, r2
 800e1d2:	681b      	ldr	r3, [r3, #0]
 800e1d4:	2b00      	cmp	r3, #0
 800e1d6:	d1f2      	bne.n	800e1be <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800e1d8:	68fb      	ldr	r3, [r7, #12]
 800e1da:	2b02      	cmp	r3, #2
 800e1dc:	d101      	bne.n	800e1e2 <inc_lock+0x8a>
 800e1de:	2300      	movs	r3, #0
 800e1e0:	e040      	b.n	800e264 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800e1e2:	687b      	ldr	r3, [r7, #4]
 800e1e4:	681a      	ldr	r2, [r3, #0]
 800e1e6:	4922      	ldr	r1, [pc, #136]	; (800e270 <inc_lock+0x118>)
 800e1e8:	68fb      	ldr	r3, [r7, #12]
 800e1ea:	011b      	lsls	r3, r3, #4
 800e1ec:	440b      	add	r3, r1
 800e1ee:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800e1f0:	687b      	ldr	r3, [r7, #4]
 800e1f2:	689a      	ldr	r2, [r3, #8]
 800e1f4:	491e      	ldr	r1, [pc, #120]	; (800e270 <inc_lock+0x118>)
 800e1f6:	68fb      	ldr	r3, [r7, #12]
 800e1f8:	011b      	lsls	r3, r3, #4
 800e1fa:	440b      	add	r3, r1
 800e1fc:	3304      	adds	r3, #4
 800e1fe:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800e200:	687b      	ldr	r3, [r7, #4]
 800e202:	695a      	ldr	r2, [r3, #20]
 800e204:	491a      	ldr	r1, [pc, #104]	; (800e270 <inc_lock+0x118>)
 800e206:	68fb      	ldr	r3, [r7, #12]
 800e208:	011b      	lsls	r3, r3, #4
 800e20a:	440b      	add	r3, r1
 800e20c:	3308      	adds	r3, #8
 800e20e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800e210:	4a17      	ldr	r2, [pc, #92]	; (800e270 <inc_lock+0x118>)
 800e212:	68fb      	ldr	r3, [r7, #12]
 800e214:	011b      	lsls	r3, r3, #4
 800e216:	4413      	add	r3, r2
 800e218:	330c      	adds	r3, #12
 800e21a:	2200      	movs	r2, #0
 800e21c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800e21e:	683b      	ldr	r3, [r7, #0]
 800e220:	2b00      	cmp	r3, #0
 800e222:	d009      	beq.n	800e238 <inc_lock+0xe0>
 800e224:	4a12      	ldr	r2, [pc, #72]	; (800e270 <inc_lock+0x118>)
 800e226:	68fb      	ldr	r3, [r7, #12]
 800e228:	011b      	lsls	r3, r3, #4
 800e22a:	4413      	add	r3, r2
 800e22c:	330c      	adds	r3, #12
 800e22e:	881b      	ldrh	r3, [r3, #0]
 800e230:	2b00      	cmp	r3, #0
 800e232:	d001      	beq.n	800e238 <inc_lock+0xe0>
 800e234:	2300      	movs	r3, #0
 800e236:	e015      	b.n	800e264 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800e238:	683b      	ldr	r3, [r7, #0]
 800e23a:	2b00      	cmp	r3, #0
 800e23c:	d108      	bne.n	800e250 <inc_lock+0xf8>
 800e23e:	4a0c      	ldr	r2, [pc, #48]	; (800e270 <inc_lock+0x118>)
 800e240:	68fb      	ldr	r3, [r7, #12]
 800e242:	011b      	lsls	r3, r3, #4
 800e244:	4413      	add	r3, r2
 800e246:	330c      	adds	r3, #12
 800e248:	881b      	ldrh	r3, [r3, #0]
 800e24a:	3301      	adds	r3, #1
 800e24c:	b29a      	uxth	r2, r3
 800e24e:	e001      	b.n	800e254 <inc_lock+0xfc>
 800e250:	f44f 7280 	mov.w	r2, #256	; 0x100
 800e254:	4906      	ldr	r1, [pc, #24]	; (800e270 <inc_lock+0x118>)
 800e256:	68fb      	ldr	r3, [r7, #12]
 800e258:	011b      	lsls	r3, r3, #4
 800e25a:	440b      	add	r3, r1
 800e25c:	330c      	adds	r3, #12
 800e25e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800e260:	68fb      	ldr	r3, [r7, #12]
 800e262:	3301      	adds	r3, #1
}
 800e264:	4618      	mov	r0, r3
 800e266:	3714      	adds	r7, #20
 800e268:	46bd      	mov	sp, r7
 800e26a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e26e:	4770      	bx	lr
 800e270:	20011818 	.word	0x20011818

0800e274 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800e274:	b480      	push	{r7}
 800e276:	b085      	sub	sp, #20
 800e278:	af00      	add	r7, sp, #0
 800e27a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800e27c:	687b      	ldr	r3, [r7, #4]
 800e27e:	3b01      	subs	r3, #1
 800e280:	607b      	str	r3, [r7, #4]
 800e282:	687b      	ldr	r3, [r7, #4]
 800e284:	2b01      	cmp	r3, #1
 800e286:	d825      	bhi.n	800e2d4 <dec_lock+0x60>
		n = Files[i].ctr;
 800e288:	4a17      	ldr	r2, [pc, #92]	; (800e2e8 <dec_lock+0x74>)
 800e28a:	687b      	ldr	r3, [r7, #4]
 800e28c:	011b      	lsls	r3, r3, #4
 800e28e:	4413      	add	r3, r2
 800e290:	330c      	adds	r3, #12
 800e292:	881b      	ldrh	r3, [r3, #0]
 800e294:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800e296:	89fb      	ldrh	r3, [r7, #14]
 800e298:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e29c:	d101      	bne.n	800e2a2 <dec_lock+0x2e>
 800e29e:	2300      	movs	r3, #0
 800e2a0:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800e2a2:	89fb      	ldrh	r3, [r7, #14]
 800e2a4:	2b00      	cmp	r3, #0
 800e2a6:	d002      	beq.n	800e2ae <dec_lock+0x3a>
 800e2a8:	89fb      	ldrh	r3, [r7, #14]
 800e2aa:	3b01      	subs	r3, #1
 800e2ac:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800e2ae:	4a0e      	ldr	r2, [pc, #56]	; (800e2e8 <dec_lock+0x74>)
 800e2b0:	687b      	ldr	r3, [r7, #4]
 800e2b2:	011b      	lsls	r3, r3, #4
 800e2b4:	4413      	add	r3, r2
 800e2b6:	330c      	adds	r3, #12
 800e2b8:	89fa      	ldrh	r2, [r7, #14]
 800e2ba:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800e2bc:	89fb      	ldrh	r3, [r7, #14]
 800e2be:	2b00      	cmp	r3, #0
 800e2c0:	d105      	bne.n	800e2ce <dec_lock+0x5a>
 800e2c2:	4a09      	ldr	r2, [pc, #36]	; (800e2e8 <dec_lock+0x74>)
 800e2c4:	687b      	ldr	r3, [r7, #4]
 800e2c6:	011b      	lsls	r3, r3, #4
 800e2c8:	4413      	add	r3, r2
 800e2ca:	2200      	movs	r2, #0
 800e2cc:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800e2ce:	2300      	movs	r3, #0
 800e2d0:	737b      	strb	r3, [r7, #13]
 800e2d2:	e001      	b.n	800e2d8 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800e2d4:	2302      	movs	r3, #2
 800e2d6:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800e2d8:	7b7b      	ldrb	r3, [r7, #13]
}
 800e2da:	4618      	mov	r0, r3
 800e2dc:	3714      	adds	r7, #20
 800e2de:	46bd      	mov	sp, r7
 800e2e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2e4:	4770      	bx	lr
 800e2e6:	bf00      	nop
 800e2e8:	20011818 	.word	0x20011818

0800e2ec <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800e2ec:	b480      	push	{r7}
 800e2ee:	b085      	sub	sp, #20
 800e2f0:	af00      	add	r7, sp, #0
 800e2f2:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800e2f4:	2300      	movs	r3, #0
 800e2f6:	60fb      	str	r3, [r7, #12]
 800e2f8:	e010      	b.n	800e31c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800e2fa:	4a0d      	ldr	r2, [pc, #52]	; (800e330 <clear_lock+0x44>)
 800e2fc:	68fb      	ldr	r3, [r7, #12]
 800e2fe:	011b      	lsls	r3, r3, #4
 800e300:	4413      	add	r3, r2
 800e302:	681b      	ldr	r3, [r3, #0]
 800e304:	687a      	ldr	r2, [r7, #4]
 800e306:	429a      	cmp	r2, r3
 800e308:	d105      	bne.n	800e316 <clear_lock+0x2a>
 800e30a:	4a09      	ldr	r2, [pc, #36]	; (800e330 <clear_lock+0x44>)
 800e30c:	68fb      	ldr	r3, [r7, #12]
 800e30e:	011b      	lsls	r3, r3, #4
 800e310:	4413      	add	r3, r2
 800e312:	2200      	movs	r2, #0
 800e314:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800e316:	68fb      	ldr	r3, [r7, #12]
 800e318:	3301      	adds	r3, #1
 800e31a:	60fb      	str	r3, [r7, #12]
 800e31c:	68fb      	ldr	r3, [r7, #12]
 800e31e:	2b01      	cmp	r3, #1
 800e320:	d9eb      	bls.n	800e2fa <clear_lock+0xe>
	}
}
 800e322:	bf00      	nop
 800e324:	bf00      	nop
 800e326:	3714      	adds	r7, #20
 800e328:	46bd      	mov	sp, r7
 800e32a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e32e:	4770      	bx	lr
 800e330:	20011818 	.word	0x20011818

0800e334 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800e334:	b580      	push	{r7, lr}
 800e336:	b086      	sub	sp, #24
 800e338:	af00      	add	r7, sp, #0
 800e33a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800e33c:	2300      	movs	r3, #0
 800e33e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800e340:	687b      	ldr	r3, [r7, #4]
 800e342:	78db      	ldrb	r3, [r3, #3]
 800e344:	2b00      	cmp	r3, #0
 800e346:	d034      	beq.n	800e3b2 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800e348:	687b      	ldr	r3, [r7, #4]
 800e34a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e34c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800e34e:	687b      	ldr	r3, [r7, #4]
 800e350:	7858      	ldrb	r0, [r3, #1]
 800e352:	687b      	ldr	r3, [r7, #4]
 800e354:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800e358:	2301      	movs	r3, #1
 800e35a:	697a      	ldr	r2, [r7, #20]
 800e35c:	f7ff fd40 	bl	800dde0 <disk_write>
 800e360:	4603      	mov	r3, r0
 800e362:	2b00      	cmp	r3, #0
 800e364:	d002      	beq.n	800e36c <sync_window+0x38>
			res = FR_DISK_ERR;
 800e366:	2301      	movs	r3, #1
 800e368:	73fb      	strb	r3, [r7, #15]
 800e36a:	e022      	b.n	800e3b2 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800e36c:	687b      	ldr	r3, [r7, #4]
 800e36e:	2200      	movs	r2, #0
 800e370:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800e372:	687b      	ldr	r3, [r7, #4]
 800e374:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e376:	697a      	ldr	r2, [r7, #20]
 800e378:	1ad2      	subs	r2, r2, r3
 800e37a:	687b      	ldr	r3, [r7, #4]
 800e37c:	6a1b      	ldr	r3, [r3, #32]
 800e37e:	429a      	cmp	r2, r3
 800e380:	d217      	bcs.n	800e3b2 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800e382:	687b      	ldr	r3, [r7, #4]
 800e384:	789b      	ldrb	r3, [r3, #2]
 800e386:	613b      	str	r3, [r7, #16]
 800e388:	e010      	b.n	800e3ac <sync_window+0x78>
					wsect += fs->fsize;
 800e38a:	687b      	ldr	r3, [r7, #4]
 800e38c:	6a1b      	ldr	r3, [r3, #32]
 800e38e:	697a      	ldr	r2, [r7, #20]
 800e390:	4413      	add	r3, r2
 800e392:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	7858      	ldrb	r0, [r3, #1]
 800e398:	687b      	ldr	r3, [r7, #4]
 800e39a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800e39e:	2301      	movs	r3, #1
 800e3a0:	697a      	ldr	r2, [r7, #20]
 800e3a2:	f7ff fd1d 	bl	800dde0 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800e3a6:	693b      	ldr	r3, [r7, #16]
 800e3a8:	3b01      	subs	r3, #1
 800e3aa:	613b      	str	r3, [r7, #16]
 800e3ac:	693b      	ldr	r3, [r7, #16]
 800e3ae:	2b01      	cmp	r3, #1
 800e3b0:	d8eb      	bhi.n	800e38a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800e3b2:	7bfb      	ldrb	r3, [r7, #15]
}
 800e3b4:	4618      	mov	r0, r3
 800e3b6:	3718      	adds	r7, #24
 800e3b8:	46bd      	mov	sp, r7
 800e3ba:	bd80      	pop	{r7, pc}

0800e3bc <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800e3bc:	b580      	push	{r7, lr}
 800e3be:	b084      	sub	sp, #16
 800e3c0:	af00      	add	r7, sp, #0
 800e3c2:	6078      	str	r0, [r7, #4]
 800e3c4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800e3c6:	2300      	movs	r3, #0
 800e3c8:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800e3ca:	687b      	ldr	r3, [r7, #4]
 800e3cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e3ce:	683a      	ldr	r2, [r7, #0]
 800e3d0:	429a      	cmp	r2, r3
 800e3d2:	d01b      	beq.n	800e40c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800e3d4:	6878      	ldr	r0, [r7, #4]
 800e3d6:	f7ff ffad 	bl	800e334 <sync_window>
 800e3da:	4603      	mov	r3, r0
 800e3dc:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800e3de:	7bfb      	ldrb	r3, [r7, #15]
 800e3e0:	2b00      	cmp	r3, #0
 800e3e2:	d113      	bne.n	800e40c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800e3e4:	687b      	ldr	r3, [r7, #4]
 800e3e6:	7858      	ldrb	r0, [r3, #1]
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800e3ee:	2301      	movs	r3, #1
 800e3f0:	683a      	ldr	r2, [r7, #0]
 800e3f2:	f7ff fcd5 	bl	800dda0 <disk_read>
 800e3f6:	4603      	mov	r3, r0
 800e3f8:	2b00      	cmp	r3, #0
 800e3fa:	d004      	beq.n	800e406 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800e3fc:	f04f 33ff 	mov.w	r3, #4294967295
 800e400:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800e402:	2301      	movs	r3, #1
 800e404:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800e406:	687b      	ldr	r3, [r7, #4]
 800e408:	683a      	ldr	r2, [r7, #0]
 800e40a:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 800e40c:	7bfb      	ldrb	r3, [r7, #15]
}
 800e40e:	4618      	mov	r0, r3
 800e410:	3710      	adds	r7, #16
 800e412:	46bd      	mov	sp, r7
 800e414:	bd80      	pop	{r7, pc}
	...

0800e418 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800e418:	b580      	push	{r7, lr}
 800e41a:	b084      	sub	sp, #16
 800e41c:	af00      	add	r7, sp, #0
 800e41e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800e420:	6878      	ldr	r0, [r7, #4]
 800e422:	f7ff ff87 	bl	800e334 <sync_window>
 800e426:	4603      	mov	r3, r0
 800e428:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800e42a:	7bfb      	ldrb	r3, [r7, #15]
 800e42c:	2b00      	cmp	r3, #0
 800e42e:	d159      	bne.n	800e4e4 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800e430:	687b      	ldr	r3, [r7, #4]
 800e432:	781b      	ldrb	r3, [r3, #0]
 800e434:	2b03      	cmp	r3, #3
 800e436:	d149      	bne.n	800e4cc <sync_fs+0xb4>
 800e438:	687b      	ldr	r3, [r7, #4]
 800e43a:	791b      	ldrb	r3, [r3, #4]
 800e43c:	2b01      	cmp	r3, #1
 800e43e:	d145      	bne.n	800e4cc <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800e440:	687b      	ldr	r3, [r7, #4]
 800e442:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800e446:	687b      	ldr	r3, [r7, #4]
 800e448:	899b      	ldrh	r3, [r3, #12]
 800e44a:	461a      	mov	r2, r3
 800e44c:	2100      	movs	r1, #0
 800e44e:	f7ff fda8 	bl	800dfa2 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800e452:	687b      	ldr	r3, [r7, #4]
 800e454:	3338      	adds	r3, #56	; 0x38
 800e456:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800e45a:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800e45e:	4618      	mov	r0, r3
 800e460:	f7ff fd37 	bl	800ded2 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800e464:	687b      	ldr	r3, [r7, #4]
 800e466:	3338      	adds	r3, #56	; 0x38
 800e468:	4921      	ldr	r1, [pc, #132]	; (800e4f0 <sync_fs+0xd8>)
 800e46a:	4618      	mov	r0, r3
 800e46c:	f7ff fd4c 	bl	800df08 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800e470:	687b      	ldr	r3, [r7, #4]
 800e472:	3338      	adds	r3, #56	; 0x38
 800e474:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800e478:	491e      	ldr	r1, [pc, #120]	; (800e4f4 <sync_fs+0xdc>)
 800e47a:	4618      	mov	r0, r3
 800e47c:	f7ff fd44 	bl	800df08 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800e480:	687b      	ldr	r3, [r7, #4]
 800e482:	3338      	adds	r3, #56	; 0x38
 800e484:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	699b      	ldr	r3, [r3, #24]
 800e48c:	4619      	mov	r1, r3
 800e48e:	4610      	mov	r0, r2
 800e490:	f7ff fd3a 	bl	800df08 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800e494:	687b      	ldr	r3, [r7, #4]
 800e496:	3338      	adds	r3, #56	; 0x38
 800e498:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800e49c:	687b      	ldr	r3, [r7, #4]
 800e49e:	695b      	ldr	r3, [r3, #20]
 800e4a0:	4619      	mov	r1, r3
 800e4a2:	4610      	mov	r0, r2
 800e4a4:	f7ff fd30 	bl	800df08 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800e4a8:	687b      	ldr	r3, [r7, #4]
 800e4aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e4ac:	1c5a      	adds	r2, r3, #1
 800e4ae:	687b      	ldr	r3, [r7, #4]
 800e4b0:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800e4b2:	687b      	ldr	r3, [r7, #4]
 800e4b4:	7858      	ldrb	r0, [r3, #1]
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800e4bc:	687b      	ldr	r3, [r7, #4]
 800e4be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e4c0:	2301      	movs	r3, #1
 800e4c2:	f7ff fc8d 	bl	800dde0 <disk_write>
			fs->fsi_flag = 0;
 800e4c6:	687b      	ldr	r3, [r7, #4]
 800e4c8:	2200      	movs	r2, #0
 800e4ca:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800e4cc:	687b      	ldr	r3, [r7, #4]
 800e4ce:	785b      	ldrb	r3, [r3, #1]
 800e4d0:	2200      	movs	r2, #0
 800e4d2:	2100      	movs	r1, #0
 800e4d4:	4618      	mov	r0, r3
 800e4d6:	f7ff fca3 	bl	800de20 <disk_ioctl>
 800e4da:	4603      	mov	r3, r0
 800e4dc:	2b00      	cmp	r3, #0
 800e4de:	d001      	beq.n	800e4e4 <sync_fs+0xcc>
 800e4e0:	2301      	movs	r3, #1
 800e4e2:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800e4e4:	7bfb      	ldrb	r3, [r7, #15]
}
 800e4e6:	4618      	mov	r0, r3
 800e4e8:	3710      	adds	r7, #16
 800e4ea:	46bd      	mov	sp, r7
 800e4ec:	bd80      	pop	{r7, pc}
 800e4ee:	bf00      	nop
 800e4f0:	41615252 	.word	0x41615252
 800e4f4:	61417272 	.word	0x61417272

0800e4f8 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800e4f8:	b480      	push	{r7}
 800e4fa:	b083      	sub	sp, #12
 800e4fc:	af00      	add	r7, sp, #0
 800e4fe:	6078      	str	r0, [r7, #4]
 800e500:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800e502:	683b      	ldr	r3, [r7, #0]
 800e504:	3b02      	subs	r3, #2
 800e506:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800e508:	687b      	ldr	r3, [r7, #4]
 800e50a:	69db      	ldr	r3, [r3, #28]
 800e50c:	3b02      	subs	r3, #2
 800e50e:	683a      	ldr	r2, [r7, #0]
 800e510:	429a      	cmp	r2, r3
 800e512:	d301      	bcc.n	800e518 <clust2sect+0x20>
 800e514:	2300      	movs	r3, #0
 800e516:	e008      	b.n	800e52a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800e518:	687b      	ldr	r3, [r7, #4]
 800e51a:	895b      	ldrh	r3, [r3, #10]
 800e51c:	461a      	mov	r2, r3
 800e51e:	683b      	ldr	r3, [r7, #0]
 800e520:	fb03 f202 	mul.w	r2, r3, r2
 800e524:	687b      	ldr	r3, [r7, #4]
 800e526:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e528:	4413      	add	r3, r2
}
 800e52a:	4618      	mov	r0, r3
 800e52c:	370c      	adds	r7, #12
 800e52e:	46bd      	mov	sp, r7
 800e530:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e534:	4770      	bx	lr

0800e536 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800e536:	b580      	push	{r7, lr}
 800e538:	b086      	sub	sp, #24
 800e53a:	af00      	add	r7, sp, #0
 800e53c:	6078      	str	r0, [r7, #4]
 800e53e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800e540:	687b      	ldr	r3, [r7, #4]
 800e542:	681b      	ldr	r3, [r3, #0]
 800e544:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800e546:	683b      	ldr	r3, [r7, #0]
 800e548:	2b01      	cmp	r3, #1
 800e54a:	d904      	bls.n	800e556 <get_fat+0x20>
 800e54c:	693b      	ldr	r3, [r7, #16]
 800e54e:	69db      	ldr	r3, [r3, #28]
 800e550:	683a      	ldr	r2, [r7, #0]
 800e552:	429a      	cmp	r2, r3
 800e554:	d302      	bcc.n	800e55c <get_fat+0x26>
		val = 1;	/* Internal error */
 800e556:	2301      	movs	r3, #1
 800e558:	617b      	str	r3, [r7, #20]
 800e55a:	e0bb      	b.n	800e6d4 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800e55c:	f04f 33ff 	mov.w	r3, #4294967295
 800e560:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800e562:	693b      	ldr	r3, [r7, #16]
 800e564:	781b      	ldrb	r3, [r3, #0]
 800e566:	2b03      	cmp	r3, #3
 800e568:	f000 8083 	beq.w	800e672 <get_fat+0x13c>
 800e56c:	2b03      	cmp	r3, #3
 800e56e:	f300 80a7 	bgt.w	800e6c0 <get_fat+0x18a>
 800e572:	2b01      	cmp	r3, #1
 800e574:	d002      	beq.n	800e57c <get_fat+0x46>
 800e576:	2b02      	cmp	r3, #2
 800e578:	d056      	beq.n	800e628 <get_fat+0xf2>
 800e57a:	e0a1      	b.n	800e6c0 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800e57c:	683b      	ldr	r3, [r7, #0]
 800e57e:	60fb      	str	r3, [r7, #12]
 800e580:	68fb      	ldr	r3, [r7, #12]
 800e582:	085b      	lsrs	r3, r3, #1
 800e584:	68fa      	ldr	r2, [r7, #12]
 800e586:	4413      	add	r3, r2
 800e588:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800e58a:	693b      	ldr	r3, [r7, #16]
 800e58c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e58e:	693b      	ldr	r3, [r7, #16]
 800e590:	899b      	ldrh	r3, [r3, #12]
 800e592:	4619      	mov	r1, r3
 800e594:	68fb      	ldr	r3, [r7, #12]
 800e596:	fbb3 f3f1 	udiv	r3, r3, r1
 800e59a:	4413      	add	r3, r2
 800e59c:	4619      	mov	r1, r3
 800e59e:	6938      	ldr	r0, [r7, #16]
 800e5a0:	f7ff ff0c 	bl	800e3bc <move_window>
 800e5a4:	4603      	mov	r3, r0
 800e5a6:	2b00      	cmp	r3, #0
 800e5a8:	f040 808d 	bne.w	800e6c6 <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 800e5ac:	68fb      	ldr	r3, [r7, #12]
 800e5ae:	1c5a      	adds	r2, r3, #1
 800e5b0:	60fa      	str	r2, [r7, #12]
 800e5b2:	693a      	ldr	r2, [r7, #16]
 800e5b4:	8992      	ldrh	r2, [r2, #12]
 800e5b6:	fbb3 f1f2 	udiv	r1, r3, r2
 800e5ba:	fb01 f202 	mul.w	r2, r1, r2
 800e5be:	1a9b      	subs	r3, r3, r2
 800e5c0:	693a      	ldr	r2, [r7, #16]
 800e5c2:	4413      	add	r3, r2
 800e5c4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800e5c8:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800e5ca:	693b      	ldr	r3, [r7, #16]
 800e5cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e5ce:	693b      	ldr	r3, [r7, #16]
 800e5d0:	899b      	ldrh	r3, [r3, #12]
 800e5d2:	4619      	mov	r1, r3
 800e5d4:	68fb      	ldr	r3, [r7, #12]
 800e5d6:	fbb3 f3f1 	udiv	r3, r3, r1
 800e5da:	4413      	add	r3, r2
 800e5dc:	4619      	mov	r1, r3
 800e5de:	6938      	ldr	r0, [r7, #16]
 800e5e0:	f7ff feec 	bl	800e3bc <move_window>
 800e5e4:	4603      	mov	r3, r0
 800e5e6:	2b00      	cmp	r3, #0
 800e5e8:	d16f      	bne.n	800e6ca <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 800e5ea:	693b      	ldr	r3, [r7, #16]
 800e5ec:	899b      	ldrh	r3, [r3, #12]
 800e5ee:	461a      	mov	r2, r3
 800e5f0:	68fb      	ldr	r3, [r7, #12]
 800e5f2:	fbb3 f1f2 	udiv	r1, r3, r2
 800e5f6:	fb01 f202 	mul.w	r2, r1, r2
 800e5fa:	1a9b      	subs	r3, r3, r2
 800e5fc:	693a      	ldr	r2, [r7, #16]
 800e5fe:	4413      	add	r3, r2
 800e600:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800e604:	021b      	lsls	r3, r3, #8
 800e606:	461a      	mov	r2, r3
 800e608:	68bb      	ldr	r3, [r7, #8]
 800e60a:	4313      	orrs	r3, r2
 800e60c:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800e60e:	683b      	ldr	r3, [r7, #0]
 800e610:	f003 0301 	and.w	r3, r3, #1
 800e614:	2b00      	cmp	r3, #0
 800e616:	d002      	beq.n	800e61e <get_fat+0xe8>
 800e618:	68bb      	ldr	r3, [r7, #8]
 800e61a:	091b      	lsrs	r3, r3, #4
 800e61c:	e002      	b.n	800e624 <get_fat+0xee>
 800e61e:	68bb      	ldr	r3, [r7, #8]
 800e620:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800e624:	617b      	str	r3, [r7, #20]
			break;
 800e626:	e055      	b.n	800e6d4 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800e628:	693b      	ldr	r3, [r7, #16]
 800e62a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e62c:	693b      	ldr	r3, [r7, #16]
 800e62e:	899b      	ldrh	r3, [r3, #12]
 800e630:	085b      	lsrs	r3, r3, #1
 800e632:	b29b      	uxth	r3, r3
 800e634:	4619      	mov	r1, r3
 800e636:	683b      	ldr	r3, [r7, #0]
 800e638:	fbb3 f3f1 	udiv	r3, r3, r1
 800e63c:	4413      	add	r3, r2
 800e63e:	4619      	mov	r1, r3
 800e640:	6938      	ldr	r0, [r7, #16]
 800e642:	f7ff febb 	bl	800e3bc <move_window>
 800e646:	4603      	mov	r3, r0
 800e648:	2b00      	cmp	r3, #0
 800e64a:	d140      	bne.n	800e6ce <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800e64c:	693b      	ldr	r3, [r7, #16]
 800e64e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800e652:	683b      	ldr	r3, [r7, #0]
 800e654:	005b      	lsls	r3, r3, #1
 800e656:	693a      	ldr	r2, [r7, #16]
 800e658:	8992      	ldrh	r2, [r2, #12]
 800e65a:	fbb3 f0f2 	udiv	r0, r3, r2
 800e65e:	fb00 f202 	mul.w	r2, r0, r2
 800e662:	1a9b      	subs	r3, r3, r2
 800e664:	440b      	add	r3, r1
 800e666:	4618      	mov	r0, r3
 800e668:	f7ff fbf8 	bl	800de5c <ld_word>
 800e66c:	4603      	mov	r3, r0
 800e66e:	617b      	str	r3, [r7, #20]
			break;
 800e670:	e030      	b.n	800e6d4 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800e672:	693b      	ldr	r3, [r7, #16]
 800e674:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e676:	693b      	ldr	r3, [r7, #16]
 800e678:	899b      	ldrh	r3, [r3, #12]
 800e67a:	089b      	lsrs	r3, r3, #2
 800e67c:	b29b      	uxth	r3, r3
 800e67e:	4619      	mov	r1, r3
 800e680:	683b      	ldr	r3, [r7, #0]
 800e682:	fbb3 f3f1 	udiv	r3, r3, r1
 800e686:	4413      	add	r3, r2
 800e688:	4619      	mov	r1, r3
 800e68a:	6938      	ldr	r0, [r7, #16]
 800e68c:	f7ff fe96 	bl	800e3bc <move_window>
 800e690:	4603      	mov	r3, r0
 800e692:	2b00      	cmp	r3, #0
 800e694:	d11d      	bne.n	800e6d2 <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800e696:	693b      	ldr	r3, [r7, #16]
 800e698:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800e69c:	683b      	ldr	r3, [r7, #0]
 800e69e:	009b      	lsls	r3, r3, #2
 800e6a0:	693a      	ldr	r2, [r7, #16]
 800e6a2:	8992      	ldrh	r2, [r2, #12]
 800e6a4:	fbb3 f0f2 	udiv	r0, r3, r2
 800e6a8:	fb00 f202 	mul.w	r2, r0, r2
 800e6ac:	1a9b      	subs	r3, r3, r2
 800e6ae:	440b      	add	r3, r1
 800e6b0:	4618      	mov	r0, r3
 800e6b2:	f7ff fbeb 	bl	800de8c <ld_dword>
 800e6b6:	4603      	mov	r3, r0
 800e6b8:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800e6bc:	617b      	str	r3, [r7, #20]
			break;
 800e6be:	e009      	b.n	800e6d4 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800e6c0:	2301      	movs	r3, #1
 800e6c2:	617b      	str	r3, [r7, #20]
 800e6c4:	e006      	b.n	800e6d4 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800e6c6:	bf00      	nop
 800e6c8:	e004      	b.n	800e6d4 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800e6ca:	bf00      	nop
 800e6cc:	e002      	b.n	800e6d4 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800e6ce:	bf00      	nop
 800e6d0:	e000      	b.n	800e6d4 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800e6d2:	bf00      	nop
		}
	}

	return val;
 800e6d4:	697b      	ldr	r3, [r7, #20]
}
 800e6d6:	4618      	mov	r0, r3
 800e6d8:	3718      	adds	r7, #24
 800e6da:	46bd      	mov	sp, r7
 800e6dc:	bd80      	pop	{r7, pc}

0800e6de <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800e6de:	b590      	push	{r4, r7, lr}
 800e6e0:	b089      	sub	sp, #36	; 0x24
 800e6e2:	af00      	add	r7, sp, #0
 800e6e4:	60f8      	str	r0, [r7, #12]
 800e6e6:	60b9      	str	r1, [r7, #8]
 800e6e8:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800e6ea:	2302      	movs	r3, #2
 800e6ec:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800e6ee:	68bb      	ldr	r3, [r7, #8]
 800e6f0:	2b01      	cmp	r3, #1
 800e6f2:	f240 8102 	bls.w	800e8fa <put_fat+0x21c>
 800e6f6:	68fb      	ldr	r3, [r7, #12]
 800e6f8:	69db      	ldr	r3, [r3, #28]
 800e6fa:	68ba      	ldr	r2, [r7, #8]
 800e6fc:	429a      	cmp	r2, r3
 800e6fe:	f080 80fc 	bcs.w	800e8fa <put_fat+0x21c>
		switch (fs->fs_type) {
 800e702:	68fb      	ldr	r3, [r7, #12]
 800e704:	781b      	ldrb	r3, [r3, #0]
 800e706:	2b03      	cmp	r3, #3
 800e708:	f000 80b6 	beq.w	800e878 <put_fat+0x19a>
 800e70c:	2b03      	cmp	r3, #3
 800e70e:	f300 80fd 	bgt.w	800e90c <put_fat+0x22e>
 800e712:	2b01      	cmp	r3, #1
 800e714:	d003      	beq.n	800e71e <put_fat+0x40>
 800e716:	2b02      	cmp	r3, #2
 800e718:	f000 8083 	beq.w	800e822 <put_fat+0x144>
 800e71c:	e0f6      	b.n	800e90c <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800e71e:	68bb      	ldr	r3, [r7, #8]
 800e720:	61bb      	str	r3, [r7, #24]
 800e722:	69bb      	ldr	r3, [r7, #24]
 800e724:	085b      	lsrs	r3, r3, #1
 800e726:	69ba      	ldr	r2, [r7, #24]
 800e728:	4413      	add	r3, r2
 800e72a:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800e72c:	68fb      	ldr	r3, [r7, #12]
 800e72e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e730:	68fb      	ldr	r3, [r7, #12]
 800e732:	899b      	ldrh	r3, [r3, #12]
 800e734:	4619      	mov	r1, r3
 800e736:	69bb      	ldr	r3, [r7, #24]
 800e738:	fbb3 f3f1 	udiv	r3, r3, r1
 800e73c:	4413      	add	r3, r2
 800e73e:	4619      	mov	r1, r3
 800e740:	68f8      	ldr	r0, [r7, #12]
 800e742:	f7ff fe3b 	bl	800e3bc <move_window>
 800e746:	4603      	mov	r3, r0
 800e748:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800e74a:	7ffb      	ldrb	r3, [r7, #31]
 800e74c:	2b00      	cmp	r3, #0
 800e74e:	f040 80d6 	bne.w	800e8fe <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 800e752:	68fb      	ldr	r3, [r7, #12]
 800e754:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800e758:	69bb      	ldr	r3, [r7, #24]
 800e75a:	1c5a      	adds	r2, r3, #1
 800e75c:	61ba      	str	r2, [r7, #24]
 800e75e:	68fa      	ldr	r2, [r7, #12]
 800e760:	8992      	ldrh	r2, [r2, #12]
 800e762:	fbb3 f0f2 	udiv	r0, r3, r2
 800e766:	fb00 f202 	mul.w	r2, r0, r2
 800e76a:	1a9b      	subs	r3, r3, r2
 800e76c:	440b      	add	r3, r1
 800e76e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800e770:	68bb      	ldr	r3, [r7, #8]
 800e772:	f003 0301 	and.w	r3, r3, #1
 800e776:	2b00      	cmp	r3, #0
 800e778:	d00d      	beq.n	800e796 <put_fat+0xb8>
 800e77a:	697b      	ldr	r3, [r7, #20]
 800e77c:	781b      	ldrb	r3, [r3, #0]
 800e77e:	b25b      	sxtb	r3, r3
 800e780:	f003 030f 	and.w	r3, r3, #15
 800e784:	b25a      	sxtb	r2, r3
 800e786:	687b      	ldr	r3, [r7, #4]
 800e788:	b2db      	uxtb	r3, r3
 800e78a:	011b      	lsls	r3, r3, #4
 800e78c:	b25b      	sxtb	r3, r3
 800e78e:	4313      	orrs	r3, r2
 800e790:	b25b      	sxtb	r3, r3
 800e792:	b2db      	uxtb	r3, r3
 800e794:	e001      	b.n	800e79a <put_fat+0xbc>
 800e796:	687b      	ldr	r3, [r7, #4]
 800e798:	b2db      	uxtb	r3, r3
 800e79a:	697a      	ldr	r2, [r7, #20]
 800e79c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800e79e:	68fb      	ldr	r3, [r7, #12]
 800e7a0:	2201      	movs	r2, #1
 800e7a2:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800e7a4:	68fb      	ldr	r3, [r7, #12]
 800e7a6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e7a8:	68fb      	ldr	r3, [r7, #12]
 800e7aa:	899b      	ldrh	r3, [r3, #12]
 800e7ac:	4619      	mov	r1, r3
 800e7ae:	69bb      	ldr	r3, [r7, #24]
 800e7b0:	fbb3 f3f1 	udiv	r3, r3, r1
 800e7b4:	4413      	add	r3, r2
 800e7b6:	4619      	mov	r1, r3
 800e7b8:	68f8      	ldr	r0, [r7, #12]
 800e7ba:	f7ff fdff 	bl	800e3bc <move_window>
 800e7be:	4603      	mov	r3, r0
 800e7c0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800e7c2:	7ffb      	ldrb	r3, [r7, #31]
 800e7c4:	2b00      	cmp	r3, #0
 800e7c6:	f040 809c 	bne.w	800e902 <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 800e7ca:	68fb      	ldr	r3, [r7, #12]
 800e7cc:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800e7d0:	68fb      	ldr	r3, [r7, #12]
 800e7d2:	899b      	ldrh	r3, [r3, #12]
 800e7d4:	461a      	mov	r2, r3
 800e7d6:	69bb      	ldr	r3, [r7, #24]
 800e7d8:	fbb3 f0f2 	udiv	r0, r3, r2
 800e7dc:	fb00 f202 	mul.w	r2, r0, r2
 800e7e0:	1a9b      	subs	r3, r3, r2
 800e7e2:	440b      	add	r3, r1
 800e7e4:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800e7e6:	68bb      	ldr	r3, [r7, #8]
 800e7e8:	f003 0301 	and.w	r3, r3, #1
 800e7ec:	2b00      	cmp	r3, #0
 800e7ee:	d003      	beq.n	800e7f8 <put_fat+0x11a>
 800e7f0:	687b      	ldr	r3, [r7, #4]
 800e7f2:	091b      	lsrs	r3, r3, #4
 800e7f4:	b2db      	uxtb	r3, r3
 800e7f6:	e00e      	b.n	800e816 <put_fat+0x138>
 800e7f8:	697b      	ldr	r3, [r7, #20]
 800e7fa:	781b      	ldrb	r3, [r3, #0]
 800e7fc:	b25b      	sxtb	r3, r3
 800e7fe:	f023 030f 	bic.w	r3, r3, #15
 800e802:	b25a      	sxtb	r2, r3
 800e804:	687b      	ldr	r3, [r7, #4]
 800e806:	0a1b      	lsrs	r3, r3, #8
 800e808:	b25b      	sxtb	r3, r3
 800e80a:	f003 030f 	and.w	r3, r3, #15
 800e80e:	b25b      	sxtb	r3, r3
 800e810:	4313      	orrs	r3, r2
 800e812:	b25b      	sxtb	r3, r3
 800e814:	b2db      	uxtb	r3, r3
 800e816:	697a      	ldr	r2, [r7, #20]
 800e818:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800e81a:	68fb      	ldr	r3, [r7, #12]
 800e81c:	2201      	movs	r2, #1
 800e81e:	70da      	strb	r2, [r3, #3]
			break;
 800e820:	e074      	b.n	800e90c <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800e822:	68fb      	ldr	r3, [r7, #12]
 800e824:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e826:	68fb      	ldr	r3, [r7, #12]
 800e828:	899b      	ldrh	r3, [r3, #12]
 800e82a:	085b      	lsrs	r3, r3, #1
 800e82c:	b29b      	uxth	r3, r3
 800e82e:	4619      	mov	r1, r3
 800e830:	68bb      	ldr	r3, [r7, #8]
 800e832:	fbb3 f3f1 	udiv	r3, r3, r1
 800e836:	4413      	add	r3, r2
 800e838:	4619      	mov	r1, r3
 800e83a:	68f8      	ldr	r0, [r7, #12]
 800e83c:	f7ff fdbe 	bl	800e3bc <move_window>
 800e840:	4603      	mov	r3, r0
 800e842:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800e844:	7ffb      	ldrb	r3, [r7, #31]
 800e846:	2b00      	cmp	r3, #0
 800e848:	d15d      	bne.n	800e906 <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800e84a:	68fb      	ldr	r3, [r7, #12]
 800e84c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800e850:	68bb      	ldr	r3, [r7, #8]
 800e852:	005b      	lsls	r3, r3, #1
 800e854:	68fa      	ldr	r2, [r7, #12]
 800e856:	8992      	ldrh	r2, [r2, #12]
 800e858:	fbb3 f0f2 	udiv	r0, r3, r2
 800e85c:	fb00 f202 	mul.w	r2, r0, r2
 800e860:	1a9b      	subs	r3, r3, r2
 800e862:	440b      	add	r3, r1
 800e864:	687a      	ldr	r2, [r7, #4]
 800e866:	b292      	uxth	r2, r2
 800e868:	4611      	mov	r1, r2
 800e86a:	4618      	mov	r0, r3
 800e86c:	f7ff fb31 	bl	800ded2 <st_word>
			fs->wflag = 1;
 800e870:	68fb      	ldr	r3, [r7, #12]
 800e872:	2201      	movs	r2, #1
 800e874:	70da      	strb	r2, [r3, #3]
			break;
 800e876:	e049      	b.n	800e90c <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800e878:	68fb      	ldr	r3, [r7, #12]
 800e87a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e87c:	68fb      	ldr	r3, [r7, #12]
 800e87e:	899b      	ldrh	r3, [r3, #12]
 800e880:	089b      	lsrs	r3, r3, #2
 800e882:	b29b      	uxth	r3, r3
 800e884:	4619      	mov	r1, r3
 800e886:	68bb      	ldr	r3, [r7, #8]
 800e888:	fbb3 f3f1 	udiv	r3, r3, r1
 800e88c:	4413      	add	r3, r2
 800e88e:	4619      	mov	r1, r3
 800e890:	68f8      	ldr	r0, [r7, #12]
 800e892:	f7ff fd93 	bl	800e3bc <move_window>
 800e896:	4603      	mov	r3, r0
 800e898:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800e89a:	7ffb      	ldrb	r3, [r7, #31]
 800e89c:	2b00      	cmp	r3, #0
 800e89e:	d134      	bne.n	800e90a <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800e8a0:	687b      	ldr	r3, [r7, #4]
 800e8a2:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800e8a6:	68fb      	ldr	r3, [r7, #12]
 800e8a8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800e8ac:	68bb      	ldr	r3, [r7, #8]
 800e8ae:	009b      	lsls	r3, r3, #2
 800e8b0:	68fa      	ldr	r2, [r7, #12]
 800e8b2:	8992      	ldrh	r2, [r2, #12]
 800e8b4:	fbb3 f0f2 	udiv	r0, r3, r2
 800e8b8:	fb00 f202 	mul.w	r2, r0, r2
 800e8bc:	1a9b      	subs	r3, r3, r2
 800e8be:	440b      	add	r3, r1
 800e8c0:	4618      	mov	r0, r3
 800e8c2:	f7ff fae3 	bl	800de8c <ld_dword>
 800e8c6:	4603      	mov	r3, r0
 800e8c8:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800e8cc:	4323      	orrs	r3, r4
 800e8ce:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800e8d0:	68fb      	ldr	r3, [r7, #12]
 800e8d2:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800e8d6:	68bb      	ldr	r3, [r7, #8]
 800e8d8:	009b      	lsls	r3, r3, #2
 800e8da:	68fa      	ldr	r2, [r7, #12]
 800e8dc:	8992      	ldrh	r2, [r2, #12]
 800e8de:	fbb3 f0f2 	udiv	r0, r3, r2
 800e8e2:	fb00 f202 	mul.w	r2, r0, r2
 800e8e6:	1a9b      	subs	r3, r3, r2
 800e8e8:	440b      	add	r3, r1
 800e8ea:	6879      	ldr	r1, [r7, #4]
 800e8ec:	4618      	mov	r0, r3
 800e8ee:	f7ff fb0b 	bl	800df08 <st_dword>
			fs->wflag = 1;
 800e8f2:	68fb      	ldr	r3, [r7, #12]
 800e8f4:	2201      	movs	r2, #1
 800e8f6:	70da      	strb	r2, [r3, #3]
			break;
 800e8f8:	e008      	b.n	800e90c <put_fat+0x22e>
		}
	}
 800e8fa:	bf00      	nop
 800e8fc:	e006      	b.n	800e90c <put_fat+0x22e>
			if (res != FR_OK) break;
 800e8fe:	bf00      	nop
 800e900:	e004      	b.n	800e90c <put_fat+0x22e>
			if (res != FR_OK) break;
 800e902:	bf00      	nop
 800e904:	e002      	b.n	800e90c <put_fat+0x22e>
			if (res != FR_OK) break;
 800e906:	bf00      	nop
 800e908:	e000      	b.n	800e90c <put_fat+0x22e>
			if (res != FR_OK) break;
 800e90a:	bf00      	nop
	return res;
 800e90c:	7ffb      	ldrb	r3, [r7, #31]
}
 800e90e:	4618      	mov	r0, r3
 800e910:	3724      	adds	r7, #36	; 0x24
 800e912:	46bd      	mov	sp, r7
 800e914:	bd90      	pop	{r4, r7, pc}

0800e916 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800e916:	b580      	push	{r7, lr}
 800e918:	b088      	sub	sp, #32
 800e91a:	af00      	add	r7, sp, #0
 800e91c:	60f8      	str	r0, [r7, #12]
 800e91e:	60b9      	str	r1, [r7, #8]
 800e920:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800e922:	2300      	movs	r3, #0
 800e924:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800e926:	68fb      	ldr	r3, [r7, #12]
 800e928:	681b      	ldr	r3, [r3, #0]
 800e92a:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800e92c:	68bb      	ldr	r3, [r7, #8]
 800e92e:	2b01      	cmp	r3, #1
 800e930:	d904      	bls.n	800e93c <remove_chain+0x26>
 800e932:	69bb      	ldr	r3, [r7, #24]
 800e934:	69db      	ldr	r3, [r3, #28]
 800e936:	68ba      	ldr	r2, [r7, #8]
 800e938:	429a      	cmp	r2, r3
 800e93a:	d301      	bcc.n	800e940 <remove_chain+0x2a>
 800e93c:	2302      	movs	r3, #2
 800e93e:	e04b      	b.n	800e9d8 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800e940:	687b      	ldr	r3, [r7, #4]
 800e942:	2b00      	cmp	r3, #0
 800e944:	d00c      	beq.n	800e960 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800e946:	f04f 32ff 	mov.w	r2, #4294967295
 800e94a:	6879      	ldr	r1, [r7, #4]
 800e94c:	69b8      	ldr	r0, [r7, #24]
 800e94e:	f7ff fec6 	bl	800e6de <put_fat>
 800e952:	4603      	mov	r3, r0
 800e954:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800e956:	7ffb      	ldrb	r3, [r7, #31]
 800e958:	2b00      	cmp	r3, #0
 800e95a:	d001      	beq.n	800e960 <remove_chain+0x4a>
 800e95c:	7ffb      	ldrb	r3, [r7, #31]
 800e95e:	e03b      	b.n	800e9d8 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800e960:	68b9      	ldr	r1, [r7, #8]
 800e962:	68f8      	ldr	r0, [r7, #12]
 800e964:	f7ff fde7 	bl	800e536 <get_fat>
 800e968:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800e96a:	697b      	ldr	r3, [r7, #20]
 800e96c:	2b00      	cmp	r3, #0
 800e96e:	d031      	beq.n	800e9d4 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800e970:	697b      	ldr	r3, [r7, #20]
 800e972:	2b01      	cmp	r3, #1
 800e974:	d101      	bne.n	800e97a <remove_chain+0x64>
 800e976:	2302      	movs	r3, #2
 800e978:	e02e      	b.n	800e9d8 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800e97a:	697b      	ldr	r3, [r7, #20]
 800e97c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e980:	d101      	bne.n	800e986 <remove_chain+0x70>
 800e982:	2301      	movs	r3, #1
 800e984:	e028      	b.n	800e9d8 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800e986:	2200      	movs	r2, #0
 800e988:	68b9      	ldr	r1, [r7, #8]
 800e98a:	69b8      	ldr	r0, [r7, #24]
 800e98c:	f7ff fea7 	bl	800e6de <put_fat>
 800e990:	4603      	mov	r3, r0
 800e992:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800e994:	7ffb      	ldrb	r3, [r7, #31]
 800e996:	2b00      	cmp	r3, #0
 800e998:	d001      	beq.n	800e99e <remove_chain+0x88>
 800e99a:	7ffb      	ldrb	r3, [r7, #31]
 800e99c:	e01c      	b.n	800e9d8 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800e99e:	69bb      	ldr	r3, [r7, #24]
 800e9a0:	699a      	ldr	r2, [r3, #24]
 800e9a2:	69bb      	ldr	r3, [r7, #24]
 800e9a4:	69db      	ldr	r3, [r3, #28]
 800e9a6:	3b02      	subs	r3, #2
 800e9a8:	429a      	cmp	r2, r3
 800e9aa:	d20b      	bcs.n	800e9c4 <remove_chain+0xae>
			fs->free_clst++;
 800e9ac:	69bb      	ldr	r3, [r7, #24]
 800e9ae:	699b      	ldr	r3, [r3, #24]
 800e9b0:	1c5a      	adds	r2, r3, #1
 800e9b2:	69bb      	ldr	r3, [r7, #24]
 800e9b4:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 800e9b6:	69bb      	ldr	r3, [r7, #24]
 800e9b8:	791b      	ldrb	r3, [r3, #4]
 800e9ba:	f043 0301 	orr.w	r3, r3, #1
 800e9be:	b2da      	uxtb	r2, r3
 800e9c0:	69bb      	ldr	r3, [r7, #24]
 800e9c2:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800e9c4:	697b      	ldr	r3, [r7, #20]
 800e9c6:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800e9c8:	69bb      	ldr	r3, [r7, #24]
 800e9ca:	69db      	ldr	r3, [r3, #28]
 800e9cc:	68ba      	ldr	r2, [r7, #8]
 800e9ce:	429a      	cmp	r2, r3
 800e9d0:	d3c6      	bcc.n	800e960 <remove_chain+0x4a>
 800e9d2:	e000      	b.n	800e9d6 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800e9d4:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800e9d6:	2300      	movs	r3, #0
}
 800e9d8:	4618      	mov	r0, r3
 800e9da:	3720      	adds	r7, #32
 800e9dc:	46bd      	mov	sp, r7
 800e9de:	bd80      	pop	{r7, pc}

0800e9e0 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800e9e0:	b580      	push	{r7, lr}
 800e9e2:	b088      	sub	sp, #32
 800e9e4:	af00      	add	r7, sp, #0
 800e9e6:	6078      	str	r0, [r7, #4]
 800e9e8:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800e9ea:	687b      	ldr	r3, [r7, #4]
 800e9ec:	681b      	ldr	r3, [r3, #0]
 800e9ee:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800e9f0:	683b      	ldr	r3, [r7, #0]
 800e9f2:	2b00      	cmp	r3, #0
 800e9f4:	d10d      	bne.n	800ea12 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800e9f6:	693b      	ldr	r3, [r7, #16]
 800e9f8:	695b      	ldr	r3, [r3, #20]
 800e9fa:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800e9fc:	69bb      	ldr	r3, [r7, #24]
 800e9fe:	2b00      	cmp	r3, #0
 800ea00:	d004      	beq.n	800ea0c <create_chain+0x2c>
 800ea02:	693b      	ldr	r3, [r7, #16]
 800ea04:	69db      	ldr	r3, [r3, #28]
 800ea06:	69ba      	ldr	r2, [r7, #24]
 800ea08:	429a      	cmp	r2, r3
 800ea0a:	d31b      	bcc.n	800ea44 <create_chain+0x64>
 800ea0c:	2301      	movs	r3, #1
 800ea0e:	61bb      	str	r3, [r7, #24]
 800ea10:	e018      	b.n	800ea44 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800ea12:	6839      	ldr	r1, [r7, #0]
 800ea14:	6878      	ldr	r0, [r7, #4]
 800ea16:	f7ff fd8e 	bl	800e536 <get_fat>
 800ea1a:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800ea1c:	68fb      	ldr	r3, [r7, #12]
 800ea1e:	2b01      	cmp	r3, #1
 800ea20:	d801      	bhi.n	800ea26 <create_chain+0x46>
 800ea22:	2301      	movs	r3, #1
 800ea24:	e070      	b.n	800eb08 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800ea26:	68fb      	ldr	r3, [r7, #12]
 800ea28:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ea2c:	d101      	bne.n	800ea32 <create_chain+0x52>
 800ea2e:	68fb      	ldr	r3, [r7, #12]
 800ea30:	e06a      	b.n	800eb08 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800ea32:	693b      	ldr	r3, [r7, #16]
 800ea34:	69db      	ldr	r3, [r3, #28]
 800ea36:	68fa      	ldr	r2, [r7, #12]
 800ea38:	429a      	cmp	r2, r3
 800ea3a:	d201      	bcs.n	800ea40 <create_chain+0x60>
 800ea3c:	68fb      	ldr	r3, [r7, #12]
 800ea3e:	e063      	b.n	800eb08 <create_chain+0x128>
		scl = clst;
 800ea40:	683b      	ldr	r3, [r7, #0]
 800ea42:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800ea44:	69bb      	ldr	r3, [r7, #24]
 800ea46:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800ea48:	69fb      	ldr	r3, [r7, #28]
 800ea4a:	3301      	adds	r3, #1
 800ea4c:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800ea4e:	693b      	ldr	r3, [r7, #16]
 800ea50:	69db      	ldr	r3, [r3, #28]
 800ea52:	69fa      	ldr	r2, [r7, #28]
 800ea54:	429a      	cmp	r2, r3
 800ea56:	d307      	bcc.n	800ea68 <create_chain+0x88>
				ncl = 2;
 800ea58:	2302      	movs	r3, #2
 800ea5a:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800ea5c:	69fa      	ldr	r2, [r7, #28]
 800ea5e:	69bb      	ldr	r3, [r7, #24]
 800ea60:	429a      	cmp	r2, r3
 800ea62:	d901      	bls.n	800ea68 <create_chain+0x88>
 800ea64:	2300      	movs	r3, #0
 800ea66:	e04f      	b.n	800eb08 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800ea68:	69f9      	ldr	r1, [r7, #28]
 800ea6a:	6878      	ldr	r0, [r7, #4]
 800ea6c:	f7ff fd63 	bl	800e536 <get_fat>
 800ea70:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800ea72:	68fb      	ldr	r3, [r7, #12]
 800ea74:	2b00      	cmp	r3, #0
 800ea76:	d00e      	beq.n	800ea96 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800ea78:	68fb      	ldr	r3, [r7, #12]
 800ea7a:	2b01      	cmp	r3, #1
 800ea7c:	d003      	beq.n	800ea86 <create_chain+0xa6>
 800ea7e:	68fb      	ldr	r3, [r7, #12]
 800ea80:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ea84:	d101      	bne.n	800ea8a <create_chain+0xaa>
 800ea86:	68fb      	ldr	r3, [r7, #12]
 800ea88:	e03e      	b.n	800eb08 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800ea8a:	69fa      	ldr	r2, [r7, #28]
 800ea8c:	69bb      	ldr	r3, [r7, #24]
 800ea8e:	429a      	cmp	r2, r3
 800ea90:	d1da      	bne.n	800ea48 <create_chain+0x68>
 800ea92:	2300      	movs	r3, #0
 800ea94:	e038      	b.n	800eb08 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800ea96:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800ea98:	f04f 32ff 	mov.w	r2, #4294967295
 800ea9c:	69f9      	ldr	r1, [r7, #28]
 800ea9e:	6938      	ldr	r0, [r7, #16]
 800eaa0:	f7ff fe1d 	bl	800e6de <put_fat>
 800eaa4:	4603      	mov	r3, r0
 800eaa6:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800eaa8:	7dfb      	ldrb	r3, [r7, #23]
 800eaaa:	2b00      	cmp	r3, #0
 800eaac:	d109      	bne.n	800eac2 <create_chain+0xe2>
 800eaae:	683b      	ldr	r3, [r7, #0]
 800eab0:	2b00      	cmp	r3, #0
 800eab2:	d006      	beq.n	800eac2 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800eab4:	69fa      	ldr	r2, [r7, #28]
 800eab6:	6839      	ldr	r1, [r7, #0]
 800eab8:	6938      	ldr	r0, [r7, #16]
 800eaba:	f7ff fe10 	bl	800e6de <put_fat>
 800eabe:	4603      	mov	r3, r0
 800eac0:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800eac2:	7dfb      	ldrb	r3, [r7, #23]
 800eac4:	2b00      	cmp	r3, #0
 800eac6:	d116      	bne.n	800eaf6 <create_chain+0x116>
		fs->last_clst = ncl;
 800eac8:	693b      	ldr	r3, [r7, #16]
 800eaca:	69fa      	ldr	r2, [r7, #28]
 800eacc:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800eace:	693b      	ldr	r3, [r7, #16]
 800ead0:	699a      	ldr	r2, [r3, #24]
 800ead2:	693b      	ldr	r3, [r7, #16]
 800ead4:	69db      	ldr	r3, [r3, #28]
 800ead6:	3b02      	subs	r3, #2
 800ead8:	429a      	cmp	r2, r3
 800eada:	d804      	bhi.n	800eae6 <create_chain+0x106>
 800eadc:	693b      	ldr	r3, [r7, #16]
 800eade:	699b      	ldr	r3, [r3, #24]
 800eae0:	1e5a      	subs	r2, r3, #1
 800eae2:	693b      	ldr	r3, [r7, #16]
 800eae4:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 800eae6:	693b      	ldr	r3, [r7, #16]
 800eae8:	791b      	ldrb	r3, [r3, #4]
 800eaea:	f043 0301 	orr.w	r3, r3, #1
 800eaee:	b2da      	uxtb	r2, r3
 800eaf0:	693b      	ldr	r3, [r7, #16]
 800eaf2:	711a      	strb	r2, [r3, #4]
 800eaf4:	e007      	b.n	800eb06 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800eaf6:	7dfb      	ldrb	r3, [r7, #23]
 800eaf8:	2b01      	cmp	r3, #1
 800eafa:	d102      	bne.n	800eb02 <create_chain+0x122>
 800eafc:	f04f 33ff 	mov.w	r3, #4294967295
 800eb00:	e000      	b.n	800eb04 <create_chain+0x124>
 800eb02:	2301      	movs	r3, #1
 800eb04:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800eb06:	69fb      	ldr	r3, [r7, #28]
}
 800eb08:	4618      	mov	r0, r3
 800eb0a:	3720      	adds	r7, #32
 800eb0c:	46bd      	mov	sp, r7
 800eb0e:	bd80      	pop	{r7, pc}

0800eb10 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800eb10:	b480      	push	{r7}
 800eb12:	b087      	sub	sp, #28
 800eb14:	af00      	add	r7, sp, #0
 800eb16:	6078      	str	r0, [r7, #4]
 800eb18:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800eb1a:	687b      	ldr	r3, [r7, #4]
 800eb1c:	681b      	ldr	r3, [r3, #0]
 800eb1e:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800eb20:	687b      	ldr	r3, [r7, #4]
 800eb22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eb24:	3304      	adds	r3, #4
 800eb26:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800eb28:	68fb      	ldr	r3, [r7, #12]
 800eb2a:	899b      	ldrh	r3, [r3, #12]
 800eb2c:	461a      	mov	r2, r3
 800eb2e:	683b      	ldr	r3, [r7, #0]
 800eb30:	fbb3 f3f2 	udiv	r3, r3, r2
 800eb34:	68fa      	ldr	r2, [r7, #12]
 800eb36:	8952      	ldrh	r2, [r2, #10]
 800eb38:	fbb3 f3f2 	udiv	r3, r3, r2
 800eb3c:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800eb3e:	693b      	ldr	r3, [r7, #16]
 800eb40:	1d1a      	adds	r2, r3, #4
 800eb42:	613a      	str	r2, [r7, #16]
 800eb44:	681b      	ldr	r3, [r3, #0]
 800eb46:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800eb48:	68bb      	ldr	r3, [r7, #8]
 800eb4a:	2b00      	cmp	r3, #0
 800eb4c:	d101      	bne.n	800eb52 <clmt_clust+0x42>
 800eb4e:	2300      	movs	r3, #0
 800eb50:	e010      	b.n	800eb74 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 800eb52:	697a      	ldr	r2, [r7, #20]
 800eb54:	68bb      	ldr	r3, [r7, #8]
 800eb56:	429a      	cmp	r2, r3
 800eb58:	d307      	bcc.n	800eb6a <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 800eb5a:	697a      	ldr	r2, [r7, #20]
 800eb5c:	68bb      	ldr	r3, [r7, #8]
 800eb5e:	1ad3      	subs	r3, r2, r3
 800eb60:	617b      	str	r3, [r7, #20]
 800eb62:	693b      	ldr	r3, [r7, #16]
 800eb64:	3304      	adds	r3, #4
 800eb66:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800eb68:	e7e9      	b.n	800eb3e <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 800eb6a:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800eb6c:	693b      	ldr	r3, [r7, #16]
 800eb6e:	681a      	ldr	r2, [r3, #0]
 800eb70:	697b      	ldr	r3, [r7, #20]
 800eb72:	4413      	add	r3, r2
}
 800eb74:	4618      	mov	r0, r3
 800eb76:	371c      	adds	r7, #28
 800eb78:	46bd      	mov	sp, r7
 800eb7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb7e:	4770      	bx	lr

0800eb80 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800eb80:	b580      	push	{r7, lr}
 800eb82:	b086      	sub	sp, #24
 800eb84:	af00      	add	r7, sp, #0
 800eb86:	6078      	str	r0, [r7, #4]
 800eb88:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800eb8a:	687b      	ldr	r3, [r7, #4]
 800eb8c:	681b      	ldr	r3, [r3, #0]
 800eb8e:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800eb90:	683b      	ldr	r3, [r7, #0]
 800eb92:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800eb96:	d204      	bcs.n	800eba2 <dir_sdi+0x22>
 800eb98:	683b      	ldr	r3, [r7, #0]
 800eb9a:	f003 031f 	and.w	r3, r3, #31
 800eb9e:	2b00      	cmp	r3, #0
 800eba0:	d001      	beq.n	800eba6 <dir_sdi+0x26>
		return FR_INT_ERR;
 800eba2:	2302      	movs	r3, #2
 800eba4:	e071      	b.n	800ec8a <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800eba6:	687b      	ldr	r3, [r7, #4]
 800eba8:	683a      	ldr	r2, [r7, #0]
 800ebaa:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800ebac:	687b      	ldr	r3, [r7, #4]
 800ebae:	689b      	ldr	r3, [r3, #8]
 800ebb0:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800ebb2:	697b      	ldr	r3, [r7, #20]
 800ebb4:	2b00      	cmp	r3, #0
 800ebb6:	d106      	bne.n	800ebc6 <dir_sdi+0x46>
 800ebb8:	693b      	ldr	r3, [r7, #16]
 800ebba:	781b      	ldrb	r3, [r3, #0]
 800ebbc:	2b02      	cmp	r3, #2
 800ebbe:	d902      	bls.n	800ebc6 <dir_sdi+0x46>
		clst = fs->dirbase;
 800ebc0:	693b      	ldr	r3, [r7, #16]
 800ebc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ebc4:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800ebc6:	697b      	ldr	r3, [r7, #20]
 800ebc8:	2b00      	cmp	r3, #0
 800ebca:	d10c      	bne.n	800ebe6 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800ebcc:	683b      	ldr	r3, [r7, #0]
 800ebce:	095b      	lsrs	r3, r3, #5
 800ebd0:	693a      	ldr	r2, [r7, #16]
 800ebd2:	8912      	ldrh	r2, [r2, #8]
 800ebd4:	4293      	cmp	r3, r2
 800ebd6:	d301      	bcc.n	800ebdc <dir_sdi+0x5c>
 800ebd8:	2302      	movs	r3, #2
 800ebda:	e056      	b.n	800ec8a <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 800ebdc:	693b      	ldr	r3, [r7, #16]
 800ebde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ebe0:	687b      	ldr	r3, [r7, #4]
 800ebe2:	61da      	str	r2, [r3, #28]
 800ebe4:	e02d      	b.n	800ec42 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800ebe6:	693b      	ldr	r3, [r7, #16]
 800ebe8:	895b      	ldrh	r3, [r3, #10]
 800ebea:	461a      	mov	r2, r3
 800ebec:	693b      	ldr	r3, [r7, #16]
 800ebee:	899b      	ldrh	r3, [r3, #12]
 800ebf0:	fb02 f303 	mul.w	r3, r2, r3
 800ebf4:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800ebf6:	e019      	b.n	800ec2c <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800ebf8:	687b      	ldr	r3, [r7, #4]
 800ebfa:	6979      	ldr	r1, [r7, #20]
 800ebfc:	4618      	mov	r0, r3
 800ebfe:	f7ff fc9a 	bl	800e536 <get_fat>
 800ec02:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800ec04:	697b      	ldr	r3, [r7, #20]
 800ec06:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ec0a:	d101      	bne.n	800ec10 <dir_sdi+0x90>
 800ec0c:	2301      	movs	r3, #1
 800ec0e:	e03c      	b.n	800ec8a <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800ec10:	697b      	ldr	r3, [r7, #20]
 800ec12:	2b01      	cmp	r3, #1
 800ec14:	d904      	bls.n	800ec20 <dir_sdi+0xa0>
 800ec16:	693b      	ldr	r3, [r7, #16]
 800ec18:	69db      	ldr	r3, [r3, #28]
 800ec1a:	697a      	ldr	r2, [r7, #20]
 800ec1c:	429a      	cmp	r2, r3
 800ec1e:	d301      	bcc.n	800ec24 <dir_sdi+0xa4>
 800ec20:	2302      	movs	r3, #2
 800ec22:	e032      	b.n	800ec8a <dir_sdi+0x10a>
			ofs -= csz;
 800ec24:	683a      	ldr	r2, [r7, #0]
 800ec26:	68fb      	ldr	r3, [r7, #12]
 800ec28:	1ad3      	subs	r3, r2, r3
 800ec2a:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800ec2c:	683a      	ldr	r2, [r7, #0]
 800ec2e:	68fb      	ldr	r3, [r7, #12]
 800ec30:	429a      	cmp	r2, r3
 800ec32:	d2e1      	bcs.n	800ebf8 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 800ec34:	6979      	ldr	r1, [r7, #20]
 800ec36:	6938      	ldr	r0, [r7, #16]
 800ec38:	f7ff fc5e 	bl	800e4f8 <clust2sect>
 800ec3c:	4602      	mov	r2, r0
 800ec3e:	687b      	ldr	r3, [r7, #4]
 800ec40:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800ec42:	687b      	ldr	r3, [r7, #4]
 800ec44:	697a      	ldr	r2, [r7, #20]
 800ec46:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800ec48:	687b      	ldr	r3, [r7, #4]
 800ec4a:	69db      	ldr	r3, [r3, #28]
 800ec4c:	2b00      	cmp	r3, #0
 800ec4e:	d101      	bne.n	800ec54 <dir_sdi+0xd4>
 800ec50:	2302      	movs	r3, #2
 800ec52:	e01a      	b.n	800ec8a <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800ec54:	687b      	ldr	r3, [r7, #4]
 800ec56:	69da      	ldr	r2, [r3, #28]
 800ec58:	693b      	ldr	r3, [r7, #16]
 800ec5a:	899b      	ldrh	r3, [r3, #12]
 800ec5c:	4619      	mov	r1, r3
 800ec5e:	683b      	ldr	r3, [r7, #0]
 800ec60:	fbb3 f3f1 	udiv	r3, r3, r1
 800ec64:	441a      	add	r2, r3
 800ec66:	687b      	ldr	r3, [r7, #4]
 800ec68:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800ec6a:	693b      	ldr	r3, [r7, #16]
 800ec6c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800ec70:	693b      	ldr	r3, [r7, #16]
 800ec72:	899b      	ldrh	r3, [r3, #12]
 800ec74:	461a      	mov	r2, r3
 800ec76:	683b      	ldr	r3, [r7, #0]
 800ec78:	fbb3 f0f2 	udiv	r0, r3, r2
 800ec7c:	fb00 f202 	mul.w	r2, r0, r2
 800ec80:	1a9b      	subs	r3, r3, r2
 800ec82:	18ca      	adds	r2, r1, r3
 800ec84:	687b      	ldr	r3, [r7, #4]
 800ec86:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800ec88:	2300      	movs	r3, #0
}
 800ec8a:	4618      	mov	r0, r3
 800ec8c:	3718      	adds	r7, #24
 800ec8e:	46bd      	mov	sp, r7
 800ec90:	bd80      	pop	{r7, pc}

0800ec92 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800ec92:	b580      	push	{r7, lr}
 800ec94:	b086      	sub	sp, #24
 800ec96:	af00      	add	r7, sp, #0
 800ec98:	6078      	str	r0, [r7, #4]
 800ec9a:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800ec9c:	687b      	ldr	r3, [r7, #4]
 800ec9e:	681b      	ldr	r3, [r3, #0]
 800eca0:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800eca2:	687b      	ldr	r3, [r7, #4]
 800eca4:	695b      	ldr	r3, [r3, #20]
 800eca6:	3320      	adds	r3, #32
 800eca8:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800ecaa:	687b      	ldr	r3, [r7, #4]
 800ecac:	69db      	ldr	r3, [r3, #28]
 800ecae:	2b00      	cmp	r3, #0
 800ecb0:	d003      	beq.n	800ecba <dir_next+0x28>
 800ecb2:	68bb      	ldr	r3, [r7, #8]
 800ecb4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ecb8:	d301      	bcc.n	800ecbe <dir_next+0x2c>
 800ecba:	2304      	movs	r3, #4
 800ecbc:	e0bb      	b.n	800ee36 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800ecbe:	68fb      	ldr	r3, [r7, #12]
 800ecc0:	899b      	ldrh	r3, [r3, #12]
 800ecc2:	461a      	mov	r2, r3
 800ecc4:	68bb      	ldr	r3, [r7, #8]
 800ecc6:	fbb3 f1f2 	udiv	r1, r3, r2
 800ecca:	fb01 f202 	mul.w	r2, r1, r2
 800ecce:	1a9b      	subs	r3, r3, r2
 800ecd0:	2b00      	cmp	r3, #0
 800ecd2:	f040 809d 	bne.w	800ee10 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800ecd6:	687b      	ldr	r3, [r7, #4]
 800ecd8:	69db      	ldr	r3, [r3, #28]
 800ecda:	1c5a      	adds	r2, r3, #1
 800ecdc:	687b      	ldr	r3, [r7, #4]
 800ecde:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800ece0:	687b      	ldr	r3, [r7, #4]
 800ece2:	699b      	ldr	r3, [r3, #24]
 800ece4:	2b00      	cmp	r3, #0
 800ece6:	d10b      	bne.n	800ed00 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800ece8:	68bb      	ldr	r3, [r7, #8]
 800ecea:	095b      	lsrs	r3, r3, #5
 800ecec:	68fa      	ldr	r2, [r7, #12]
 800ecee:	8912      	ldrh	r2, [r2, #8]
 800ecf0:	4293      	cmp	r3, r2
 800ecf2:	f0c0 808d 	bcc.w	800ee10 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800ecf6:	687b      	ldr	r3, [r7, #4]
 800ecf8:	2200      	movs	r2, #0
 800ecfa:	61da      	str	r2, [r3, #28]
 800ecfc:	2304      	movs	r3, #4
 800ecfe:	e09a      	b.n	800ee36 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800ed00:	68fb      	ldr	r3, [r7, #12]
 800ed02:	899b      	ldrh	r3, [r3, #12]
 800ed04:	461a      	mov	r2, r3
 800ed06:	68bb      	ldr	r3, [r7, #8]
 800ed08:	fbb3 f3f2 	udiv	r3, r3, r2
 800ed0c:	68fa      	ldr	r2, [r7, #12]
 800ed0e:	8952      	ldrh	r2, [r2, #10]
 800ed10:	3a01      	subs	r2, #1
 800ed12:	4013      	ands	r3, r2
 800ed14:	2b00      	cmp	r3, #0
 800ed16:	d17b      	bne.n	800ee10 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800ed18:	687a      	ldr	r2, [r7, #4]
 800ed1a:	687b      	ldr	r3, [r7, #4]
 800ed1c:	699b      	ldr	r3, [r3, #24]
 800ed1e:	4619      	mov	r1, r3
 800ed20:	4610      	mov	r0, r2
 800ed22:	f7ff fc08 	bl	800e536 <get_fat>
 800ed26:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800ed28:	697b      	ldr	r3, [r7, #20]
 800ed2a:	2b01      	cmp	r3, #1
 800ed2c:	d801      	bhi.n	800ed32 <dir_next+0xa0>
 800ed2e:	2302      	movs	r3, #2
 800ed30:	e081      	b.n	800ee36 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800ed32:	697b      	ldr	r3, [r7, #20]
 800ed34:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ed38:	d101      	bne.n	800ed3e <dir_next+0xac>
 800ed3a:	2301      	movs	r3, #1
 800ed3c:	e07b      	b.n	800ee36 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800ed3e:	68fb      	ldr	r3, [r7, #12]
 800ed40:	69db      	ldr	r3, [r3, #28]
 800ed42:	697a      	ldr	r2, [r7, #20]
 800ed44:	429a      	cmp	r2, r3
 800ed46:	d359      	bcc.n	800edfc <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800ed48:	683b      	ldr	r3, [r7, #0]
 800ed4a:	2b00      	cmp	r3, #0
 800ed4c:	d104      	bne.n	800ed58 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800ed4e:	687b      	ldr	r3, [r7, #4]
 800ed50:	2200      	movs	r2, #0
 800ed52:	61da      	str	r2, [r3, #28]
 800ed54:	2304      	movs	r3, #4
 800ed56:	e06e      	b.n	800ee36 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800ed58:	687a      	ldr	r2, [r7, #4]
 800ed5a:	687b      	ldr	r3, [r7, #4]
 800ed5c:	699b      	ldr	r3, [r3, #24]
 800ed5e:	4619      	mov	r1, r3
 800ed60:	4610      	mov	r0, r2
 800ed62:	f7ff fe3d 	bl	800e9e0 <create_chain>
 800ed66:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800ed68:	697b      	ldr	r3, [r7, #20]
 800ed6a:	2b00      	cmp	r3, #0
 800ed6c:	d101      	bne.n	800ed72 <dir_next+0xe0>
 800ed6e:	2307      	movs	r3, #7
 800ed70:	e061      	b.n	800ee36 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800ed72:	697b      	ldr	r3, [r7, #20]
 800ed74:	2b01      	cmp	r3, #1
 800ed76:	d101      	bne.n	800ed7c <dir_next+0xea>
 800ed78:	2302      	movs	r3, #2
 800ed7a:	e05c      	b.n	800ee36 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800ed7c:	697b      	ldr	r3, [r7, #20]
 800ed7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ed82:	d101      	bne.n	800ed88 <dir_next+0xf6>
 800ed84:	2301      	movs	r3, #1
 800ed86:	e056      	b.n	800ee36 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800ed88:	68f8      	ldr	r0, [r7, #12]
 800ed8a:	f7ff fad3 	bl	800e334 <sync_window>
 800ed8e:	4603      	mov	r3, r0
 800ed90:	2b00      	cmp	r3, #0
 800ed92:	d001      	beq.n	800ed98 <dir_next+0x106>
 800ed94:	2301      	movs	r3, #1
 800ed96:	e04e      	b.n	800ee36 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800ed98:	68fb      	ldr	r3, [r7, #12]
 800ed9a:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800ed9e:	68fb      	ldr	r3, [r7, #12]
 800eda0:	899b      	ldrh	r3, [r3, #12]
 800eda2:	461a      	mov	r2, r3
 800eda4:	2100      	movs	r1, #0
 800eda6:	f7ff f8fc 	bl	800dfa2 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800edaa:	2300      	movs	r3, #0
 800edac:	613b      	str	r3, [r7, #16]
 800edae:	6979      	ldr	r1, [r7, #20]
 800edb0:	68f8      	ldr	r0, [r7, #12]
 800edb2:	f7ff fba1 	bl	800e4f8 <clust2sect>
 800edb6:	4602      	mov	r2, r0
 800edb8:	68fb      	ldr	r3, [r7, #12]
 800edba:	635a      	str	r2, [r3, #52]	; 0x34
 800edbc:	e012      	b.n	800ede4 <dir_next+0x152>
						fs->wflag = 1;
 800edbe:	68fb      	ldr	r3, [r7, #12]
 800edc0:	2201      	movs	r2, #1
 800edc2:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800edc4:	68f8      	ldr	r0, [r7, #12]
 800edc6:	f7ff fab5 	bl	800e334 <sync_window>
 800edca:	4603      	mov	r3, r0
 800edcc:	2b00      	cmp	r3, #0
 800edce:	d001      	beq.n	800edd4 <dir_next+0x142>
 800edd0:	2301      	movs	r3, #1
 800edd2:	e030      	b.n	800ee36 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800edd4:	693b      	ldr	r3, [r7, #16]
 800edd6:	3301      	adds	r3, #1
 800edd8:	613b      	str	r3, [r7, #16]
 800edda:	68fb      	ldr	r3, [r7, #12]
 800eddc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800edde:	1c5a      	adds	r2, r3, #1
 800ede0:	68fb      	ldr	r3, [r7, #12]
 800ede2:	635a      	str	r2, [r3, #52]	; 0x34
 800ede4:	68fb      	ldr	r3, [r7, #12]
 800ede6:	895b      	ldrh	r3, [r3, #10]
 800ede8:	461a      	mov	r2, r3
 800edea:	693b      	ldr	r3, [r7, #16]
 800edec:	4293      	cmp	r3, r2
 800edee:	d3e6      	bcc.n	800edbe <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800edf0:	68fb      	ldr	r3, [r7, #12]
 800edf2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800edf4:	693b      	ldr	r3, [r7, #16]
 800edf6:	1ad2      	subs	r2, r2, r3
 800edf8:	68fb      	ldr	r3, [r7, #12]
 800edfa:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800edfc:	687b      	ldr	r3, [r7, #4]
 800edfe:	697a      	ldr	r2, [r7, #20]
 800ee00:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800ee02:	6979      	ldr	r1, [r7, #20]
 800ee04:	68f8      	ldr	r0, [r7, #12]
 800ee06:	f7ff fb77 	bl	800e4f8 <clust2sect>
 800ee0a:	4602      	mov	r2, r0
 800ee0c:	687b      	ldr	r3, [r7, #4]
 800ee0e:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800ee10:	687b      	ldr	r3, [r7, #4]
 800ee12:	68ba      	ldr	r2, [r7, #8]
 800ee14:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800ee16:	68fb      	ldr	r3, [r7, #12]
 800ee18:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800ee1c:	68fb      	ldr	r3, [r7, #12]
 800ee1e:	899b      	ldrh	r3, [r3, #12]
 800ee20:	461a      	mov	r2, r3
 800ee22:	68bb      	ldr	r3, [r7, #8]
 800ee24:	fbb3 f0f2 	udiv	r0, r3, r2
 800ee28:	fb00 f202 	mul.w	r2, r0, r2
 800ee2c:	1a9b      	subs	r3, r3, r2
 800ee2e:	18ca      	adds	r2, r1, r3
 800ee30:	687b      	ldr	r3, [r7, #4]
 800ee32:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800ee34:	2300      	movs	r3, #0
}
 800ee36:	4618      	mov	r0, r3
 800ee38:	3718      	adds	r7, #24
 800ee3a:	46bd      	mov	sp, r7
 800ee3c:	bd80      	pop	{r7, pc}

0800ee3e <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800ee3e:	b580      	push	{r7, lr}
 800ee40:	b086      	sub	sp, #24
 800ee42:	af00      	add	r7, sp, #0
 800ee44:	6078      	str	r0, [r7, #4]
 800ee46:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800ee48:	687b      	ldr	r3, [r7, #4]
 800ee4a:	681b      	ldr	r3, [r3, #0]
 800ee4c:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800ee4e:	2100      	movs	r1, #0
 800ee50:	6878      	ldr	r0, [r7, #4]
 800ee52:	f7ff fe95 	bl	800eb80 <dir_sdi>
 800ee56:	4603      	mov	r3, r0
 800ee58:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800ee5a:	7dfb      	ldrb	r3, [r7, #23]
 800ee5c:	2b00      	cmp	r3, #0
 800ee5e:	d12b      	bne.n	800eeb8 <dir_alloc+0x7a>
		n = 0;
 800ee60:	2300      	movs	r3, #0
 800ee62:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800ee64:	687b      	ldr	r3, [r7, #4]
 800ee66:	69db      	ldr	r3, [r3, #28]
 800ee68:	4619      	mov	r1, r3
 800ee6a:	68f8      	ldr	r0, [r7, #12]
 800ee6c:	f7ff faa6 	bl	800e3bc <move_window>
 800ee70:	4603      	mov	r3, r0
 800ee72:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800ee74:	7dfb      	ldrb	r3, [r7, #23]
 800ee76:	2b00      	cmp	r3, #0
 800ee78:	d11d      	bne.n	800eeb6 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800ee7a:	687b      	ldr	r3, [r7, #4]
 800ee7c:	6a1b      	ldr	r3, [r3, #32]
 800ee7e:	781b      	ldrb	r3, [r3, #0]
 800ee80:	2be5      	cmp	r3, #229	; 0xe5
 800ee82:	d004      	beq.n	800ee8e <dir_alloc+0x50>
 800ee84:	687b      	ldr	r3, [r7, #4]
 800ee86:	6a1b      	ldr	r3, [r3, #32]
 800ee88:	781b      	ldrb	r3, [r3, #0]
 800ee8a:	2b00      	cmp	r3, #0
 800ee8c:	d107      	bne.n	800ee9e <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800ee8e:	693b      	ldr	r3, [r7, #16]
 800ee90:	3301      	adds	r3, #1
 800ee92:	613b      	str	r3, [r7, #16]
 800ee94:	693a      	ldr	r2, [r7, #16]
 800ee96:	683b      	ldr	r3, [r7, #0]
 800ee98:	429a      	cmp	r2, r3
 800ee9a:	d102      	bne.n	800eea2 <dir_alloc+0x64>
 800ee9c:	e00c      	b.n	800eeb8 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800ee9e:	2300      	movs	r3, #0
 800eea0:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800eea2:	2101      	movs	r1, #1
 800eea4:	6878      	ldr	r0, [r7, #4]
 800eea6:	f7ff fef4 	bl	800ec92 <dir_next>
 800eeaa:	4603      	mov	r3, r0
 800eeac:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800eeae:	7dfb      	ldrb	r3, [r7, #23]
 800eeb0:	2b00      	cmp	r3, #0
 800eeb2:	d0d7      	beq.n	800ee64 <dir_alloc+0x26>
 800eeb4:	e000      	b.n	800eeb8 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800eeb6:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800eeb8:	7dfb      	ldrb	r3, [r7, #23]
 800eeba:	2b04      	cmp	r3, #4
 800eebc:	d101      	bne.n	800eec2 <dir_alloc+0x84>
 800eebe:	2307      	movs	r3, #7
 800eec0:	75fb      	strb	r3, [r7, #23]
	return res;
 800eec2:	7dfb      	ldrb	r3, [r7, #23]
}
 800eec4:	4618      	mov	r0, r3
 800eec6:	3718      	adds	r7, #24
 800eec8:	46bd      	mov	sp, r7
 800eeca:	bd80      	pop	{r7, pc}

0800eecc <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800eecc:	b580      	push	{r7, lr}
 800eece:	b084      	sub	sp, #16
 800eed0:	af00      	add	r7, sp, #0
 800eed2:	6078      	str	r0, [r7, #4]
 800eed4:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800eed6:	683b      	ldr	r3, [r7, #0]
 800eed8:	331a      	adds	r3, #26
 800eeda:	4618      	mov	r0, r3
 800eedc:	f7fe ffbe 	bl	800de5c <ld_word>
 800eee0:	4603      	mov	r3, r0
 800eee2:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800eee4:	687b      	ldr	r3, [r7, #4]
 800eee6:	781b      	ldrb	r3, [r3, #0]
 800eee8:	2b03      	cmp	r3, #3
 800eeea:	d109      	bne.n	800ef00 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800eeec:	683b      	ldr	r3, [r7, #0]
 800eeee:	3314      	adds	r3, #20
 800eef0:	4618      	mov	r0, r3
 800eef2:	f7fe ffb3 	bl	800de5c <ld_word>
 800eef6:	4603      	mov	r3, r0
 800eef8:	041b      	lsls	r3, r3, #16
 800eefa:	68fa      	ldr	r2, [r7, #12]
 800eefc:	4313      	orrs	r3, r2
 800eefe:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800ef00:	68fb      	ldr	r3, [r7, #12]
}
 800ef02:	4618      	mov	r0, r3
 800ef04:	3710      	adds	r7, #16
 800ef06:	46bd      	mov	sp, r7
 800ef08:	bd80      	pop	{r7, pc}

0800ef0a <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800ef0a:	b580      	push	{r7, lr}
 800ef0c:	b084      	sub	sp, #16
 800ef0e:	af00      	add	r7, sp, #0
 800ef10:	60f8      	str	r0, [r7, #12]
 800ef12:	60b9      	str	r1, [r7, #8]
 800ef14:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800ef16:	68bb      	ldr	r3, [r7, #8]
 800ef18:	331a      	adds	r3, #26
 800ef1a:	687a      	ldr	r2, [r7, #4]
 800ef1c:	b292      	uxth	r2, r2
 800ef1e:	4611      	mov	r1, r2
 800ef20:	4618      	mov	r0, r3
 800ef22:	f7fe ffd6 	bl	800ded2 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800ef26:	68fb      	ldr	r3, [r7, #12]
 800ef28:	781b      	ldrb	r3, [r3, #0]
 800ef2a:	2b03      	cmp	r3, #3
 800ef2c:	d109      	bne.n	800ef42 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800ef2e:	68bb      	ldr	r3, [r7, #8]
 800ef30:	f103 0214 	add.w	r2, r3, #20
 800ef34:	687b      	ldr	r3, [r7, #4]
 800ef36:	0c1b      	lsrs	r3, r3, #16
 800ef38:	b29b      	uxth	r3, r3
 800ef3a:	4619      	mov	r1, r3
 800ef3c:	4610      	mov	r0, r2
 800ef3e:	f7fe ffc8 	bl	800ded2 <st_word>
	}
}
 800ef42:	bf00      	nop
 800ef44:	3710      	adds	r7, #16
 800ef46:	46bd      	mov	sp, r7
 800ef48:	bd80      	pop	{r7, pc}
	...

0800ef4c <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800ef4c:	b590      	push	{r4, r7, lr}
 800ef4e:	b087      	sub	sp, #28
 800ef50:	af00      	add	r7, sp, #0
 800ef52:	6078      	str	r0, [r7, #4]
 800ef54:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800ef56:	683b      	ldr	r3, [r7, #0]
 800ef58:	331a      	adds	r3, #26
 800ef5a:	4618      	mov	r0, r3
 800ef5c:	f7fe ff7e 	bl	800de5c <ld_word>
 800ef60:	4603      	mov	r3, r0
 800ef62:	2b00      	cmp	r3, #0
 800ef64:	d001      	beq.n	800ef6a <cmp_lfn+0x1e>
 800ef66:	2300      	movs	r3, #0
 800ef68:	e059      	b.n	800f01e <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800ef6a:	683b      	ldr	r3, [r7, #0]
 800ef6c:	781b      	ldrb	r3, [r3, #0]
 800ef6e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ef72:	1e5a      	subs	r2, r3, #1
 800ef74:	4613      	mov	r3, r2
 800ef76:	005b      	lsls	r3, r3, #1
 800ef78:	4413      	add	r3, r2
 800ef7a:	009b      	lsls	r3, r3, #2
 800ef7c:	4413      	add	r3, r2
 800ef7e:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800ef80:	2301      	movs	r3, #1
 800ef82:	81fb      	strh	r3, [r7, #14]
 800ef84:	2300      	movs	r3, #0
 800ef86:	613b      	str	r3, [r7, #16]
 800ef88:	e033      	b.n	800eff2 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800ef8a:	4a27      	ldr	r2, [pc, #156]	; (800f028 <cmp_lfn+0xdc>)
 800ef8c:	693b      	ldr	r3, [r7, #16]
 800ef8e:	4413      	add	r3, r2
 800ef90:	781b      	ldrb	r3, [r3, #0]
 800ef92:	461a      	mov	r2, r3
 800ef94:	683b      	ldr	r3, [r7, #0]
 800ef96:	4413      	add	r3, r2
 800ef98:	4618      	mov	r0, r3
 800ef9a:	f7fe ff5f 	bl	800de5c <ld_word>
 800ef9e:	4603      	mov	r3, r0
 800efa0:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800efa2:	89fb      	ldrh	r3, [r7, #14]
 800efa4:	2b00      	cmp	r3, #0
 800efa6:	d01a      	beq.n	800efde <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800efa8:	697b      	ldr	r3, [r7, #20]
 800efaa:	2bfe      	cmp	r3, #254	; 0xfe
 800efac:	d812      	bhi.n	800efd4 <cmp_lfn+0x88>
 800efae:	89bb      	ldrh	r3, [r7, #12]
 800efb0:	4618      	mov	r0, r3
 800efb2:	f001 fd75 	bl	8010aa0 <ff_wtoupper>
 800efb6:	4603      	mov	r3, r0
 800efb8:	461c      	mov	r4, r3
 800efba:	697b      	ldr	r3, [r7, #20]
 800efbc:	1c5a      	adds	r2, r3, #1
 800efbe:	617a      	str	r2, [r7, #20]
 800efc0:	005b      	lsls	r3, r3, #1
 800efc2:	687a      	ldr	r2, [r7, #4]
 800efc4:	4413      	add	r3, r2
 800efc6:	881b      	ldrh	r3, [r3, #0]
 800efc8:	4618      	mov	r0, r3
 800efca:	f001 fd69 	bl	8010aa0 <ff_wtoupper>
 800efce:	4603      	mov	r3, r0
 800efd0:	429c      	cmp	r4, r3
 800efd2:	d001      	beq.n	800efd8 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800efd4:	2300      	movs	r3, #0
 800efd6:	e022      	b.n	800f01e <cmp_lfn+0xd2>
			}
			wc = uc;
 800efd8:	89bb      	ldrh	r3, [r7, #12]
 800efda:	81fb      	strh	r3, [r7, #14]
 800efdc:	e006      	b.n	800efec <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800efde:	89bb      	ldrh	r3, [r7, #12]
 800efe0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800efe4:	4293      	cmp	r3, r2
 800efe6:	d001      	beq.n	800efec <cmp_lfn+0xa0>
 800efe8:	2300      	movs	r3, #0
 800efea:	e018      	b.n	800f01e <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800efec:	693b      	ldr	r3, [r7, #16]
 800efee:	3301      	adds	r3, #1
 800eff0:	613b      	str	r3, [r7, #16]
 800eff2:	693b      	ldr	r3, [r7, #16]
 800eff4:	2b0c      	cmp	r3, #12
 800eff6:	d9c8      	bls.n	800ef8a <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800eff8:	683b      	ldr	r3, [r7, #0]
 800effa:	781b      	ldrb	r3, [r3, #0]
 800effc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f000:	2b00      	cmp	r3, #0
 800f002:	d00b      	beq.n	800f01c <cmp_lfn+0xd0>
 800f004:	89fb      	ldrh	r3, [r7, #14]
 800f006:	2b00      	cmp	r3, #0
 800f008:	d008      	beq.n	800f01c <cmp_lfn+0xd0>
 800f00a:	697b      	ldr	r3, [r7, #20]
 800f00c:	005b      	lsls	r3, r3, #1
 800f00e:	687a      	ldr	r2, [r7, #4]
 800f010:	4413      	add	r3, r2
 800f012:	881b      	ldrh	r3, [r3, #0]
 800f014:	2b00      	cmp	r3, #0
 800f016:	d001      	beq.n	800f01c <cmp_lfn+0xd0>
 800f018:	2300      	movs	r3, #0
 800f01a:	e000      	b.n	800f01e <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800f01c:	2301      	movs	r3, #1
}
 800f01e:	4618      	mov	r0, r3
 800f020:	371c      	adds	r7, #28
 800f022:	46bd      	mov	sp, r7
 800f024:	bd90      	pop	{r4, r7, pc}
 800f026:	bf00      	nop
 800f028:	080127b0 	.word	0x080127b0

0800f02c <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800f02c:	b580      	push	{r7, lr}
 800f02e:	b088      	sub	sp, #32
 800f030:	af00      	add	r7, sp, #0
 800f032:	60f8      	str	r0, [r7, #12]
 800f034:	60b9      	str	r1, [r7, #8]
 800f036:	4611      	mov	r1, r2
 800f038:	461a      	mov	r2, r3
 800f03a:	460b      	mov	r3, r1
 800f03c:	71fb      	strb	r3, [r7, #7]
 800f03e:	4613      	mov	r3, r2
 800f040:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800f042:	68bb      	ldr	r3, [r7, #8]
 800f044:	330d      	adds	r3, #13
 800f046:	79ba      	ldrb	r2, [r7, #6]
 800f048:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800f04a:	68bb      	ldr	r3, [r7, #8]
 800f04c:	330b      	adds	r3, #11
 800f04e:	220f      	movs	r2, #15
 800f050:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800f052:	68bb      	ldr	r3, [r7, #8]
 800f054:	330c      	adds	r3, #12
 800f056:	2200      	movs	r2, #0
 800f058:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800f05a:	68bb      	ldr	r3, [r7, #8]
 800f05c:	331a      	adds	r3, #26
 800f05e:	2100      	movs	r1, #0
 800f060:	4618      	mov	r0, r3
 800f062:	f7fe ff36 	bl	800ded2 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800f066:	79fb      	ldrb	r3, [r7, #7]
 800f068:	1e5a      	subs	r2, r3, #1
 800f06a:	4613      	mov	r3, r2
 800f06c:	005b      	lsls	r3, r3, #1
 800f06e:	4413      	add	r3, r2
 800f070:	009b      	lsls	r3, r3, #2
 800f072:	4413      	add	r3, r2
 800f074:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800f076:	2300      	movs	r3, #0
 800f078:	82fb      	strh	r3, [r7, #22]
 800f07a:	2300      	movs	r3, #0
 800f07c:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800f07e:	8afb      	ldrh	r3, [r7, #22]
 800f080:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f084:	4293      	cmp	r3, r2
 800f086:	d007      	beq.n	800f098 <put_lfn+0x6c>
 800f088:	69fb      	ldr	r3, [r7, #28]
 800f08a:	1c5a      	adds	r2, r3, #1
 800f08c:	61fa      	str	r2, [r7, #28]
 800f08e:	005b      	lsls	r3, r3, #1
 800f090:	68fa      	ldr	r2, [r7, #12]
 800f092:	4413      	add	r3, r2
 800f094:	881b      	ldrh	r3, [r3, #0]
 800f096:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800f098:	4a17      	ldr	r2, [pc, #92]	; (800f0f8 <put_lfn+0xcc>)
 800f09a:	69bb      	ldr	r3, [r7, #24]
 800f09c:	4413      	add	r3, r2
 800f09e:	781b      	ldrb	r3, [r3, #0]
 800f0a0:	461a      	mov	r2, r3
 800f0a2:	68bb      	ldr	r3, [r7, #8]
 800f0a4:	4413      	add	r3, r2
 800f0a6:	8afa      	ldrh	r2, [r7, #22]
 800f0a8:	4611      	mov	r1, r2
 800f0aa:	4618      	mov	r0, r3
 800f0ac:	f7fe ff11 	bl	800ded2 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800f0b0:	8afb      	ldrh	r3, [r7, #22]
 800f0b2:	2b00      	cmp	r3, #0
 800f0b4:	d102      	bne.n	800f0bc <put_lfn+0x90>
 800f0b6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f0ba:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800f0bc:	69bb      	ldr	r3, [r7, #24]
 800f0be:	3301      	adds	r3, #1
 800f0c0:	61bb      	str	r3, [r7, #24]
 800f0c2:	69bb      	ldr	r3, [r7, #24]
 800f0c4:	2b0c      	cmp	r3, #12
 800f0c6:	d9da      	bls.n	800f07e <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800f0c8:	8afb      	ldrh	r3, [r7, #22]
 800f0ca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f0ce:	4293      	cmp	r3, r2
 800f0d0:	d006      	beq.n	800f0e0 <put_lfn+0xb4>
 800f0d2:	69fb      	ldr	r3, [r7, #28]
 800f0d4:	005b      	lsls	r3, r3, #1
 800f0d6:	68fa      	ldr	r2, [r7, #12]
 800f0d8:	4413      	add	r3, r2
 800f0da:	881b      	ldrh	r3, [r3, #0]
 800f0dc:	2b00      	cmp	r3, #0
 800f0de:	d103      	bne.n	800f0e8 <put_lfn+0xbc>
 800f0e0:	79fb      	ldrb	r3, [r7, #7]
 800f0e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f0e6:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800f0e8:	68bb      	ldr	r3, [r7, #8]
 800f0ea:	79fa      	ldrb	r2, [r7, #7]
 800f0ec:	701a      	strb	r2, [r3, #0]
}
 800f0ee:	bf00      	nop
 800f0f0:	3720      	adds	r7, #32
 800f0f2:	46bd      	mov	sp, r7
 800f0f4:	bd80      	pop	{r7, pc}
 800f0f6:	bf00      	nop
 800f0f8:	080127b0 	.word	0x080127b0

0800f0fc <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800f0fc:	b580      	push	{r7, lr}
 800f0fe:	b08c      	sub	sp, #48	; 0x30
 800f100:	af00      	add	r7, sp, #0
 800f102:	60f8      	str	r0, [r7, #12]
 800f104:	60b9      	str	r1, [r7, #8]
 800f106:	607a      	str	r2, [r7, #4]
 800f108:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800f10a:	220b      	movs	r2, #11
 800f10c:	68b9      	ldr	r1, [r7, #8]
 800f10e:	68f8      	ldr	r0, [r7, #12]
 800f110:	f7fe ff26 	bl	800df60 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800f114:	683b      	ldr	r3, [r7, #0]
 800f116:	2b05      	cmp	r3, #5
 800f118:	d92b      	bls.n	800f172 <gen_numname+0x76>
		sr = seq;
 800f11a:	683b      	ldr	r3, [r7, #0]
 800f11c:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800f11e:	e022      	b.n	800f166 <gen_numname+0x6a>
			wc = *lfn++;
 800f120:	687b      	ldr	r3, [r7, #4]
 800f122:	1c9a      	adds	r2, r3, #2
 800f124:	607a      	str	r2, [r7, #4]
 800f126:	881b      	ldrh	r3, [r3, #0]
 800f128:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800f12a:	2300      	movs	r3, #0
 800f12c:	62bb      	str	r3, [r7, #40]	; 0x28
 800f12e:	e017      	b.n	800f160 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800f130:	69fb      	ldr	r3, [r7, #28]
 800f132:	005a      	lsls	r2, r3, #1
 800f134:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f136:	f003 0301 	and.w	r3, r3, #1
 800f13a:	4413      	add	r3, r2
 800f13c:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800f13e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f140:	085b      	lsrs	r3, r3, #1
 800f142:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800f144:	69fb      	ldr	r3, [r7, #28]
 800f146:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800f14a:	2b00      	cmp	r3, #0
 800f14c:	d005      	beq.n	800f15a <gen_numname+0x5e>
 800f14e:	69fb      	ldr	r3, [r7, #28]
 800f150:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 800f154:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 800f158:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800f15a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f15c:	3301      	adds	r3, #1
 800f15e:	62bb      	str	r3, [r7, #40]	; 0x28
 800f160:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f162:	2b0f      	cmp	r3, #15
 800f164:	d9e4      	bls.n	800f130 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800f166:	687b      	ldr	r3, [r7, #4]
 800f168:	881b      	ldrh	r3, [r3, #0]
 800f16a:	2b00      	cmp	r3, #0
 800f16c:	d1d8      	bne.n	800f120 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800f16e:	69fb      	ldr	r3, [r7, #28]
 800f170:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800f172:	2307      	movs	r3, #7
 800f174:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800f176:	683b      	ldr	r3, [r7, #0]
 800f178:	b2db      	uxtb	r3, r3
 800f17a:	f003 030f 	and.w	r3, r3, #15
 800f17e:	b2db      	uxtb	r3, r3
 800f180:	3330      	adds	r3, #48	; 0x30
 800f182:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800f186:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f18a:	2b39      	cmp	r3, #57	; 0x39
 800f18c:	d904      	bls.n	800f198 <gen_numname+0x9c>
 800f18e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f192:	3307      	adds	r3, #7
 800f194:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800f198:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f19a:	1e5a      	subs	r2, r3, #1
 800f19c:	62ba      	str	r2, [r7, #40]	; 0x28
 800f19e:	3330      	adds	r3, #48	; 0x30
 800f1a0:	443b      	add	r3, r7
 800f1a2:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800f1a6:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800f1aa:	683b      	ldr	r3, [r7, #0]
 800f1ac:	091b      	lsrs	r3, r3, #4
 800f1ae:	603b      	str	r3, [r7, #0]
	} while (seq);
 800f1b0:	683b      	ldr	r3, [r7, #0]
 800f1b2:	2b00      	cmp	r3, #0
 800f1b4:	d1df      	bne.n	800f176 <gen_numname+0x7a>
	ns[i] = '~';
 800f1b6:	f107 0214 	add.w	r2, r7, #20
 800f1ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f1bc:	4413      	add	r3, r2
 800f1be:	227e      	movs	r2, #126	; 0x7e
 800f1c0:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800f1c2:	2300      	movs	r3, #0
 800f1c4:	627b      	str	r3, [r7, #36]	; 0x24
 800f1c6:	e002      	b.n	800f1ce <gen_numname+0xd2>
 800f1c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1ca:	3301      	adds	r3, #1
 800f1cc:	627b      	str	r3, [r7, #36]	; 0x24
 800f1ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f1d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f1d2:	429a      	cmp	r2, r3
 800f1d4:	d205      	bcs.n	800f1e2 <gen_numname+0xe6>
 800f1d6:	68fa      	ldr	r2, [r7, #12]
 800f1d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1da:	4413      	add	r3, r2
 800f1dc:	781b      	ldrb	r3, [r3, #0]
 800f1de:	2b20      	cmp	r3, #32
 800f1e0:	d1f2      	bne.n	800f1c8 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800f1e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f1e4:	2b07      	cmp	r3, #7
 800f1e6:	d807      	bhi.n	800f1f8 <gen_numname+0xfc>
 800f1e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f1ea:	1c5a      	adds	r2, r3, #1
 800f1ec:	62ba      	str	r2, [r7, #40]	; 0x28
 800f1ee:	3330      	adds	r3, #48	; 0x30
 800f1f0:	443b      	add	r3, r7
 800f1f2:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800f1f6:	e000      	b.n	800f1fa <gen_numname+0xfe>
 800f1f8:	2120      	movs	r1, #32
 800f1fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1fc:	1c5a      	adds	r2, r3, #1
 800f1fe:	627a      	str	r2, [r7, #36]	; 0x24
 800f200:	68fa      	ldr	r2, [r7, #12]
 800f202:	4413      	add	r3, r2
 800f204:	460a      	mov	r2, r1
 800f206:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800f208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f20a:	2b07      	cmp	r3, #7
 800f20c:	d9e9      	bls.n	800f1e2 <gen_numname+0xe6>
}
 800f20e:	bf00      	nop
 800f210:	bf00      	nop
 800f212:	3730      	adds	r7, #48	; 0x30
 800f214:	46bd      	mov	sp, r7
 800f216:	bd80      	pop	{r7, pc}

0800f218 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800f218:	b480      	push	{r7}
 800f21a:	b085      	sub	sp, #20
 800f21c:	af00      	add	r7, sp, #0
 800f21e:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800f220:	2300      	movs	r3, #0
 800f222:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800f224:	230b      	movs	r3, #11
 800f226:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800f228:	7bfb      	ldrb	r3, [r7, #15]
 800f22a:	b2da      	uxtb	r2, r3
 800f22c:	0852      	lsrs	r2, r2, #1
 800f22e:	01db      	lsls	r3, r3, #7
 800f230:	4313      	orrs	r3, r2
 800f232:	b2da      	uxtb	r2, r3
 800f234:	687b      	ldr	r3, [r7, #4]
 800f236:	1c59      	adds	r1, r3, #1
 800f238:	6079      	str	r1, [r7, #4]
 800f23a:	781b      	ldrb	r3, [r3, #0]
 800f23c:	4413      	add	r3, r2
 800f23e:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800f240:	68bb      	ldr	r3, [r7, #8]
 800f242:	3b01      	subs	r3, #1
 800f244:	60bb      	str	r3, [r7, #8]
 800f246:	68bb      	ldr	r3, [r7, #8]
 800f248:	2b00      	cmp	r3, #0
 800f24a:	d1ed      	bne.n	800f228 <sum_sfn+0x10>
	return sum;
 800f24c:	7bfb      	ldrb	r3, [r7, #15]
}
 800f24e:	4618      	mov	r0, r3
 800f250:	3714      	adds	r7, #20
 800f252:	46bd      	mov	sp, r7
 800f254:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f258:	4770      	bx	lr

0800f25a <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800f25a:	b580      	push	{r7, lr}
 800f25c:	b086      	sub	sp, #24
 800f25e:	af00      	add	r7, sp, #0
 800f260:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800f262:	687b      	ldr	r3, [r7, #4]
 800f264:	681b      	ldr	r3, [r3, #0]
 800f266:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800f268:	2100      	movs	r1, #0
 800f26a:	6878      	ldr	r0, [r7, #4]
 800f26c:	f7ff fc88 	bl	800eb80 <dir_sdi>
 800f270:	4603      	mov	r3, r0
 800f272:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800f274:	7dfb      	ldrb	r3, [r7, #23]
 800f276:	2b00      	cmp	r3, #0
 800f278:	d001      	beq.n	800f27e <dir_find+0x24>
 800f27a:	7dfb      	ldrb	r3, [r7, #23]
 800f27c:	e0a9      	b.n	800f3d2 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800f27e:	23ff      	movs	r3, #255	; 0xff
 800f280:	753b      	strb	r3, [r7, #20]
 800f282:	7d3b      	ldrb	r3, [r7, #20]
 800f284:	757b      	strb	r3, [r7, #21]
 800f286:	687b      	ldr	r3, [r7, #4]
 800f288:	f04f 32ff 	mov.w	r2, #4294967295
 800f28c:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800f28e:	687b      	ldr	r3, [r7, #4]
 800f290:	69db      	ldr	r3, [r3, #28]
 800f292:	4619      	mov	r1, r3
 800f294:	6938      	ldr	r0, [r7, #16]
 800f296:	f7ff f891 	bl	800e3bc <move_window>
 800f29a:	4603      	mov	r3, r0
 800f29c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800f29e:	7dfb      	ldrb	r3, [r7, #23]
 800f2a0:	2b00      	cmp	r3, #0
 800f2a2:	f040 8090 	bne.w	800f3c6 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800f2a6:	687b      	ldr	r3, [r7, #4]
 800f2a8:	6a1b      	ldr	r3, [r3, #32]
 800f2aa:	781b      	ldrb	r3, [r3, #0]
 800f2ac:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800f2ae:	7dbb      	ldrb	r3, [r7, #22]
 800f2b0:	2b00      	cmp	r3, #0
 800f2b2:	d102      	bne.n	800f2ba <dir_find+0x60>
 800f2b4:	2304      	movs	r3, #4
 800f2b6:	75fb      	strb	r3, [r7, #23]
 800f2b8:	e08a      	b.n	800f3d0 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800f2ba:	687b      	ldr	r3, [r7, #4]
 800f2bc:	6a1b      	ldr	r3, [r3, #32]
 800f2be:	330b      	adds	r3, #11
 800f2c0:	781b      	ldrb	r3, [r3, #0]
 800f2c2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f2c6:	73fb      	strb	r3, [r7, #15]
 800f2c8:	687b      	ldr	r3, [r7, #4]
 800f2ca:	7bfa      	ldrb	r2, [r7, #15]
 800f2cc:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800f2ce:	7dbb      	ldrb	r3, [r7, #22]
 800f2d0:	2be5      	cmp	r3, #229	; 0xe5
 800f2d2:	d007      	beq.n	800f2e4 <dir_find+0x8a>
 800f2d4:	7bfb      	ldrb	r3, [r7, #15]
 800f2d6:	f003 0308 	and.w	r3, r3, #8
 800f2da:	2b00      	cmp	r3, #0
 800f2dc:	d009      	beq.n	800f2f2 <dir_find+0x98>
 800f2de:	7bfb      	ldrb	r3, [r7, #15]
 800f2e0:	2b0f      	cmp	r3, #15
 800f2e2:	d006      	beq.n	800f2f2 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800f2e4:	23ff      	movs	r3, #255	; 0xff
 800f2e6:	757b      	strb	r3, [r7, #21]
 800f2e8:	687b      	ldr	r3, [r7, #4]
 800f2ea:	f04f 32ff 	mov.w	r2, #4294967295
 800f2ee:	631a      	str	r2, [r3, #48]	; 0x30
 800f2f0:	e05e      	b.n	800f3b0 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800f2f2:	7bfb      	ldrb	r3, [r7, #15]
 800f2f4:	2b0f      	cmp	r3, #15
 800f2f6:	d136      	bne.n	800f366 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800f2f8:	687b      	ldr	r3, [r7, #4]
 800f2fa:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800f2fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f302:	2b00      	cmp	r3, #0
 800f304:	d154      	bne.n	800f3b0 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800f306:	7dbb      	ldrb	r3, [r7, #22]
 800f308:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f30c:	2b00      	cmp	r3, #0
 800f30e:	d00d      	beq.n	800f32c <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800f310:	687b      	ldr	r3, [r7, #4]
 800f312:	6a1b      	ldr	r3, [r3, #32]
 800f314:	7b5b      	ldrb	r3, [r3, #13]
 800f316:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800f318:	7dbb      	ldrb	r3, [r7, #22]
 800f31a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f31e:	75bb      	strb	r3, [r7, #22]
 800f320:	7dbb      	ldrb	r3, [r7, #22]
 800f322:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800f324:	687b      	ldr	r3, [r7, #4]
 800f326:	695a      	ldr	r2, [r3, #20]
 800f328:	687b      	ldr	r3, [r7, #4]
 800f32a:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800f32c:	7dba      	ldrb	r2, [r7, #22]
 800f32e:	7d7b      	ldrb	r3, [r7, #21]
 800f330:	429a      	cmp	r2, r3
 800f332:	d115      	bne.n	800f360 <dir_find+0x106>
 800f334:	687b      	ldr	r3, [r7, #4]
 800f336:	6a1b      	ldr	r3, [r3, #32]
 800f338:	330d      	adds	r3, #13
 800f33a:	781b      	ldrb	r3, [r3, #0]
 800f33c:	7d3a      	ldrb	r2, [r7, #20]
 800f33e:	429a      	cmp	r2, r3
 800f340:	d10e      	bne.n	800f360 <dir_find+0x106>
 800f342:	693b      	ldr	r3, [r7, #16]
 800f344:	691a      	ldr	r2, [r3, #16]
 800f346:	687b      	ldr	r3, [r7, #4]
 800f348:	6a1b      	ldr	r3, [r3, #32]
 800f34a:	4619      	mov	r1, r3
 800f34c:	4610      	mov	r0, r2
 800f34e:	f7ff fdfd 	bl	800ef4c <cmp_lfn>
 800f352:	4603      	mov	r3, r0
 800f354:	2b00      	cmp	r3, #0
 800f356:	d003      	beq.n	800f360 <dir_find+0x106>
 800f358:	7d7b      	ldrb	r3, [r7, #21]
 800f35a:	3b01      	subs	r3, #1
 800f35c:	b2db      	uxtb	r3, r3
 800f35e:	e000      	b.n	800f362 <dir_find+0x108>
 800f360:	23ff      	movs	r3, #255	; 0xff
 800f362:	757b      	strb	r3, [r7, #21]
 800f364:	e024      	b.n	800f3b0 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800f366:	7d7b      	ldrb	r3, [r7, #21]
 800f368:	2b00      	cmp	r3, #0
 800f36a:	d109      	bne.n	800f380 <dir_find+0x126>
 800f36c:	687b      	ldr	r3, [r7, #4]
 800f36e:	6a1b      	ldr	r3, [r3, #32]
 800f370:	4618      	mov	r0, r3
 800f372:	f7ff ff51 	bl	800f218 <sum_sfn>
 800f376:	4603      	mov	r3, r0
 800f378:	461a      	mov	r2, r3
 800f37a:	7d3b      	ldrb	r3, [r7, #20]
 800f37c:	4293      	cmp	r3, r2
 800f37e:	d024      	beq.n	800f3ca <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800f380:	687b      	ldr	r3, [r7, #4]
 800f382:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800f386:	f003 0301 	and.w	r3, r3, #1
 800f38a:	2b00      	cmp	r3, #0
 800f38c:	d10a      	bne.n	800f3a4 <dir_find+0x14a>
 800f38e:	687b      	ldr	r3, [r7, #4]
 800f390:	6a18      	ldr	r0, [r3, #32]
 800f392:	687b      	ldr	r3, [r7, #4]
 800f394:	3324      	adds	r3, #36	; 0x24
 800f396:	220b      	movs	r2, #11
 800f398:	4619      	mov	r1, r3
 800f39a:	f7fe fe1d 	bl	800dfd8 <mem_cmp>
 800f39e:	4603      	mov	r3, r0
 800f3a0:	2b00      	cmp	r3, #0
 800f3a2:	d014      	beq.n	800f3ce <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800f3a4:	23ff      	movs	r3, #255	; 0xff
 800f3a6:	757b      	strb	r3, [r7, #21]
 800f3a8:	687b      	ldr	r3, [r7, #4]
 800f3aa:	f04f 32ff 	mov.w	r2, #4294967295
 800f3ae:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800f3b0:	2100      	movs	r1, #0
 800f3b2:	6878      	ldr	r0, [r7, #4]
 800f3b4:	f7ff fc6d 	bl	800ec92 <dir_next>
 800f3b8:	4603      	mov	r3, r0
 800f3ba:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800f3bc:	7dfb      	ldrb	r3, [r7, #23]
 800f3be:	2b00      	cmp	r3, #0
 800f3c0:	f43f af65 	beq.w	800f28e <dir_find+0x34>
 800f3c4:	e004      	b.n	800f3d0 <dir_find+0x176>
		if (res != FR_OK) break;
 800f3c6:	bf00      	nop
 800f3c8:	e002      	b.n	800f3d0 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800f3ca:	bf00      	nop
 800f3cc:	e000      	b.n	800f3d0 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800f3ce:	bf00      	nop

	return res;
 800f3d0:	7dfb      	ldrb	r3, [r7, #23]
}
 800f3d2:	4618      	mov	r0, r3
 800f3d4:	3718      	adds	r7, #24
 800f3d6:	46bd      	mov	sp, r7
 800f3d8:	bd80      	pop	{r7, pc}
	...

0800f3dc <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800f3dc:	b580      	push	{r7, lr}
 800f3de:	b08c      	sub	sp, #48	; 0x30
 800f3e0:	af00      	add	r7, sp, #0
 800f3e2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800f3e4:	687b      	ldr	r3, [r7, #4]
 800f3e6:	681b      	ldr	r3, [r3, #0]
 800f3e8:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800f3ea:	687b      	ldr	r3, [r7, #4]
 800f3ec:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800f3f0:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800f3f4:	2b00      	cmp	r3, #0
 800f3f6:	d001      	beq.n	800f3fc <dir_register+0x20>
 800f3f8:	2306      	movs	r3, #6
 800f3fa:	e0e0      	b.n	800f5be <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800f3fc:	2300      	movs	r3, #0
 800f3fe:	627b      	str	r3, [r7, #36]	; 0x24
 800f400:	e002      	b.n	800f408 <dir_register+0x2c>
 800f402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f404:	3301      	adds	r3, #1
 800f406:	627b      	str	r3, [r7, #36]	; 0x24
 800f408:	69fb      	ldr	r3, [r7, #28]
 800f40a:	691a      	ldr	r2, [r3, #16]
 800f40c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f40e:	005b      	lsls	r3, r3, #1
 800f410:	4413      	add	r3, r2
 800f412:	881b      	ldrh	r3, [r3, #0]
 800f414:	2b00      	cmp	r3, #0
 800f416:	d1f4      	bne.n	800f402 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800f418:	687b      	ldr	r3, [r7, #4]
 800f41a:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800f41e:	f107 030c 	add.w	r3, r7, #12
 800f422:	220c      	movs	r2, #12
 800f424:	4618      	mov	r0, r3
 800f426:	f7fe fd9b 	bl	800df60 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800f42a:	7dfb      	ldrb	r3, [r7, #23]
 800f42c:	f003 0301 	and.w	r3, r3, #1
 800f430:	2b00      	cmp	r3, #0
 800f432:	d032      	beq.n	800f49a <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800f434:	687b      	ldr	r3, [r7, #4]
 800f436:	2240      	movs	r2, #64	; 0x40
 800f438:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 800f43c:	2301      	movs	r3, #1
 800f43e:	62bb      	str	r3, [r7, #40]	; 0x28
 800f440:	e016      	b.n	800f470 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800f442:	687b      	ldr	r3, [r7, #4]
 800f444:	f103 0024 	add.w	r0, r3, #36	; 0x24
 800f448:	69fb      	ldr	r3, [r7, #28]
 800f44a:	691a      	ldr	r2, [r3, #16]
 800f44c:	f107 010c 	add.w	r1, r7, #12
 800f450:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f452:	f7ff fe53 	bl	800f0fc <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800f456:	6878      	ldr	r0, [r7, #4]
 800f458:	f7ff feff 	bl	800f25a <dir_find>
 800f45c:	4603      	mov	r3, r0
 800f45e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800f462:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f466:	2b00      	cmp	r3, #0
 800f468:	d106      	bne.n	800f478 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800f46a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f46c:	3301      	adds	r3, #1
 800f46e:	62bb      	str	r3, [r7, #40]	; 0x28
 800f470:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f472:	2b63      	cmp	r3, #99	; 0x63
 800f474:	d9e5      	bls.n	800f442 <dir_register+0x66>
 800f476:	e000      	b.n	800f47a <dir_register+0x9e>
			if (res != FR_OK) break;
 800f478:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800f47a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f47c:	2b64      	cmp	r3, #100	; 0x64
 800f47e:	d101      	bne.n	800f484 <dir_register+0xa8>
 800f480:	2307      	movs	r3, #7
 800f482:	e09c      	b.n	800f5be <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800f484:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f488:	2b04      	cmp	r3, #4
 800f48a:	d002      	beq.n	800f492 <dir_register+0xb6>
 800f48c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f490:	e095      	b.n	800f5be <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800f492:	7dfa      	ldrb	r2, [r7, #23]
 800f494:	687b      	ldr	r3, [r7, #4]
 800f496:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800f49a:	7dfb      	ldrb	r3, [r7, #23]
 800f49c:	f003 0302 	and.w	r3, r3, #2
 800f4a0:	2b00      	cmp	r3, #0
 800f4a2:	d007      	beq.n	800f4b4 <dir_register+0xd8>
 800f4a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4a6:	330c      	adds	r3, #12
 800f4a8:	4a47      	ldr	r2, [pc, #284]	; (800f5c8 <dir_register+0x1ec>)
 800f4aa:	fba2 2303 	umull	r2, r3, r2, r3
 800f4ae:	089b      	lsrs	r3, r3, #2
 800f4b0:	3301      	adds	r3, #1
 800f4b2:	e000      	b.n	800f4b6 <dir_register+0xda>
 800f4b4:	2301      	movs	r3, #1
 800f4b6:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800f4b8:	6a39      	ldr	r1, [r7, #32]
 800f4ba:	6878      	ldr	r0, [r7, #4]
 800f4bc:	f7ff fcbf 	bl	800ee3e <dir_alloc>
 800f4c0:	4603      	mov	r3, r0
 800f4c2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800f4c6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f4ca:	2b00      	cmp	r3, #0
 800f4cc:	d148      	bne.n	800f560 <dir_register+0x184>
 800f4ce:	6a3b      	ldr	r3, [r7, #32]
 800f4d0:	3b01      	subs	r3, #1
 800f4d2:	623b      	str	r3, [r7, #32]
 800f4d4:	6a3b      	ldr	r3, [r7, #32]
 800f4d6:	2b00      	cmp	r3, #0
 800f4d8:	d042      	beq.n	800f560 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800f4da:	687b      	ldr	r3, [r7, #4]
 800f4dc:	695a      	ldr	r2, [r3, #20]
 800f4de:	6a3b      	ldr	r3, [r7, #32]
 800f4e0:	015b      	lsls	r3, r3, #5
 800f4e2:	1ad3      	subs	r3, r2, r3
 800f4e4:	4619      	mov	r1, r3
 800f4e6:	6878      	ldr	r0, [r7, #4]
 800f4e8:	f7ff fb4a 	bl	800eb80 <dir_sdi>
 800f4ec:	4603      	mov	r3, r0
 800f4ee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800f4f2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f4f6:	2b00      	cmp	r3, #0
 800f4f8:	d132      	bne.n	800f560 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800f4fa:	687b      	ldr	r3, [r7, #4]
 800f4fc:	3324      	adds	r3, #36	; 0x24
 800f4fe:	4618      	mov	r0, r3
 800f500:	f7ff fe8a 	bl	800f218 <sum_sfn>
 800f504:	4603      	mov	r3, r0
 800f506:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800f508:	687b      	ldr	r3, [r7, #4]
 800f50a:	69db      	ldr	r3, [r3, #28]
 800f50c:	4619      	mov	r1, r3
 800f50e:	69f8      	ldr	r0, [r7, #28]
 800f510:	f7fe ff54 	bl	800e3bc <move_window>
 800f514:	4603      	mov	r3, r0
 800f516:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800f51a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f51e:	2b00      	cmp	r3, #0
 800f520:	d11d      	bne.n	800f55e <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800f522:	69fb      	ldr	r3, [r7, #28]
 800f524:	6918      	ldr	r0, [r3, #16]
 800f526:	687b      	ldr	r3, [r7, #4]
 800f528:	6a19      	ldr	r1, [r3, #32]
 800f52a:	6a3b      	ldr	r3, [r7, #32]
 800f52c:	b2da      	uxtb	r2, r3
 800f52e:	7efb      	ldrb	r3, [r7, #27]
 800f530:	f7ff fd7c 	bl	800f02c <put_lfn>
				fs->wflag = 1;
 800f534:	69fb      	ldr	r3, [r7, #28]
 800f536:	2201      	movs	r2, #1
 800f538:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800f53a:	2100      	movs	r1, #0
 800f53c:	6878      	ldr	r0, [r7, #4]
 800f53e:	f7ff fba8 	bl	800ec92 <dir_next>
 800f542:	4603      	mov	r3, r0
 800f544:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 800f548:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f54c:	2b00      	cmp	r3, #0
 800f54e:	d107      	bne.n	800f560 <dir_register+0x184>
 800f550:	6a3b      	ldr	r3, [r7, #32]
 800f552:	3b01      	subs	r3, #1
 800f554:	623b      	str	r3, [r7, #32]
 800f556:	6a3b      	ldr	r3, [r7, #32]
 800f558:	2b00      	cmp	r3, #0
 800f55a:	d1d5      	bne.n	800f508 <dir_register+0x12c>
 800f55c:	e000      	b.n	800f560 <dir_register+0x184>
				if (res != FR_OK) break;
 800f55e:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800f560:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f564:	2b00      	cmp	r3, #0
 800f566:	d128      	bne.n	800f5ba <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800f568:	687b      	ldr	r3, [r7, #4]
 800f56a:	69db      	ldr	r3, [r3, #28]
 800f56c:	4619      	mov	r1, r3
 800f56e:	69f8      	ldr	r0, [r7, #28]
 800f570:	f7fe ff24 	bl	800e3bc <move_window>
 800f574:	4603      	mov	r3, r0
 800f576:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800f57a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f57e:	2b00      	cmp	r3, #0
 800f580:	d11b      	bne.n	800f5ba <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800f582:	687b      	ldr	r3, [r7, #4]
 800f584:	6a1b      	ldr	r3, [r3, #32]
 800f586:	2220      	movs	r2, #32
 800f588:	2100      	movs	r1, #0
 800f58a:	4618      	mov	r0, r3
 800f58c:	f7fe fd09 	bl	800dfa2 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800f590:	687b      	ldr	r3, [r7, #4]
 800f592:	6a18      	ldr	r0, [r3, #32]
 800f594:	687b      	ldr	r3, [r7, #4]
 800f596:	3324      	adds	r3, #36	; 0x24
 800f598:	220b      	movs	r2, #11
 800f59a:	4619      	mov	r1, r3
 800f59c:	f7fe fce0 	bl	800df60 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800f5a0:	687b      	ldr	r3, [r7, #4]
 800f5a2:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800f5a6:	687b      	ldr	r3, [r7, #4]
 800f5a8:	6a1b      	ldr	r3, [r3, #32]
 800f5aa:	330c      	adds	r3, #12
 800f5ac:	f002 0218 	and.w	r2, r2, #24
 800f5b0:	b2d2      	uxtb	r2, r2
 800f5b2:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800f5b4:	69fb      	ldr	r3, [r7, #28]
 800f5b6:	2201      	movs	r2, #1
 800f5b8:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800f5ba:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800f5be:	4618      	mov	r0, r3
 800f5c0:	3730      	adds	r7, #48	; 0x30
 800f5c2:	46bd      	mov	sp, r7
 800f5c4:	bd80      	pop	{r7, pc}
 800f5c6:	bf00      	nop
 800f5c8:	4ec4ec4f 	.word	0x4ec4ec4f

0800f5cc <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800f5cc:	b580      	push	{r7, lr}
 800f5ce:	b08a      	sub	sp, #40	; 0x28
 800f5d0:	af00      	add	r7, sp, #0
 800f5d2:	6078      	str	r0, [r7, #4]
 800f5d4:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800f5d6:	683b      	ldr	r3, [r7, #0]
 800f5d8:	681b      	ldr	r3, [r3, #0]
 800f5da:	613b      	str	r3, [r7, #16]
 800f5dc:	687b      	ldr	r3, [r7, #4]
 800f5de:	681b      	ldr	r3, [r3, #0]
 800f5e0:	691b      	ldr	r3, [r3, #16]
 800f5e2:	60fb      	str	r3, [r7, #12]
 800f5e4:	2300      	movs	r3, #0
 800f5e6:	617b      	str	r3, [r7, #20]
 800f5e8:	697b      	ldr	r3, [r7, #20]
 800f5ea:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800f5ec:	69bb      	ldr	r3, [r7, #24]
 800f5ee:	1c5a      	adds	r2, r3, #1
 800f5f0:	61ba      	str	r2, [r7, #24]
 800f5f2:	693a      	ldr	r2, [r7, #16]
 800f5f4:	4413      	add	r3, r2
 800f5f6:	781b      	ldrb	r3, [r3, #0]
 800f5f8:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800f5fa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f5fc:	2b1f      	cmp	r3, #31
 800f5fe:	d940      	bls.n	800f682 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800f600:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f602:	2b2f      	cmp	r3, #47	; 0x2f
 800f604:	d006      	beq.n	800f614 <create_name+0x48>
 800f606:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f608:	2b5c      	cmp	r3, #92	; 0x5c
 800f60a:	d110      	bne.n	800f62e <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800f60c:	e002      	b.n	800f614 <create_name+0x48>
 800f60e:	69bb      	ldr	r3, [r7, #24]
 800f610:	3301      	adds	r3, #1
 800f612:	61bb      	str	r3, [r7, #24]
 800f614:	693a      	ldr	r2, [r7, #16]
 800f616:	69bb      	ldr	r3, [r7, #24]
 800f618:	4413      	add	r3, r2
 800f61a:	781b      	ldrb	r3, [r3, #0]
 800f61c:	2b2f      	cmp	r3, #47	; 0x2f
 800f61e:	d0f6      	beq.n	800f60e <create_name+0x42>
 800f620:	693a      	ldr	r2, [r7, #16]
 800f622:	69bb      	ldr	r3, [r7, #24]
 800f624:	4413      	add	r3, r2
 800f626:	781b      	ldrb	r3, [r3, #0]
 800f628:	2b5c      	cmp	r3, #92	; 0x5c
 800f62a:	d0f0      	beq.n	800f60e <create_name+0x42>
			break;
 800f62c:	e02a      	b.n	800f684 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800f62e:	697b      	ldr	r3, [r7, #20]
 800f630:	2bfe      	cmp	r3, #254	; 0xfe
 800f632:	d901      	bls.n	800f638 <create_name+0x6c>
 800f634:	2306      	movs	r3, #6
 800f636:	e17d      	b.n	800f934 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 800f638:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f63a:	b2db      	uxtb	r3, r3
 800f63c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800f63e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f640:	2101      	movs	r1, #1
 800f642:	4618      	mov	r0, r3
 800f644:	f001 f9f0 	bl	8010a28 <ff_convert>
 800f648:	4603      	mov	r3, r0
 800f64a:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800f64c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f64e:	2b00      	cmp	r3, #0
 800f650:	d101      	bne.n	800f656 <create_name+0x8a>
 800f652:	2306      	movs	r3, #6
 800f654:	e16e      	b.n	800f934 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800f656:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f658:	2b7f      	cmp	r3, #127	; 0x7f
 800f65a:	d809      	bhi.n	800f670 <create_name+0xa4>
 800f65c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f65e:	4619      	mov	r1, r3
 800f660:	488d      	ldr	r0, [pc, #564]	; (800f898 <create_name+0x2cc>)
 800f662:	f7fe fce0 	bl	800e026 <chk_chr>
 800f666:	4603      	mov	r3, r0
 800f668:	2b00      	cmp	r3, #0
 800f66a:	d001      	beq.n	800f670 <create_name+0xa4>
 800f66c:	2306      	movs	r3, #6
 800f66e:	e161      	b.n	800f934 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 800f670:	697b      	ldr	r3, [r7, #20]
 800f672:	1c5a      	adds	r2, r3, #1
 800f674:	617a      	str	r2, [r7, #20]
 800f676:	005b      	lsls	r3, r3, #1
 800f678:	68fa      	ldr	r2, [r7, #12]
 800f67a:	4413      	add	r3, r2
 800f67c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800f67e:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800f680:	e7b4      	b.n	800f5ec <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800f682:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800f684:	693a      	ldr	r2, [r7, #16]
 800f686:	69bb      	ldr	r3, [r7, #24]
 800f688:	441a      	add	r2, r3
 800f68a:	683b      	ldr	r3, [r7, #0]
 800f68c:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800f68e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f690:	2b1f      	cmp	r3, #31
 800f692:	d801      	bhi.n	800f698 <create_name+0xcc>
 800f694:	2304      	movs	r3, #4
 800f696:	e000      	b.n	800f69a <create_name+0xce>
 800f698:	2300      	movs	r3, #0
 800f69a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800f69e:	e011      	b.n	800f6c4 <create_name+0xf8>
		w = lfn[di - 1];
 800f6a0:	697b      	ldr	r3, [r7, #20]
 800f6a2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800f6a6:	3b01      	subs	r3, #1
 800f6a8:	005b      	lsls	r3, r3, #1
 800f6aa:	68fa      	ldr	r2, [r7, #12]
 800f6ac:	4413      	add	r3, r2
 800f6ae:	881b      	ldrh	r3, [r3, #0]
 800f6b0:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800f6b2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f6b4:	2b20      	cmp	r3, #32
 800f6b6:	d002      	beq.n	800f6be <create_name+0xf2>
 800f6b8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f6ba:	2b2e      	cmp	r3, #46	; 0x2e
 800f6bc:	d106      	bne.n	800f6cc <create_name+0x100>
		di--;
 800f6be:	697b      	ldr	r3, [r7, #20]
 800f6c0:	3b01      	subs	r3, #1
 800f6c2:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800f6c4:	697b      	ldr	r3, [r7, #20]
 800f6c6:	2b00      	cmp	r3, #0
 800f6c8:	d1ea      	bne.n	800f6a0 <create_name+0xd4>
 800f6ca:	e000      	b.n	800f6ce <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800f6cc:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800f6ce:	697b      	ldr	r3, [r7, #20]
 800f6d0:	005b      	lsls	r3, r3, #1
 800f6d2:	68fa      	ldr	r2, [r7, #12]
 800f6d4:	4413      	add	r3, r2
 800f6d6:	2200      	movs	r2, #0
 800f6d8:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800f6da:	697b      	ldr	r3, [r7, #20]
 800f6dc:	2b00      	cmp	r3, #0
 800f6de:	d101      	bne.n	800f6e4 <create_name+0x118>
 800f6e0:	2306      	movs	r3, #6
 800f6e2:	e127      	b.n	800f934 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800f6e4:	687b      	ldr	r3, [r7, #4]
 800f6e6:	3324      	adds	r3, #36	; 0x24
 800f6e8:	220b      	movs	r2, #11
 800f6ea:	2120      	movs	r1, #32
 800f6ec:	4618      	mov	r0, r3
 800f6ee:	f7fe fc58 	bl	800dfa2 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800f6f2:	2300      	movs	r3, #0
 800f6f4:	61bb      	str	r3, [r7, #24]
 800f6f6:	e002      	b.n	800f6fe <create_name+0x132>
 800f6f8:	69bb      	ldr	r3, [r7, #24]
 800f6fa:	3301      	adds	r3, #1
 800f6fc:	61bb      	str	r3, [r7, #24]
 800f6fe:	69bb      	ldr	r3, [r7, #24]
 800f700:	005b      	lsls	r3, r3, #1
 800f702:	68fa      	ldr	r2, [r7, #12]
 800f704:	4413      	add	r3, r2
 800f706:	881b      	ldrh	r3, [r3, #0]
 800f708:	2b20      	cmp	r3, #32
 800f70a:	d0f5      	beq.n	800f6f8 <create_name+0x12c>
 800f70c:	69bb      	ldr	r3, [r7, #24]
 800f70e:	005b      	lsls	r3, r3, #1
 800f710:	68fa      	ldr	r2, [r7, #12]
 800f712:	4413      	add	r3, r2
 800f714:	881b      	ldrh	r3, [r3, #0]
 800f716:	2b2e      	cmp	r3, #46	; 0x2e
 800f718:	d0ee      	beq.n	800f6f8 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800f71a:	69bb      	ldr	r3, [r7, #24]
 800f71c:	2b00      	cmp	r3, #0
 800f71e:	d009      	beq.n	800f734 <create_name+0x168>
 800f720:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f724:	f043 0303 	orr.w	r3, r3, #3
 800f728:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800f72c:	e002      	b.n	800f734 <create_name+0x168>
 800f72e:	697b      	ldr	r3, [r7, #20]
 800f730:	3b01      	subs	r3, #1
 800f732:	617b      	str	r3, [r7, #20]
 800f734:	697b      	ldr	r3, [r7, #20]
 800f736:	2b00      	cmp	r3, #0
 800f738:	d009      	beq.n	800f74e <create_name+0x182>
 800f73a:	697b      	ldr	r3, [r7, #20]
 800f73c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800f740:	3b01      	subs	r3, #1
 800f742:	005b      	lsls	r3, r3, #1
 800f744:	68fa      	ldr	r2, [r7, #12]
 800f746:	4413      	add	r3, r2
 800f748:	881b      	ldrh	r3, [r3, #0]
 800f74a:	2b2e      	cmp	r3, #46	; 0x2e
 800f74c:	d1ef      	bne.n	800f72e <create_name+0x162>

	i = b = 0; ni = 8;
 800f74e:	2300      	movs	r3, #0
 800f750:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800f754:	2300      	movs	r3, #0
 800f756:	623b      	str	r3, [r7, #32]
 800f758:	2308      	movs	r3, #8
 800f75a:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800f75c:	69bb      	ldr	r3, [r7, #24]
 800f75e:	1c5a      	adds	r2, r3, #1
 800f760:	61ba      	str	r2, [r7, #24]
 800f762:	005b      	lsls	r3, r3, #1
 800f764:	68fa      	ldr	r2, [r7, #12]
 800f766:	4413      	add	r3, r2
 800f768:	881b      	ldrh	r3, [r3, #0]
 800f76a:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800f76c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f76e:	2b00      	cmp	r3, #0
 800f770:	f000 8090 	beq.w	800f894 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800f774:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f776:	2b20      	cmp	r3, #32
 800f778:	d006      	beq.n	800f788 <create_name+0x1bc>
 800f77a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f77c:	2b2e      	cmp	r3, #46	; 0x2e
 800f77e:	d10a      	bne.n	800f796 <create_name+0x1ca>
 800f780:	69ba      	ldr	r2, [r7, #24]
 800f782:	697b      	ldr	r3, [r7, #20]
 800f784:	429a      	cmp	r2, r3
 800f786:	d006      	beq.n	800f796 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800f788:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f78c:	f043 0303 	orr.w	r3, r3, #3
 800f790:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f794:	e07d      	b.n	800f892 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800f796:	6a3a      	ldr	r2, [r7, #32]
 800f798:	69fb      	ldr	r3, [r7, #28]
 800f79a:	429a      	cmp	r2, r3
 800f79c:	d203      	bcs.n	800f7a6 <create_name+0x1da>
 800f79e:	69ba      	ldr	r2, [r7, #24]
 800f7a0:	697b      	ldr	r3, [r7, #20]
 800f7a2:	429a      	cmp	r2, r3
 800f7a4:	d123      	bne.n	800f7ee <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800f7a6:	69fb      	ldr	r3, [r7, #28]
 800f7a8:	2b0b      	cmp	r3, #11
 800f7aa:	d106      	bne.n	800f7ba <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800f7ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f7b0:	f043 0303 	orr.w	r3, r3, #3
 800f7b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f7b8:	e075      	b.n	800f8a6 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800f7ba:	69ba      	ldr	r2, [r7, #24]
 800f7bc:	697b      	ldr	r3, [r7, #20]
 800f7be:	429a      	cmp	r2, r3
 800f7c0:	d005      	beq.n	800f7ce <create_name+0x202>
 800f7c2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f7c6:	f043 0303 	orr.w	r3, r3, #3
 800f7ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800f7ce:	69ba      	ldr	r2, [r7, #24]
 800f7d0:	697b      	ldr	r3, [r7, #20]
 800f7d2:	429a      	cmp	r2, r3
 800f7d4:	d866      	bhi.n	800f8a4 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800f7d6:	697b      	ldr	r3, [r7, #20]
 800f7d8:	61bb      	str	r3, [r7, #24]
 800f7da:	2308      	movs	r3, #8
 800f7dc:	623b      	str	r3, [r7, #32]
 800f7de:	230b      	movs	r3, #11
 800f7e0:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800f7e2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f7e6:	009b      	lsls	r3, r3, #2
 800f7e8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800f7ec:	e051      	b.n	800f892 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800f7ee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f7f0:	2b7f      	cmp	r3, #127	; 0x7f
 800f7f2:	d914      	bls.n	800f81e <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800f7f4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f7f6:	2100      	movs	r1, #0
 800f7f8:	4618      	mov	r0, r3
 800f7fa:	f001 f915 	bl	8010a28 <ff_convert>
 800f7fe:	4603      	mov	r3, r0
 800f800:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800f802:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f804:	2b00      	cmp	r3, #0
 800f806:	d004      	beq.n	800f812 <create_name+0x246>
 800f808:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f80a:	3b80      	subs	r3, #128	; 0x80
 800f80c:	4a23      	ldr	r2, [pc, #140]	; (800f89c <create_name+0x2d0>)
 800f80e:	5cd3      	ldrb	r3, [r2, r3]
 800f810:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800f812:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f816:	f043 0302 	orr.w	r3, r3, #2
 800f81a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800f81e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f820:	2b00      	cmp	r3, #0
 800f822:	d007      	beq.n	800f834 <create_name+0x268>
 800f824:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f826:	4619      	mov	r1, r3
 800f828:	481d      	ldr	r0, [pc, #116]	; (800f8a0 <create_name+0x2d4>)
 800f82a:	f7fe fbfc 	bl	800e026 <chk_chr>
 800f82e:	4603      	mov	r3, r0
 800f830:	2b00      	cmp	r3, #0
 800f832:	d008      	beq.n	800f846 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800f834:	235f      	movs	r3, #95	; 0x5f
 800f836:	84bb      	strh	r3, [r7, #36]	; 0x24
 800f838:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f83c:	f043 0303 	orr.w	r3, r3, #3
 800f840:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f844:	e01b      	b.n	800f87e <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800f846:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f848:	2b40      	cmp	r3, #64	; 0x40
 800f84a:	d909      	bls.n	800f860 <create_name+0x294>
 800f84c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f84e:	2b5a      	cmp	r3, #90	; 0x5a
 800f850:	d806      	bhi.n	800f860 <create_name+0x294>
					b |= 2;
 800f852:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f856:	f043 0302 	orr.w	r3, r3, #2
 800f85a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800f85e:	e00e      	b.n	800f87e <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800f860:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f862:	2b60      	cmp	r3, #96	; 0x60
 800f864:	d90b      	bls.n	800f87e <create_name+0x2b2>
 800f866:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f868:	2b7a      	cmp	r3, #122	; 0x7a
 800f86a:	d808      	bhi.n	800f87e <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800f86c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f870:	f043 0301 	orr.w	r3, r3, #1
 800f874:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800f878:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f87a:	3b20      	subs	r3, #32
 800f87c:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800f87e:	6a3b      	ldr	r3, [r7, #32]
 800f880:	1c5a      	adds	r2, r3, #1
 800f882:	623a      	str	r2, [r7, #32]
 800f884:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800f886:	b2d1      	uxtb	r1, r2
 800f888:	687a      	ldr	r2, [r7, #4]
 800f88a:	4413      	add	r3, r2
 800f88c:	460a      	mov	r2, r1
 800f88e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 800f892:	e763      	b.n	800f75c <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800f894:	bf00      	nop
 800f896:	e006      	b.n	800f8a6 <create_name+0x2da>
 800f898:	080126b4 	.word	0x080126b4
 800f89c:	08012730 	.word	0x08012730
 800f8a0:	080126c0 	.word	0x080126c0
			if (si > di) break;			/* No extension */
 800f8a4:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800f8a6:	687b      	ldr	r3, [r7, #4]
 800f8a8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800f8ac:	2be5      	cmp	r3, #229	; 0xe5
 800f8ae:	d103      	bne.n	800f8b8 <create_name+0x2ec>
 800f8b0:	687b      	ldr	r3, [r7, #4]
 800f8b2:	2205      	movs	r2, #5
 800f8b4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 800f8b8:	69fb      	ldr	r3, [r7, #28]
 800f8ba:	2b08      	cmp	r3, #8
 800f8bc:	d104      	bne.n	800f8c8 <create_name+0x2fc>
 800f8be:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f8c2:	009b      	lsls	r3, r3, #2
 800f8c4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800f8c8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f8cc:	f003 030c 	and.w	r3, r3, #12
 800f8d0:	2b0c      	cmp	r3, #12
 800f8d2:	d005      	beq.n	800f8e0 <create_name+0x314>
 800f8d4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f8d8:	f003 0303 	and.w	r3, r3, #3
 800f8dc:	2b03      	cmp	r3, #3
 800f8de:	d105      	bne.n	800f8ec <create_name+0x320>
 800f8e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f8e4:	f043 0302 	orr.w	r3, r3, #2
 800f8e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800f8ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f8f0:	f003 0302 	and.w	r3, r3, #2
 800f8f4:	2b00      	cmp	r3, #0
 800f8f6:	d117      	bne.n	800f928 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800f8f8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f8fc:	f003 0303 	and.w	r3, r3, #3
 800f900:	2b01      	cmp	r3, #1
 800f902:	d105      	bne.n	800f910 <create_name+0x344>
 800f904:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f908:	f043 0310 	orr.w	r3, r3, #16
 800f90c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800f910:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f914:	f003 030c 	and.w	r3, r3, #12
 800f918:	2b04      	cmp	r3, #4
 800f91a:	d105      	bne.n	800f928 <create_name+0x35c>
 800f91c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f920:	f043 0308 	orr.w	r3, r3, #8
 800f924:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800f928:	687b      	ldr	r3, [r7, #4]
 800f92a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800f92e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 800f932:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800f934:	4618      	mov	r0, r3
 800f936:	3728      	adds	r7, #40	; 0x28
 800f938:	46bd      	mov	sp, r7
 800f93a:	bd80      	pop	{r7, pc}

0800f93c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800f93c:	b580      	push	{r7, lr}
 800f93e:	b086      	sub	sp, #24
 800f940:	af00      	add	r7, sp, #0
 800f942:	6078      	str	r0, [r7, #4]
 800f944:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800f946:	687b      	ldr	r3, [r7, #4]
 800f948:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800f94a:	693b      	ldr	r3, [r7, #16]
 800f94c:	681b      	ldr	r3, [r3, #0]
 800f94e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800f950:	e002      	b.n	800f958 <follow_path+0x1c>
 800f952:	683b      	ldr	r3, [r7, #0]
 800f954:	3301      	adds	r3, #1
 800f956:	603b      	str	r3, [r7, #0]
 800f958:	683b      	ldr	r3, [r7, #0]
 800f95a:	781b      	ldrb	r3, [r3, #0]
 800f95c:	2b2f      	cmp	r3, #47	; 0x2f
 800f95e:	d0f8      	beq.n	800f952 <follow_path+0x16>
 800f960:	683b      	ldr	r3, [r7, #0]
 800f962:	781b      	ldrb	r3, [r3, #0]
 800f964:	2b5c      	cmp	r3, #92	; 0x5c
 800f966:	d0f4      	beq.n	800f952 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800f968:	693b      	ldr	r3, [r7, #16]
 800f96a:	2200      	movs	r2, #0
 800f96c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800f96e:	683b      	ldr	r3, [r7, #0]
 800f970:	781b      	ldrb	r3, [r3, #0]
 800f972:	2b1f      	cmp	r3, #31
 800f974:	d80a      	bhi.n	800f98c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800f976:	687b      	ldr	r3, [r7, #4]
 800f978:	2280      	movs	r2, #128	; 0x80
 800f97a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800f97e:	2100      	movs	r1, #0
 800f980:	6878      	ldr	r0, [r7, #4]
 800f982:	f7ff f8fd 	bl	800eb80 <dir_sdi>
 800f986:	4603      	mov	r3, r0
 800f988:	75fb      	strb	r3, [r7, #23]
 800f98a:	e048      	b.n	800fa1e <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800f98c:	463b      	mov	r3, r7
 800f98e:	4619      	mov	r1, r3
 800f990:	6878      	ldr	r0, [r7, #4]
 800f992:	f7ff fe1b 	bl	800f5cc <create_name>
 800f996:	4603      	mov	r3, r0
 800f998:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800f99a:	7dfb      	ldrb	r3, [r7, #23]
 800f99c:	2b00      	cmp	r3, #0
 800f99e:	d139      	bne.n	800fa14 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 800f9a0:	6878      	ldr	r0, [r7, #4]
 800f9a2:	f7ff fc5a 	bl	800f25a <dir_find>
 800f9a6:	4603      	mov	r3, r0
 800f9a8:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800f9aa:	687b      	ldr	r3, [r7, #4]
 800f9ac:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800f9b0:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800f9b2:	7dfb      	ldrb	r3, [r7, #23]
 800f9b4:	2b00      	cmp	r3, #0
 800f9b6:	d00a      	beq.n	800f9ce <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800f9b8:	7dfb      	ldrb	r3, [r7, #23]
 800f9ba:	2b04      	cmp	r3, #4
 800f9bc:	d12c      	bne.n	800fa18 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800f9be:	7afb      	ldrb	r3, [r7, #11]
 800f9c0:	f003 0304 	and.w	r3, r3, #4
 800f9c4:	2b00      	cmp	r3, #0
 800f9c6:	d127      	bne.n	800fa18 <follow_path+0xdc>
 800f9c8:	2305      	movs	r3, #5
 800f9ca:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800f9cc:	e024      	b.n	800fa18 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800f9ce:	7afb      	ldrb	r3, [r7, #11]
 800f9d0:	f003 0304 	and.w	r3, r3, #4
 800f9d4:	2b00      	cmp	r3, #0
 800f9d6:	d121      	bne.n	800fa1c <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800f9d8:	693b      	ldr	r3, [r7, #16]
 800f9da:	799b      	ldrb	r3, [r3, #6]
 800f9dc:	f003 0310 	and.w	r3, r3, #16
 800f9e0:	2b00      	cmp	r3, #0
 800f9e2:	d102      	bne.n	800f9ea <follow_path+0xae>
				res = FR_NO_PATH; break;
 800f9e4:	2305      	movs	r3, #5
 800f9e6:	75fb      	strb	r3, [r7, #23]
 800f9e8:	e019      	b.n	800fa1e <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800f9ea:	68fb      	ldr	r3, [r7, #12]
 800f9ec:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800f9f0:	687b      	ldr	r3, [r7, #4]
 800f9f2:	695b      	ldr	r3, [r3, #20]
 800f9f4:	68fa      	ldr	r2, [r7, #12]
 800f9f6:	8992      	ldrh	r2, [r2, #12]
 800f9f8:	fbb3 f0f2 	udiv	r0, r3, r2
 800f9fc:	fb00 f202 	mul.w	r2, r0, r2
 800fa00:	1a9b      	subs	r3, r3, r2
 800fa02:	440b      	add	r3, r1
 800fa04:	4619      	mov	r1, r3
 800fa06:	68f8      	ldr	r0, [r7, #12]
 800fa08:	f7ff fa60 	bl	800eecc <ld_clust>
 800fa0c:	4602      	mov	r2, r0
 800fa0e:	693b      	ldr	r3, [r7, #16]
 800fa10:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800fa12:	e7bb      	b.n	800f98c <follow_path+0x50>
			if (res != FR_OK) break;
 800fa14:	bf00      	nop
 800fa16:	e002      	b.n	800fa1e <follow_path+0xe2>
				break;
 800fa18:	bf00      	nop
 800fa1a:	e000      	b.n	800fa1e <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800fa1c:	bf00      	nop
			}
		}
	}

	return res;
 800fa1e:	7dfb      	ldrb	r3, [r7, #23]
}
 800fa20:	4618      	mov	r0, r3
 800fa22:	3718      	adds	r7, #24
 800fa24:	46bd      	mov	sp, r7
 800fa26:	bd80      	pop	{r7, pc}

0800fa28 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800fa28:	b480      	push	{r7}
 800fa2a:	b087      	sub	sp, #28
 800fa2c:	af00      	add	r7, sp, #0
 800fa2e:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800fa30:	f04f 33ff 	mov.w	r3, #4294967295
 800fa34:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800fa36:	687b      	ldr	r3, [r7, #4]
 800fa38:	681b      	ldr	r3, [r3, #0]
 800fa3a:	2b00      	cmp	r3, #0
 800fa3c:	d031      	beq.n	800faa2 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800fa3e:	687b      	ldr	r3, [r7, #4]
 800fa40:	681b      	ldr	r3, [r3, #0]
 800fa42:	617b      	str	r3, [r7, #20]
 800fa44:	e002      	b.n	800fa4c <get_ldnumber+0x24>
 800fa46:	697b      	ldr	r3, [r7, #20]
 800fa48:	3301      	adds	r3, #1
 800fa4a:	617b      	str	r3, [r7, #20]
 800fa4c:	697b      	ldr	r3, [r7, #20]
 800fa4e:	781b      	ldrb	r3, [r3, #0]
 800fa50:	2b1f      	cmp	r3, #31
 800fa52:	d903      	bls.n	800fa5c <get_ldnumber+0x34>
 800fa54:	697b      	ldr	r3, [r7, #20]
 800fa56:	781b      	ldrb	r3, [r3, #0]
 800fa58:	2b3a      	cmp	r3, #58	; 0x3a
 800fa5a:	d1f4      	bne.n	800fa46 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800fa5c:	697b      	ldr	r3, [r7, #20]
 800fa5e:	781b      	ldrb	r3, [r3, #0]
 800fa60:	2b3a      	cmp	r3, #58	; 0x3a
 800fa62:	d11c      	bne.n	800fa9e <get_ldnumber+0x76>
			tp = *path;
 800fa64:	687b      	ldr	r3, [r7, #4]
 800fa66:	681b      	ldr	r3, [r3, #0]
 800fa68:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800fa6a:	68fb      	ldr	r3, [r7, #12]
 800fa6c:	1c5a      	adds	r2, r3, #1
 800fa6e:	60fa      	str	r2, [r7, #12]
 800fa70:	781b      	ldrb	r3, [r3, #0]
 800fa72:	3b30      	subs	r3, #48	; 0x30
 800fa74:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800fa76:	68bb      	ldr	r3, [r7, #8]
 800fa78:	2b09      	cmp	r3, #9
 800fa7a:	d80e      	bhi.n	800fa9a <get_ldnumber+0x72>
 800fa7c:	68fa      	ldr	r2, [r7, #12]
 800fa7e:	697b      	ldr	r3, [r7, #20]
 800fa80:	429a      	cmp	r2, r3
 800fa82:	d10a      	bne.n	800fa9a <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800fa84:	68bb      	ldr	r3, [r7, #8]
 800fa86:	2b00      	cmp	r3, #0
 800fa88:	d107      	bne.n	800fa9a <get_ldnumber+0x72>
					vol = (int)i;
 800fa8a:	68bb      	ldr	r3, [r7, #8]
 800fa8c:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800fa8e:	697b      	ldr	r3, [r7, #20]
 800fa90:	3301      	adds	r3, #1
 800fa92:	617b      	str	r3, [r7, #20]
 800fa94:	687b      	ldr	r3, [r7, #4]
 800fa96:	697a      	ldr	r2, [r7, #20]
 800fa98:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800fa9a:	693b      	ldr	r3, [r7, #16]
 800fa9c:	e002      	b.n	800faa4 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800fa9e:	2300      	movs	r3, #0
 800faa0:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800faa2:	693b      	ldr	r3, [r7, #16]
}
 800faa4:	4618      	mov	r0, r3
 800faa6:	371c      	adds	r7, #28
 800faa8:	46bd      	mov	sp, r7
 800faaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faae:	4770      	bx	lr

0800fab0 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800fab0:	b580      	push	{r7, lr}
 800fab2:	b082      	sub	sp, #8
 800fab4:	af00      	add	r7, sp, #0
 800fab6:	6078      	str	r0, [r7, #4]
 800fab8:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800faba:	687b      	ldr	r3, [r7, #4]
 800fabc:	2200      	movs	r2, #0
 800fabe:	70da      	strb	r2, [r3, #3]
 800fac0:	687b      	ldr	r3, [r7, #4]
 800fac2:	f04f 32ff 	mov.w	r2, #4294967295
 800fac6:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800fac8:	6839      	ldr	r1, [r7, #0]
 800faca:	6878      	ldr	r0, [r7, #4]
 800facc:	f7fe fc76 	bl	800e3bc <move_window>
 800fad0:	4603      	mov	r3, r0
 800fad2:	2b00      	cmp	r3, #0
 800fad4:	d001      	beq.n	800fada <check_fs+0x2a>
 800fad6:	2304      	movs	r3, #4
 800fad8:	e038      	b.n	800fb4c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800fada:	687b      	ldr	r3, [r7, #4]
 800fadc:	3338      	adds	r3, #56	; 0x38
 800fade:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800fae2:	4618      	mov	r0, r3
 800fae4:	f7fe f9ba 	bl	800de5c <ld_word>
 800fae8:	4603      	mov	r3, r0
 800faea:	461a      	mov	r2, r3
 800faec:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800faf0:	429a      	cmp	r2, r3
 800faf2:	d001      	beq.n	800faf8 <check_fs+0x48>
 800faf4:	2303      	movs	r3, #3
 800faf6:	e029      	b.n	800fb4c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800faf8:	687b      	ldr	r3, [r7, #4]
 800fafa:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800fafe:	2be9      	cmp	r3, #233	; 0xe9
 800fb00:	d009      	beq.n	800fb16 <check_fs+0x66>
 800fb02:	687b      	ldr	r3, [r7, #4]
 800fb04:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800fb08:	2beb      	cmp	r3, #235	; 0xeb
 800fb0a:	d11e      	bne.n	800fb4a <check_fs+0x9a>
 800fb0c:	687b      	ldr	r3, [r7, #4]
 800fb0e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800fb12:	2b90      	cmp	r3, #144	; 0x90
 800fb14:	d119      	bne.n	800fb4a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800fb16:	687b      	ldr	r3, [r7, #4]
 800fb18:	3338      	adds	r3, #56	; 0x38
 800fb1a:	3336      	adds	r3, #54	; 0x36
 800fb1c:	4618      	mov	r0, r3
 800fb1e:	f7fe f9b5 	bl	800de8c <ld_dword>
 800fb22:	4603      	mov	r3, r0
 800fb24:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800fb28:	4a0a      	ldr	r2, [pc, #40]	; (800fb54 <check_fs+0xa4>)
 800fb2a:	4293      	cmp	r3, r2
 800fb2c:	d101      	bne.n	800fb32 <check_fs+0x82>
 800fb2e:	2300      	movs	r3, #0
 800fb30:	e00c      	b.n	800fb4c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800fb32:	687b      	ldr	r3, [r7, #4]
 800fb34:	3338      	adds	r3, #56	; 0x38
 800fb36:	3352      	adds	r3, #82	; 0x52
 800fb38:	4618      	mov	r0, r3
 800fb3a:	f7fe f9a7 	bl	800de8c <ld_dword>
 800fb3e:	4603      	mov	r3, r0
 800fb40:	4a05      	ldr	r2, [pc, #20]	; (800fb58 <check_fs+0xa8>)
 800fb42:	4293      	cmp	r3, r2
 800fb44:	d101      	bne.n	800fb4a <check_fs+0x9a>
 800fb46:	2300      	movs	r3, #0
 800fb48:	e000      	b.n	800fb4c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800fb4a:	2302      	movs	r3, #2
}
 800fb4c:	4618      	mov	r0, r3
 800fb4e:	3708      	adds	r7, #8
 800fb50:	46bd      	mov	sp, r7
 800fb52:	bd80      	pop	{r7, pc}
 800fb54:	00544146 	.word	0x00544146
 800fb58:	33544146 	.word	0x33544146

0800fb5c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800fb5c:	b580      	push	{r7, lr}
 800fb5e:	b096      	sub	sp, #88	; 0x58
 800fb60:	af00      	add	r7, sp, #0
 800fb62:	60f8      	str	r0, [r7, #12]
 800fb64:	60b9      	str	r1, [r7, #8]
 800fb66:	4613      	mov	r3, r2
 800fb68:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800fb6a:	68bb      	ldr	r3, [r7, #8]
 800fb6c:	2200      	movs	r2, #0
 800fb6e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800fb70:	68f8      	ldr	r0, [r7, #12]
 800fb72:	f7ff ff59 	bl	800fa28 <get_ldnumber>
 800fb76:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800fb78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fb7a:	2b00      	cmp	r3, #0
 800fb7c:	da01      	bge.n	800fb82 <find_volume+0x26>
 800fb7e:	230b      	movs	r3, #11
 800fb80:	e265      	b.n	801004e <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800fb82:	4a9f      	ldr	r2, [pc, #636]	; (800fe00 <find_volume+0x2a4>)
 800fb84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fb86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fb8a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800fb8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb8e:	2b00      	cmp	r3, #0
 800fb90:	d101      	bne.n	800fb96 <find_volume+0x3a>
 800fb92:	230c      	movs	r3, #12
 800fb94:	e25b      	b.n	801004e <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800fb96:	68bb      	ldr	r3, [r7, #8]
 800fb98:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fb9a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800fb9c:	79fb      	ldrb	r3, [r7, #7]
 800fb9e:	f023 0301 	bic.w	r3, r3, #1
 800fba2:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800fba4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fba6:	781b      	ldrb	r3, [r3, #0]
 800fba8:	2b00      	cmp	r3, #0
 800fbaa:	d01a      	beq.n	800fbe2 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800fbac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fbae:	785b      	ldrb	r3, [r3, #1]
 800fbb0:	4618      	mov	r0, r3
 800fbb2:	f7fe f8b5 	bl	800dd20 <disk_status>
 800fbb6:	4603      	mov	r3, r0
 800fbb8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800fbbc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fbc0:	f003 0301 	and.w	r3, r3, #1
 800fbc4:	2b00      	cmp	r3, #0
 800fbc6:	d10c      	bne.n	800fbe2 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800fbc8:	79fb      	ldrb	r3, [r7, #7]
 800fbca:	2b00      	cmp	r3, #0
 800fbcc:	d007      	beq.n	800fbde <find_volume+0x82>
 800fbce:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fbd2:	f003 0304 	and.w	r3, r3, #4
 800fbd6:	2b00      	cmp	r3, #0
 800fbd8:	d001      	beq.n	800fbde <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800fbda:	230a      	movs	r3, #10
 800fbdc:	e237      	b.n	801004e <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 800fbde:	2300      	movs	r3, #0
 800fbe0:	e235      	b.n	801004e <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800fbe2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fbe4:	2200      	movs	r2, #0
 800fbe6:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800fbe8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fbea:	b2da      	uxtb	r2, r3
 800fbec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fbee:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800fbf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fbf2:	785b      	ldrb	r3, [r3, #1]
 800fbf4:	4618      	mov	r0, r3
 800fbf6:	f7fe f8ad 	bl	800dd54 <disk_initialize>
 800fbfa:	4603      	mov	r3, r0
 800fbfc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800fc00:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fc04:	f003 0301 	and.w	r3, r3, #1
 800fc08:	2b00      	cmp	r3, #0
 800fc0a:	d001      	beq.n	800fc10 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800fc0c:	2303      	movs	r3, #3
 800fc0e:	e21e      	b.n	801004e <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800fc10:	79fb      	ldrb	r3, [r7, #7]
 800fc12:	2b00      	cmp	r3, #0
 800fc14:	d007      	beq.n	800fc26 <find_volume+0xca>
 800fc16:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fc1a:	f003 0304 	and.w	r3, r3, #4
 800fc1e:	2b00      	cmp	r3, #0
 800fc20:	d001      	beq.n	800fc26 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800fc22:	230a      	movs	r3, #10
 800fc24:	e213      	b.n	801004e <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800fc26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc28:	7858      	ldrb	r0, [r3, #1]
 800fc2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc2c:	330c      	adds	r3, #12
 800fc2e:	461a      	mov	r2, r3
 800fc30:	2102      	movs	r1, #2
 800fc32:	f7fe f8f5 	bl	800de20 <disk_ioctl>
 800fc36:	4603      	mov	r3, r0
 800fc38:	2b00      	cmp	r3, #0
 800fc3a:	d001      	beq.n	800fc40 <find_volume+0xe4>
 800fc3c:	2301      	movs	r3, #1
 800fc3e:	e206      	b.n	801004e <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800fc40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc42:	899b      	ldrh	r3, [r3, #12]
 800fc44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fc48:	d80d      	bhi.n	800fc66 <find_volume+0x10a>
 800fc4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc4c:	899b      	ldrh	r3, [r3, #12]
 800fc4e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fc52:	d308      	bcc.n	800fc66 <find_volume+0x10a>
 800fc54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc56:	899b      	ldrh	r3, [r3, #12]
 800fc58:	461a      	mov	r2, r3
 800fc5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc5c:	899b      	ldrh	r3, [r3, #12]
 800fc5e:	3b01      	subs	r3, #1
 800fc60:	4013      	ands	r3, r2
 800fc62:	2b00      	cmp	r3, #0
 800fc64:	d001      	beq.n	800fc6a <find_volume+0x10e>
 800fc66:	2301      	movs	r3, #1
 800fc68:	e1f1      	b.n	801004e <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800fc6a:	2300      	movs	r3, #0
 800fc6c:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800fc6e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800fc70:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800fc72:	f7ff ff1d 	bl	800fab0 <check_fs>
 800fc76:	4603      	mov	r3, r0
 800fc78:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800fc7c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800fc80:	2b02      	cmp	r3, #2
 800fc82:	d149      	bne.n	800fd18 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800fc84:	2300      	movs	r3, #0
 800fc86:	643b      	str	r3, [r7, #64]	; 0x40
 800fc88:	e01e      	b.n	800fcc8 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800fc8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc8c:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800fc90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fc92:	011b      	lsls	r3, r3, #4
 800fc94:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800fc98:	4413      	add	r3, r2
 800fc9a:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800fc9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc9e:	3304      	adds	r3, #4
 800fca0:	781b      	ldrb	r3, [r3, #0]
 800fca2:	2b00      	cmp	r3, #0
 800fca4:	d006      	beq.n	800fcb4 <find_volume+0x158>
 800fca6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fca8:	3308      	adds	r3, #8
 800fcaa:	4618      	mov	r0, r3
 800fcac:	f7fe f8ee 	bl	800de8c <ld_dword>
 800fcb0:	4602      	mov	r2, r0
 800fcb2:	e000      	b.n	800fcb6 <find_volume+0x15a>
 800fcb4:	2200      	movs	r2, #0
 800fcb6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fcb8:	009b      	lsls	r3, r3, #2
 800fcba:	3358      	adds	r3, #88	; 0x58
 800fcbc:	443b      	add	r3, r7
 800fcbe:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800fcc2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fcc4:	3301      	adds	r3, #1
 800fcc6:	643b      	str	r3, [r7, #64]	; 0x40
 800fcc8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fcca:	2b03      	cmp	r3, #3
 800fccc:	d9dd      	bls.n	800fc8a <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800fcce:	2300      	movs	r3, #0
 800fcd0:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800fcd2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fcd4:	2b00      	cmp	r3, #0
 800fcd6:	d002      	beq.n	800fcde <find_volume+0x182>
 800fcd8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fcda:	3b01      	subs	r3, #1
 800fcdc:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800fcde:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fce0:	009b      	lsls	r3, r3, #2
 800fce2:	3358      	adds	r3, #88	; 0x58
 800fce4:	443b      	add	r3, r7
 800fce6:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800fcea:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800fcec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fcee:	2b00      	cmp	r3, #0
 800fcf0:	d005      	beq.n	800fcfe <find_volume+0x1a2>
 800fcf2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800fcf4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800fcf6:	f7ff fedb 	bl	800fab0 <check_fs>
 800fcfa:	4603      	mov	r3, r0
 800fcfc:	e000      	b.n	800fd00 <find_volume+0x1a4>
 800fcfe:	2303      	movs	r3, #3
 800fd00:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800fd04:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800fd08:	2b01      	cmp	r3, #1
 800fd0a:	d905      	bls.n	800fd18 <find_volume+0x1bc>
 800fd0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fd0e:	3301      	adds	r3, #1
 800fd10:	643b      	str	r3, [r7, #64]	; 0x40
 800fd12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fd14:	2b03      	cmp	r3, #3
 800fd16:	d9e2      	bls.n	800fcde <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800fd18:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800fd1c:	2b04      	cmp	r3, #4
 800fd1e:	d101      	bne.n	800fd24 <find_volume+0x1c8>
 800fd20:	2301      	movs	r3, #1
 800fd22:	e194      	b.n	801004e <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800fd24:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800fd28:	2b01      	cmp	r3, #1
 800fd2a:	d901      	bls.n	800fd30 <find_volume+0x1d4>
 800fd2c:	230d      	movs	r3, #13
 800fd2e:	e18e      	b.n	801004e <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800fd30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd32:	3338      	adds	r3, #56	; 0x38
 800fd34:	330b      	adds	r3, #11
 800fd36:	4618      	mov	r0, r3
 800fd38:	f7fe f890 	bl	800de5c <ld_word>
 800fd3c:	4603      	mov	r3, r0
 800fd3e:	461a      	mov	r2, r3
 800fd40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd42:	899b      	ldrh	r3, [r3, #12]
 800fd44:	429a      	cmp	r2, r3
 800fd46:	d001      	beq.n	800fd4c <find_volume+0x1f0>
 800fd48:	230d      	movs	r3, #13
 800fd4a:	e180      	b.n	801004e <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800fd4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd4e:	3338      	adds	r3, #56	; 0x38
 800fd50:	3316      	adds	r3, #22
 800fd52:	4618      	mov	r0, r3
 800fd54:	f7fe f882 	bl	800de5c <ld_word>
 800fd58:	4603      	mov	r3, r0
 800fd5a:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800fd5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fd5e:	2b00      	cmp	r3, #0
 800fd60:	d106      	bne.n	800fd70 <find_volume+0x214>
 800fd62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd64:	3338      	adds	r3, #56	; 0x38
 800fd66:	3324      	adds	r3, #36	; 0x24
 800fd68:	4618      	mov	r0, r3
 800fd6a:	f7fe f88f 	bl	800de8c <ld_dword>
 800fd6e:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800fd70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd72:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800fd74:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800fd76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd78:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800fd7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd7e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800fd80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd82:	789b      	ldrb	r3, [r3, #2]
 800fd84:	2b01      	cmp	r3, #1
 800fd86:	d005      	beq.n	800fd94 <find_volume+0x238>
 800fd88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd8a:	789b      	ldrb	r3, [r3, #2]
 800fd8c:	2b02      	cmp	r3, #2
 800fd8e:	d001      	beq.n	800fd94 <find_volume+0x238>
 800fd90:	230d      	movs	r3, #13
 800fd92:	e15c      	b.n	801004e <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800fd94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd96:	789b      	ldrb	r3, [r3, #2]
 800fd98:	461a      	mov	r2, r3
 800fd9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fd9c:	fb02 f303 	mul.w	r3, r2, r3
 800fda0:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800fda2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fda4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800fda8:	b29a      	uxth	r2, r3
 800fdaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fdac:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800fdae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fdb0:	895b      	ldrh	r3, [r3, #10]
 800fdb2:	2b00      	cmp	r3, #0
 800fdb4:	d008      	beq.n	800fdc8 <find_volume+0x26c>
 800fdb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fdb8:	895b      	ldrh	r3, [r3, #10]
 800fdba:	461a      	mov	r2, r3
 800fdbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fdbe:	895b      	ldrh	r3, [r3, #10]
 800fdc0:	3b01      	subs	r3, #1
 800fdc2:	4013      	ands	r3, r2
 800fdc4:	2b00      	cmp	r3, #0
 800fdc6:	d001      	beq.n	800fdcc <find_volume+0x270>
 800fdc8:	230d      	movs	r3, #13
 800fdca:	e140      	b.n	801004e <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800fdcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fdce:	3338      	adds	r3, #56	; 0x38
 800fdd0:	3311      	adds	r3, #17
 800fdd2:	4618      	mov	r0, r3
 800fdd4:	f7fe f842 	bl	800de5c <ld_word>
 800fdd8:	4603      	mov	r3, r0
 800fdda:	461a      	mov	r2, r3
 800fddc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fdde:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800fde0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fde2:	891b      	ldrh	r3, [r3, #8]
 800fde4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fde6:	8992      	ldrh	r2, [r2, #12]
 800fde8:	0952      	lsrs	r2, r2, #5
 800fdea:	b292      	uxth	r2, r2
 800fdec:	fbb3 f1f2 	udiv	r1, r3, r2
 800fdf0:	fb01 f202 	mul.w	r2, r1, r2
 800fdf4:	1a9b      	subs	r3, r3, r2
 800fdf6:	b29b      	uxth	r3, r3
 800fdf8:	2b00      	cmp	r3, #0
 800fdfa:	d003      	beq.n	800fe04 <find_volume+0x2a8>
 800fdfc:	230d      	movs	r3, #13
 800fdfe:	e126      	b.n	801004e <find_volume+0x4f2>
 800fe00:	20011810 	.word	0x20011810

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800fe04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe06:	3338      	adds	r3, #56	; 0x38
 800fe08:	3313      	adds	r3, #19
 800fe0a:	4618      	mov	r0, r3
 800fe0c:	f7fe f826 	bl	800de5c <ld_word>
 800fe10:	4603      	mov	r3, r0
 800fe12:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800fe14:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fe16:	2b00      	cmp	r3, #0
 800fe18:	d106      	bne.n	800fe28 <find_volume+0x2cc>
 800fe1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe1c:	3338      	adds	r3, #56	; 0x38
 800fe1e:	3320      	adds	r3, #32
 800fe20:	4618      	mov	r0, r3
 800fe22:	f7fe f833 	bl	800de8c <ld_dword>
 800fe26:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800fe28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe2a:	3338      	adds	r3, #56	; 0x38
 800fe2c:	330e      	adds	r3, #14
 800fe2e:	4618      	mov	r0, r3
 800fe30:	f7fe f814 	bl	800de5c <ld_word>
 800fe34:	4603      	mov	r3, r0
 800fe36:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800fe38:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800fe3a:	2b00      	cmp	r3, #0
 800fe3c:	d101      	bne.n	800fe42 <find_volume+0x2e6>
 800fe3e:	230d      	movs	r3, #13
 800fe40:	e105      	b.n	801004e <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800fe42:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800fe44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fe46:	4413      	add	r3, r2
 800fe48:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fe4a:	8911      	ldrh	r1, [r2, #8]
 800fe4c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fe4e:	8992      	ldrh	r2, [r2, #12]
 800fe50:	0952      	lsrs	r2, r2, #5
 800fe52:	b292      	uxth	r2, r2
 800fe54:	fbb1 f2f2 	udiv	r2, r1, r2
 800fe58:	b292      	uxth	r2, r2
 800fe5a:	4413      	add	r3, r2
 800fe5c:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800fe5e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800fe60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe62:	429a      	cmp	r2, r3
 800fe64:	d201      	bcs.n	800fe6a <find_volume+0x30e>
 800fe66:	230d      	movs	r3, #13
 800fe68:	e0f1      	b.n	801004e <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800fe6a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800fe6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe6e:	1ad3      	subs	r3, r2, r3
 800fe70:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fe72:	8952      	ldrh	r2, [r2, #10]
 800fe74:	fbb3 f3f2 	udiv	r3, r3, r2
 800fe78:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800fe7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe7c:	2b00      	cmp	r3, #0
 800fe7e:	d101      	bne.n	800fe84 <find_volume+0x328>
 800fe80:	230d      	movs	r3, #13
 800fe82:	e0e4      	b.n	801004e <find_volume+0x4f2>
		fmt = FS_FAT32;
 800fe84:	2303      	movs	r3, #3
 800fe86:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800fe8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe8c:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800fe90:	4293      	cmp	r3, r2
 800fe92:	d802      	bhi.n	800fe9a <find_volume+0x33e>
 800fe94:	2302      	movs	r3, #2
 800fe96:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800fe9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe9c:	f640 72f5 	movw	r2, #4085	; 0xff5
 800fea0:	4293      	cmp	r3, r2
 800fea2:	d802      	bhi.n	800feaa <find_volume+0x34e>
 800fea4:	2301      	movs	r3, #1
 800fea6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800feaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800feac:	1c9a      	adds	r2, r3, #2
 800feae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800feb0:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 800feb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800feb4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800feb6:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800feb8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800feba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800febc:	441a      	add	r2, r3
 800febe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fec0:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 800fec2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800fec4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fec6:	441a      	add	r2, r3
 800fec8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800feca:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 800fecc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800fed0:	2b03      	cmp	r3, #3
 800fed2:	d11e      	bne.n	800ff12 <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800fed4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fed6:	3338      	adds	r3, #56	; 0x38
 800fed8:	332a      	adds	r3, #42	; 0x2a
 800feda:	4618      	mov	r0, r3
 800fedc:	f7fd ffbe 	bl	800de5c <ld_word>
 800fee0:	4603      	mov	r3, r0
 800fee2:	2b00      	cmp	r3, #0
 800fee4:	d001      	beq.n	800feea <find_volume+0x38e>
 800fee6:	230d      	movs	r3, #13
 800fee8:	e0b1      	b.n	801004e <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800feea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800feec:	891b      	ldrh	r3, [r3, #8]
 800feee:	2b00      	cmp	r3, #0
 800fef0:	d001      	beq.n	800fef6 <find_volume+0x39a>
 800fef2:	230d      	movs	r3, #13
 800fef4:	e0ab      	b.n	801004e <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800fef6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fef8:	3338      	adds	r3, #56	; 0x38
 800fefa:	332c      	adds	r3, #44	; 0x2c
 800fefc:	4618      	mov	r0, r3
 800fefe:	f7fd ffc5 	bl	800de8c <ld_dword>
 800ff02:	4602      	mov	r2, r0
 800ff04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff06:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800ff08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff0a:	69db      	ldr	r3, [r3, #28]
 800ff0c:	009b      	lsls	r3, r3, #2
 800ff0e:	647b      	str	r3, [r7, #68]	; 0x44
 800ff10:	e01f      	b.n	800ff52 <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800ff12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff14:	891b      	ldrh	r3, [r3, #8]
 800ff16:	2b00      	cmp	r3, #0
 800ff18:	d101      	bne.n	800ff1e <find_volume+0x3c2>
 800ff1a:	230d      	movs	r3, #13
 800ff1c:	e097      	b.n	801004e <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800ff1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff20:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ff22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ff24:	441a      	add	r2, r3
 800ff26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff28:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800ff2a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ff2e:	2b02      	cmp	r3, #2
 800ff30:	d103      	bne.n	800ff3a <find_volume+0x3de>
 800ff32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff34:	69db      	ldr	r3, [r3, #28]
 800ff36:	005b      	lsls	r3, r3, #1
 800ff38:	e00a      	b.n	800ff50 <find_volume+0x3f4>
 800ff3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff3c:	69da      	ldr	r2, [r3, #28]
 800ff3e:	4613      	mov	r3, r2
 800ff40:	005b      	lsls	r3, r3, #1
 800ff42:	4413      	add	r3, r2
 800ff44:	085a      	lsrs	r2, r3, #1
 800ff46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff48:	69db      	ldr	r3, [r3, #28]
 800ff4a:	f003 0301 	and.w	r3, r3, #1
 800ff4e:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800ff50:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800ff52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff54:	6a1a      	ldr	r2, [r3, #32]
 800ff56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff58:	899b      	ldrh	r3, [r3, #12]
 800ff5a:	4619      	mov	r1, r3
 800ff5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ff5e:	440b      	add	r3, r1
 800ff60:	3b01      	subs	r3, #1
 800ff62:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ff64:	8989      	ldrh	r1, [r1, #12]
 800ff66:	fbb3 f3f1 	udiv	r3, r3, r1
 800ff6a:	429a      	cmp	r2, r3
 800ff6c:	d201      	bcs.n	800ff72 <find_volume+0x416>
 800ff6e:	230d      	movs	r3, #13
 800ff70:	e06d      	b.n	801004e <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800ff72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff74:	f04f 32ff 	mov.w	r2, #4294967295
 800ff78:	619a      	str	r2, [r3, #24]
 800ff7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff7c:	699a      	ldr	r2, [r3, #24]
 800ff7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff80:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 800ff82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff84:	2280      	movs	r2, #128	; 0x80
 800ff86:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800ff88:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ff8c:	2b03      	cmp	r3, #3
 800ff8e:	d149      	bne.n	8010024 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800ff90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff92:	3338      	adds	r3, #56	; 0x38
 800ff94:	3330      	adds	r3, #48	; 0x30
 800ff96:	4618      	mov	r0, r3
 800ff98:	f7fd ff60 	bl	800de5c <ld_word>
 800ff9c:	4603      	mov	r3, r0
 800ff9e:	2b01      	cmp	r3, #1
 800ffa0:	d140      	bne.n	8010024 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 800ffa2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ffa4:	3301      	adds	r3, #1
 800ffa6:	4619      	mov	r1, r3
 800ffa8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ffaa:	f7fe fa07 	bl	800e3bc <move_window>
 800ffae:	4603      	mov	r3, r0
 800ffb0:	2b00      	cmp	r3, #0
 800ffb2:	d137      	bne.n	8010024 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 800ffb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ffb6:	2200      	movs	r2, #0
 800ffb8:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800ffba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ffbc:	3338      	adds	r3, #56	; 0x38
 800ffbe:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800ffc2:	4618      	mov	r0, r3
 800ffc4:	f7fd ff4a 	bl	800de5c <ld_word>
 800ffc8:	4603      	mov	r3, r0
 800ffca:	461a      	mov	r2, r3
 800ffcc:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800ffd0:	429a      	cmp	r2, r3
 800ffd2:	d127      	bne.n	8010024 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800ffd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ffd6:	3338      	adds	r3, #56	; 0x38
 800ffd8:	4618      	mov	r0, r3
 800ffda:	f7fd ff57 	bl	800de8c <ld_dword>
 800ffde:	4603      	mov	r3, r0
 800ffe0:	4a1d      	ldr	r2, [pc, #116]	; (8010058 <find_volume+0x4fc>)
 800ffe2:	4293      	cmp	r3, r2
 800ffe4:	d11e      	bne.n	8010024 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800ffe6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ffe8:	3338      	adds	r3, #56	; 0x38
 800ffea:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800ffee:	4618      	mov	r0, r3
 800fff0:	f7fd ff4c 	bl	800de8c <ld_dword>
 800fff4:	4603      	mov	r3, r0
 800fff6:	4a19      	ldr	r2, [pc, #100]	; (801005c <find_volume+0x500>)
 800fff8:	4293      	cmp	r3, r2
 800fffa:	d113      	bne.n	8010024 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800fffc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fffe:	3338      	adds	r3, #56	; 0x38
 8010000:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8010004:	4618      	mov	r0, r3
 8010006:	f7fd ff41 	bl	800de8c <ld_dword>
 801000a:	4602      	mov	r2, r0
 801000c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801000e:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8010010:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010012:	3338      	adds	r3, #56	; 0x38
 8010014:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8010018:	4618      	mov	r0, r3
 801001a:	f7fd ff37 	bl	800de8c <ld_dword>
 801001e:	4602      	mov	r2, r0
 8010020:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010022:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8010024:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010026:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 801002a:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 801002c:	4b0c      	ldr	r3, [pc, #48]	; (8010060 <find_volume+0x504>)
 801002e:	881b      	ldrh	r3, [r3, #0]
 8010030:	3301      	adds	r3, #1
 8010032:	b29a      	uxth	r2, r3
 8010034:	4b0a      	ldr	r3, [pc, #40]	; (8010060 <find_volume+0x504>)
 8010036:	801a      	strh	r2, [r3, #0]
 8010038:	4b09      	ldr	r3, [pc, #36]	; (8010060 <find_volume+0x504>)
 801003a:	881a      	ldrh	r2, [r3, #0]
 801003c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801003e:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 8010040:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010042:	4a08      	ldr	r2, [pc, #32]	; (8010064 <find_volume+0x508>)
 8010044:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8010046:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8010048:	f7fe f950 	bl	800e2ec <clear_lock>
#endif
	return FR_OK;
 801004c:	2300      	movs	r3, #0
}
 801004e:	4618      	mov	r0, r3
 8010050:	3758      	adds	r7, #88	; 0x58
 8010052:	46bd      	mov	sp, r7
 8010054:	bd80      	pop	{r7, pc}
 8010056:	bf00      	nop
 8010058:	41615252 	.word	0x41615252
 801005c:	61417272 	.word	0x61417272
 8010060:	20011814 	.word	0x20011814
 8010064:	20011838 	.word	0x20011838

08010068 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8010068:	b580      	push	{r7, lr}
 801006a:	b084      	sub	sp, #16
 801006c:	af00      	add	r7, sp, #0
 801006e:	6078      	str	r0, [r7, #4]
 8010070:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8010072:	2309      	movs	r3, #9
 8010074:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8010076:	687b      	ldr	r3, [r7, #4]
 8010078:	2b00      	cmp	r3, #0
 801007a:	d01c      	beq.n	80100b6 <validate+0x4e>
 801007c:	687b      	ldr	r3, [r7, #4]
 801007e:	681b      	ldr	r3, [r3, #0]
 8010080:	2b00      	cmp	r3, #0
 8010082:	d018      	beq.n	80100b6 <validate+0x4e>
 8010084:	687b      	ldr	r3, [r7, #4]
 8010086:	681b      	ldr	r3, [r3, #0]
 8010088:	781b      	ldrb	r3, [r3, #0]
 801008a:	2b00      	cmp	r3, #0
 801008c:	d013      	beq.n	80100b6 <validate+0x4e>
 801008e:	687b      	ldr	r3, [r7, #4]
 8010090:	889a      	ldrh	r2, [r3, #4]
 8010092:	687b      	ldr	r3, [r7, #4]
 8010094:	681b      	ldr	r3, [r3, #0]
 8010096:	88db      	ldrh	r3, [r3, #6]
 8010098:	429a      	cmp	r2, r3
 801009a:	d10c      	bne.n	80100b6 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 801009c:	687b      	ldr	r3, [r7, #4]
 801009e:	681b      	ldr	r3, [r3, #0]
 80100a0:	785b      	ldrb	r3, [r3, #1]
 80100a2:	4618      	mov	r0, r3
 80100a4:	f7fd fe3c 	bl	800dd20 <disk_status>
 80100a8:	4603      	mov	r3, r0
 80100aa:	f003 0301 	and.w	r3, r3, #1
 80100ae:	2b00      	cmp	r3, #0
 80100b0:	d101      	bne.n	80100b6 <validate+0x4e>
			res = FR_OK;
 80100b2:	2300      	movs	r3, #0
 80100b4:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80100b6:	7bfb      	ldrb	r3, [r7, #15]
 80100b8:	2b00      	cmp	r3, #0
 80100ba:	d102      	bne.n	80100c2 <validate+0x5a>
 80100bc:	687b      	ldr	r3, [r7, #4]
 80100be:	681b      	ldr	r3, [r3, #0]
 80100c0:	e000      	b.n	80100c4 <validate+0x5c>
 80100c2:	2300      	movs	r3, #0
 80100c4:	683a      	ldr	r2, [r7, #0]
 80100c6:	6013      	str	r3, [r2, #0]
	return res;
 80100c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80100ca:	4618      	mov	r0, r3
 80100cc:	3710      	adds	r7, #16
 80100ce:	46bd      	mov	sp, r7
 80100d0:	bd80      	pop	{r7, pc}
	...

080100d4 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80100d4:	b580      	push	{r7, lr}
 80100d6:	b088      	sub	sp, #32
 80100d8:	af00      	add	r7, sp, #0
 80100da:	60f8      	str	r0, [r7, #12]
 80100dc:	60b9      	str	r1, [r7, #8]
 80100de:	4613      	mov	r3, r2
 80100e0:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80100e2:	68bb      	ldr	r3, [r7, #8]
 80100e4:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80100e6:	f107 0310 	add.w	r3, r7, #16
 80100ea:	4618      	mov	r0, r3
 80100ec:	f7ff fc9c 	bl	800fa28 <get_ldnumber>
 80100f0:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80100f2:	69fb      	ldr	r3, [r7, #28]
 80100f4:	2b00      	cmp	r3, #0
 80100f6:	da01      	bge.n	80100fc <f_mount+0x28>
 80100f8:	230b      	movs	r3, #11
 80100fa:	e02b      	b.n	8010154 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80100fc:	4a17      	ldr	r2, [pc, #92]	; (801015c <f_mount+0x88>)
 80100fe:	69fb      	ldr	r3, [r7, #28]
 8010100:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010104:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8010106:	69bb      	ldr	r3, [r7, #24]
 8010108:	2b00      	cmp	r3, #0
 801010a:	d005      	beq.n	8010118 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 801010c:	69b8      	ldr	r0, [r7, #24]
 801010e:	f7fe f8ed 	bl	800e2ec <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8010112:	69bb      	ldr	r3, [r7, #24]
 8010114:	2200      	movs	r2, #0
 8010116:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8010118:	68fb      	ldr	r3, [r7, #12]
 801011a:	2b00      	cmp	r3, #0
 801011c:	d002      	beq.n	8010124 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 801011e:	68fb      	ldr	r3, [r7, #12]
 8010120:	2200      	movs	r2, #0
 8010122:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8010124:	68fa      	ldr	r2, [r7, #12]
 8010126:	490d      	ldr	r1, [pc, #52]	; (801015c <f_mount+0x88>)
 8010128:	69fb      	ldr	r3, [r7, #28]
 801012a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 801012e:	68fb      	ldr	r3, [r7, #12]
 8010130:	2b00      	cmp	r3, #0
 8010132:	d002      	beq.n	801013a <f_mount+0x66>
 8010134:	79fb      	ldrb	r3, [r7, #7]
 8010136:	2b01      	cmp	r3, #1
 8010138:	d001      	beq.n	801013e <f_mount+0x6a>
 801013a:	2300      	movs	r3, #0
 801013c:	e00a      	b.n	8010154 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 801013e:	f107 010c 	add.w	r1, r7, #12
 8010142:	f107 0308 	add.w	r3, r7, #8
 8010146:	2200      	movs	r2, #0
 8010148:	4618      	mov	r0, r3
 801014a:	f7ff fd07 	bl	800fb5c <find_volume>
 801014e:	4603      	mov	r3, r0
 8010150:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8010152:	7dfb      	ldrb	r3, [r7, #23]
}
 8010154:	4618      	mov	r0, r3
 8010156:	3720      	adds	r7, #32
 8010158:	46bd      	mov	sp, r7
 801015a:	bd80      	pop	{r7, pc}
 801015c:	20011810 	.word	0x20011810

08010160 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8010160:	b580      	push	{r7, lr}
 8010162:	b09a      	sub	sp, #104	; 0x68
 8010164:	af00      	add	r7, sp, #0
 8010166:	60f8      	str	r0, [r7, #12]
 8010168:	60b9      	str	r1, [r7, #8]
 801016a:	4613      	mov	r3, r2
 801016c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 801016e:	68fb      	ldr	r3, [r7, #12]
 8010170:	2b00      	cmp	r3, #0
 8010172:	d101      	bne.n	8010178 <f_open+0x18>
 8010174:	2309      	movs	r3, #9
 8010176:	e1bb      	b.n	80104f0 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8010178:	79fb      	ldrb	r3, [r7, #7]
 801017a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801017e:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8010180:	79fa      	ldrb	r2, [r7, #7]
 8010182:	f107 0114 	add.w	r1, r7, #20
 8010186:	f107 0308 	add.w	r3, r7, #8
 801018a:	4618      	mov	r0, r3
 801018c:	f7ff fce6 	bl	800fb5c <find_volume>
 8010190:	4603      	mov	r3, r0
 8010192:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 8010196:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801019a:	2b00      	cmp	r3, #0
 801019c:	f040 819f 	bne.w	80104de <f_open+0x37e>
		dj.obj.fs = fs;
 80101a0:	697b      	ldr	r3, [r7, #20]
 80101a2:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80101a4:	68ba      	ldr	r2, [r7, #8]
 80101a6:	f107 0318 	add.w	r3, r7, #24
 80101aa:	4611      	mov	r1, r2
 80101ac:	4618      	mov	r0, r3
 80101ae:	f7ff fbc5 	bl	800f93c <follow_path>
 80101b2:	4603      	mov	r3, r0
 80101b4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80101b8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80101bc:	2b00      	cmp	r3, #0
 80101be:	d11a      	bne.n	80101f6 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80101c0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80101c4:	b25b      	sxtb	r3, r3
 80101c6:	2b00      	cmp	r3, #0
 80101c8:	da03      	bge.n	80101d2 <f_open+0x72>
				res = FR_INVALID_NAME;
 80101ca:	2306      	movs	r3, #6
 80101cc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80101d0:	e011      	b.n	80101f6 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80101d2:	79fb      	ldrb	r3, [r7, #7]
 80101d4:	f023 0301 	bic.w	r3, r3, #1
 80101d8:	2b00      	cmp	r3, #0
 80101da:	bf14      	ite	ne
 80101dc:	2301      	movne	r3, #1
 80101de:	2300      	moveq	r3, #0
 80101e0:	b2db      	uxtb	r3, r3
 80101e2:	461a      	mov	r2, r3
 80101e4:	f107 0318 	add.w	r3, r7, #24
 80101e8:	4611      	mov	r1, r2
 80101ea:	4618      	mov	r0, r3
 80101ec:	f7fd ff36 	bl	800e05c <chk_lock>
 80101f0:	4603      	mov	r3, r0
 80101f2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80101f6:	79fb      	ldrb	r3, [r7, #7]
 80101f8:	f003 031c 	and.w	r3, r3, #28
 80101fc:	2b00      	cmp	r3, #0
 80101fe:	d07f      	beq.n	8010300 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8010200:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8010204:	2b00      	cmp	r3, #0
 8010206:	d017      	beq.n	8010238 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8010208:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801020c:	2b04      	cmp	r3, #4
 801020e:	d10e      	bne.n	801022e <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8010210:	f7fd ff80 	bl	800e114 <enq_lock>
 8010214:	4603      	mov	r3, r0
 8010216:	2b00      	cmp	r3, #0
 8010218:	d006      	beq.n	8010228 <f_open+0xc8>
 801021a:	f107 0318 	add.w	r3, r7, #24
 801021e:	4618      	mov	r0, r3
 8010220:	f7ff f8dc 	bl	800f3dc <dir_register>
 8010224:	4603      	mov	r3, r0
 8010226:	e000      	b.n	801022a <f_open+0xca>
 8010228:	2312      	movs	r3, #18
 801022a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 801022e:	79fb      	ldrb	r3, [r7, #7]
 8010230:	f043 0308 	orr.w	r3, r3, #8
 8010234:	71fb      	strb	r3, [r7, #7]
 8010236:	e010      	b.n	801025a <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8010238:	7fbb      	ldrb	r3, [r7, #30]
 801023a:	f003 0311 	and.w	r3, r3, #17
 801023e:	2b00      	cmp	r3, #0
 8010240:	d003      	beq.n	801024a <f_open+0xea>
					res = FR_DENIED;
 8010242:	2307      	movs	r3, #7
 8010244:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8010248:	e007      	b.n	801025a <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 801024a:	79fb      	ldrb	r3, [r7, #7]
 801024c:	f003 0304 	and.w	r3, r3, #4
 8010250:	2b00      	cmp	r3, #0
 8010252:	d002      	beq.n	801025a <f_open+0xfa>
 8010254:	2308      	movs	r3, #8
 8010256:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 801025a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801025e:	2b00      	cmp	r3, #0
 8010260:	d168      	bne.n	8010334 <f_open+0x1d4>
 8010262:	79fb      	ldrb	r3, [r7, #7]
 8010264:	f003 0308 	and.w	r3, r3, #8
 8010268:	2b00      	cmp	r3, #0
 801026a:	d063      	beq.n	8010334 <f_open+0x1d4>
				dw = GET_FATTIME();
 801026c:	f7fd fbb8 	bl	800d9e0 <get_fattime>
 8010270:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8010272:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010274:	330e      	adds	r3, #14
 8010276:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8010278:	4618      	mov	r0, r3
 801027a:	f7fd fe45 	bl	800df08 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 801027e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010280:	3316      	adds	r3, #22
 8010282:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8010284:	4618      	mov	r0, r3
 8010286:	f7fd fe3f 	bl	800df08 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 801028a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801028c:	330b      	adds	r3, #11
 801028e:	2220      	movs	r2, #32
 8010290:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8010292:	697b      	ldr	r3, [r7, #20]
 8010294:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010296:	4611      	mov	r1, r2
 8010298:	4618      	mov	r0, r3
 801029a:	f7fe fe17 	bl	800eecc <ld_clust>
 801029e:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80102a0:	697b      	ldr	r3, [r7, #20]
 80102a2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80102a4:	2200      	movs	r2, #0
 80102a6:	4618      	mov	r0, r3
 80102a8:	f7fe fe2f 	bl	800ef0a <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80102ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80102ae:	331c      	adds	r3, #28
 80102b0:	2100      	movs	r1, #0
 80102b2:	4618      	mov	r0, r3
 80102b4:	f7fd fe28 	bl	800df08 <st_dword>
					fs->wflag = 1;
 80102b8:	697b      	ldr	r3, [r7, #20]
 80102ba:	2201      	movs	r2, #1
 80102bc:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80102be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80102c0:	2b00      	cmp	r3, #0
 80102c2:	d037      	beq.n	8010334 <f_open+0x1d4>
						dw = fs->winsect;
 80102c4:	697b      	ldr	r3, [r7, #20]
 80102c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80102c8:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 80102ca:	f107 0318 	add.w	r3, r7, #24
 80102ce:	2200      	movs	r2, #0
 80102d0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80102d2:	4618      	mov	r0, r3
 80102d4:	f7fe fb1f 	bl	800e916 <remove_chain>
 80102d8:	4603      	mov	r3, r0
 80102da:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 80102de:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80102e2:	2b00      	cmp	r3, #0
 80102e4:	d126      	bne.n	8010334 <f_open+0x1d4>
							res = move_window(fs, dw);
 80102e6:	697b      	ldr	r3, [r7, #20]
 80102e8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80102ea:	4618      	mov	r0, r3
 80102ec:	f7fe f866 	bl	800e3bc <move_window>
 80102f0:	4603      	mov	r3, r0
 80102f2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80102f6:	697b      	ldr	r3, [r7, #20]
 80102f8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80102fa:	3a01      	subs	r2, #1
 80102fc:	615a      	str	r2, [r3, #20]
 80102fe:	e019      	b.n	8010334 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8010300:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8010304:	2b00      	cmp	r3, #0
 8010306:	d115      	bne.n	8010334 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8010308:	7fbb      	ldrb	r3, [r7, #30]
 801030a:	f003 0310 	and.w	r3, r3, #16
 801030e:	2b00      	cmp	r3, #0
 8010310:	d003      	beq.n	801031a <f_open+0x1ba>
					res = FR_NO_FILE;
 8010312:	2304      	movs	r3, #4
 8010314:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8010318:	e00c      	b.n	8010334 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 801031a:	79fb      	ldrb	r3, [r7, #7]
 801031c:	f003 0302 	and.w	r3, r3, #2
 8010320:	2b00      	cmp	r3, #0
 8010322:	d007      	beq.n	8010334 <f_open+0x1d4>
 8010324:	7fbb      	ldrb	r3, [r7, #30]
 8010326:	f003 0301 	and.w	r3, r3, #1
 801032a:	2b00      	cmp	r3, #0
 801032c:	d002      	beq.n	8010334 <f_open+0x1d4>
						res = FR_DENIED;
 801032e:	2307      	movs	r3, #7
 8010330:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 8010334:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8010338:	2b00      	cmp	r3, #0
 801033a:	d128      	bne.n	801038e <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 801033c:	79fb      	ldrb	r3, [r7, #7]
 801033e:	f003 0308 	and.w	r3, r3, #8
 8010342:	2b00      	cmp	r3, #0
 8010344:	d003      	beq.n	801034e <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8010346:	79fb      	ldrb	r3, [r7, #7]
 8010348:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801034c:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 801034e:	697b      	ldr	r3, [r7, #20]
 8010350:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010352:	68fb      	ldr	r3, [r7, #12]
 8010354:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8010356:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010358:	68fb      	ldr	r3, [r7, #12]
 801035a:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 801035c:	79fb      	ldrb	r3, [r7, #7]
 801035e:	f023 0301 	bic.w	r3, r3, #1
 8010362:	2b00      	cmp	r3, #0
 8010364:	bf14      	ite	ne
 8010366:	2301      	movne	r3, #1
 8010368:	2300      	moveq	r3, #0
 801036a:	b2db      	uxtb	r3, r3
 801036c:	461a      	mov	r2, r3
 801036e:	f107 0318 	add.w	r3, r7, #24
 8010372:	4611      	mov	r1, r2
 8010374:	4618      	mov	r0, r3
 8010376:	f7fd feef 	bl	800e158 <inc_lock>
 801037a:	4602      	mov	r2, r0
 801037c:	68fb      	ldr	r3, [r7, #12]
 801037e:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8010380:	68fb      	ldr	r3, [r7, #12]
 8010382:	691b      	ldr	r3, [r3, #16]
 8010384:	2b00      	cmp	r3, #0
 8010386:	d102      	bne.n	801038e <f_open+0x22e>
 8010388:	2302      	movs	r3, #2
 801038a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 801038e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8010392:	2b00      	cmp	r3, #0
 8010394:	f040 80a3 	bne.w	80104de <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8010398:	697b      	ldr	r3, [r7, #20]
 801039a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801039c:	4611      	mov	r1, r2
 801039e:	4618      	mov	r0, r3
 80103a0:	f7fe fd94 	bl	800eecc <ld_clust>
 80103a4:	4602      	mov	r2, r0
 80103a6:	68fb      	ldr	r3, [r7, #12]
 80103a8:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80103aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80103ac:	331c      	adds	r3, #28
 80103ae:	4618      	mov	r0, r3
 80103b0:	f7fd fd6c 	bl	800de8c <ld_dword>
 80103b4:	4602      	mov	r2, r0
 80103b6:	68fb      	ldr	r3, [r7, #12]
 80103b8:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80103ba:	68fb      	ldr	r3, [r7, #12]
 80103bc:	2200      	movs	r2, #0
 80103be:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80103c0:	697a      	ldr	r2, [r7, #20]
 80103c2:	68fb      	ldr	r3, [r7, #12]
 80103c4:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80103c6:	697b      	ldr	r3, [r7, #20]
 80103c8:	88da      	ldrh	r2, [r3, #6]
 80103ca:	68fb      	ldr	r3, [r7, #12]
 80103cc:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80103ce:	68fb      	ldr	r3, [r7, #12]
 80103d0:	79fa      	ldrb	r2, [r7, #7]
 80103d2:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 80103d4:	68fb      	ldr	r3, [r7, #12]
 80103d6:	2200      	movs	r2, #0
 80103d8:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80103da:	68fb      	ldr	r3, [r7, #12]
 80103dc:	2200      	movs	r2, #0
 80103de:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80103e0:	68fb      	ldr	r3, [r7, #12]
 80103e2:	2200      	movs	r2, #0
 80103e4:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80103e6:	68fb      	ldr	r3, [r7, #12]
 80103e8:	3330      	adds	r3, #48	; 0x30
 80103ea:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80103ee:	2100      	movs	r1, #0
 80103f0:	4618      	mov	r0, r3
 80103f2:	f7fd fdd6 	bl	800dfa2 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80103f6:	79fb      	ldrb	r3, [r7, #7]
 80103f8:	f003 0320 	and.w	r3, r3, #32
 80103fc:	2b00      	cmp	r3, #0
 80103fe:	d06e      	beq.n	80104de <f_open+0x37e>
 8010400:	68fb      	ldr	r3, [r7, #12]
 8010402:	68db      	ldr	r3, [r3, #12]
 8010404:	2b00      	cmp	r3, #0
 8010406:	d06a      	beq.n	80104de <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8010408:	68fb      	ldr	r3, [r7, #12]
 801040a:	68da      	ldr	r2, [r3, #12]
 801040c:	68fb      	ldr	r3, [r7, #12]
 801040e:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8010410:	697b      	ldr	r3, [r7, #20]
 8010412:	895b      	ldrh	r3, [r3, #10]
 8010414:	461a      	mov	r2, r3
 8010416:	697b      	ldr	r3, [r7, #20]
 8010418:	899b      	ldrh	r3, [r3, #12]
 801041a:	fb02 f303 	mul.w	r3, r2, r3
 801041e:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8010420:	68fb      	ldr	r3, [r7, #12]
 8010422:	689b      	ldr	r3, [r3, #8]
 8010424:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8010426:	68fb      	ldr	r3, [r7, #12]
 8010428:	68db      	ldr	r3, [r3, #12]
 801042a:	65fb      	str	r3, [r7, #92]	; 0x5c
 801042c:	e016      	b.n	801045c <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 801042e:	68fb      	ldr	r3, [r7, #12]
 8010430:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8010432:	4618      	mov	r0, r3
 8010434:	f7fe f87f 	bl	800e536 <get_fat>
 8010438:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 801043a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801043c:	2b01      	cmp	r3, #1
 801043e:	d802      	bhi.n	8010446 <f_open+0x2e6>
 8010440:	2302      	movs	r3, #2
 8010442:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8010446:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010448:	f1b3 3fff 	cmp.w	r3, #4294967295
 801044c:	d102      	bne.n	8010454 <f_open+0x2f4>
 801044e:	2301      	movs	r3, #1
 8010450:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8010454:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8010456:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010458:	1ad3      	subs	r3, r2, r3
 801045a:	65fb      	str	r3, [r7, #92]	; 0x5c
 801045c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8010460:	2b00      	cmp	r3, #0
 8010462:	d103      	bne.n	801046c <f_open+0x30c>
 8010464:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8010466:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010468:	429a      	cmp	r2, r3
 801046a:	d8e0      	bhi.n	801042e <f_open+0x2ce>
				}
				fp->clust = clst;
 801046c:	68fb      	ldr	r3, [r7, #12]
 801046e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8010470:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8010472:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8010476:	2b00      	cmp	r3, #0
 8010478:	d131      	bne.n	80104de <f_open+0x37e>
 801047a:	697b      	ldr	r3, [r7, #20]
 801047c:	899b      	ldrh	r3, [r3, #12]
 801047e:	461a      	mov	r2, r3
 8010480:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010482:	fbb3 f1f2 	udiv	r1, r3, r2
 8010486:	fb01 f202 	mul.w	r2, r1, r2
 801048a:	1a9b      	subs	r3, r3, r2
 801048c:	2b00      	cmp	r3, #0
 801048e:	d026      	beq.n	80104de <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8010490:	697b      	ldr	r3, [r7, #20]
 8010492:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8010494:	4618      	mov	r0, r3
 8010496:	f7fe f82f 	bl	800e4f8 <clust2sect>
 801049a:	64f8      	str	r0, [r7, #76]	; 0x4c
 801049c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801049e:	2b00      	cmp	r3, #0
 80104a0:	d103      	bne.n	80104aa <f_open+0x34a>
						res = FR_INT_ERR;
 80104a2:	2302      	movs	r3, #2
 80104a4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80104a8:	e019      	b.n	80104de <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80104aa:	697b      	ldr	r3, [r7, #20]
 80104ac:	899b      	ldrh	r3, [r3, #12]
 80104ae:	461a      	mov	r2, r3
 80104b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80104b2:	fbb3 f2f2 	udiv	r2, r3, r2
 80104b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80104b8:	441a      	add	r2, r3
 80104ba:	68fb      	ldr	r3, [r7, #12]
 80104bc:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80104be:	697b      	ldr	r3, [r7, #20]
 80104c0:	7858      	ldrb	r0, [r3, #1]
 80104c2:	68fb      	ldr	r3, [r7, #12]
 80104c4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80104c8:	68fb      	ldr	r3, [r7, #12]
 80104ca:	6a1a      	ldr	r2, [r3, #32]
 80104cc:	2301      	movs	r3, #1
 80104ce:	f7fd fc67 	bl	800dda0 <disk_read>
 80104d2:	4603      	mov	r3, r0
 80104d4:	2b00      	cmp	r3, #0
 80104d6:	d002      	beq.n	80104de <f_open+0x37e>
 80104d8:	2301      	movs	r3, #1
 80104da:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80104de:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80104e2:	2b00      	cmp	r3, #0
 80104e4:	d002      	beq.n	80104ec <f_open+0x38c>
 80104e6:	68fb      	ldr	r3, [r7, #12]
 80104e8:	2200      	movs	r2, #0
 80104ea:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80104ec:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80104f0:	4618      	mov	r0, r3
 80104f2:	3768      	adds	r7, #104	; 0x68
 80104f4:	46bd      	mov	sp, r7
 80104f6:	bd80      	pop	{r7, pc}

080104f8 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80104f8:	b580      	push	{r7, lr}
 80104fa:	b08c      	sub	sp, #48	; 0x30
 80104fc:	af00      	add	r7, sp, #0
 80104fe:	60f8      	str	r0, [r7, #12]
 8010500:	60b9      	str	r1, [r7, #8]
 8010502:	607a      	str	r2, [r7, #4]
 8010504:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8010506:	68bb      	ldr	r3, [r7, #8]
 8010508:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 801050a:	683b      	ldr	r3, [r7, #0]
 801050c:	2200      	movs	r2, #0
 801050e:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8010510:	68fb      	ldr	r3, [r7, #12]
 8010512:	f107 0210 	add.w	r2, r7, #16
 8010516:	4611      	mov	r1, r2
 8010518:	4618      	mov	r0, r3
 801051a:	f7ff fda5 	bl	8010068 <validate>
 801051e:	4603      	mov	r3, r0
 8010520:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8010524:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010528:	2b00      	cmp	r3, #0
 801052a:	d107      	bne.n	801053c <f_write+0x44>
 801052c:	68fb      	ldr	r3, [r7, #12]
 801052e:	7d5b      	ldrb	r3, [r3, #21]
 8010530:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8010534:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010538:	2b00      	cmp	r3, #0
 801053a:	d002      	beq.n	8010542 <f_write+0x4a>
 801053c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010540:	e16a      	b.n	8010818 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8010542:	68fb      	ldr	r3, [r7, #12]
 8010544:	7d1b      	ldrb	r3, [r3, #20]
 8010546:	f003 0302 	and.w	r3, r3, #2
 801054a:	2b00      	cmp	r3, #0
 801054c:	d101      	bne.n	8010552 <f_write+0x5a>
 801054e:	2307      	movs	r3, #7
 8010550:	e162      	b.n	8010818 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8010552:	68fb      	ldr	r3, [r7, #12]
 8010554:	699a      	ldr	r2, [r3, #24]
 8010556:	687b      	ldr	r3, [r7, #4]
 8010558:	441a      	add	r2, r3
 801055a:	68fb      	ldr	r3, [r7, #12]
 801055c:	699b      	ldr	r3, [r3, #24]
 801055e:	429a      	cmp	r2, r3
 8010560:	f080 814c 	bcs.w	80107fc <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8010564:	68fb      	ldr	r3, [r7, #12]
 8010566:	699b      	ldr	r3, [r3, #24]
 8010568:	43db      	mvns	r3, r3
 801056a:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 801056c:	e146      	b.n	80107fc <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 801056e:	68fb      	ldr	r3, [r7, #12]
 8010570:	699b      	ldr	r3, [r3, #24]
 8010572:	693a      	ldr	r2, [r7, #16]
 8010574:	8992      	ldrh	r2, [r2, #12]
 8010576:	fbb3 f1f2 	udiv	r1, r3, r2
 801057a:	fb01 f202 	mul.w	r2, r1, r2
 801057e:	1a9b      	subs	r3, r3, r2
 8010580:	2b00      	cmp	r3, #0
 8010582:	f040 80f1 	bne.w	8010768 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8010586:	68fb      	ldr	r3, [r7, #12]
 8010588:	699b      	ldr	r3, [r3, #24]
 801058a:	693a      	ldr	r2, [r7, #16]
 801058c:	8992      	ldrh	r2, [r2, #12]
 801058e:	fbb3 f3f2 	udiv	r3, r3, r2
 8010592:	693a      	ldr	r2, [r7, #16]
 8010594:	8952      	ldrh	r2, [r2, #10]
 8010596:	3a01      	subs	r2, #1
 8010598:	4013      	ands	r3, r2
 801059a:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 801059c:	69bb      	ldr	r3, [r7, #24]
 801059e:	2b00      	cmp	r3, #0
 80105a0:	d143      	bne.n	801062a <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80105a2:	68fb      	ldr	r3, [r7, #12]
 80105a4:	699b      	ldr	r3, [r3, #24]
 80105a6:	2b00      	cmp	r3, #0
 80105a8:	d10c      	bne.n	80105c4 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80105aa:	68fb      	ldr	r3, [r7, #12]
 80105ac:	689b      	ldr	r3, [r3, #8]
 80105ae:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 80105b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80105b2:	2b00      	cmp	r3, #0
 80105b4:	d11a      	bne.n	80105ec <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80105b6:	68fb      	ldr	r3, [r7, #12]
 80105b8:	2100      	movs	r1, #0
 80105ba:	4618      	mov	r0, r3
 80105bc:	f7fe fa10 	bl	800e9e0 <create_chain>
 80105c0:	62b8      	str	r0, [r7, #40]	; 0x28
 80105c2:	e013      	b.n	80105ec <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80105c4:	68fb      	ldr	r3, [r7, #12]
 80105c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80105c8:	2b00      	cmp	r3, #0
 80105ca:	d007      	beq.n	80105dc <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80105cc:	68fb      	ldr	r3, [r7, #12]
 80105ce:	699b      	ldr	r3, [r3, #24]
 80105d0:	4619      	mov	r1, r3
 80105d2:	68f8      	ldr	r0, [r7, #12]
 80105d4:	f7fe fa9c 	bl	800eb10 <clmt_clust>
 80105d8:	62b8      	str	r0, [r7, #40]	; 0x28
 80105da:	e007      	b.n	80105ec <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80105dc:	68fa      	ldr	r2, [r7, #12]
 80105de:	68fb      	ldr	r3, [r7, #12]
 80105e0:	69db      	ldr	r3, [r3, #28]
 80105e2:	4619      	mov	r1, r3
 80105e4:	4610      	mov	r0, r2
 80105e6:	f7fe f9fb 	bl	800e9e0 <create_chain>
 80105ea:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80105ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80105ee:	2b00      	cmp	r3, #0
 80105f0:	f000 8109 	beq.w	8010806 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 80105f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80105f6:	2b01      	cmp	r3, #1
 80105f8:	d104      	bne.n	8010604 <f_write+0x10c>
 80105fa:	68fb      	ldr	r3, [r7, #12]
 80105fc:	2202      	movs	r2, #2
 80105fe:	755a      	strb	r2, [r3, #21]
 8010600:	2302      	movs	r3, #2
 8010602:	e109      	b.n	8010818 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8010604:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010606:	f1b3 3fff 	cmp.w	r3, #4294967295
 801060a:	d104      	bne.n	8010616 <f_write+0x11e>
 801060c:	68fb      	ldr	r3, [r7, #12]
 801060e:	2201      	movs	r2, #1
 8010610:	755a      	strb	r2, [r3, #21]
 8010612:	2301      	movs	r3, #1
 8010614:	e100      	b.n	8010818 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 8010616:	68fb      	ldr	r3, [r7, #12]
 8010618:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801061a:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 801061c:	68fb      	ldr	r3, [r7, #12]
 801061e:	689b      	ldr	r3, [r3, #8]
 8010620:	2b00      	cmp	r3, #0
 8010622:	d102      	bne.n	801062a <f_write+0x132>
 8010624:	68fb      	ldr	r3, [r7, #12]
 8010626:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010628:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 801062a:	68fb      	ldr	r3, [r7, #12]
 801062c:	7d1b      	ldrb	r3, [r3, #20]
 801062e:	b25b      	sxtb	r3, r3
 8010630:	2b00      	cmp	r3, #0
 8010632:	da18      	bge.n	8010666 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8010634:	693b      	ldr	r3, [r7, #16]
 8010636:	7858      	ldrb	r0, [r3, #1]
 8010638:	68fb      	ldr	r3, [r7, #12]
 801063a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801063e:	68fb      	ldr	r3, [r7, #12]
 8010640:	6a1a      	ldr	r2, [r3, #32]
 8010642:	2301      	movs	r3, #1
 8010644:	f7fd fbcc 	bl	800dde0 <disk_write>
 8010648:	4603      	mov	r3, r0
 801064a:	2b00      	cmp	r3, #0
 801064c:	d004      	beq.n	8010658 <f_write+0x160>
 801064e:	68fb      	ldr	r3, [r7, #12]
 8010650:	2201      	movs	r2, #1
 8010652:	755a      	strb	r2, [r3, #21]
 8010654:	2301      	movs	r3, #1
 8010656:	e0df      	b.n	8010818 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 8010658:	68fb      	ldr	r3, [r7, #12]
 801065a:	7d1b      	ldrb	r3, [r3, #20]
 801065c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010660:	b2da      	uxtb	r2, r3
 8010662:	68fb      	ldr	r3, [r7, #12]
 8010664:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8010666:	693a      	ldr	r2, [r7, #16]
 8010668:	68fb      	ldr	r3, [r7, #12]
 801066a:	69db      	ldr	r3, [r3, #28]
 801066c:	4619      	mov	r1, r3
 801066e:	4610      	mov	r0, r2
 8010670:	f7fd ff42 	bl	800e4f8 <clust2sect>
 8010674:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8010676:	697b      	ldr	r3, [r7, #20]
 8010678:	2b00      	cmp	r3, #0
 801067a:	d104      	bne.n	8010686 <f_write+0x18e>
 801067c:	68fb      	ldr	r3, [r7, #12]
 801067e:	2202      	movs	r2, #2
 8010680:	755a      	strb	r2, [r3, #21]
 8010682:	2302      	movs	r3, #2
 8010684:	e0c8      	b.n	8010818 <f_write+0x320>
			sect += csect;
 8010686:	697a      	ldr	r2, [r7, #20]
 8010688:	69bb      	ldr	r3, [r7, #24]
 801068a:	4413      	add	r3, r2
 801068c:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 801068e:	693b      	ldr	r3, [r7, #16]
 8010690:	899b      	ldrh	r3, [r3, #12]
 8010692:	461a      	mov	r2, r3
 8010694:	687b      	ldr	r3, [r7, #4]
 8010696:	fbb3 f3f2 	udiv	r3, r3, r2
 801069a:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 801069c:	6a3b      	ldr	r3, [r7, #32]
 801069e:	2b00      	cmp	r3, #0
 80106a0:	d043      	beq.n	801072a <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80106a2:	69ba      	ldr	r2, [r7, #24]
 80106a4:	6a3b      	ldr	r3, [r7, #32]
 80106a6:	4413      	add	r3, r2
 80106a8:	693a      	ldr	r2, [r7, #16]
 80106aa:	8952      	ldrh	r2, [r2, #10]
 80106ac:	4293      	cmp	r3, r2
 80106ae:	d905      	bls.n	80106bc <f_write+0x1c4>
					cc = fs->csize - csect;
 80106b0:	693b      	ldr	r3, [r7, #16]
 80106b2:	895b      	ldrh	r3, [r3, #10]
 80106b4:	461a      	mov	r2, r3
 80106b6:	69bb      	ldr	r3, [r7, #24]
 80106b8:	1ad3      	subs	r3, r2, r3
 80106ba:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80106bc:	693b      	ldr	r3, [r7, #16]
 80106be:	7858      	ldrb	r0, [r3, #1]
 80106c0:	6a3b      	ldr	r3, [r7, #32]
 80106c2:	697a      	ldr	r2, [r7, #20]
 80106c4:	69f9      	ldr	r1, [r7, #28]
 80106c6:	f7fd fb8b 	bl	800dde0 <disk_write>
 80106ca:	4603      	mov	r3, r0
 80106cc:	2b00      	cmp	r3, #0
 80106ce:	d004      	beq.n	80106da <f_write+0x1e2>
 80106d0:	68fb      	ldr	r3, [r7, #12]
 80106d2:	2201      	movs	r2, #1
 80106d4:	755a      	strb	r2, [r3, #21]
 80106d6:	2301      	movs	r3, #1
 80106d8:	e09e      	b.n	8010818 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80106da:	68fb      	ldr	r3, [r7, #12]
 80106dc:	6a1a      	ldr	r2, [r3, #32]
 80106de:	697b      	ldr	r3, [r7, #20]
 80106e0:	1ad3      	subs	r3, r2, r3
 80106e2:	6a3a      	ldr	r2, [r7, #32]
 80106e4:	429a      	cmp	r2, r3
 80106e6:	d918      	bls.n	801071a <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 80106e8:	68fb      	ldr	r3, [r7, #12]
 80106ea:	f103 0030 	add.w	r0, r3, #48	; 0x30
 80106ee:	68fb      	ldr	r3, [r7, #12]
 80106f0:	6a1a      	ldr	r2, [r3, #32]
 80106f2:	697b      	ldr	r3, [r7, #20]
 80106f4:	1ad3      	subs	r3, r2, r3
 80106f6:	693a      	ldr	r2, [r7, #16]
 80106f8:	8992      	ldrh	r2, [r2, #12]
 80106fa:	fb02 f303 	mul.w	r3, r2, r3
 80106fe:	69fa      	ldr	r2, [r7, #28]
 8010700:	18d1      	adds	r1, r2, r3
 8010702:	693b      	ldr	r3, [r7, #16]
 8010704:	899b      	ldrh	r3, [r3, #12]
 8010706:	461a      	mov	r2, r3
 8010708:	f7fd fc2a 	bl	800df60 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 801070c:	68fb      	ldr	r3, [r7, #12]
 801070e:	7d1b      	ldrb	r3, [r3, #20]
 8010710:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010714:	b2da      	uxtb	r2, r3
 8010716:	68fb      	ldr	r3, [r7, #12]
 8010718:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 801071a:	693b      	ldr	r3, [r7, #16]
 801071c:	899b      	ldrh	r3, [r3, #12]
 801071e:	461a      	mov	r2, r3
 8010720:	6a3b      	ldr	r3, [r7, #32]
 8010722:	fb02 f303 	mul.w	r3, r2, r3
 8010726:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8010728:	e04b      	b.n	80107c2 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 801072a:	68fb      	ldr	r3, [r7, #12]
 801072c:	6a1b      	ldr	r3, [r3, #32]
 801072e:	697a      	ldr	r2, [r7, #20]
 8010730:	429a      	cmp	r2, r3
 8010732:	d016      	beq.n	8010762 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 8010734:	68fb      	ldr	r3, [r7, #12]
 8010736:	699a      	ldr	r2, [r3, #24]
 8010738:	68fb      	ldr	r3, [r7, #12]
 801073a:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 801073c:	429a      	cmp	r2, r3
 801073e:	d210      	bcs.n	8010762 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8010740:	693b      	ldr	r3, [r7, #16]
 8010742:	7858      	ldrb	r0, [r3, #1]
 8010744:	68fb      	ldr	r3, [r7, #12]
 8010746:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801074a:	2301      	movs	r3, #1
 801074c:	697a      	ldr	r2, [r7, #20]
 801074e:	f7fd fb27 	bl	800dda0 <disk_read>
 8010752:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8010754:	2b00      	cmp	r3, #0
 8010756:	d004      	beq.n	8010762 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 8010758:	68fb      	ldr	r3, [r7, #12]
 801075a:	2201      	movs	r2, #1
 801075c:	755a      	strb	r2, [r3, #21]
 801075e:	2301      	movs	r3, #1
 8010760:	e05a      	b.n	8010818 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 8010762:	68fb      	ldr	r3, [r7, #12]
 8010764:	697a      	ldr	r2, [r7, #20]
 8010766:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8010768:	693b      	ldr	r3, [r7, #16]
 801076a:	899b      	ldrh	r3, [r3, #12]
 801076c:	4618      	mov	r0, r3
 801076e:	68fb      	ldr	r3, [r7, #12]
 8010770:	699b      	ldr	r3, [r3, #24]
 8010772:	693a      	ldr	r2, [r7, #16]
 8010774:	8992      	ldrh	r2, [r2, #12]
 8010776:	fbb3 f1f2 	udiv	r1, r3, r2
 801077a:	fb01 f202 	mul.w	r2, r1, r2
 801077e:	1a9b      	subs	r3, r3, r2
 8010780:	1ac3      	subs	r3, r0, r3
 8010782:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8010784:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010786:	687b      	ldr	r3, [r7, #4]
 8010788:	429a      	cmp	r2, r3
 801078a:	d901      	bls.n	8010790 <f_write+0x298>
 801078c:	687b      	ldr	r3, [r7, #4]
 801078e:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8010790:	68fb      	ldr	r3, [r7, #12]
 8010792:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010796:	68fb      	ldr	r3, [r7, #12]
 8010798:	699b      	ldr	r3, [r3, #24]
 801079a:	693a      	ldr	r2, [r7, #16]
 801079c:	8992      	ldrh	r2, [r2, #12]
 801079e:	fbb3 f0f2 	udiv	r0, r3, r2
 80107a2:	fb00 f202 	mul.w	r2, r0, r2
 80107a6:	1a9b      	subs	r3, r3, r2
 80107a8:	440b      	add	r3, r1
 80107aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80107ac:	69f9      	ldr	r1, [r7, #28]
 80107ae:	4618      	mov	r0, r3
 80107b0:	f7fd fbd6 	bl	800df60 <mem_cpy>
		fp->flag |= FA_DIRTY;
 80107b4:	68fb      	ldr	r3, [r7, #12]
 80107b6:	7d1b      	ldrb	r3, [r3, #20]
 80107b8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80107bc:	b2da      	uxtb	r2, r3
 80107be:	68fb      	ldr	r3, [r7, #12]
 80107c0:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 80107c2:	69fa      	ldr	r2, [r7, #28]
 80107c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107c6:	4413      	add	r3, r2
 80107c8:	61fb      	str	r3, [r7, #28]
 80107ca:	68fb      	ldr	r3, [r7, #12]
 80107cc:	699a      	ldr	r2, [r3, #24]
 80107ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107d0:	441a      	add	r2, r3
 80107d2:	68fb      	ldr	r3, [r7, #12]
 80107d4:	619a      	str	r2, [r3, #24]
 80107d6:	68fb      	ldr	r3, [r7, #12]
 80107d8:	68da      	ldr	r2, [r3, #12]
 80107da:	68fb      	ldr	r3, [r7, #12]
 80107dc:	699b      	ldr	r3, [r3, #24]
 80107de:	429a      	cmp	r2, r3
 80107e0:	bf38      	it	cc
 80107e2:	461a      	movcc	r2, r3
 80107e4:	68fb      	ldr	r3, [r7, #12]
 80107e6:	60da      	str	r2, [r3, #12]
 80107e8:	683b      	ldr	r3, [r7, #0]
 80107ea:	681a      	ldr	r2, [r3, #0]
 80107ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107ee:	441a      	add	r2, r3
 80107f0:	683b      	ldr	r3, [r7, #0]
 80107f2:	601a      	str	r2, [r3, #0]
 80107f4:	687a      	ldr	r2, [r7, #4]
 80107f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107f8:	1ad3      	subs	r3, r2, r3
 80107fa:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 80107fc:	687b      	ldr	r3, [r7, #4]
 80107fe:	2b00      	cmp	r3, #0
 8010800:	f47f aeb5 	bne.w	801056e <f_write+0x76>
 8010804:	e000      	b.n	8010808 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8010806:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8010808:	68fb      	ldr	r3, [r7, #12]
 801080a:	7d1b      	ldrb	r3, [r3, #20]
 801080c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010810:	b2da      	uxtb	r2, r3
 8010812:	68fb      	ldr	r3, [r7, #12]
 8010814:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8010816:	2300      	movs	r3, #0
}
 8010818:	4618      	mov	r0, r3
 801081a:	3730      	adds	r7, #48	; 0x30
 801081c:	46bd      	mov	sp, r7
 801081e:	bd80      	pop	{r7, pc}

08010820 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8010820:	b580      	push	{r7, lr}
 8010822:	b086      	sub	sp, #24
 8010824:	af00      	add	r7, sp, #0
 8010826:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8010828:	687b      	ldr	r3, [r7, #4]
 801082a:	f107 0208 	add.w	r2, r7, #8
 801082e:	4611      	mov	r1, r2
 8010830:	4618      	mov	r0, r3
 8010832:	f7ff fc19 	bl	8010068 <validate>
 8010836:	4603      	mov	r3, r0
 8010838:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801083a:	7dfb      	ldrb	r3, [r7, #23]
 801083c:	2b00      	cmp	r3, #0
 801083e:	d168      	bne.n	8010912 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8010840:	687b      	ldr	r3, [r7, #4]
 8010842:	7d1b      	ldrb	r3, [r3, #20]
 8010844:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010848:	2b00      	cmp	r3, #0
 801084a:	d062      	beq.n	8010912 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 801084c:	687b      	ldr	r3, [r7, #4]
 801084e:	7d1b      	ldrb	r3, [r3, #20]
 8010850:	b25b      	sxtb	r3, r3
 8010852:	2b00      	cmp	r3, #0
 8010854:	da15      	bge.n	8010882 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8010856:	68bb      	ldr	r3, [r7, #8]
 8010858:	7858      	ldrb	r0, [r3, #1]
 801085a:	687b      	ldr	r3, [r7, #4]
 801085c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010860:	687b      	ldr	r3, [r7, #4]
 8010862:	6a1a      	ldr	r2, [r3, #32]
 8010864:	2301      	movs	r3, #1
 8010866:	f7fd fabb 	bl	800dde0 <disk_write>
 801086a:	4603      	mov	r3, r0
 801086c:	2b00      	cmp	r3, #0
 801086e:	d001      	beq.n	8010874 <f_sync+0x54>
 8010870:	2301      	movs	r3, #1
 8010872:	e04f      	b.n	8010914 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8010874:	687b      	ldr	r3, [r7, #4]
 8010876:	7d1b      	ldrb	r3, [r3, #20]
 8010878:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801087c:	b2da      	uxtb	r2, r3
 801087e:	687b      	ldr	r3, [r7, #4]
 8010880:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8010882:	f7fd f8ad 	bl	800d9e0 <get_fattime>
 8010886:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8010888:	68ba      	ldr	r2, [r7, #8]
 801088a:	687b      	ldr	r3, [r7, #4]
 801088c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801088e:	4619      	mov	r1, r3
 8010890:	4610      	mov	r0, r2
 8010892:	f7fd fd93 	bl	800e3bc <move_window>
 8010896:	4603      	mov	r3, r0
 8010898:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 801089a:	7dfb      	ldrb	r3, [r7, #23]
 801089c:	2b00      	cmp	r3, #0
 801089e:	d138      	bne.n	8010912 <f_sync+0xf2>
					dir = fp->dir_ptr;
 80108a0:	687b      	ldr	r3, [r7, #4]
 80108a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80108a4:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80108a6:	68fb      	ldr	r3, [r7, #12]
 80108a8:	330b      	adds	r3, #11
 80108aa:	781a      	ldrb	r2, [r3, #0]
 80108ac:	68fb      	ldr	r3, [r7, #12]
 80108ae:	330b      	adds	r3, #11
 80108b0:	f042 0220 	orr.w	r2, r2, #32
 80108b4:	b2d2      	uxtb	r2, r2
 80108b6:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80108b8:	687b      	ldr	r3, [r7, #4]
 80108ba:	6818      	ldr	r0, [r3, #0]
 80108bc:	687b      	ldr	r3, [r7, #4]
 80108be:	689b      	ldr	r3, [r3, #8]
 80108c0:	461a      	mov	r2, r3
 80108c2:	68f9      	ldr	r1, [r7, #12]
 80108c4:	f7fe fb21 	bl	800ef0a <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80108c8:	68fb      	ldr	r3, [r7, #12]
 80108ca:	f103 021c 	add.w	r2, r3, #28
 80108ce:	687b      	ldr	r3, [r7, #4]
 80108d0:	68db      	ldr	r3, [r3, #12]
 80108d2:	4619      	mov	r1, r3
 80108d4:	4610      	mov	r0, r2
 80108d6:	f7fd fb17 	bl	800df08 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80108da:	68fb      	ldr	r3, [r7, #12]
 80108dc:	3316      	adds	r3, #22
 80108de:	6939      	ldr	r1, [r7, #16]
 80108e0:	4618      	mov	r0, r3
 80108e2:	f7fd fb11 	bl	800df08 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80108e6:	68fb      	ldr	r3, [r7, #12]
 80108e8:	3312      	adds	r3, #18
 80108ea:	2100      	movs	r1, #0
 80108ec:	4618      	mov	r0, r3
 80108ee:	f7fd faf0 	bl	800ded2 <st_word>
					fs->wflag = 1;
 80108f2:	68bb      	ldr	r3, [r7, #8]
 80108f4:	2201      	movs	r2, #1
 80108f6:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80108f8:	68bb      	ldr	r3, [r7, #8]
 80108fa:	4618      	mov	r0, r3
 80108fc:	f7fd fd8c 	bl	800e418 <sync_fs>
 8010900:	4603      	mov	r3, r0
 8010902:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8010904:	687b      	ldr	r3, [r7, #4]
 8010906:	7d1b      	ldrb	r3, [r3, #20]
 8010908:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801090c:	b2da      	uxtb	r2, r3
 801090e:	687b      	ldr	r3, [r7, #4]
 8010910:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8010912:	7dfb      	ldrb	r3, [r7, #23]
}
 8010914:	4618      	mov	r0, r3
 8010916:	3718      	adds	r7, #24
 8010918:	46bd      	mov	sp, r7
 801091a:	bd80      	pop	{r7, pc}

0801091c <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 801091c:	b580      	push	{r7, lr}
 801091e:	b084      	sub	sp, #16
 8010920:	af00      	add	r7, sp, #0
 8010922:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8010924:	6878      	ldr	r0, [r7, #4]
 8010926:	f7ff ff7b 	bl	8010820 <f_sync>
 801092a:	4603      	mov	r3, r0
 801092c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 801092e:	7bfb      	ldrb	r3, [r7, #15]
 8010930:	2b00      	cmp	r3, #0
 8010932:	d118      	bne.n	8010966 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8010934:	687b      	ldr	r3, [r7, #4]
 8010936:	f107 0208 	add.w	r2, r7, #8
 801093a:	4611      	mov	r1, r2
 801093c:	4618      	mov	r0, r3
 801093e:	f7ff fb93 	bl	8010068 <validate>
 8010942:	4603      	mov	r3, r0
 8010944:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8010946:	7bfb      	ldrb	r3, [r7, #15]
 8010948:	2b00      	cmp	r3, #0
 801094a:	d10c      	bne.n	8010966 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 801094c:	687b      	ldr	r3, [r7, #4]
 801094e:	691b      	ldr	r3, [r3, #16]
 8010950:	4618      	mov	r0, r3
 8010952:	f7fd fc8f 	bl	800e274 <dec_lock>
 8010956:	4603      	mov	r3, r0
 8010958:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 801095a:	7bfb      	ldrb	r3, [r7, #15]
 801095c:	2b00      	cmp	r3, #0
 801095e:	d102      	bne.n	8010966 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8010960:	687b      	ldr	r3, [r7, #4]
 8010962:	2200      	movs	r2, #0
 8010964:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8010966:	7bfb      	ldrb	r3, [r7, #15]
}
 8010968:	4618      	mov	r0, r3
 801096a:	3710      	adds	r7, #16
 801096c:	46bd      	mov	sp, r7
 801096e:	bd80      	pop	{r7, pc}

08010970 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8010970:	b480      	push	{r7}
 8010972:	b087      	sub	sp, #28
 8010974:	af00      	add	r7, sp, #0
 8010976:	60f8      	str	r0, [r7, #12]
 8010978:	60b9      	str	r1, [r7, #8]
 801097a:	4613      	mov	r3, r2
 801097c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 801097e:	2301      	movs	r3, #1
 8010980:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8010982:	2300      	movs	r3, #0
 8010984:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8010986:	4b1f      	ldr	r3, [pc, #124]	; (8010a04 <FATFS_LinkDriverEx+0x94>)
 8010988:	7a5b      	ldrb	r3, [r3, #9]
 801098a:	b2db      	uxtb	r3, r3
 801098c:	2b00      	cmp	r3, #0
 801098e:	d131      	bne.n	80109f4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8010990:	4b1c      	ldr	r3, [pc, #112]	; (8010a04 <FATFS_LinkDriverEx+0x94>)
 8010992:	7a5b      	ldrb	r3, [r3, #9]
 8010994:	b2db      	uxtb	r3, r3
 8010996:	461a      	mov	r2, r3
 8010998:	4b1a      	ldr	r3, [pc, #104]	; (8010a04 <FATFS_LinkDriverEx+0x94>)
 801099a:	2100      	movs	r1, #0
 801099c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 801099e:	4b19      	ldr	r3, [pc, #100]	; (8010a04 <FATFS_LinkDriverEx+0x94>)
 80109a0:	7a5b      	ldrb	r3, [r3, #9]
 80109a2:	b2db      	uxtb	r3, r3
 80109a4:	4a17      	ldr	r2, [pc, #92]	; (8010a04 <FATFS_LinkDriverEx+0x94>)
 80109a6:	009b      	lsls	r3, r3, #2
 80109a8:	4413      	add	r3, r2
 80109aa:	68fa      	ldr	r2, [r7, #12]
 80109ac:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80109ae:	4b15      	ldr	r3, [pc, #84]	; (8010a04 <FATFS_LinkDriverEx+0x94>)
 80109b0:	7a5b      	ldrb	r3, [r3, #9]
 80109b2:	b2db      	uxtb	r3, r3
 80109b4:	461a      	mov	r2, r3
 80109b6:	4b13      	ldr	r3, [pc, #76]	; (8010a04 <FATFS_LinkDriverEx+0x94>)
 80109b8:	4413      	add	r3, r2
 80109ba:	79fa      	ldrb	r2, [r7, #7]
 80109bc:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80109be:	4b11      	ldr	r3, [pc, #68]	; (8010a04 <FATFS_LinkDriverEx+0x94>)
 80109c0:	7a5b      	ldrb	r3, [r3, #9]
 80109c2:	b2db      	uxtb	r3, r3
 80109c4:	1c5a      	adds	r2, r3, #1
 80109c6:	b2d1      	uxtb	r1, r2
 80109c8:	4a0e      	ldr	r2, [pc, #56]	; (8010a04 <FATFS_LinkDriverEx+0x94>)
 80109ca:	7251      	strb	r1, [r2, #9]
 80109cc:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80109ce:	7dbb      	ldrb	r3, [r7, #22]
 80109d0:	3330      	adds	r3, #48	; 0x30
 80109d2:	b2da      	uxtb	r2, r3
 80109d4:	68bb      	ldr	r3, [r7, #8]
 80109d6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80109d8:	68bb      	ldr	r3, [r7, #8]
 80109da:	3301      	adds	r3, #1
 80109dc:	223a      	movs	r2, #58	; 0x3a
 80109de:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80109e0:	68bb      	ldr	r3, [r7, #8]
 80109e2:	3302      	adds	r3, #2
 80109e4:	222f      	movs	r2, #47	; 0x2f
 80109e6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80109e8:	68bb      	ldr	r3, [r7, #8]
 80109ea:	3303      	adds	r3, #3
 80109ec:	2200      	movs	r2, #0
 80109ee:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80109f0:	2300      	movs	r3, #0
 80109f2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80109f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80109f6:	4618      	mov	r0, r3
 80109f8:	371c      	adds	r7, #28
 80109fa:	46bd      	mov	sp, r7
 80109fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a00:	4770      	bx	lr
 8010a02:	bf00      	nop
 8010a04:	20011a38 	.word	0x20011a38

08010a08 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8010a08:	b580      	push	{r7, lr}
 8010a0a:	b082      	sub	sp, #8
 8010a0c:	af00      	add	r7, sp, #0
 8010a0e:	6078      	str	r0, [r7, #4]
 8010a10:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8010a12:	2200      	movs	r2, #0
 8010a14:	6839      	ldr	r1, [r7, #0]
 8010a16:	6878      	ldr	r0, [r7, #4]
 8010a18:	f7ff ffaa 	bl	8010970 <FATFS_LinkDriverEx>
 8010a1c:	4603      	mov	r3, r0
}
 8010a1e:	4618      	mov	r0, r3
 8010a20:	3708      	adds	r7, #8
 8010a22:	46bd      	mov	sp, r7
 8010a24:	bd80      	pop	{r7, pc}
	...

08010a28 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8010a28:	b480      	push	{r7}
 8010a2a:	b085      	sub	sp, #20
 8010a2c:	af00      	add	r7, sp, #0
 8010a2e:	4603      	mov	r3, r0
 8010a30:	6039      	str	r1, [r7, #0]
 8010a32:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8010a34:	88fb      	ldrh	r3, [r7, #6]
 8010a36:	2b7f      	cmp	r3, #127	; 0x7f
 8010a38:	d802      	bhi.n	8010a40 <ff_convert+0x18>
		c = chr;
 8010a3a:	88fb      	ldrh	r3, [r7, #6]
 8010a3c:	81fb      	strh	r3, [r7, #14]
 8010a3e:	e025      	b.n	8010a8c <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8010a40:	683b      	ldr	r3, [r7, #0]
 8010a42:	2b00      	cmp	r3, #0
 8010a44:	d00b      	beq.n	8010a5e <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8010a46:	88fb      	ldrh	r3, [r7, #6]
 8010a48:	2bff      	cmp	r3, #255	; 0xff
 8010a4a:	d805      	bhi.n	8010a58 <ff_convert+0x30>
 8010a4c:	88fb      	ldrh	r3, [r7, #6]
 8010a4e:	3b80      	subs	r3, #128	; 0x80
 8010a50:	4a12      	ldr	r2, [pc, #72]	; (8010a9c <ff_convert+0x74>)
 8010a52:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010a56:	e000      	b.n	8010a5a <ff_convert+0x32>
 8010a58:	2300      	movs	r3, #0
 8010a5a:	81fb      	strh	r3, [r7, #14]
 8010a5c:	e016      	b.n	8010a8c <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8010a5e:	2300      	movs	r3, #0
 8010a60:	81fb      	strh	r3, [r7, #14]
 8010a62:	e009      	b.n	8010a78 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8010a64:	89fb      	ldrh	r3, [r7, #14]
 8010a66:	4a0d      	ldr	r2, [pc, #52]	; (8010a9c <ff_convert+0x74>)
 8010a68:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010a6c:	88fa      	ldrh	r2, [r7, #6]
 8010a6e:	429a      	cmp	r2, r3
 8010a70:	d006      	beq.n	8010a80 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8010a72:	89fb      	ldrh	r3, [r7, #14]
 8010a74:	3301      	adds	r3, #1
 8010a76:	81fb      	strh	r3, [r7, #14]
 8010a78:	89fb      	ldrh	r3, [r7, #14]
 8010a7a:	2b7f      	cmp	r3, #127	; 0x7f
 8010a7c:	d9f2      	bls.n	8010a64 <ff_convert+0x3c>
 8010a7e:	e000      	b.n	8010a82 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8010a80:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8010a82:	89fb      	ldrh	r3, [r7, #14]
 8010a84:	3380      	adds	r3, #128	; 0x80
 8010a86:	b29b      	uxth	r3, r3
 8010a88:	b2db      	uxtb	r3, r3
 8010a8a:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8010a8c:	89fb      	ldrh	r3, [r7, #14]
}
 8010a8e:	4618      	mov	r0, r3
 8010a90:	3714      	adds	r7, #20
 8010a92:	46bd      	mov	sp, r7
 8010a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a98:	4770      	bx	lr
 8010a9a:	bf00      	nop
 8010a9c:	080127c0 	.word	0x080127c0

08010aa0 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8010aa0:	b480      	push	{r7}
 8010aa2:	b087      	sub	sp, #28
 8010aa4:	af00      	add	r7, sp, #0
 8010aa6:	4603      	mov	r3, r0
 8010aa8:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8010aaa:	88fb      	ldrh	r3, [r7, #6]
 8010aac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010ab0:	d201      	bcs.n	8010ab6 <ff_wtoupper+0x16>
 8010ab2:	4b3e      	ldr	r3, [pc, #248]	; (8010bac <ff_wtoupper+0x10c>)
 8010ab4:	e000      	b.n	8010ab8 <ff_wtoupper+0x18>
 8010ab6:	4b3e      	ldr	r3, [pc, #248]	; (8010bb0 <ff_wtoupper+0x110>)
 8010ab8:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 8010aba:	697b      	ldr	r3, [r7, #20]
 8010abc:	1c9a      	adds	r2, r3, #2
 8010abe:	617a      	str	r2, [r7, #20]
 8010ac0:	881b      	ldrh	r3, [r3, #0]
 8010ac2:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8010ac4:	8a7b      	ldrh	r3, [r7, #18]
 8010ac6:	2b00      	cmp	r3, #0
 8010ac8:	d068      	beq.n	8010b9c <ff_wtoupper+0xfc>
 8010aca:	88fa      	ldrh	r2, [r7, #6]
 8010acc:	8a7b      	ldrh	r3, [r7, #18]
 8010ace:	429a      	cmp	r2, r3
 8010ad0:	d364      	bcc.n	8010b9c <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8010ad2:	697b      	ldr	r3, [r7, #20]
 8010ad4:	1c9a      	adds	r2, r3, #2
 8010ad6:	617a      	str	r2, [r7, #20]
 8010ad8:	881b      	ldrh	r3, [r3, #0]
 8010ada:	823b      	strh	r3, [r7, #16]
 8010adc:	8a3b      	ldrh	r3, [r7, #16]
 8010ade:	0a1b      	lsrs	r3, r3, #8
 8010ae0:	81fb      	strh	r3, [r7, #14]
 8010ae2:	8a3b      	ldrh	r3, [r7, #16]
 8010ae4:	b2db      	uxtb	r3, r3
 8010ae6:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8010ae8:	88fa      	ldrh	r2, [r7, #6]
 8010aea:	8a79      	ldrh	r1, [r7, #18]
 8010aec:	8a3b      	ldrh	r3, [r7, #16]
 8010aee:	440b      	add	r3, r1
 8010af0:	429a      	cmp	r2, r3
 8010af2:	da49      	bge.n	8010b88 <ff_wtoupper+0xe8>
			switch (cmd) {
 8010af4:	89fb      	ldrh	r3, [r7, #14]
 8010af6:	2b08      	cmp	r3, #8
 8010af8:	d84f      	bhi.n	8010b9a <ff_wtoupper+0xfa>
 8010afa:	a201      	add	r2, pc, #4	; (adr r2, 8010b00 <ff_wtoupper+0x60>)
 8010afc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010b00:	08010b25 	.word	0x08010b25
 8010b04:	08010b37 	.word	0x08010b37
 8010b08:	08010b4d 	.word	0x08010b4d
 8010b0c:	08010b55 	.word	0x08010b55
 8010b10:	08010b5d 	.word	0x08010b5d
 8010b14:	08010b65 	.word	0x08010b65
 8010b18:	08010b6d 	.word	0x08010b6d
 8010b1c:	08010b75 	.word	0x08010b75
 8010b20:	08010b7d 	.word	0x08010b7d
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8010b24:	88fa      	ldrh	r2, [r7, #6]
 8010b26:	8a7b      	ldrh	r3, [r7, #18]
 8010b28:	1ad3      	subs	r3, r2, r3
 8010b2a:	005b      	lsls	r3, r3, #1
 8010b2c:	697a      	ldr	r2, [r7, #20]
 8010b2e:	4413      	add	r3, r2
 8010b30:	881b      	ldrh	r3, [r3, #0]
 8010b32:	80fb      	strh	r3, [r7, #6]
 8010b34:	e027      	b.n	8010b86 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8010b36:	88fa      	ldrh	r2, [r7, #6]
 8010b38:	8a7b      	ldrh	r3, [r7, #18]
 8010b3a:	1ad3      	subs	r3, r2, r3
 8010b3c:	b29b      	uxth	r3, r3
 8010b3e:	f003 0301 	and.w	r3, r3, #1
 8010b42:	b29b      	uxth	r3, r3
 8010b44:	88fa      	ldrh	r2, [r7, #6]
 8010b46:	1ad3      	subs	r3, r2, r3
 8010b48:	80fb      	strh	r3, [r7, #6]
 8010b4a:	e01c      	b.n	8010b86 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8010b4c:	88fb      	ldrh	r3, [r7, #6]
 8010b4e:	3b10      	subs	r3, #16
 8010b50:	80fb      	strh	r3, [r7, #6]
 8010b52:	e018      	b.n	8010b86 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8010b54:	88fb      	ldrh	r3, [r7, #6]
 8010b56:	3b20      	subs	r3, #32
 8010b58:	80fb      	strh	r3, [r7, #6]
 8010b5a:	e014      	b.n	8010b86 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8010b5c:	88fb      	ldrh	r3, [r7, #6]
 8010b5e:	3b30      	subs	r3, #48	; 0x30
 8010b60:	80fb      	strh	r3, [r7, #6]
 8010b62:	e010      	b.n	8010b86 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8010b64:	88fb      	ldrh	r3, [r7, #6]
 8010b66:	3b1a      	subs	r3, #26
 8010b68:	80fb      	strh	r3, [r7, #6]
 8010b6a:	e00c      	b.n	8010b86 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8010b6c:	88fb      	ldrh	r3, [r7, #6]
 8010b6e:	3308      	adds	r3, #8
 8010b70:	80fb      	strh	r3, [r7, #6]
 8010b72:	e008      	b.n	8010b86 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8010b74:	88fb      	ldrh	r3, [r7, #6]
 8010b76:	3b50      	subs	r3, #80	; 0x50
 8010b78:	80fb      	strh	r3, [r7, #6]
 8010b7a:	e004      	b.n	8010b86 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8010b7c:	88fb      	ldrh	r3, [r7, #6]
 8010b7e:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 8010b82:	80fb      	strh	r3, [r7, #6]
 8010b84:	bf00      	nop
			}
			break;
 8010b86:	e008      	b.n	8010b9a <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8010b88:	89fb      	ldrh	r3, [r7, #14]
 8010b8a:	2b00      	cmp	r3, #0
 8010b8c:	d195      	bne.n	8010aba <ff_wtoupper+0x1a>
 8010b8e:	8a3b      	ldrh	r3, [r7, #16]
 8010b90:	005b      	lsls	r3, r3, #1
 8010b92:	697a      	ldr	r2, [r7, #20]
 8010b94:	4413      	add	r3, r2
 8010b96:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8010b98:	e78f      	b.n	8010aba <ff_wtoupper+0x1a>
			break;
 8010b9a:	bf00      	nop
	}

	return chr;
 8010b9c:	88fb      	ldrh	r3, [r7, #6]
}
 8010b9e:	4618      	mov	r0, r3
 8010ba0:	371c      	adds	r7, #28
 8010ba2:	46bd      	mov	sp, r7
 8010ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ba8:	4770      	bx	lr
 8010baa:	bf00      	nop
 8010bac:	080128c0 	.word	0x080128c0
 8010bb0:	08012ab4 	.word	0x08012ab4

08010bb4 <__errno>:
 8010bb4:	4b01      	ldr	r3, [pc, #4]	; (8010bbc <__errno+0x8>)
 8010bb6:	6818      	ldr	r0, [r3, #0]
 8010bb8:	4770      	bx	lr
 8010bba:	bf00      	nop
 8010bbc:	200000c4 	.word	0x200000c4

08010bc0 <__libc_init_array>:
 8010bc0:	b570      	push	{r4, r5, r6, lr}
 8010bc2:	4d0d      	ldr	r5, [pc, #52]	; (8010bf8 <__libc_init_array+0x38>)
 8010bc4:	4c0d      	ldr	r4, [pc, #52]	; (8010bfc <__libc_init_array+0x3c>)
 8010bc6:	1b64      	subs	r4, r4, r5
 8010bc8:	10a4      	asrs	r4, r4, #2
 8010bca:	2600      	movs	r6, #0
 8010bcc:	42a6      	cmp	r6, r4
 8010bce:	d109      	bne.n	8010be4 <__libc_init_array+0x24>
 8010bd0:	4d0b      	ldr	r5, [pc, #44]	; (8010c00 <__libc_init_array+0x40>)
 8010bd2:	4c0c      	ldr	r4, [pc, #48]	; (8010c04 <__libc_init_array+0x44>)
 8010bd4:	f001 fad2 	bl	801217c <_init>
 8010bd8:	1b64      	subs	r4, r4, r5
 8010bda:	10a4      	asrs	r4, r4, #2
 8010bdc:	2600      	movs	r6, #0
 8010bde:	42a6      	cmp	r6, r4
 8010be0:	d105      	bne.n	8010bee <__libc_init_array+0x2e>
 8010be2:	bd70      	pop	{r4, r5, r6, pc}
 8010be4:	f855 3b04 	ldr.w	r3, [r5], #4
 8010be8:	4798      	blx	r3
 8010bea:	3601      	adds	r6, #1
 8010bec:	e7ee      	b.n	8010bcc <__libc_init_array+0xc>
 8010bee:	f855 3b04 	ldr.w	r3, [r5], #4
 8010bf2:	4798      	blx	r3
 8010bf4:	3601      	adds	r6, #1
 8010bf6:	e7f2      	b.n	8010bde <__libc_init_array+0x1e>
 8010bf8:	08012d14 	.word	0x08012d14
 8010bfc:	08012d14 	.word	0x08012d14
 8010c00:	08012d14 	.word	0x08012d14
 8010c04:	08012d18 	.word	0x08012d18

08010c08 <malloc>:
 8010c08:	4b02      	ldr	r3, [pc, #8]	; (8010c14 <malloc+0xc>)
 8010c0a:	4601      	mov	r1, r0
 8010c0c:	6818      	ldr	r0, [r3, #0]
 8010c0e:	f000 b87f 	b.w	8010d10 <_malloc_r>
 8010c12:	bf00      	nop
 8010c14:	200000c4 	.word	0x200000c4

08010c18 <free>:
 8010c18:	4b02      	ldr	r3, [pc, #8]	; (8010c24 <free+0xc>)
 8010c1a:	4601      	mov	r1, r0
 8010c1c:	6818      	ldr	r0, [r3, #0]
 8010c1e:	f000 b80b 	b.w	8010c38 <_free_r>
 8010c22:	bf00      	nop
 8010c24:	200000c4 	.word	0x200000c4

08010c28 <memset>:
 8010c28:	4402      	add	r2, r0
 8010c2a:	4603      	mov	r3, r0
 8010c2c:	4293      	cmp	r3, r2
 8010c2e:	d100      	bne.n	8010c32 <memset+0xa>
 8010c30:	4770      	bx	lr
 8010c32:	f803 1b01 	strb.w	r1, [r3], #1
 8010c36:	e7f9      	b.n	8010c2c <memset+0x4>

08010c38 <_free_r>:
 8010c38:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010c3a:	2900      	cmp	r1, #0
 8010c3c:	d044      	beq.n	8010cc8 <_free_r+0x90>
 8010c3e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010c42:	9001      	str	r0, [sp, #4]
 8010c44:	2b00      	cmp	r3, #0
 8010c46:	f1a1 0404 	sub.w	r4, r1, #4
 8010c4a:	bfb8      	it	lt
 8010c4c:	18e4      	addlt	r4, r4, r3
 8010c4e:	f000 fd33 	bl	80116b8 <__malloc_lock>
 8010c52:	4a1e      	ldr	r2, [pc, #120]	; (8010ccc <_free_r+0x94>)
 8010c54:	9801      	ldr	r0, [sp, #4]
 8010c56:	6813      	ldr	r3, [r2, #0]
 8010c58:	b933      	cbnz	r3, 8010c68 <_free_r+0x30>
 8010c5a:	6063      	str	r3, [r4, #4]
 8010c5c:	6014      	str	r4, [r2, #0]
 8010c5e:	b003      	add	sp, #12
 8010c60:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010c64:	f000 bd2e 	b.w	80116c4 <__malloc_unlock>
 8010c68:	42a3      	cmp	r3, r4
 8010c6a:	d908      	bls.n	8010c7e <_free_r+0x46>
 8010c6c:	6825      	ldr	r5, [r4, #0]
 8010c6e:	1961      	adds	r1, r4, r5
 8010c70:	428b      	cmp	r3, r1
 8010c72:	bf01      	itttt	eq
 8010c74:	6819      	ldreq	r1, [r3, #0]
 8010c76:	685b      	ldreq	r3, [r3, #4]
 8010c78:	1949      	addeq	r1, r1, r5
 8010c7a:	6021      	streq	r1, [r4, #0]
 8010c7c:	e7ed      	b.n	8010c5a <_free_r+0x22>
 8010c7e:	461a      	mov	r2, r3
 8010c80:	685b      	ldr	r3, [r3, #4]
 8010c82:	b10b      	cbz	r3, 8010c88 <_free_r+0x50>
 8010c84:	42a3      	cmp	r3, r4
 8010c86:	d9fa      	bls.n	8010c7e <_free_r+0x46>
 8010c88:	6811      	ldr	r1, [r2, #0]
 8010c8a:	1855      	adds	r5, r2, r1
 8010c8c:	42a5      	cmp	r5, r4
 8010c8e:	d10b      	bne.n	8010ca8 <_free_r+0x70>
 8010c90:	6824      	ldr	r4, [r4, #0]
 8010c92:	4421      	add	r1, r4
 8010c94:	1854      	adds	r4, r2, r1
 8010c96:	42a3      	cmp	r3, r4
 8010c98:	6011      	str	r1, [r2, #0]
 8010c9a:	d1e0      	bne.n	8010c5e <_free_r+0x26>
 8010c9c:	681c      	ldr	r4, [r3, #0]
 8010c9e:	685b      	ldr	r3, [r3, #4]
 8010ca0:	6053      	str	r3, [r2, #4]
 8010ca2:	4421      	add	r1, r4
 8010ca4:	6011      	str	r1, [r2, #0]
 8010ca6:	e7da      	b.n	8010c5e <_free_r+0x26>
 8010ca8:	d902      	bls.n	8010cb0 <_free_r+0x78>
 8010caa:	230c      	movs	r3, #12
 8010cac:	6003      	str	r3, [r0, #0]
 8010cae:	e7d6      	b.n	8010c5e <_free_r+0x26>
 8010cb0:	6825      	ldr	r5, [r4, #0]
 8010cb2:	1961      	adds	r1, r4, r5
 8010cb4:	428b      	cmp	r3, r1
 8010cb6:	bf04      	itt	eq
 8010cb8:	6819      	ldreq	r1, [r3, #0]
 8010cba:	685b      	ldreq	r3, [r3, #4]
 8010cbc:	6063      	str	r3, [r4, #4]
 8010cbe:	bf04      	itt	eq
 8010cc0:	1949      	addeq	r1, r1, r5
 8010cc2:	6021      	streq	r1, [r4, #0]
 8010cc4:	6054      	str	r4, [r2, #4]
 8010cc6:	e7ca      	b.n	8010c5e <_free_r+0x26>
 8010cc8:	b003      	add	sp, #12
 8010cca:	bd30      	pop	{r4, r5, pc}
 8010ccc:	20011a44 	.word	0x20011a44

08010cd0 <sbrk_aligned>:
 8010cd0:	b570      	push	{r4, r5, r6, lr}
 8010cd2:	4e0e      	ldr	r6, [pc, #56]	; (8010d0c <sbrk_aligned+0x3c>)
 8010cd4:	460c      	mov	r4, r1
 8010cd6:	6831      	ldr	r1, [r6, #0]
 8010cd8:	4605      	mov	r5, r0
 8010cda:	b911      	cbnz	r1, 8010ce2 <sbrk_aligned+0x12>
 8010cdc:	f000 f91a 	bl	8010f14 <_sbrk_r>
 8010ce0:	6030      	str	r0, [r6, #0]
 8010ce2:	4621      	mov	r1, r4
 8010ce4:	4628      	mov	r0, r5
 8010ce6:	f000 f915 	bl	8010f14 <_sbrk_r>
 8010cea:	1c43      	adds	r3, r0, #1
 8010cec:	d00a      	beq.n	8010d04 <sbrk_aligned+0x34>
 8010cee:	1cc4      	adds	r4, r0, #3
 8010cf0:	f024 0403 	bic.w	r4, r4, #3
 8010cf4:	42a0      	cmp	r0, r4
 8010cf6:	d007      	beq.n	8010d08 <sbrk_aligned+0x38>
 8010cf8:	1a21      	subs	r1, r4, r0
 8010cfa:	4628      	mov	r0, r5
 8010cfc:	f000 f90a 	bl	8010f14 <_sbrk_r>
 8010d00:	3001      	adds	r0, #1
 8010d02:	d101      	bne.n	8010d08 <sbrk_aligned+0x38>
 8010d04:	f04f 34ff 	mov.w	r4, #4294967295
 8010d08:	4620      	mov	r0, r4
 8010d0a:	bd70      	pop	{r4, r5, r6, pc}
 8010d0c:	20011a48 	.word	0x20011a48

08010d10 <_malloc_r>:
 8010d10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010d14:	1ccd      	adds	r5, r1, #3
 8010d16:	f025 0503 	bic.w	r5, r5, #3
 8010d1a:	3508      	adds	r5, #8
 8010d1c:	2d0c      	cmp	r5, #12
 8010d1e:	bf38      	it	cc
 8010d20:	250c      	movcc	r5, #12
 8010d22:	2d00      	cmp	r5, #0
 8010d24:	4607      	mov	r7, r0
 8010d26:	db01      	blt.n	8010d2c <_malloc_r+0x1c>
 8010d28:	42a9      	cmp	r1, r5
 8010d2a:	d905      	bls.n	8010d38 <_malloc_r+0x28>
 8010d2c:	230c      	movs	r3, #12
 8010d2e:	603b      	str	r3, [r7, #0]
 8010d30:	2600      	movs	r6, #0
 8010d32:	4630      	mov	r0, r6
 8010d34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010d38:	4e2e      	ldr	r6, [pc, #184]	; (8010df4 <_malloc_r+0xe4>)
 8010d3a:	f000 fcbd 	bl	80116b8 <__malloc_lock>
 8010d3e:	6833      	ldr	r3, [r6, #0]
 8010d40:	461c      	mov	r4, r3
 8010d42:	bb34      	cbnz	r4, 8010d92 <_malloc_r+0x82>
 8010d44:	4629      	mov	r1, r5
 8010d46:	4638      	mov	r0, r7
 8010d48:	f7ff ffc2 	bl	8010cd0 <sbrk_aligned>
 8010d4c:	1c43      	adds	r3, r0, #1
 8010d4e:	4604      	mov	r4, r0
 8010d50:	d14d      	bne.n	8010dee <_malloc_r+0xde>
 8010d52:	6834      	ldr	r4, [r6, #0]
 8010d54:	4626      	mov	r6, r4
 8010d56:	2e00      	cmp	r6, #0
 8010d58:	d140      	bne.n	8010ddc <_malloc_r+0xcc>
 8010d5a:	6823      	ldr	r3, [r4, #0]
 8010d5c:	4631      	mov	r1, r6
 8010d5e:	4638      	mov	r0, r7
 8010d60:	eb04 0803 	add.w	r8, r4, r3
 8010d64:	f000 f8d6 	bl	8010f14 <_sbrk_r>
 8010d68:	4580      	cmp	r8, r0
 8010d6a:	d13a      	bne.n	8010de2 <_malloc_r+0xd2>
 8010d6c:	6821      	ldr	r1, [r4, #0]
 8010d6e:	3503      	adds	r5, #3
 8010d70:	1a6d      	subs	r5, r5, r1
 8010d72:	f025 0503 	bic.w	r5, r5, #3
 8010d76:	3508      	adds	r5, #8
 8010d78:	2d0c      	cmp	r5, #12
 8010d7a:	bf38      	it	cc
 8010d7c:	250c      	movcc	r5, #12
 8010d7e:	4629      	mov	r1, r5
 8010d80:	4638      	mov	r0, r7
 8010d82:	f7ff ffa5 	bl	8010cd0 <sbrk_aligned>
 8010d86:	3001      	adds	r0, #1
 8010d88:	d02b      	beq.n	8010de2 <_malloc_r+0xd2>
 8010d8a:	6823      	ldr	r3, [r4, #0]
 8010d8c:	442b      	add	r3, r5
 8010d8e:	6023      	str	r3, [r4, #0]
 8010d90:	e00e      	b.n	8010db0 <_malloc_r+0xa0>
 8010d92:	6822      	ldr	r2, [r4, #0]
 8010d94:	1b52      	subs	r2, r2, r5
 8010d96:	d41e      	bmi.n	8010dd6 <_malloc_r+0xc6>
 8010d98:	2a0b      	cmp	r2, #11
 8010d9a:	d916      	bls.n	8010dca <_malloc_r+0xba>
 8010d9c:	1961      	adds	r1, r4, r5
 8010d9e:	42a3      	cmp	r3, r4
 8010da0:	6025      	str	r5, [r4, #0]
 8010da2:	bf18      	it	ne
 8010da4:	6059      	strne	r1, [r3, #4]
 8010da6:	6863      	ldr	r3, [r4, #4]
 8010da8:	bf08      	it	eq
 8010daa:	6031      	streq	r1, [r6, #0]
 8010dac:	5162      	str	r2, [r4, r5]
 8010dae:	604b      	str	r3, [r1, #4]
 8010db0:	4638      	mov	r0, r7
 8010db2:	f104 060b 	add.w	r6, r4, #11
 8010db6:	f000 fc85 	bl	80116c4 <__malloc_unlock>
 8010dba:	f026 0607 	bic.w	r6, r6, #7
 8010dbe:	1d23      	adds	r3, r4, #4
 8010dc0:	1af2      	subs	r2, r6, r3
 8010dc2:	d0b6      	beq.n	8010d32 <_malloc_r+0x22>
 8010dc4:	1b9b      	subs	r3, r3, r6
 8010dc6:	50a3      	str	r3, [r4, r2]
 8010dc8:	e7b3      	b.n	8010d32 <_malloc_r+0x22>
 8010dca:	6862      	ldr	r2, [r4, #4]
 8010dcc:	42a3      	cmp	r3, r4
 8010dce:	bf0c      	ite	eq
 8010dd0:	6032      	streq	r2, [r6, #0]
 8010dd2:	605a      	strne	r2, [r3, #4]
 8010dd4:	e7ec      	b.n	8010db0 <_malloc_r+0xa0>
 8010dd6:	4623      	mov	r3, r4
 8010dd8:	6864      	ldr	r4, [r4, #4]
 8010dda:	e7b2      	b.n	8010d42 <_malloc_r+0x32>
 8010ddc:	4634      	mov	r4, r6
 8010dde:	6876      	ldr	r6, [r6, #4]
 8010de0:	e7b9      	b.n	8010d56 <_malloc_r+0x46>
 8010de2:	230c      	movs	r3, #12
 8010de4:	603b      	str	r3, [r7, #0]
 8010de6:	4638      	mov	r0, r7
 8010de8:	f000 fc6c 	bl	80116c4 <__malloc_unlock>
 8010dec:	e7a1      	b.n	8010d32 <_malloc_r+0x22>
 8010dee:	6025      	str	r5, [r4, #0]
 8010df0:	e7de      	b.n	8010db0 <_malloc_r+0xa0>
 8010df2:	bf00      	nop
 8010df4:	20011a44 	.word	0x20011a44

08010df8 <iprintf>:
 8010df8:	b40f      	push	{r0, r1, r2, r3}
 8010dfa:	4b0a      	ldr	r3, [pc, #40]	; (8010e24 <iprintf+0x2c>)
 8010dfc:	b513      	push	{r0, r1, r4, lr}
 8010dfe:	681c      	ldr	r4, [r3, #0]
 8010e00:	b124      	cbz	r4, 8010e0c <iprintf+0x14>
 8010e02:	69a3      	ldr	r3, [r4, #24]
 8010e04:	b913      	cbnz	r3, 8010e0c <iprintf+0x14>
 8010e06:	4620      	mov	r0, r4
 8010e08:	f000 fb50 	bl	80114ac <__sinit>
 8010e0c:	ab05      	add	r3, sp, #20
 8010e0e:	9a04      	ldr	r2, [sp, #16]
 8010e10:	68a1      	ldr	r1, [r4, #8]
 8010e12:	9301      	str	r3, [sp, #4]
 8010e14:	4620      	mov	r0, r4
 8010e16:	f000 fde1 	bl	80119dc <_vfiprintf_r>
 8010e1a:	b002      	add	sp, #8
 8010e1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010e20:	b004      	add	sp, #16
 8010e22:	4770      	bx	lr
 8010e24:	200000c4 	.word	0x200000c4

08010e28 <_puts_r>:
 8010e28:	b570      	push	{r4, r5, r6, lr}
 8010e2a:	460e      	mov	r6, r1
 8010e2c:	4605      	mov	r5, r0
 8010e2e:	b118      	cbz	r0, 8010e38 <_puts_r+0x10>
 8010e30:	6983      	ldr	r3, [r0, #24]
 8010e32:	b90b      	cbnz	r3, 8010e38 <_puts_r+0x10>
 8010e34:	f000 fb3a 	bl	80114ac <__sinit>
 8010e38:	69ab      	ldr	r3, [r5, #24]
 8010e3a:	68ac      	ldr	r4, [r5, #8]
 8010e3c:	b913      	cbnz	r3, 8010e44 <_puts_r+0x1c>
 8010e3e:	4628      	mov	r0, r5
 8010e40:	f000 fb34 	bl	80114ac <__sinit>
 8010e44:	4b2c      	ldr	r3, [pc, #176]	; (8010ef8 <_puts_r+0xd0>)
 8010e46:	429c      	cmp	r4, r3
 8010e48:	d120      	bne.n	8010e8c <_puts_r+0x64>
 8010e4a:	686c      	ldr	r4, [r5, #4]
 8010e4c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010e4e:	07db      	lsls	r3, r3, #31
 8010e50:	d405      	bmi.n	8010e5e <_puts_r+0x36>
 8010e52:	89a3      	ldrh	r3, [r4, #12]
 8010e54:	0598      	lsls	r0, r3, #22
 8010e56:	d402      	bmi.n	8010e5e <_puts_r+0x36>
 8010e58:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010e5a:	f000 fbc5 	bl	80115e8 <__retarget_lock_acquire_recursive>
 8010e5e:	89a3      	ldrh	r3, [r4, #12]
 8010e60:	0719      	lsls	r1, r3, #28
 8010e62:	d51d      	bpl.n	8010ea0 <_puts_r+0x78>
 8010e64:	6923      	ldr	r3, [r4, #16]
 8010e66:	b1db      	cbz	r3, 8010ea0 <_puts_r+0x78>
 8010e68:	3e01      	subs	r6, #1
 8010e6a:	68a3      	ldr	r3, [r4, #8]
 8010e6c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8010e70:	3b01      	subs	r3, #1
 8010e72:	60a3      	str	r3, [r4, #8]
 8010e74:	bb39      	cbnz	r1, 8010ec6 <_puts_r+0x9e>
 8010e76:	2b00      	cmp	r3, #0
 8010e78:	da38      	bge.n	8010eec <_puts_r+0xc4>
 8010e7a:	4622      	mov	r2, r4
 8010e7c:	210a      	movs	r1, #10
 8010e7e:	4628      	mov	r0, r5
 8010e80:	f000 f93a 	bl	80110f8 <__swbuf_r>
 8010e84:	3001      	adds	r0, #1
 8010e86:	d011      	beq.n	8010eac <_puts_r+0x84>
 8010e88:	250a      	movs	r5, #10
 8010e8a:	e011      	b.n	8010eb0 <_puts_r+0x88>
 8010e8c:	4b1b      	ldr	r3, [pc, #108]	; (8010efc <_puts_r+0xd4>)
 8010e8e:	429c      	cmp	r4, r3
 8010e90:	d101      	bne.n	8010e96 <_puts_r+0x6e>
 8010e92:	68ac      	ldr	r4, [r5, #8]
 8010e94:	e7da      	b.n	8010e4c <_puts_r+0x24>
 8010e96:	4b1a      	ldr	r3, [pc, #104]	; (8010f00 <_puts_r+0xd8>)
 8010e98:	429c      	cmp	r4, r3
 8010e9a:	bf08      	it	eq
 8010e9c:	68ec      	ldreq	r4, [r5, #12]
 8010e9e:	e7d5      	b.n	8010e4c <_puts_r+0x24>
 8010ea0:	4621      	mov	r1, r4
 8010ea2:	4628      	mov	r0, r5
 8010ea4:	f000 f97a 	bl	801119c <__swsetup_r>
 8010ea8:	2800      	cmp	r0, #0
 8010eaa:	d0dd      	beq.n	8010e68 <_puts_r+0x40>
 8010eac:	f04f 35ff 	mov.w	r5, #4294967295
 8010eb0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010eb2:	07da      	lsls	r2, r3, #31
 8010eb4:	d405      	bmi.n	8010ec2 <_puts_r+0x9a>
 8010eb6:	89a3      	ldrh	r3, [r4, #12]
 8010eb8:	059b      	lsls	r3, r3, #22
 8010eba:	d402      	bmi.n	8010ec2 <_puts_r+0x9a>
 8010ebc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010ebe:	f000 fb94 	bl	80115ea <__retarget_lock_release_recursive>
 8010ec2:	4628      	mov	r0, r5
 8010ec4:	bd70      	pop	{r4, r5, r6, pc}
 8010ec6:	2b00      	cmp	r3, #0
 8010ec8:	da04      	bge.n	8010ed4 <_puts_r+0xac>
 8010eca:	69a2      	ldr	r2, [r4, #24]
 8010ecc:	429a      	cmp	r2, r3
 8010ece:	dc06      	bgt.n	8010ede <_puts_r+0xb6>
 8010ed0:	290a      	cmp	r1, #10
 8010ed2:	d004      	beq.n	8010ede <_puts_r+0xb6>
 8010ed4:	6823      	ldr	r3, [r4, #0]
 8010ed6:	1c5a      	adds	r2, r3, #1
 8010ed8:	6022      	str	r2, [r4, #0]
 8010eda:	7019      	strb	r1, [r3, #0]
 8010edc:	e7c5      	b.n	8010e6a <_puts_r+0x42>
 8010ede:	4622      	mov	r2, r4
 8010ee0:	4628      	mov	r0, r5
 8010ee2:	f000 f909 	bl	80110f8 <__swbuf_r>
 8010ee6:	3001      	adds	r0, #1
 8010ee8:	d1bf      	bne.n	8010e6a <_puts_r+0x42>
 8010eea:	e7df      	b.n	8010eac <_puts_r+0x84>
 8010eec:	6823      	ldr	r3, [r4, #0]
 8010eee:	250a      	movs	r5, #10
 8010ef0:	1c5a      	adds	r2, r3, #1
 8010ef2:	6022      	str	r2, [r4, #0]
 8010ef4:	701d      	strb	r5, [r3, #0]
 8010ef6:	e7db      	b.n	8010eb0 <_puts_r+0x88>
 8010ef8:	08012c98 	.word	0x08012c98
 8010efc:	08012cb8 	.word	0x08012cb8
 8010f00:	08012c78 	.word	0x08012c78

08010f04 <puts>:
 8010f04:	4b02      	ldr	r3, [pc, #8]	; (8010f10 <puts+0xc>)
 8010f06:	4601      	mov	r1, r0
 8010f08:	6818      	ldr	r0, [r3, #0]
 8010f0a:	f7ff bf8d 	b.w	8010e28 <_puts_r>
 8010f0e:	bf00      	nop
 8010f10:	200000c4 	.word	0x200000c4

08010f14 <_sbrk_r>:
 8010f14:	b538      	push	{r3, r4, r5, lr}
 8010f16:	4d06      	ldr	r5, [pc, #24]	; (8010f30 <_sbrk_r+0x1c>)
 8010f18:	2300      	movs	r3, #0
 8010f1a:	4604      	mov	r4, r0
 8010f1c:	4608      	mov	r0, r1
 8010f1e:	602b      	str	r3, [r5, #0]
 8010f20:	f7f2 fe2a 	bl	8003b78 <_sbrk>
 8010f24:	1c43      	adds	r3, r0, #1
 8010f26:	d102      	bne.n	8010f2e <_sbrk_r+0x1a>
 8010f28:	682b      	ldr	r3, [r5, #0]
 8010f2a:	b103      	cbz	r3, 8010f2e <_sbrk_r+0x1a>
 8010f2c:	6023      	str	r3, [r4, #0]
 8010f2e:	bd38      	pop	{r3, r4, r5, pc}
 8010f30:	20011a50 	.word	0x20011a50

08010f34 <siprintf>:
 8010f34:	b40e      	push	{r1, r2, r3}
 8010f36:	b500      	push	{lr}
 8010f38:	b09c      	sub	sp, #112	; 0x70
 8010f3a:	ab1d      	add	r3, sp, #116	; 0x74
 8010f3c:	9002      	str	r0, [sp, #8]
 8010f3e:	9006      	str	r0, [sp, #24]
 8010f40:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8010f44:	4809      	ldr	r0, [pc, #36]	; (8010f6c <siprintf+0x38>)
 8010f46:	9107      	str	r1, [sp, #28]
 8010f48:	9104      	str	r1, [sp, #16]
 8010f4a:	4909      	ldr	r1, [pc, #36]	; (8010f70 <siprintf+0x3c>)
 8010f4c:	f853 2b04 	ldr.w	r2, [r3], #4
 8010f50:	9105      	str	r1, [sp, #20]
 8010f52:	6800      	ldr	r0, [r0, #0]
 8010f54:	9301      	str	r3, [sp, #4]
 8010f56:	a902      	add	r1, sp, #8
 8010f58:	f000 fc16 	bl	8011788 <_svfiprintf_r>
 8010f5c:	9b02      	ldr	r3, [sp, #8]
 8010f5e:	2200      	movs	r2, #0
 8010f60:	701a      	strb	r2, [r3, #0]
 8010f62:	b01c      	add	sp, #112	; 0x70
 8010f64:	f85d eb04 	ldr.w	lr, [sp], #4
 8010f68:	b003      	add	sp, #12
 8010f6a:	4770      	bx	lr
 8010f6c:	200000c4 	.word	0x200000c4
 8010f70:	ffff0208 	.word	0xffff0208

08010f74 <strchr>:
 8010f74:	b2c9      	uxtb	r1, r1
 8010f76:	4603      	mov	r3, r0
 8010f78:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010f7c:	b11a      	cbz	r2, 8010f86 <strchr+0x12>
 8010f7e:	428a      	cmp	r2, r1
 8010f80:	d1f9      	bne.n	8010f76 <strchr+0x2>
 8010f82:	4618      	mov	r0, r3
 8010f84:	4770      	bx	lr
 8010f86:	2900      	cmp	r1, #0
 8010f88:	bf18      	it	ne
 8010f8a:	2300      	movne	r3, #0
 8010f8c:	e7f9      	b.n	8010f82 <strchr+0xe>

08010f8e <strncpy>:
 8010f8e:	b510      	push	{r4, lr}
 8010f90:	3901      	subs	r1, #1
 8010f92:	4603      	mov	r3, r0
 8010f94:	b132      	cbz	r2, 8010fa4 <strncpy+0x16>
 8010f96:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8010f9a:	f803 4b01 	strb.w	r4, [r3], #1
 8010f9e:	3a01      	subs	r2, #1
 8010fa0:	2c00      	cmp	r4, #0
 8010fa2:	d1f7      	bne.n	8010f94 <strncpy+0x6>
 8010fa4:	441a      	add	r2, r3
 8010fa6:	2100      	movs	r1, #0
 8010fa8:	4293      	cmp	r3, r2
 8010faa:	d100      	bne.n	8010fae <strncpy+0x20>
 8010fac:	bd10      	pop	{r4, pc}
 8010fae:	f803 1b01 	strb.w	r1, [r3], #1
 8010fb2:	e7f9      	b.n	8010fa8 <strncpy+0x1a>

08010fb4 <strstr>:
 8010fb4:	780a      	ldrb	r2, [r1, #0]
 8010fb6:	b570      	push	{r4, r5, r6, lr}
 8010fb8:	b96a      	cbnz	r2, 8010fd6 <strstr+0x22>
 8010fba:	bd70      	pop	{r4, r5, r6, pc}
 8010fbc:	429a      	cmp	r2, r3
 8010fbe:	d109      	bne.n	8010fd4 <strstr+0x20>
 8010fc0:	460c      	mov	r4, r1
 8010fc2:	4605      	mov	r5, r0
 8010fc4:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8010fc8:	2b00      	cmp	r3, #0
 8010fca:	d0f6      	beq.n	8010fba <strstr+0x6>
 8010fcc:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8010fd0:	429e      	cmp	r6, r3
 8010fd2:	d0f7      	beq.n	8010fc4 <strstr+0x10>
 8010fd4:	3001      	adds	r0, #1
 8010fd6:	7803      	ldrb	r3, [r0, #0]
 8010fd8:	2b00      	cmp	r3, #0
 8010fda:	d1ef      	bne.n	8010fbc <strstr+0x8>
 8010fdc:	4618      	mov	r0, r3
 8010fde:	e7ec      	b.n	8010fba <strstr+0x6>

08010fe0 <_strtol_l.constprop.0>:
 8010fe0:	2b01      	cmp	r3, #1
 8010fe2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010fe6:	d001      	beq.n	8010fec <_strtol_l.constprop.0+0xc>
 8010fe8:	2b24      	cmp	r3, #36	; 0x24
 8010fea:	d906      	bls.n	8010ffa <_strtol_l.constprop.0+0x1a>
 8010fec:	f7ff fde2 	bl	8010bb4 <__errno>
 8010ff0:	2316      	movs	r3, #22
 8010ff2:	6003      	str	r3, [r0, #0]
 8010ff4:	2000      	movs	r0, #0
 8010ff6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010ffa:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80110e0 <_strtol_l.constprop.0+0x100>
 8010ffe:	460d      	mov	r5, r1
 8011000:	462e      	mov	r6, r5
 8011002:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011006:	f814 700c 	ldrb.w	r7, [r4, ip]
 801100a:	f017 0708 	ands.w	r7, r7, #8
 801100e:	d1f7      	bne.n	8011000 <_strtol_l.constprop.0+0x20>
 8011010:	2c2d      	cmp	r4, #45	; 0x2d
 8011012:	d132      	bne.n	801107a <_strtol_l.constprop.0+0x9a>
 8011014:	782c      	ldrb	r4, [r5, #0]
 8011016:	2701      	movs	r7, #1
 8011018:	1cb5      	adds	r5, r6, #2
 801101a:	2b00      	cmp	r3, #0
 801101c:	d05b      	beq.n	80110d6 <_strtol_l.constprop.0+0xf6>
 801101e:	2b10      	cmp	r3, #16
 8011020:	d109      	bne.n	8011036 <_strtol_l.constprop.0+0x56>
 8011022:	2c30      	cmp	r4, #48	; 0x30
 8011024:	d107      	bne.n	8011036 <_strtol_l.constprop.0+0x56>
 8011026:	782c      	ldrb	r4, [r5, #0]
 8011028:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 801102c:	2c58      	cmp	r4, #88	; 0x58
 801102e:	d14d      	bne.n	80110cc <_strtol_l.constprop.0+0xec>
 8011030:	786c      	ldrb	r4, [r5, #1]
 8011032:	2310      	movs	r3, #16
 8011034:	3502      	adds	r5, #2
 8011036:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 801103a:	f108 38ff 	add.w	r8, r8, #4294967295
 801103e:	f04f 0c00 	mov.w	ip, #0
 8011042:	fbb8 f9f3 	udiv	r9, r8, r3
 8011046:	4666      	mov	r6, ip
 8011048:	fb03 8a19 	mls	sl, r3, r9, r8
 801104c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8011050:	f1be 0f09 	cmp.w	lr, #9
 8011054:	d816      	bhi.n	8011084 <_strtol_l.constprop.0+0xa4>
 8011056:	4674      	mov	r4, lr
 8011058:	42a3      	cmp	r3, r4
 801105a:	dd24      	ble.n	80110a6 <_strtol_l.constprop.0+0xc6>
 801105c:	f1bc 0f00 	cmp.w	ip, #0
 8011060:	db1e      	blt.n	80110a0 <_strtol_l.constprop.0+0xc0>
 8011062:	45b1      	cmp	r9, r6
 8011064:	d31c      	bcc.n	80110a0 <_strtol_l.constprop.0+0xc0>
 8011066:	d101      	bne.n	801106c <_strtol_l.constprop.0+0x8c>
 8011068:	45a2      	cmp	sl, r4
 801106a:	db19      	blt.n	80110a0 <_strtol_l.constprop.0+0xc0>
 801106c:	fb06 4603 	mla	r6, r6, r3, r4
 8011070:	f04f 0c01 	mov.w	ip, #1
 8011074:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011078:	e7e8      	b.n	801104c <_strtol_l.constprop.0+0x6c>
 801107a:	2c2b      	cmp	r4, #43	; 0x2b
 801107c:	bf04      	itt	eq
 801107e:	782c      	ldrbeq	r4, [r5, #0]
 8011080:	1cb5      	addeq	r5, r6, #2
 8011082:	e7ca      	b.n	801101a <_strtol_l.constprop.0+0x3a>
 8011084:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8011088:	f1be 0f19 	cmp.w	lr, #25
 801108c:	d801      	bhi.n	8011092 <_strtol_l.constprop.0+0xb2>
 801108e:	3c37      	subs	r4, #55	; 0x37
 8011090:	e7e2      	b.n	8011058 <_strtol_l.constprop.0+0x78>
 8011092:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8011096:	f1be 0f19 	cmp.w	lr, #25
 801109a:	d804      	bhi.n	80110a6 <_strtol_l.constprop.0+0xc6>
 801109c:	3c57      	subs	r4, #87	; 0x57
 801109e:	e7db      	b.n	8011058 <_strtol_l.constprop.0+0x78>
 80110a0:	f04f 3cff 	mov.w	ip, #4294967295
 80110a4:	e7e6      	b.n	8011074 <_strtol_l.constprop.0+0x94>
 80110a6:	f1bc 0f00 	cmp.w	ip, #0
 80110aa:	da05      	bge.n	80110b8 <_strtol_l.constprop.0+0xd8>
 80110ac:	2322      	movs	r3, #34	; 0x22
 80110ae:	6003      	str	r3, [r0, #0]
 80110b0:	4646      	mov	r6, r8
 80110b2:	b942      	cbnz	r2, 80110c6 <_strtol_l.constprop.0+0xe6>
 80110b4:	4630      	mov	r0, r6
 80110b6:	e79e      	b.n	8010ff6 <_strtol_l.constprop.0+0x16>
 80110b8:	b107      	cbz	r7, 80110bc <_strtol_l.constprop.0+0xdc>
 80110ba:	4276      	negs	r6, r6
 80110bc:	2a00      	cmp	r2, #0
 80110be:	d0f9      	beq.n	80110b4 <_strtol_l.constprop.0+0xd4>
 80110c0:	f1bc 0f00 	cmp.w	ip, #0
 80110c4:	d000      	beq.n	80110c8 <_strtol_l.constprop.0+0xe8>
 80110c6:	1e69      	subs	r1, r5, #1
 80110c8:	6011      	str	r1, [r2, #0]
 80110ca:	e7f3      	b.n	80110b4 <_strtol_l.constprop.0+0xd4>
 80110cc:	2430      	movs	r4, #48	; 0x30
 80110ce:	2b00      	cmp	r3, #0
 80110d0:	d1b1      	bne.n	8011036 <_strtol_l.constprop.0+0x56>
 80110d2:	2308      	movs	r3, #8
 80110d4:	e7af      	b.n	8011036 <_strtol_l.constprop.0+0x56>
 80110d6:	2c30      	cmp	r4, #48	; 0x30
 80110d8:	d0a5      	beq.n	8011026 <_strtol_l.constprop.0+0x46>
 80110da:	230a      	movs	r3, #10
 80110dc:	e7ab      	b.n	8011036 <_strtol_l.constprop.0+0x56>
 80110de:	bf00      	nop
 80110e0:	08012b75 	.word	0x08012b75

080110e4 <strtol>:
 80110e4:	4613      	mov	r3, r2
 80110e6:	460a      	mov	r2, r1
 80110e8:	4601      	mov	r1, r0
 80110ea:	4802      	ldr	r0, [pc, #8]	; (80110f4 <strtol+0x10>)
 80110ec:	6800      	ldr	r0, [r0, #0]
 80110ee:	f7ff bf77 	b.w	8010fe0 <_strtol_l.constprop.0>
 80110f2:	bf00      	nop
 80110f4:	200000c4 	.word	0x200000c4

080110f8 <__swbuf_r>:
 80110f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80110fa:	460e      	mov	r6, r1
 80110fc:	4614      	mov	r4, r2
 80110fe:	4605      	mov	r5, r0
 8011100:	b118      	cbz	r0, 801110a <__swbuf_r+0x12>
 8011102:	6983      	ldr	r3, [r0, #24]
 8011104:	b90b      	cbnz	r3, 801110a <__swbuf_r+0x12>
 8011106:	f000 f9d1 	bl	80114ac <__sinit>
 801110a:	4b21      	ldr	r3, [pc, #132]	; (8011190 <__swbuf_r+0x98>)
 801110c:	429c      	cmp	r4, r3
 801110e:	d12b      	bne.n	8011168 <__swbuf_r+0x70>
 8011110:	686c      	ldr	r4, [r5, #4]
 8011112:	69a3      	ldr	r3, [r4, #24]
 8011114:	60a3      	str	r3, [r4, #8]
 8011116:	89a3      	ldrh	r3, [r4, #12]
 8011118:	071a      	lsls	r2, r3, #28
 801111a:	d52f      	bpl.n	801117c <__swbuf_r+0x84>
 801111c:	6923      	ldr	r3, [r4, #16]
 801111e:	b36b      	cbz	r3, 801117c <__swbuf_r+0x84>
 8011120:	6923      	ldr	r3, [r4, #16]
 8011122:	6820      	ldr	r0, [r4, #0]
 8011124:	1ac0      	subs	r0, r0, r3
 8011126:	6963      	ldr	r3, [r4, #20]
 8011128:	b2f6      	uxtb	r6, r6
 801112a:	4283      	cmp	r3, r0
 801112c:	4637      	mov	r7, r6
 801112e:	dc04      	bgt.n	801113a <__swbuf_r+0x42>
 8011130:	4621      	mov	r1, r4
 8011132:	4628      	mov	r0, r5
 8011134:	f000 f926 	bl	8011384 <_fflush_r>
 8011138:	bb30      	cbnz	r0, 8011188 <__swbuf_r+0x90>
 801113a:	68a3      	ldr	r3, [r4, #8]
 801113c:	3b01      	subs	r3, #1
 801113e:	60a3      	str	r3, [r4, #8]
 8011140:	6823      	ldr	r3, [r4, #0]
 8011142:	1c5a      	adds	r2, r3, #1
 8011144:	6022      	str	r2, [r4, #0]
 8011146:	701e      	strb	r6, [r3, #0]
 8011148:	6963      	ldr	r3, [r4, #20]
 801114a:	3001      	adds	r0, #1
 801114c:	4283      	cmp	r3, r0
 801114e:	d004      	beq.n	801115a <__swbuf_r+0x62>
 8011150:	89a3      	ldrh	r3, [r4, #12]
 8011152:	07db      	lsls	r3, r3, #31
 8011154:	d506      	bpl.n	8011164 <__swbuf_r+0x6c>
 8011156:	2e0a      	cmp	r6, #10
 8011158:	d104      	bne.n	8011164 <__swbuf_r+0x6c>
 801115a:	4621      	mov	r1, r4
 801115c:	4628      	mov	r0, r5
 801115e:	f000 f911 	bl	8011384 <_fflush_r>
 8011162:	b988      	cbnz	r0, 8011188 <__swbuf_r+0x90>
 8011164:	4638      	mov	r0, r7
 8011166:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011168:	4b0a      	ldr	r3, [pc, #40]	; (8011194 <__swbuf_r+0x9c>)
 801116a:	429c      	cmp	r4, r3
 801116c:	d101      	bne.n	8011172 <__swbuf_r+0x7a>
 801116e:	68ac      	ldr	r4, [r5, #8]
 8011170:	e7cf      	b.n	8011112 <__swbuf_r+0x1a>
 8011172:	4b09      	ldr	r3, [pc, #36]	; (8011198 <__swbuf_r+0xa0>)
 8011174:	429c      	cmp	r4, r3
 8011176:	bf08      	it	eq
 8011178:	68ec      	ldreq	r4, [r5, #12]
 801117a:	e7ca      	b.n	8011112 <__swbuf_r+0x1a>
 801117c:	4621      	mov	r1, r4
 801117e:	4628      	mov	r0, r5
 8011180:	f000 f80c 	bl	801119c <__swsetup_r>
 8011184:	2800      	cmp	r0, #0
 8011186:	d0cb      	beq.n	8011120 <__swbuf_r+0x28>
 8011188:	f04f 37ff 	mov.w	r7, #4294967295
 801118c:	e7ea      	b.n	8011164 <__swbuf_r+0x6c>
 801118e:	bf00      	nop
 8011190:	08012c98 	.word	0x08012c98
 8011194:	08012cb8 	.word	0x08012cb8
 8011198:	08012c78 	.word	0x08012c78

0801119c <__swsetup_r>:
 801119c:	4b32      	ldr	r3, [pc, #200]	; (8011268 <__swsetup_r+0xcc>)
 801119e:	b570      	push	{r4, r5, r6, lr}
 80111a0:	681d      	ldr	r5, [r3, #0]
 80111a2:	4606      	mov	r6, r0
 80111a4:	460c      	mov	r4, r1
 80111a6:	b125      	cbz	r5, 80111b2 <__swsetup_r+0x16>
 80111a8:	69ab      	ldr	r3, [r5, #24]
 80111aa:	b913      	cbnz	r3, 80111b2 <__swsetup_r+0x16>
 80111ac:	4628      	mov	r0, r5
 80111ae:	f000 f97d 	bl	80114ac <__sinit>
 80111b2:	4b2e      	ldr	r3, [pc, #184]	; (801126c <__swsetup_r+0xd0>)
 80111b4:	429c      	cmp	r4, r3
 80111b6:	d10f      	bne.n	80111d8 <__swsetup_r+0x3c>
 80111b8:	686c      	ldr	r4, [r5, #4]
 80111ba:	89a3      	ldrh	r3, [r4, #12]
 80111bc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80111c0:	0719      	lsls	r1, r3, #28
 80111c2:	d42c      	bmi.n	801121e <__swsetup_r+0x82>
 80111c4:	06dd      	lsls	r5, r3, #27
 80111c6:	d411      	bmi.n	80111ec <__swsetup_r+0x50>
 80111c8:	2309      	movs	r3, #9
 80111ca:	6033      	str	r3, [r6, #0]
 80111cc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80111d0:	81a3      	strh	r3, [r4, #12]
 80111d2:	f04f 30ff 	mov.w	r0, #4294967295
 80111d6:	e03e      	b.n	8011256 <__swsetup_r+0xba>
 80111d8:	4b25      	ldr	r3, [pc, #148]	; (8011270 <__swsetup_r+0xd4>)
 80111da:	429c      	cmp	r4, r3
 80111dc:	d101      	bne.n	80111e2 <__swsetup_r+0x46>
 80111de:	68ac      	ldr	r4, [r5, #8]
 80111e0:	e7eb      	b.n	80111ba <__swsetup_r+0x1e>
 80111e2:	4b24      	ldr	r3, [pc, #144]	; (8011274 <__swsetup_r+0xd8>)
 80111e4:	429c      	cmp	r4, r3
 80111e6:	bf08      	it	eq
 80111e8:	68ec      	ldreq	r4, [r5, #12]
 80111ea:	e7e6      	b.n	80111ba <__swsetup_r+0x1e>
 80111ec:	0758      	lsls	r0, r3, #29
 80111ee:	d512      	bpl.n	8011216 <__swsetup_r+0x7a>
 80111f0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80111f2:	b141      	cbz	r1, 8011206 <__swsetup_r+0x6a>
 80111f4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80111f8:	4299      	cmp	r1, r3
 80111fa:	d002      	beq.n	8011202 <__swsetup_r+0x66>
 80111fc:	4630      	mov	r0, r6
 80111fe:	f7ff fd1b 	bl	8010c38 <_free_r>
 8011202:	2300      	movs	r3, #0
 8011204:	6363      	str	r3, [r4, #52]	; 0x34
 8011206:	89a3      	ldrh	r3, [r4, #12]
 8011208:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801120c:	81a3      	strh	r3, [r4, #12]
 801120e:	2300      	movs	r3, #0
 8011210:	6063      	str	r3, [r4, #4]
 8011212:	6923      	ldr	r3, [r4, #16]
 8011214:	6023      	str	r3, [r4, #0]
 8011216:	89a3      	ldrh	r3, [r4, #12]
 8011218:	f043 0308 	orr.w	r3, r3, #8
 801121c:	81a3      	strh	r3, [r4, #12]
 801121e:	6923      	ldr	r3, [r4, #16]
 8011220:	b94b      	cbnz	r3, 8011236 <__swsetup_r+0x9a>
 8011222:	89a3      	ldrh	r3, [r4, #12]
 8011224:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8011228:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801122c:	d003      	beq.n	8011236 <__swsetup_r+0x9a>
 801122e:	4621      	mov	r1, r4
 8011230:	4630      	mov	r0, r6
 8011232:	f000 fa01 	bl	8011638 <__smakebuf_r>
 8011236:	89a0      	ldrh	r0, [r4, #12]
 8011238:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801123c:	f010 0301 	ands.w	r3, r0, #1
 8011240:	d00a      	beq.n	8011258 <__swsetup_r+0xbc>
 8011242:	2300      	movs	r3, #0
 8011244:	60a3      	str	r3, [r4, #8]
 8011246:	6963      	ldr	r3, [r4, #20]
 8011248:	425b      	negs	r3, r3
 801124a:	61a3      	str	r3, [r4, #24]
 801124c:	6923      	ldr	r3, [r4, #16]
 801124e:	b943      	cbnz	r3, 8011262 <__swsetup_r+0xc6>
 8011250:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8011254:	d1ba      	bne.n	80111cc <__swsetup_r+0x30>
 8011256:	bd70      	pop	{r4, r5, r6, pc}
 8011258:	0781      	lsls	r1, r0, #30
 801125a:	bf58      	it	pl
 801125c:	6963      	ldrpl	r3, [r4, #20]
 801125e:	60a3      	str	r3, [r4, #8]
 8011260:	e7f4      	b.n	801124c <__swsetup_r+0xb0>
 8011262:	2000      	movs	r0, #0
 8011264:	e7f7      	b.n	8011256 <__swsetup_r+0xba>
 8011266:	bf00      	nop
 8011268:	200000c4 	.word	0x200000c4
 801126c:	08012c98 	.word	0x08012c98
 8011270:	08012cb8 	.word	0x08012cb8
 8011274:	08012c78 	.word	0x08012c78

08011278 <__sflush_r>:
 8011278:	898a      	ldrh	r2, [r1, #12]
 801127a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801127e:	4605      	mov	r5, r0
 8011280:	0710      	lsls	r0, r2, #28
 8011282:	460c      	mov	r4, r1
 8011284:	d458      	bmi.n	8011338 <__sflush_r+0xc0>
 8011286:	684b      	ldr	r3, [r1, #4]
 8011288:	2b00      	cmp	r3, #0
 801128a:	dc05      	bgt.n	8011298 <__sflush_r+0x20>
 801128c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801128e:	2b00      	cmp	r3, #0
 8011290:	dc02      	bgt.n	8011298 <__sflush_r+0x20>
 8011292:	2000      	movs	r0, #0
 8011294:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011298:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801129a:	2e00      	cmp	r6, #0
 801129c:	d0f9      	beq.n	8011292 <__sflush_r+0x1a>
 801129e:	2300      	movs	r3, #0
 80112a0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80112a4:	682f      	ldr	r7, [r5, #0]
 80112a6:	602b      	str	r3, [r5, #0]
 80112a8:	d032      	beq.n	8011310 <__sflush_r+0x98>
 80112aa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80112ac:	89a3      	ldrh	r3, [r4, #12]
 80112ae:	075a      	lsls	r2, r3, #29
 80112b0:	d505      	bpl.n	80112be <__sflush_r+0x46>
 80112b2:	6863      	ldr	r3, [r4, #4]
 80112b4:	1ac0      	subs	r0, r0, r3
 80112b6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80112b8:	b10b      	cbz	r3, 80112be <__sflush_r+0x46>
 80112ba:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80112bc:	1ac0      	subs	r0, r0, r3
 80112be:	2300      	movs	r3, #0
 80112c0:	4602      	mov	r2, r0
 80112c2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80112c4:	6a21      	ldr	r1, [r4, #32]
 80112c6:	4628      	mov	r0, r5
 80112c8:	47b0      	blx	r6
 80112ca:	1c43      	adds	r3, r0, #1
 80112cc:	89a3      	ldrh	r3, [r4, #12]
 80112ce:	d106      	bne.n	80112de <__sflush_r+0x66>
 80112d0:	6829      	ldr	r1, [r5, #0]
 80112d2:	291d      	cmp	r1, #29
 80112d4:	d82c      	bhi.n	8011330 <__sflush_r+0xb8>
 80112d6:	4a2a      	ldr	r2, [pc, #168]	; (8011380 <__sflush_r+0x108>)
 80112d8:	40ca      	lsrs	r2, r1
 80112da:	07d6      	lsls	r6, r2, #31
 80112dc:	d528      	bpl.n	8011330 <__sflush_r+0xb8>
 80112de:	2200      	movs	r2, #0
 80112e0:	6062      	str	r2, [r4, #4]
 80112e2:	04d9      	lsls	r1, r3, #19
 80112e4:	6922      	ldr	r2, [r4, #16]
 80112e6:	6022      	str	r2, [r4, #0]
 80112e8:	d504      	bpl.n	80112f4 <__sflush_r+0x7c>
 80112ea:	1c42      	adds	r2, r0, #1
 80112ec:	d101      	bne.n	80112f2 <__sflush_r+0x7a>
 80112ee:	682b      	ldr	r3, [r5, #0]
 80112f0:	b903      	cbnz	r3, 80112f4 <__sflush_r+0x7c>
 80112f2:	6560      	str	r0, [r4, #84]	; 0x54
 80112f4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80112f6:	602f      	str	r7, [r5, #0]
 80112f8:	2900      	cmp	r1, #0
 80112fa:	d0ca      	beq.n	8011292 <__sflush_r+0x1a>
 80112fc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011300:	4299      	cmp	r1, r3
 8011302:	d002      	beq.n	801130a <__sflush_r+0x92>
 8011304:	4628      	mov	r0, r5
 8011306:	f7ff fc97 	bl	8010c38 <_free_r>
 801130a:	2000      	movs	r0, #0
 801130c:	6360      	str	r0, [r4, #52]	; 0x34
 801130e:	e7c1      	b.n	8011294 <__sflush_r+0x1c>
 8011310:	6a21      	ldr	r1, [r4, #32]
 8011312:	2301      	movs	r3, #1
 8011314:	4628      	mov	r0, r5
 8011316:	47b0      	blx	r6
 8011318:	1c41      	adds	r1, r0, #1
 801131a:	d1c7      	bne.n	80112ac <__sflush_r+0x34>
 801131c:	682b      	ldr	r3, [r5, #0]
 801131e:	2b00      	cmp	r3, #0
 8011320:	d0c4      	beq.n	80112ac <__sflush_r+0x34>
 8011322:	2b1d      	cmp	r3, #29
 8011324:	d001      	beq.n	801132a <__sflush_r+0xb2>
 8011326:	2b16      	cmp	r3, #22
 8011328:	d101      	bne.n	801132e <__sflush_r+0xb6>
 801132a:	602f      	str	r7, [r5, #0]
 801132c:	e7b1      	b.n	8011292 <__sflush_r+0x1a>
 801132e:	89a3      	ldrh	r3, [r4, #12]
 8011330:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011334:	81a3      	strh	r3, [r4, #12]
 8011336:	e7ad      	b.n	8011294 <__sflush_r+0x1c>
 8011338:	690f      	ldr	r7, [r1, #16]
 801133a:	2f00      	cmp	r7, #0
 801133c:	d0a9      	beq.n	8011292 <__sflush_r+0x1a>
 801133e:	0793      	lsls	r3, r2, #30
 8011340:	680e      	ldr	r6, [r1, #0]
 8011342:	bf08      	it	eq
 8011344:	694b      	ldreq	r3, [r1, #20]
 8011346:	600f      	str	r7, [r1, #0]
 8011348:	bf18      	it	ne
 801134a:	2300      	movne	r3, #0
 801134c:	eba6 0807 	sub.w	r8, r6, r7
 8011350:	608b      	str	r3, [r1, #8]
 8011352:	f1b8 0f00 	cmp.w	r8, #0
 8011356:	dd9c      	ble.n	8011292 <__sflush_r+0x1a>
 8011358:	6a21      	ldr	r1, [r4, #32]
 801135a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801135c:	4643      	mov	r3, r8
 801135e:	463a      	mov	r2, r7
 8011360:	4628      	mov	r0, r5
 8011362:	47b0      	blx	r6
 8011364:	2800      	cmp	r0, #0
 8011366:	dc06      	bgt.n	8011376 <__sflush_r+0xfe>
 8011368:	89a3      	ldrh	r3, [r4, #12]
 801136a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801136e:	81a3      	strh	r3, [r4, #12]
 8011370:	f04f 30ff 	mov.w	r0, #4294967295
 8011374:	e78e      	b.n	8011294 <__sflush_r+0x1c>
 8011376:	4407      	add	r7, r0
 8011378:	eba8 0800 	sub.w	r8, r8, r0
 801137c:	e7e9      	b.n	8011352 <__sflush_r+0xda>
 801137e:	bf00      	nop
 8011380:	20400001 	.word	0x20400001

08011384 <_fflush_r>:
 8011384:	b538      	push	{r3, r4, r5, lr}
 8011386:	690b      	ldr	r3, [r1, #16]
 8011388:	4605      	mov	r5, r0
 801138a:	460c      	mov	r4, r1
 801138c:	b913      	cbnz	r3, 8011394 <_fflush_r+0x10>
 801138e:	2500      	movs	r5, #0
 8011390:	4628      	mov	r0, r5
 8011392:	bd38      	pop	{r3, r4, r5, pc}
 8011394:	b118      	cbz	r0, 801139e <_fflush_r+0x1a>
 8011396:	6983      	ldr	r3, [r0, #24]
 8011398:	b90b      	cbnz	r3, 801139e <_fflush_r+0x1a>
 801139a:	f000 f887 	bl	80114ac <__sinit>
 801139e:	4b14      	ldr	r3, [pc, #80]	; (80113f0 <_fflush_r+0x6c>)
 80113a0:	429c      	cmp	r4, r3
 80113a2:	d11b      	bne.n	80113dc <_fflush_r+0x58>
 80113a4:	686c      	ldr	r4, [r5, #4]
 80113a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80113aa:	2b00      	cmp	r3, #0
 80113ac:	d0ef      	beq.n	801138e <_fflush_r+0xa>
 80113ae:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80113b0:	07d0      	lsls	r0, r2, #31
 80113b2:	d404      	bmi.n	80113be <_fflush_r+0x3a>
 80113b4:	0599      	lsls	r1, r3, #22
 80113b6:	d402      	bmi.n	80113be <_fflush_r+0x3a>
 80113b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80113ba:	f000 f915 	bl	80115e8 <__retarget_lock_acquire_recursive>
 80113be:	4628      	mov	r0, r5
 80113c0:	4621      	mov	r1, r4
 80113c2:	f7ff ff59 	bl	8011278 <__sflush_r>
 80113c6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80113c8:	07da      	lsls	r2, r3, #31
 80113ca:	4605      	mov	r5, r0
 80113cc:	d4e0      	bmi.n	8011390 <_fflush_r+0xc>
 80113ce:	89a3      	ldrh	r3, [r4, #12]
 80113d0:	059b      	lsls	r3, r3, #22
 80113d2:	d4dd      	bmi.n	8011390 <_fflush_r+0xc>
 80113d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80113d6:	f000 f908 	bl	80115ea <__retarget_lock_release_recursive>
 80113da:	e7d9      	b.n	8011390 <_fflush_r+0xc>
 80113dc:	4b05      	ldr	r3, [pc, #20]	; (80113f4 <_fflush_r+0x70>)
 80113de:	429c      	cmp	r4, r3
 80113e0:	d101      	bne.n	80113e6 <_fflush_r+0x62>
 80113e2:	68ac      	ldr	r4, [r5, #8]
 80113e4:	e7df      	b.n	80113a6 <_fflush_r+0x22>
 80113e6:	4b04      	ldr	r3, [pc, #16]	; (80113f8 <_fflush_r+0x74>)
 80113e8:	429c      	cmp	r4, r3
 80113ea:	bf08      	it	eq
 80113ec:	68ec      	ldreq	r4, [r5, #12]
 80113ee:	e7da      	b.n	80113a6 <_fflush_r+0x22>
 80113f0:	08012c98 	.word	0x08012c98
 80113f4:	08012cb8 	.word	0x08012cb8
 80113f8:	08012c78 	.word	0x08012c78

080113fc <std>:
 80113fc:	2300      	movs	r3, #0
 80113fe:	b510      	push	{r4, lr}
 8011400:	4604      	mov	r4, r0
 8011402:	e9c0 3300 	strd	r3, r3, [r0]
 8011406:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801140a:	6083      	str	r3, [r0, #8]
 801140c:	8181      	strh	r1, [r0, #12]
 801140e:	6643      	str	r3, [r0, #100]	; 0x64
 8011410:	81c2      	strh	r2, [r0, #14]
 8011412:	6183      	str	r3, [r0, #24]
 8011414:	4619      	mov	r1, r3
 8011416:	2208      	movs	r2, #8
 8011418:	305c      	adds	r0, #92	; 0x5c
 801141a:	f7ff fc05 	bl	8010c28 <memset>
 801141e:	4b05      	ldr	r3, [pc, #20]	; (8011434 <std+0x38>)
 8011420:	6263      	str	r3, [r4, #36]	; 0x24
 8011422:	4b05      	ldr	r3, [pc, #20]	; (8011438 <std+0x3c>)
 8011424:	62a3      	str	r3, [r4, #40]	; 0x28
 8011426:	4b05      	ldr	r3, [pc, #20]	; (801143c <std+0x40>)
 8011428:	62e3      	str	r3, [r4, #44]	; 0x2c
 801142a:	4b05      	ldr	r3, [pc, #20]	; (8011440 <std+0x44>)
 801142c:	6224      	str	r4, [r4, #32]
 801142e:	6323      	str	r3, [r4, #48]	; 0x30
 8011430:	bd10      	pop	{r4, pc}
 8011432:	bf00      	nop
 8011434:	08011f65 	.word	0x08011f65
 8011438:	08011f87 	.word	0x08011f87
 801143c:	08011fbf 	.word	0x08011fbf
 8011440:	08011fe3 	.word	0x08011fe3

08011444 <_cleanup_r>:
 8011444:	4901      	ldr	r1, [pc, #4]	; (801144c <_cleanup_r+0x8>)
 8011446:	f000 b8af 	b.w	80115a8 <_fwalk_reent>
 801144a:	bf00      	nop
 801144c:	08011385 	.word	0x08011385

08011450 <__sfmoreglue>:
 8011450:	b570      	push	{r4, r5, r6, lr}
 8011452:	2268      	movs	r2, #104	; 0x68
 8011454:	1e4d      	subs	r5, r1, #1
 8011456:	4355      	muls	r5, r2
 8011458:	460e      	mov	r6, r1
 801145a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801145e:	f7ff fc57 	bl	8010d10 <_malloc_r>
 8011462:	4604      	mov	r4, r0
 8011464:	b140      	cbz	r0, 8011478 <__sfmoreglue+0x28>
 8011466:	2100      	movs	r1, #0
 8011468:	e9c0 1600 	strd	r1, r6, [r0]
 801146c:	300c      	adds	r0, #12
 801146e:	60a0      	str	r0, [r4, #8]
 8011470:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8011474:	f7ff fbd8 	bl	8010c28 <memset>
 8011478:	4620      	mov	r0, r4
 801147a:	bd70      	pop	{r4, r5, r6, pc}

0801147c <__sfp_lock_acquire>:
 801147c:	4801      	ldr	r0, [pc, #4]	; (8011484 <__sfp_lock_acquire+0x8>)
 801147e:	f000 b8b3 	b.w	80115e8 <__retarget_lock_acquire_recursive>
 8011482:	bf00      	nop
 8011484:	20011a4d 	.word	0x20011a4d

08011488 <__sfp_lock_release>:
 8011488:	4801      	ldr	r0, [pc, #4]	; (8011490 <__sfp_lock_release+0x8>)
 801148a:	f000 b8ae 	b.w	80115ea <__retarget_lock_release_recursive>
 801148e:	bf00      	nop
 8011490:	20011a4d 	.word	0x20011a4d

08011494 <__sinit_lock_acquire>:
 8011494:	4801      	ldr	r0, [pc, #4]	; (801149c <__sinit_lock_acquire+0x8>)
 8011496:	f000 b8a7 	b.w	80115e8 <__retarget_lock_acquire_recursive>
 801149a:	bf00      	nop
 801149c:	20011a4e 	.word	0x20011a4e

080114a0 <__sinit_lock_release>:
 80114a0:	4801      	ldr	r0, [pc, #4]	; (80114a8 <__sinit_lock_release+0x8>)
 80114a2:	f000 b8a2 	b.w	80115ea <__retarget_lock_release_recursive>
 80114a6:	bf00      	nop
 80114a8:	20011a4e 	.word	0x20011a4e

080114ac <__sinit>:
 80114ac:	b510      	push	{r4, lr}
 80114ae:	4604      	mov	r4, r0
 80114b0:	f7ff fff0 	bl	8011494 <__sinit_lock_acquire>
 80114b4:	69a3      	ldr	r3, [r4, #24]
 80114b6:	b11b      	cbz	r3, 80114c0 <__sinit+0x14>
 80114b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80114bc:	f7ff bff0 	b.w	80114a0 <__sinit_lock_release>
 80114c0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80114c4:	6523      	str	r3, [r4, #80]	; 0x50
 80114c6:	4b13      	ldr	r3, [pc, #76]	; (8011514 <__sinit+0x68>)
 80114c8:	4a13      	ldr	r2, [pc, #76]	; (8011518 <__sinit+0x6c>)
 80114ca:	681b      	ldr	r3, [r3, #0]
 80114cc:	62a2      	str	r2, [r4, #40]	; 0x28
 80114ce:	42a3      	cmp	r3, r4
 80114d0:	bf04      	itt	eq
 80114d2:	2301      	moveq	r3, #1
 80114d4:	61a3      	streq	r3, [r4, #24]
 80114d6:	4620      	mov	r0, r4
 80114d8:	f000 f820 	bl	801151c <__sfp>
 80114dc:	6060      	str	r0, [r4, #4]
 80114de:	4620      	mov	r0, r4
 80114e0:	f000 f81c 	bl	801151c <__sfp>
 80114e4:	60a0      	str	r0, [r4, #8]
 80114e6:	4620      	mov	r0, r4
 80114e8:	f000 f818 	bl	801151c <__sfp>
 80114ec:	2200      	movs	r2, #0
 80114ee:	60e0      	str	r0, [r4, #12]
 80114f0:	2104      	movs	r1, #4
 80114f2:	6860      	ldr	r0, [r4, #4]
 80114f4:	f7ff ff82 	bl	80113fc <std>
 80114f8:	68a0      	ldr	r0, [r4, #8]
 80114fa:	2201      	movs	r2, #1
 80114fc:	2109      	movs	r1, #9
 80114fe:	f7ff ff7d 	bl	80113fc <std>
 8011502:	68e0      	ldr	r0, [r4, #12]
 8011504:	2202      	movs	r2, #2
 8011506:	2112      	movs	r1, #18
 8011508:	f7ff ff78 	bl	80113fc <std>
 801150c:	2301      	movs	r3, #1
 801150e:	61a3      	str	r3, [r4, #24]
 8011510:	e7d2      	b.n	80114b8 <__sinit+0xc>
 8011512:	bf00      	nop
 8011514:	08012b70 	.word	0x08012b70
 8011518:	08011445 	.word	0x08011445

0801151c <__sfp>:
 801151c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801151e:	4607      	mov	r7, r0
 8011520:	f7ff ffac 	bl	801147c <__sfp_lock_acquire>
 8011524:	4b1e      	ldr	r3, [pc, #120]	; (80115a0 <__sfp+0x84>)
 8011526:	681e      	ldr	r6, [r3, #0]
 8011528:	69b3      	ldr	r3, [r6, #24]
 801152a:	b913      	cbnz	r3, 8011532 <__sfp+0x16>
 801152c:	4630      	mov	r0, r6
 801152e:	f7ff ffbd 	bl	80114ac <__sinit>
 8011532:	3648      	adds	r6, #72	; 0x48
 8011534:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8011538:	3b01      	subs	r3, #1
 801153a:	d503      	bpl.n	8011544 <__sfp+0x28>
 801153c:	6833      	ldr	r3, [r6, #0]
 801153e:	b30b      	cbz	r3, 8011584 <__sfp+0x68>
 8011540:	6836      	ldr	r6, [r6, #0]
 8011542:	e7f7      	b.n	8011534 <__sfp+0x18>
 8011544:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8011548:	b9d5      	cbnz	r5, 8011580 <__sfp+0x64>
 801154a:	4b16      	ldr	r3, [pc, #88]	; (80115a4 <__sfp+0x88>)
 801154c:	60e3      	str	r3, [r4, #12]
 801154e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8011552:	6665      	str	r5, [r4, #100]	; 0x64
 8011554:	f000 f847 	bl	80115e6 <__retarget_lock_init_recursive>
 8011558:	f7ff ff96 	bl	8011488 <__sfp_lock_release>
 801155c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8011560:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8011564:	6025      	str	r5, [r4, #0]
 8011566:	61a5      	str	r5, [r4, #24]
 8011568:	2208      	movs	r2, #8
 801156a:	4629      	mov	r1, r5
 801156c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8011570:	f7ff fb5a 	bl	8010c28 <memset>
 8011574:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8011578:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801157c:	4620      	mov	r0, r4
 801157e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011580:	3468      	adds	r4, #104	; 0x68
 8011582:	e7d9      	b.n	8011538 <__sfp+0x1c>
 8011584:	2104      	movs	r1, #4
 8011586:	4638      	mov	r0, r7
 8011588:	f7ff ff62 	bl	8011450 <__sfmoreglue>
 801158c:	4604      	mov	r4, r0
 801158e:	6030      	str	r0, [r6, #0]
 8011590:	2800      	cmp	r0, #0
 8011592:	d1d5      	bne.n	8011540 <__sfp+0x24>
 8011594:	f7ff ff78 	bl	8011488 <__sfp_lock_release>
 8011598:	230c      	movs	r3, #12
 801159a:	603b      	str	r3, [r7, #0]
 801159c:	e7ee      	b.n	801157c <__sfp+0x60>
 801159e:	bf00      	nop
 80115a0:	08012b70 	.word	0x08012b70
 80115a4:	ffff0001 	.word	0xffff0001

080115a8 <_fwalk_reent>:
 80115a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80115ac:	4606      	mov	r6, r0
 80115ae:	4688      	mov	r8, r1
 80115b0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80115b4:	2700      	movs	r7, #0
 80115b6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80115ba:	f1b9 0901 	subs.w	r9, r9, #1
 80115be:	d505      	bpl.n	80115cc <_fwalk_reent+0x24>
 80115c0:	6824      	ldr	r4, [r4, #0]
 80115c2:	2c00      	cmp	r4, #0
 80115c4:	d1f7      	bne.n	80115b6 <_fwalk_reent+0xe>
 80115c6:	4638      	mov	r0, r7
 80115c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80115cc:	89ab      	ldrh	r3, [r5, #12]
 80115ce:	2b01      	cmp	r3, #1
 80115d0:	d907      	bls.n	80115e2 <_fwalk_reent+0x3a>
 80115d2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80115d6:	3301      	adds	r3, #1
 80115d8:	d003      	beq.n	80115e2 <_fwalk_reent+0x3a>
 80115da:	4629      	mov	r1, r5
 80115dc:	4630      	mov	r0, r6
 80115de:	47c0      	blx	r8
 80115e0:	4307      	orrs	r7, r0
 80115e2:	3568      	adds	r5, #104	; 0x68
 80115e4:	e7e9      	b.n	80115ba <_fwalk_reent+0x12>

080115e6 <__retarget_lock_init_recursive>:
 80115e6:	4770      	bx	lr

080115e8 <__retarget_lock_acquire_recursive>:
 80115e8:	4770      	bx	lr

080115ea <__retarget_lock_release_recursive>:
 80115ea:	4770      	bx	lr

080115ec <__swhatbuf_r>:
 80115ec:	b570      	push	{r4, r5, r6, lr}
 80115ee:	460e      	mov	r6, r1
 80115f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80115f4:	2900      	cmp	r1, #0
 80115f6:	b096      	sub	sp, #88	; 0x58
 80115f8:	4614      	mov	r4, r2
 80115fa:	461d      	mov	r5, r3
 80115fc:	da08      	bge.n	8011610 <__swhatbuf_r+0x24>
 80115fe:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8011602:	2200      	movs	r2, #0
 8011604:	602a      	str	r2, [r5, #0]
 8011606:	061a      	lsls	r2, r3, #24
 8011608:	d410      	bmi.n	801162c <__swhatbuf_r+0x40>
 801160a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801160e:	e00e      	b.n	801162e <__swhatbuf_r+0x42>
 8011610:	466a      	mov	r2, sp
 8011612:	f000 fd0d 	bl	8012030 <_fstat_r>
 8011616:	2800      	cmp	r0, #0
 8011618:	dbf1      	blt.n	80115fe <__swhatbuf_r+0x12>
 801161a:	9a01      	ldr	r2, [sp, #4]
 801161c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8011620:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8011624:	425a      	negs	r2, r3
 8011626:	415a      	adcs	r2, r3
 8011628:	602a      	str	r2, [r5, #0]
 801162a:	e7ee      	b.n	801160a <__swhatbuf_r+0x1e>
 801162c:	2340      	movs	r3, #64	; 0x40
 801162e:	2000      	movs	r0, #0
 8011630:	6023      	str	r3, [r4, #0]
 8011632:	b016      	add	sp, #88	; 0x58
 8011634:	bd70      	pop	{r4, r5, r6, pc}
	...

08011638 <__smakebuf_r>:
 8011638:	898b      	ldrh	r3, [r1, #12]
 801163a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801163c:	079d      	lsls	r5, r3, #30
 801163e:	4606      	mov	r6, r0
 8011640:	460c      	mov	r4, r1
 8011642:	d507      	bpl.n	8011654 <__smakebuf_r+0x1c>
 8011644:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8011648:	6023      	str	r3, [r4, #0]
 801164a:	6123      	str	r3, [r4, #16]
 801164c:	2301      	movs	r3, #1
 801164e:	6163      	str	r3, [r4, #20]
 8011650:	b002      	add	sp, #8
 8011652:	bd70      	pop	{r4, r5, r6, pc}
 8011654:	ab01      	add	r3, sp, #4
 8011656:	466a      	mov	r2, sp
 8011658:	f7ff ffc8 	bl	80115ec <__swhatbuf_r>
 801165c:	9900      	ldr	r1, [sp, #0]
 801165e:	4605      	mov	r5, r0
 8011660:	4630      	mov	r0, r6
 8011662:	f7ff fb55 	bl	8010d10 <_malloc_r>
 8011666:	b948      	cbnz	r0, 801167c <__smakebuf_r+0x44>
 8011668:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801166c:	059a      	lsls	r2, r3, #22
 801166e:	d4ef      	bmi.n	8011650 <__smakebuf_r+0x18>
 8011670:	f023 0303 	bic.w	r3, r3, #3
 8011674:	f043 0302 	orr.w	r3, r3, #2
 8011678:	81a3      	strh	r3, [r4, #12]
 801167a:	e7e3      	b.n	8011644 <__smakebuf_r+0xc>
 801167c:	4b0d      	ldr	r3, [pc, #52]	; (80116b4 <__smakebuf_r+0x7c>)
 801167e:	62b3      	str	r3, [r6, #40]	; 0x28
 8011680:	89a3      	ldrh	r3, [r4, #12]
 8011682:	6020      	str	r0, [r4, #0]
 8011684:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011688:	81a3      	strh	r3, [r4, #12]
 801168a:	9b00      	ldr	r3, [sp, #0]
 801168c:	6163      	str	r3, [r4, #20]
 801168e:	9b01      	ldr	r3, [sp, #4]
 8011690:	6120      	str	r0, [r4, #16]
 8011692:	b15b      	cbz	r3, 80116ac <__smakebuf_r+0x74>
 8011694:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011698:	4630      	mov	r0, r6
 801169a:	f000 fcdb 	bl	8012054 <_isatty_r>
 801169e:	b128      	cbz	r0, 80116ac <__smakebuf_r+0x74>
 80116a0:	89a3      	ldrh	r3, [r4, #12]
 80116a2:	f023 0303 	bic.w	r3, r3, #3
 80116a6:	f043 0301 	orr.w	r3, r3, #1
 80116aa:	81a3      	strh	r3, [r4, #12]
 80116ac:	89a0      	ldrh	r0, [r4, #12]
 80116ae:	4305      	orrs	r5, r0
 80116b0:	81a5      	strh	r5, [r4, #12]
 80116b2:	e7cd      	b.n	8011650 <__smakebuf_r+0x18>
 80116b4:	08011445 	.word	0x08011445

080116b8 <__malloc_lock>:
 80116b8:	4801      	ldr	r0, [pc, #4]	; (80116c0 <__malloc_lock+0x8>)
 80116ba:	f7ff bf95 	b.w	80115e8 <__retarget_lock_acquire_recursive>
 80116be:	bf00      	nop
 80116c0:	20011a4c 	.word	0x20011a4c

080116c4 <__malloc_unlock>:
 80116c4:	4801      	ldr	r0, [pc, #4]	; (80116cc <__malloc_unlock+0x8>)
 80116c6:	f7ff bf90 	b.w	80115ea <__retarget_lock_release_recursive>
 80116ca:	bf00      	nop
 80116cc:	20011a4c 	.word	0x20011a4c

080116d0 <__ssputs_r>:
 80116d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80116d4:	688e      	ldr	r6, [r1, #8]
 80116d6:	429e      	cmp	r6, r3
 80116d8:	4682      	mov	sl, r0
 80116da:	460c      	mov	r4, r1
 80116dc:	4690      	mov	r8, r2
 80116de:	461f      	mov	r7, r3
 80116e0:	d838      	bhi.n	8011754 <__ssputs_r+0x84>
 80116e2:	898a      	ldrh	r2, [r1, #12]
 80116e4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80116e8:	d032      	beq.n	8011750 <__ssputs_r+0x80>
 80116ea:	6825      	ldr	r5, [r4, #0]
 80116ec:	6909      	ldr	r1, [r1, #16]
 80116ee:	eba5 0901 	sub.w	r9, r5, r1
 80116f2:	6965      	ldr	r5, [r4, #20]
 80116f4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80116f8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80116fc:	3301      	adds	r3, #1
 80116fe:	444b      	add	r3, r9
 8011700:	106d      	asrs	r5, r5, #1
 8011702:	429d      	cmp	r5, r3
 8011704:	bf38      	it	cc
 8011706:	461d      	movcc	r5, r3
 8011708:	0553      	lsls	r3, r2, #21
 801170a:	d531      	bpl.n	8011770 <__ssputs_r+0xa0>
 801170c:	4629      	mov	r1, r5
 801170e:	f7ff faff 	bl	8010d10 <_malloc_r>
 8011712:	4606      	mov	r6, r0
 8011714:	b950      	cbnz	r0, 801172c <__ssputs_r+0x5c>
 8011716:	230c      	movs	r3, #12
 8011718:	f8ca 3000 	str.w	r3, [sl]
 801171c:	89a3      	ldrh	r3, [r4, #12]
 801171e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011722:	81a3      	strh	r3, [r4, #12]
 8011724:	f04f 30ff 	mov.w	r0, #4294967295
 8011728:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801172c:	6921      	ldr	r1, [r4, #16]
 801172e:	464a      	mov	r2, r9
 8011730:	f000 fcb2 	bl	8012098 <memcpy>
 8011734:	89a3      	ldrh	r3, [r4, #12]
 8011736:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801173a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801173e:	81a3      	strh	r3, [r4, #12]
 8011740:	6126      	str	r6, [r4, #16]
 8011742:	6165      	str	r5, [r4, #20]
 8011744:	444e      	add	r6, r9
 8011746:	eba5 0509 	sub.w	r5, r5, r9
 801174a:	6026      	str	r6, [r4, #0]
 801174c:	60a5      	str	r5, [r4, #8]
 801174e:	463e      	mov	r6, r7
 8011750:	42be      	cmp	r6, r7
 8011752:	d900      	bls.n	8011756 <__ssputs_r+0x86>
 8011754:	463e      	mov	r6, r7
 8011756:	6820      	ldr	r0, [r4, #0]
 8011758:	4632      	mov	r2, r6
 801175a:	4641      	mov	r1, r8
 801175c:	f000 fcaa 	bl	80120b4 <memmove>
 8011760:	68a3      	ldr	r3, [r4, #8]
 8011762:	1b9b      	subs	r3, r3, r6
 8011764:	60a3      	str	r3, [r4, #8]
 8011766:	6823      	ldr	r3, [r4, #0]
 8011768:	4433      	add	r3, r6
 801176a:	6023      	str	r3, [r4, #0]
 801176c:	2000      	movs	r0, #0
 801176e:	e7db      	b.n	8011728 <__ssputs_r+0x58>
 8011770:	462a      	mov	r2, r5
 8011772:	f000 fcb9 	bl	80120e8 <_realloc_r>
 8011776:	4606      	mov	r6, r0
 8011778:	2800      	cmp	r0, #0
 801177a:	d1e1      	bne.n	8011740 <__ssputs_r+0x70>
 801177c:	6921      	ldr	r1, [r4, #16]
 801177e:	4650      	mov	r0, sl
 8011780:	f7ff fa5a 	bl	8010c38 <_free_r>
 8011784:	e7c7      	b.n	8011716 <__ssputs_r+0x46>
	...

08011788 <_svfiprintf_r>:
 8011788:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801178c:	4698      	mov	r8, r3
 801178e:	898b      	ldrh	r3, [r1, #12]
 8011790:	061b      	lsls	r3, r3, #24
 8011792:	b09d      	sub	sp, #116	; 0x74
 8011794:	4607      	mov	r7, r0
 8011796:	460d      	mov	r5, r1
 8011798:	4614      	mov	r4, r2
 801179a:	d50e      	bpl.n	80117ba <_svfiprintf_r+0x32>
 801179c:	690b      	ldr	r3, [r1, #16]
 801179e:	b963      	cbnz	r3, 80117ba <_svfiprintf_r+0x32>
 80117a0:	2140      	movs	r1, #64	; 0x40
 80117a2:	f7ff fab5 	bl	8010d10 <_malloc_r>
 80117a6:	6028      	str	r0, [r5, #0]
 80117a8:	6128      	str	r0, [r5, #16]
 80117aa:	b920      	cbnz	r0, 80117b6 <_svfiprintf_r+0x2e>
 80117ac:	230c      	movs	r3, #12
 80117ae:	603b      	str	r3, [r7, #0]
 80117b0:	f04f 30ff 	mov.w	r0, #4294967295
 80117b4:	e0d1      	b.n	801195a <_svfiprintf_r+0x1d2>
 80117b6:	2340      	movs	r3, #64	; 0x40
 80117b8:	616b      	str	r3, [r5, #20]
 80117ba:	2300      	movs	r3, #0
 80117bc:	9309      	str	r3, [sp, #36]	; 0x24
 80117be:	2320      	movs	r3, #32
 80117c0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80117c4:	f8cd 800c 	str.w	r8, [sp, #12]
 80117c8:	2330      	movs	r3, #48	; 0x30
 80117ca:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8011974 <_svfiprintf_r+0x1ec>
 80117ce:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80117d2:	f04f 0901 	mov.w	r9, #1
 80117d6:	4623      	mov	r3, r4
 80117d8:	469a      	mov	sl, r3
 80117da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80117de:	b10a      	cbz	r2, 80117e4 <_svfiprintf_r+0x5c>
 80117e0:	2a25      	cmp	r2, #37	; 0x25
 80117e2:	d1f9      	bne.n	80117d8 <_svfiprintf_r+0x50>
 80117e4:	ebba 0b04 	subs.w	fp, sl, r4
 80117e8:	d00b      	beq.n	8011802 <_svfiprintf_r+0x7a>
 80117ea:	465b      	mov	r3, fp
 80117ec:	4622      	mov	r2, r4
 80117ee:	4629      	mov	r1, r5
 80117f0:	4638      	mov	r0, r7
 80117f2:	f7ff ff6d 	bl	80116d0 <__ssputs_r>
 80117f6:	3001      	adds	r0, #1
 80117f8:	f000 80aa 	beq.w	8011950 <_svfiprintf_r+0x1c8>
 80117fc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80117fe:	445a      	add	r2, fp
 8011800:	9209      	str	r2, [sp, #36]	; 0x24
 8011802:	f89a 3000 	ldrb.w	r3, [sl]
 8011806:	2b00      	cmp	r3, #0
 8011808:	f000 80a2 	beq.w	8011950 <_svfiprintf_r+0x1c8>
 801180c:	2300      	movs	r3, #0
 801180e:	f04f 32ff 	mov.w	r2, #4294967295
 8011812:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011816:	f10a 0a01 	add.w	sl, sl, #1
 801181a:	9304      	str	r3, [sp, #16]
 801181c:	9307      	str	r3, [sp, #28]
 801181e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011822:	931a      	str	r3, [sp, #104]	; 0x68
 8011824:	4654      	mov	r4, sl
 8011826:	2205      	movs	r2, #5
 8011828:	f814 1b01 	ldrb.w	r1, [r4], #1
 801182c:	4851      	ldr	r0, [pc, #324]	; (8011974 <_svfiprintf_r+0x1ec>)
 801182e:	f7ee fcd7 	bl	80001e0 <memchr>
 8011832:	9a04      	ldr	r2, [sp, #16]
 8011834:	b9d8      	cbnz	r0, 801186e <_svfiprintf_r+0xe6>
 8011836:	06d0      	lsls	r0, r2, #27
 8011838:	bf44      	itt	mi
 801183a:	2320      	movmi	r3, #32
 801183c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011840:	0711      	lsls	r1, r2, #28
 8011842:	bf44      	itt	mi
 8011844:	232b      	movmi	r3, #43	; 0x2b
 8011846:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801184a:	f89a 3000 	ldrb.w	r3, [sl]
 801184e:	2b2a      	cmp	r3, #42	; 0x2a
 8011850:	d015      	beq.n	801187e <_svfiprintf_r+0xf6>
 8011852:	9a07      	ldr	r2, [sp, #28]
 8011854:	4654      	mov	r4, sl
 8011856:	2000      	movs	r0, #0
 8011858:	f04f 0c0a 	mov.w	ip, #10
 801185c:	4621      	mov	r1, r4
 801185e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011862:	3b30      	subs	r3, #48	; 0x30
 8011864:	2b09      	cmp	r3, #9
 8011866:	d94e      	bls.n	8011906 <_svfiprintf_r+0x17e>
 8011868:	b1b0      	cbz	r0, 8011898 <_svfiprintf_r+0x110>
 801186a:	9207      	str	r2, [sp, #28]
 801186c:	e014      	b.n	8011898 <_svfiprintf_r+0x110>
 801186e:	eba0 0308 	sub.w	r3, r0, r8
 8011872:	fa09 f303 	lsl.w	r3, r9, r3
 8011876:	4313      	orrs	r3, r2
 8011878:	9304      	str	r3, [sp, #16]
 801187a:	46a2      	mov	sl, r4
 801187c:	e7d2      	b.n	8011824 <_svfiprintf_r+0x9c>
 801187e:	9b03      	ldr	r3, [sp, #12]
 8011880:	1d19      	adds	r1, r3, #4
 8011882:	681b      	ldr	r3, [r3, #0]
 8011884:	9103      	str	r1, [sp, #12]
 8011886:	2b00      	cmp	r3, #0
 8011888:	bfbb      	ittet	lt
 801188a:	425b      	neglt	r3, r3
 801188c:	f042 0202 	orrlt.w	r2, r2, #2
 8011890:	9307      	strge	r3, [sp, #28]
 8011892:	9307      	strlt	r3, [sp, #28]
 8011894:	bfb8      	it	lt
 8011896:	9204      	strlt	r2, [sp, #16]
 8011898:	7823      	ldrb	r3, [r4, #0]
 801189a:	2b2e      	cmp	r3, #46	; 0x2e
 801189c:	d10c      	bne.n	80118b8 <_svfiprintf_r+0x130>
 801189e:	7863      	ldrb	r3, [r4, #1]
 80118a0:	2b2a      	cmp	r3, #42	; 0x2a
 80118a2:	d135      	bne.n	8011910 <_svfiprintf_r+0x188>
 80118a4:	9b03      	ldr	r3, [sp, #12]
 80118a6:	1d1a      	adds	r2, r3, #4
 80118a8:	681b      	ldr	r3, [r3, #0]
 80118aa:	9203      	str	r2, [sp, #12]
 80118ac:	2b00      	cmp	r3, #0
 80118ae:	bfb8      	it	lt
 80118b0:	f04f 33ff 	movlt.w	r3, #4294967295
 80118b4:	3402      	adds	r4, #2
 80118b6:	9305      	str	r3, [sp, #20]
 80118b8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8011984 <_svfiprintf_r+0x1fc>
 80118bc:	7821      	ldrb	r1, [r4, #0]
 80118be:	2203      	movs	r2, #3
 80118c0:	4650      	mov	r0, sl
 80118c2:	f7ee fc8d 	bl	80001e0 <memchr>
 80118c6:	b140      	cbz	r0, 80118da <_svfiprintf_r+0x152>
 80118c8:	2340      	movs	r3, #64	; 0x40
 80118ca:	eba0 000a 	sub.w	r0, r0, sl
 80118ce:	fa03 f000 	lsl.w	r0, r3, r0
 80118d2:	9b04      	ldr	r3, [sp, #16]
 80118d4:	4303      	orrs	r3, r0
 80118d6:	3401      	adds	r4, #1
 80118d8:	9304      	str	r3, [sp, #16]
 80118da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80118de:	4826      	ldr	r0, [pc, #152]	; (8011978 <_svfiprintf_r+0x1f0>)
 80118e0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80118e4:	2206      	movs	r2, #6
 80118e6:	f7ee fc7b 	bl	80001e0 <memchr>
 80118ea:	2800      	cmp	r0, #0
 80118ec:	d038      	beq.n	8011960 <_svfiprintf_r+0x1d8>
 80118ee:	4b23      	ldr	r3, [pc, #140]	; (801197c <_svfiprintf_r+0x1f4>)
 80118f0:	bb1b      	cbnz	r3, 801193a <_svfiprintf_r+0x1b2>
 80118f2:	9b03      	ldr	r3, [sp, #12]
 80118f4:	3307      	adds	r3, #7
 80118f6:	f023 0307 	bic.w	r3, r3, #7
 80118fa:	3308      	adds	r3, #8
 80118fc:	9303      	str	r3, [sp, #12]
 80118fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011900:	4433      	add	r3, r6
 8011902:	9309      	str	r3, [sp, #36]	; 0x24
 8011904:	e767      	b.n	80117d6 <_svfiprintf_r+0x4e>
 8011906:	fb0c 3202 	mla	r2, ip, r2, r3
 801190a:	460c      	mov	r4, r1
 801190c:	2001      	movs	r0, #1
 801190e:	e7a5      	b.n	801185c <_svfiprintf_r+0xd4>
 8011910:	2300      	movs	r3, #0
 8011912:	3401      	adds	r4, #1
 8011914:	9305      	str	r3, [sp, #20]
 8011916:	4619      	mov	r1, r3
 8011918:	f04f 0c0a 	mov.w	ip, #10
 801191c:	4620      	mov	r0, r4
 801191e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011922:	3a30      	subs	r2, #48	; 0x30
 8011924:	2a09      	cmp	r2, #9
 8011926:	d903      	bls.n	8011930 <_svfiprintf_r+0x1a8>
 8011928:	2b00      	cmp	r3, #0
 801192a:	d0c5      	beq.n	80118b8 <_svfiprintf_r+0x130>
 801192c:	9105      	str	r1, [sp, #20]
 801192e:	e7c3      	b.n	80118b8 <_svfiprintf_r+0x130>
 8011930:	fb0c 2101 	mla	r1, ip, r1, r2
 8011934:	4604      	mov	r4, r0
 8011936:	2301      	movs	r3, #1
 8011938:	e7f0      	b.n	801191c <_svfiprintf_r+0x194>
 801193a:	ab03      	add	r3, sp, #12
 801193c:	9300      	str	r3, [sp, #0]
 801193e:	462a      	mov	r2, r5
 8011940:	4b0f      	ldr	r3, [pc, #60]	; (8011980 <_svfiprintf_r+0x1f8>)
 8011942:	a904      	add	r1, sp, #16
 8011944:	4638      	mov	r0, r7
 8011946:	f3af 8000 	nop.w
 801194a:	1c42      	adds	r2, r0, #1
 801194c:	4606      	mov	r6, r0
 801194e:	d1d6      	bne.n	80118fe <_svfiprintf_r+0x176>
 8011950:	89ab      	ldrh	r3, [r5, #12]
 8011952:	065b      	lsls	r3, r3, #25
 8011954:	f53f af2c 	bmi.w	80117b0 <_svfiprintf_r+0x28>
 8011958:	9809      	ldr	r0, [sp, #36]	; 0x24
 801195a:	b01d      	add	sp, #116	; 0x74
 801195c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011960:	ab03      	add	r3, sp, #12
 8011962:	9300      	str	r3, [sp, #0]
 8011964:	462a      	mov	r2, r5
 8011966:	4b06      	ldr	r3, [pc, #24]	; (8011980 <_svfiprintf_r+0x1f8>)
 8011968:	a904      	add	r1, sp, #16
 801196a:	4638      	mov	r0, r7
 801196c:	f000 f9d4 	bl	8011d18 <_printf_i>
 8011970:	e7eb      	b.n	801194a <_svfiprintf_r+0x1c2>
 8011972:	bf00      	nop
 8011974:	08012cd8 	.word	0x08012cd8
 8011978:	08012ce2 	.word	0x08012ce2
 801197c:	00000000 	.word	0x00000000
 8011980:	080116d1 	.word	0x080116d1
 8011984:	08012cde 	.word	0x08012cde

08011988 <__sfputc_r>:
 8011988:	6893      	ldr	r3, [r2, #8]
 801198a:	3b01      	subs	r3, #1
 801198c:	2b00      	cmp	r3, #0
 801198e:	b410      	push	{r4}
 8011990:	6093      	str	r3, [r2, #8]
 8011992:	da08      	bge.n	80119a6 <__sfputc_r+0x1e>
 8011994:	6994      	ldr	r4, [r2, #24]
 8011996:	42a3      	cmp	r3, r4
 8011998:	db01      	blt.n	801199e <__sfputc_r+0x16>
 801199a:	290a      	cmp	r1, #10
 801199c:	d103      	bne.n	80119a6 <__sfputc_r+0x1e>
 801199e:	f85d 4b04 	ldr.w	r4, [sp], #4
 80119a2:	f7ff bba9 	b.w	80110f8 <__swbuf_r>
 80119a6:	6813      	ldr	r3, [r2, #0]
 80119a8:	1c58      	adds	r0, r3, #1
 80119aa:	6010      	str	r0, [r2, #0]
 80119ac:	7019      	strb	r1, [r3, #0]
 80119ae:	4608      	mov	r0, r1
 80119b0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80119b4:	4770      	bx	lr

080119b6 <__sfputs_r>:
 80119b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80119b8:	4606      	mov	r6, r0
 80119ba:	460f      	mov	r7, r1
 80119bc:	4614      	mov	r4, r2
 80119be:	18d5      	adds	r5, r2, r3
 80119c0:	42ac      	cmp	r4, r5
 80119c2:	d101      	bne.n	80119c8 <__sfputs_r+0x12>
 80119c4:	2000      	movs	r0, #0
 80119c6:	e007      	b.n	80119d8 <__sfputs_r+0x22>
 80119c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80119cc:	463a      	mov	r2, r7
 80119ce:	4630      	mov	r0, r6
 80119d0:	f7ff ffda 	bl	8011988 <__sfputc_r>
 80119d4:	1c43      	adds	r3, r0, #1
 80119d6:	d1f3      	bne.n	80119c0 <__sfputs_r+0xa>
 80119d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080119dc <_vfiprintf_r>:
 80119dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80119e0:	460d      	mov	r5, r1
 80119e2:	b09d      	sub	sp, #116	; 0x74
 80119e4:	4614      	mov	r4, r2
 80119e6:	4698      	mov	r8, r3
 80119e8:	4606      	mov	r6, r0
 80119ea:	b118      	cbz	r0, 80119f4 <_vfiprintf_r+0x18>
 80119ec:	6983      	ldr	r3, [r0, #24]
 80119ee:	b90b      	cbnz	r3, 80119f4 <_vfiprintf_r+0x18>
 80119f0:	f7ff fd5c 	bl	80114ac <__sinit>
 80119f4:	4b89      	ldr	r3, [pc, #548]	; (8011c1c <_vfiprintf_r+0x240>)
 80119f6:	429d      	cmp	r5, r3
 80119f8:	d11b      	bne.n	8011a32 <_vfiprintf_r+0x56>
 80119fa:	6875      	ldr	r5, [r6, #4]
 80119fc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80119fe:	07d9      	lsls	r1, r3, #31
 8011a00:	d405      	bmi.n	8011a0e <_vfiprintf_r+0x32>
 8011a02:	89ab      	ldrh	r3, [r5, #12]
 8011a04:	059a      	lsls	r2, r3, #22
 8011a06:	d402      	bmi.n	8011a0e <_vfiprintf_r+0x32>
 8011a08:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011a0a:	f7ff fded 	bl	80115e8 <__retarget_lock_acquire_recursive>
 8011a0e:	89ab      	ldrh	r3, [r5, #12]
 8011a10:	071b      	lsls	r3, r3, #28
 8011a12:	d501      	bpl.n	8011a18 <_vfiprintf_r+0x3c>
 8011a14:	692b      	ldr	r3, [r5, #16]
 8011a16:	b9eb      	cbnz	r3, 8011a54 <_vfiprintf_r+0x78>
 8011a18:	4629      	mov	r1, r5
 8011a1a:	4630      	mov	r0, r6
 8011a1c:	f7ff fbbe 	bl	801119c <__swsetup_r>
 8011a20:	b1c0      	cbz	r0, 8011a54 <_vfiprintf_r+0x78>
 8011a22:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011a24:	07dc      	lsls	r4, r3, #31
 8011a26:	d50e      	bpl.n	8011a46 <_vfiprintf_r+0x6a>
 8011a28:	f04f 30ff 	mov.w	r0, #4294967295
 8011a2c:	b01d      	add	sp, #116	; 0x74
 8011a2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011a32:	4b7b      	ldr	r3, [pc, #492]	; (8011c20 <_vfiprintf_r+0x244>)
 8011a34:	429d      	cmp	r5, r3
 8011a36:	d101      	bne.n	8011a3c <_vfiprintf_r+0x60>
 8011a38:	68b5      	ldr	r5, [r6, #8]
 8011a3a:	e7df      	b.n	80119fc <_vfiprintf_r+0x20>
 8011a3c:	4b79      	ldr	r3, [pc, #484]	; (8011c24 <_vfiprintf_r+0x248>)
 8011a3e:	429d      	cmp	r5, r3
 8011a40:	bf08      	it	eq
 8011a42:	68f5      	ldreq	r5, [r6, #12]
 8011a44:	e7da      	b.n	80119fc <_vfiprintf_r+0x20>
 8011a46:	89ab      	ldrh	r3, [r5, #12]
 8011a48:	0598      	lsls	r0, r3, #22
 8011a4a:	d4ed      	bmi.n	8011a28 <_vfiprintf_r+0x4c>
 8011a4c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011a4e:	f7ff fdcc 	bl	80115ea <__retarget_lock_release_recursive>
 8011a52:	e7e9      	b.n	8011a28 <_vfiprintf_r+0x4c>
 8011a54:	2300      	movs	r3, #0
 8011a56:	9309      	str	r3, [sp, #36]	; 0x24
 8011a58:	2320      	movs	r3, #32
 8011a5a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011a5e:	f8cd 800c 	str.w	r8, [sp, #12]
 8011a62:	2330      	movs	r3, #48	; 0x30
 8011a64:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8011c28 <_vfiprintf_r+0x24c>
 8011a68:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011a6c:	f04f 0901 	mov.w	r9, #1
 8011a70:	4623      	mov	r3, r4
 8011a72:	469a      	mov	sl, r3
 8011a74:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011a78:	b10a      	cbz	r2, 8011a7e <_vfiprintf_r+0xa2>
 8011a7a:	2a25      	cmp	r2, #37	; 0x25
 8011a7c:	d1f9      	bne.n	8011a72 <_vfiprintf_r+0x96>
 8011a7e:	ebba 0b04 	subs.w	fp, sl, r4
 8011a82:	d00b      	beq.n	8011a9c <_vfiprintf_r+0xc0>
 8011a84:	465b      	mov	r3, fp
 8011a86:	4622      	mov	r2, r4
 8011a88:	4629      	mov	r1, r5
 8011a8a:	4630      	mov	r0, r6
 8011a8c:	f7ff ff93 	bl	80119b6 <__sfputs_r>
 8011a90:	3001      	adds	r0, #1
 8011a92:	f000 80aa 	beq.w	8011bea <_vfiprintf_r+0x20e>
 8011a96:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011a98:	445a      	add	r2, fp
 8011a9a:	9209      	str	r2, [sp, #36]	; 0x24
 8011a9c:	f89a 3000 	ldrb.w	r3, [sl]
 8011aa0:	2b00      	cmp	r3, #0
 8011aa2:	f000 80a2 	beq.w	8011bea <_vfiprintf_r+0x20e>
 8011aa6:	2300      	movs	r3, #0
 8011aa8:	f04f 32ff 	mov.w	r2, #4294967295
 8011aac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011ab0:	f10a 0a01 	add.w	sl, sl, #1
 8011ab4:	9304      	str	r3, [sp, #16]
 8011ab6:	9307      	str	r3, [sp, #28]
 8011ab8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011abc:	931a      	str	r3, [sp, #104]	; 0x68
 8011abe:	4654      	mov	r4, sl
 8011ac0:	2205      	movs	r2, #5
 8011ac2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011ac6:	4858      	ldr	r0, [pc, #352]	; (8011c28 <_vfiprintf_r+0x24c>)
 8011ac8:	f7ee fb8a 	bl	80001e0 <memchr>
 8011acc:	9a04      	ldr	r2, [sp, #16]
 8011ace:	b9d8      	cbnz	r0, 8011b08 <_vfiprintf_r+0x12c>
 8011ad0:	06d1      	lsls	r1, r2, #27
 8011ad2:	bf44      	itt	mi
 8011ad4:	2320      	movmi	r3, #32
 8011ad6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011ada:	0713      	lsls	r3, r2, #28
 8011adc:	bf44      	itt	mi
 8011ade:	232b      	movmi	r3, #43	; 0x2b
 8011ae0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011ae4:	f89a 3000 	ldrb.w	r3, [sl]
 8011ae8:	2b2a      	cmp	r3, #42	; 0x2a
 8011aea:	d015      	beq.n	8011b18 <_vfiprintf_r+0x13c>
 8011aec:	9a07      	ldr	r2, [sp, #28]
 8011aee:	4654      	mov	r4, sl
 8011af0:	2000      	movs	r0, #0
 8011af2:	f04f 0c0a 	mov.w	ip, #10
 8011af6:	4621      	mov	r1, r4
 8011af8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011afc:	3b30      	subs	r3, #48	; 0x30
 8011afe:	2b09      	cmp	r3, #9
 8011b00:	d94e      	bls.n	8011ba0 <_vfiprintf_r+0x1c4>
 8011b02:	b1b0      	cbz	r0, 8011b32 <_vfiprintf_r+0x156>
 8011b04:	9207      	str	r2, [sp, #28]
 8011b06:	e014      	b.n	8011b32 <_vfiprintf_r+0x156>
 8011b08:	eba0 0308 	sub.w	r3, r0, r8
 8011b0c:	fa09 f303 	lsl.w	r3, r9, r3
 8011b10:	4313      	orrs	r3, r2
 8011b12:	9304      	str	r3, [sp, #16]
 8011b14:	46a2      	mov	sl, r4
 8011b16:	e7d2      	b.n	8011abe <_vfiprintf_r+0xe2>
 8011b18:	9b03      	ldr	r3, [sp, #12]
 8011b1a:	1d19      	adds	r1, r3, #4
 8011b1c:	681b      	ldr	r3, [r3, #0]
 8011b1e:	9103      	str	r1, [sp, #12]
 8011b20:	2b00      	cmp	r3, #0
 8011b22:	bfbb      	ittet	lt
 8011b24:	425b      	neglt	r3, r3
 8011b26:	f042 0202 	orrlt.w	r2, r2, #2
 8011b2a:	9307      	strge	r3, [sp, #28]
 8011b2c:	9307      	strlt	r3, [sp, #28]
 8011b2e:	bfb8      	it	lt
 8011b30:	9204      	strlt	r2, [sp, #16]
 8011b32:	7823      	ldrb	r3, [r4, #0]
 8011b34:	2b2e      	cmp	r3, #46	; 0x2e
 8011b36:	d10c      	bne.n	8011b52 <_vfiprintf_r+0x176>
 8011b38:	7863      	ldrb	r3, [r4, #1]
 8011b3a:	2b2a      	cmp	r3, #42	; 0x2a
 8011b3c:	d135      	bne.n	8011baa <_vfiprintf_r+0x1ce>
 8011b3e:	9b03      	ldr	r3, [sp, #12]
 8011b40:	1d1a      	adds	r2, r3, #4
 8011b42:	681b      	ldr	r3, [r3, #0]
 8011b44:	9203      	str	r2, [sp, #12]
 8011b46:	2b00      	cmp	r3, #0
 8011b48:	bfb8      	it	lt
 8011b4a:	f04f 33ff 	movlt.w	r3, #4294967295
 8011b4e:	3402      	adds	r4, #2
 8011b50:	9305      	str	r3, [sp, #20]
 8011b52:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8011c38 <_vfiprintf_r+0x25c>
 8011b56:	7821      	ldrb	r1, [r4, #0]
 8011b58:	2203      	movs	r2, #3
 8011b5a:	4650      	mov	r0, sl
 8011b5c:	f7ee fb40 	bl	80001e0 <memchr>
 8011b60:	b140      	cbz	r0, 8011b74 <_vfiprintf_r+0x198>
 8011b62:	2340      	movs	r3, #64	; 0x40
 8011b64:	eba0 000a 	sub.w	r0, r0, sl
 8011b68:	fa03 f000 	lsl.w	r0, r3, r0
 8011b6c:	9b04      	ldr	r3, [sp, #16]
 8011b6e:	4303      	orrs	r3, r0
 8011b70:	3401      	adds	r4, #1
 8011b72:	9304      	str	r3, [sp, #16]
 8011b74:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011b78:	482c      	ldr	r0, [pc, #176]	; (8011c2c <_vfiprintf_r+0x250>)
 8011b7a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011b7e:	2206      	movs	r2, #6
 8011b80:	f7ee fb2e 	bl	80001e0 <memchr>
 8011b84:	2800      	cmp	r0, #0
 8011b86:	d03f      	beq.n	8011c08 <_vfiprintf_r+0x22c>
 8011b88:	4b29      	ldr	r3, [pc, #164]	; (8011c30 <_vfiprintf_r+0x254>)
 8011b8a:	bb1b      	cbnz	r3, 8011bd4 <_vfiprintf_r+0x1f8>
 8011b8c:	9b03      	ldr	r3, [sp, #12]
 8011b8e:	3307      	adds	r3, #7
 8011b90:	f023 0307 	bic.w	r3, r3, #7
 8011b94:	3308      	adds	r3, #8
 8011b96:	9303      	str	r3, [sp, #12]
 8011b98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011b9a:	443b      	add	r3, r7
 8011b9c:	9309      	str	r3, [sp, #36]	; 0x24
 8011b9e:	e767      	b.n	8011a70 <_vfiprintf_r+0x94>
 8011ba0:	fb0c 3202 	mla	r2, ip, r2, r3
 8011ba4:	460c      	mov	r4, r1
 8011ba6:	2001      	movs	r0, #1
 8011ba8:	e7a5      	b.n	8011af6 <_vfiprintf_r+0x11a>
 8011baa:	2300      	movs	r3, #0
 8011bac:	3401      	adds	r4, #1
 8011bae:	9305      	str	r3, [sp, #20]
 8011bb0:	4619      	mov	r1, r3
 8011bb2:	f04f 0c0a 	mov.w	ip, #10
 8011bb6:	4620      	mov	r0, r4
 8011bb8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011bbc:	3a30      	subs	r2, #48	; 0x30
 8011bbe:	2a09      	cmp	r2, #9
 8011bc0:	d903      	bls.n	8011bca <_vfiprintf_r+0x1ee>
 8011bc2:	2b00      	cmp	r3, #0
 8011bc4:	d0c5      	beq.n	8011b52 <_vfiprintf_r+0x176>
 8011bc6:	9105      	str	r1, [sp, #20]
 8011bc8:	e7c3      	b.n	8011b52 <_vfiprintf_r+0x176>
 8011bca:	fb0c 2101 	mla	r1, ip, r1, r2
 8011bce:	4604      	mov	r4, r0
 8011bd0:	2301      	movs	r3, #1
 8011bd2:	e7f0      	b.n	8011bb6 <_vfiprintf_r+0x1da>
 8011bd4:	ab03      	add	r3, sp, #12
 8011bd6:	9300      	str	r3, [sp, #0]
 8011bd8:	462a      	mov	r2, r5
 8011bda:	4b16      	ldr	r3, [pc, #88]	; (8011c34 <_vfiprintf_r+0x258>)
 8011bdc:	a904      	add	r1, sp, #16
 8011bde:	4630      	mov	r0, r6
 8011be0:	f3af 8000 	nop.w
 8011be4:	4607      	mov	r7, r0
 8011be6:	1c78      	adds	r0, r7, #1
 8011be8:	d1d6      	bne.n	8011b98 <_vfiprintf_r+0x1bc>
 8011bea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011bec:	07d9      	lsls	r1, r3, #31
 8011bee:	d405      	bmi.n	8011bfc <_vfiprintf_r+0x220>
 8011bf0:	89ab      	ldrh	r3, [r5, #12]
 8011bf2:	059a      	lsls	r2, r3, #22
 8011bf4:	d402      	bmi.n	8011bfc <_vfiprintf_r+0x220>
 8011bf6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011bf8:	f7ff fcf7 	bl	80115ea <__retarget_lock_release_recursive>
 8011bfc:	89ab      	ldrh	r3, [r5, #12]
 8011bfe:	065b      	lsls	r3, r3, #25
 8011c00:	f53f af12 	bmi.w	8011a28 <_vfiprintf_r+0x4c>
 8011c04:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011c06:	e711      	b.n	8011a2c <_vfiprintf_r+0x50>
 8011c08:	ab03      	add	r3, sp, #12
 8011c0a:	9300      	str	r3, [sp, #0]
 8011c0c:	462a      	mov	r2, r5
 8011c0e:	4b09      	ldr	r3, [pc, #36]	; (8011c34 <_vfiprintf_r+0x258>)
 8011c10:	a904      	add	r1, sp, #16
 8011c12:	4630      	mov	r0, r6
 8011c14:	f000 f880 	bl	8011d18 <_printf_i>
 8011c18:	e7e4      	b.n	8011be4 <_vfiprintf_r+0x208>
 8011c1a:	bf00      	nop
 8011c1c:	08012c98 	.word	0x08012c98
 8011c20:	08012cb8 	.word	0x08012cb8
 8011c24:	08012c78 	.word	0x08012c78
 8011c28:	08012cd8 	.word	0x08012cd8
 8011c2c:	08012ce2 	.word	0x08012ce2
 8011c30:	00000000 	.word	0x00000000
 8011c34:	080119b7 	.word	0x080119b7
 8011c38:	08012cde 	.word	0x08012cde

08011c3c <_printf_common>:
 8011c3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011c40:	4616      	mov	r6, r2
 8011c42:	4699      	mov	r9, r3
 8011c44:	688a      	ldr	r2, [r1, #8]
 8011c46:	690b      	ldr	r3, [r1, #16]
 8011c48:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8011c4c:	4293      	cmp	r3, r2
 8011c4e:	bfb8      	it	lt
 8011c50:	4613      	movlt	r3, r2
 8011c52:	6033      	str	r3, [r6, #0]
 8011c54:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8011c58:	4607      	mov	r7, r0
 8011c5a:	460c      	mov	r4, r1
 8011c5c:	b10a      	cbz	r2, 8011c62 <_printf_common+0x26>
 8011c5e:	3301      	adds	r3, #1
 8011c60:	6033      	str	r3, [r6, #0]
 8011c62:	6823      	ldr	r3, [r4, #0]
 8011c64:	0699      	lsls	r1, r3, #26
 8011c66:	bf42      	ittt	mi
 8011c68:	6833      	ldrmi	r3, [r6, #0]
 8011c6a:	3302      	addmi	r3, #2
 8011c6c:	6033      	strmi	r3, [r6, #0]
 8011c6e:	6825      	ldr	r5, [r4, #0]
 8011c70:	f015 0506 	ands.w	r5, r5, #6
 8011c74:	d106      	bne.n	8011c84 <_printf_common+0x48>
 8011c76:	f104 0a19 	add.w	sl, r4, #25
 8011c7a:	68e3      	ldr	r3, [r4, #12]
 8011c7c:	6832      	ldr	r2, [r6, #0]
 8011c7e:	1a9b      	subs	r3, r3, r2
 8011c80:	42ab      	cmp	r3, r5
 8011c82:	dc26      	bgt.n	8011cd2 <_printf_common+0x96>
 8011c84:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8011c88:	1e13      	subs	r3, r2, #0
 8011c8a:	6822      	ldr	r2, [r4, #0]
 8011c8c:	bf18      	it	ne
 8011c8e:	2301      	movne	r3, #1
 8011c90:	0692      	lsls	r2, r2, #26
 8011c92:	d42b      	bmi.n	8011cec <_printf_common+0xb0>
 8011c94:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8011c98:	4649      	mov	r1, r9
 8011c9a:	4638      	mov	r0, r7
 8011c9c:	47c0      	blx	r8
 8011c9e:	3001      	adds	r0, #1
 8011ca0:	d01e      	beq.n	8011ce0 <_printf_common+0xa4>
 8011ca2:	6823      	ldr	r3, [r4, #0]
 8011ca4:	68e5      	ldr	r5, [r4, #12]
 8011ca6:	6832      	ldr	r2, [r6, #0]
 8011ca8:	f003 0306 	and.w	r3, r3, #6
 8011cac:	2b04      	cmp	r3, #4
 8011cae:	bf08      	it	eq
 8011cb0:	1aad      	subeq	r5, r5, r2
 8011cb2:	68a3      	ldr	r3, [r4, #8]
 8011cb4:	6922      	ldr	r2, [r4, #16]
 8011cb6:	bf0c      	ite	eq
 8011cb8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011cbc:	2500      	movne	r5, #0
 8011cbe:	4293      	cmp	r3, r2
 8011cc0:	bfc4      	itt	gt
 8011cc2:	1a9b      	subgt	r3, r3, r2
 8011cc4:	18ed      	addgt	r5, r5, r3
 8011cc6:	2600      	movs	r6, #0
 8011cc8:	341a      	adds	r4, #26
 8011cca:	42b5      	cmp	r5, r6
 8011ccc:	d11a      	bne.n	8011d04 <_printf_common+0xc8>
 8011cce:	2000      	movs	r0, #0
 8011cd0:	e008      	b.n	8011ce4 <_printf_common+0xa8>
 8011cd2:	2301      	movs	r3, #1
 8011cd4:	4652      	mov	r2, sl
 8011cd6:	4649      	mov	r1, r9
 8011cd8:	4638      	mov	r0, r7
 8011cda:	47c0      	blx	r8
 8011cdc:	3001      	adds	r0, #1
 8011cde:	d103      	bne.n	8011ce8 <_printf_common+0xac>
 8011ce0:	f04f 30ff 	mov.w	r0, #4294967295
 8011ce4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011ce8:	3501      	adds	r5, #1
 8011cea:	e7c6      	b.n	8011c7a <_printf_common+0x3e>
 8011cec:	18e1      	adds	r1, r4, r3
 8011cee:	1c5a      	adds	r2, r3, #1
 8011cf0:	2030      	movs	r0, #48	; 0x30
 8011cf2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8011cf6:	4422      	add	r2, r4
 8011cf8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8011cfc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8011d00:	3302      	adds	r3, #2
 8011d02:	e7c7      	b.n	8011c94 <_printf_common+0x58>
 8011d04:	2301      	movs	r3, #1
 8011d06:	4622      	mov	r2, r4
 8011d08:	4649      	mov	r1, r9
 8011d0a:	4638      	mov	r0, r7
 8011d0c:	47c0      	blx	r8
 8011d0e:	3001      	adds	r0, #1
 8011d10:	d0e6      	beq.n	8011ce0 <_printf_common+0xa4>
 8011d12:	3601      	adds	r6, #1
 8011d14:	e7d9      	b.n	8011cca <_printf_common+0x8e>
	...

08011d18 <_printf_i>:
 8011d18:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011d1c:	7e0f      	ldrb	r7, [r1, #24]
 8011d1e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8011d20:	2f78      	cmp	r7, #120	; 0x78
 8011d22:	4691      	mov	r9, r2
 8011d24:	4680      	mov	r8, r0
 8011d26:	460c      	mov	r4, r1
 8011d28:	469a      	mov	sl, r3
 8011d2a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8011d2e:	d807      	bhi.n	8011d40 <_printf_i+0x28>
 8011d30:	2f62      	cmp	r7, #98	; 0x62
 8011d32:	d80a      	bhi.n	8011d4a <_printf_i+0x32>
 8011d34:	2f00      	cmp	r7, #0
 8011d36:	f000 80d8 	beq.w	8011eea <_printf_i+0x1d2>
 8011d3a:	2f58      	cmp	r7, #88	; 0x58
 8011d3c:	f000 80a3 	beq.w	8011e86 <_printf_i+0x16e>
 8011d40:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011d44:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8011d48:	e03a      	b.n	8011dc0 <_printf_i+0xa8>
 8011d4a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8011d4e:	2b15      	cmp	r3, #21
 8011d50:	d8f6      	bhi.n	8011d40 <_printf_i+0x28>
 8011d52:	a101      	add	r1, pc, #4	; (adr r1, 8011d58 <_printf_i+0x40>)
 8011d54:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8011d58:	08011db1 	.word	0x08011db1
 8011d5c:	08011dc5 	.word	0x08011dc5
 8011d60:	08011d41 	.word	0x08011d41
 8011d64:	08011d41 	.word	0x08011d41
 8011d68:	08011d41 	.word	0x08011d41
 8011d6c:	08011d41 	.word	0x08011d41
 8011d70:	08011dc5 	.word	0x08011dc5
 8011d74:	08011d41 	.word	0x08011d41
 8011d78:	08011d41 	.word	0x08011d41
 8011d7c:	08011d41 	.word	0x08011d41
 8011d80:	08011d41 	.word	0x08011d41
 8011d84:	08011ed1 	.word	0x08011ed1
 8011d88:	08011df5 	.word	0x08011df5
 8011d8c:	08011eb3 	.word	0x08011eb3
 8011d90:	08011d41 	.word	0x08011d41
 8011d94:	08011d41 	.word	0x08011d41
 8011d98:	08011ef3 	.word	0x08011ef3
 8011d9c:	08011d41 	.word	0x08011d41
 8011da0:	08011df5 	.word	0x08011df5
 8011da4:	08011d41 	.word	0x08011d41
 8011da8:	08011d41 	.word	0x08011d41
 8011dac:	08011ebb 	.word	0x08011ebb
 8011db0:	682b      	ldr	r3, [r5, #0]
 8011db2:	1d1a      	adds	r2, r3, #4
 8011db4:	681b      	ldr	r3, [r3, #0]
 8011db6:	602a      	str	r2, [r5, #0]
 8011db8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011dbc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8011dc0:	2301      	movs	r3, #1
 8011dc2:	e0a3      	b.n	8011f0c <_printf_i+0x1f4>
 8011dc4:	6820      	ldr	r0, [r4, #0]
 8011dc6:	6829      	ldr	r1, [r5, #0]
 8011dc8:	0606      	lsls	r6, r0, #24
 8011dca:	f101 0304 	add.w	r3, r1, #4
 8011dce:	d50a      	bpl.n	8011de6 <_printf_i+0xce>
 8011dd0:	680e      	ldr	r6, [r1, #0]
 8011dd2:	602b      	str	r3, [r5, #0]
 8011dd4:	2e00      	cmp	r6, #0
 8011dd6:	da03      	bge.n	8011de0 <_printf_i+0xc8>
 8011dd8:	232d      	movs	r3, #45	; 0x2d
 8011dda:	4276      	negs	r6, r6
 8011ddc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011de0:	485e      	ldr	r0, [pc, #376]	; (8011f5c <_printf_i+0x244>)
 8011de2:	230a      	movs	r3, #10
 8011de4:	e019      	b.n	8011e1a <_printf_i+0x102>
 8011de6:	680e      	ldr	r6, [r1, #0]
 8011de8:	602b      	str	r3, [r5, #0]
 8011dea:	f010 0f40 	tst.w	r0, #64	; 0x40
 8011dee:	bf18      	it	ne
 8011df0:	b236      	sxthne	r6, r6
 8011df2:	e7ef      	b.n	8011dd4 <_printf_i+0xbc>
 8011df4:	682b      	ldr	r3, [r5, #0]
 8011df6:	6820      	ldr	r0, [r4, #0]
 8011df8:	1d19      	adds	r1, r3, #4
 8011dfa:	6029      	str	r1, [r5, #0]
 8011dfc:	0601      	lsls	r1, r0, #24
 8011dfe:	d501      	bpl.n	8011e04 <_printf_i+0xec>
 8011e00:	681e      	ldr	r6, [r3, #0]
 8011e02:	e002      	b.n	8011e0a <_printf_i+0xf2>
 8011e04:	0646      	lsls	r6, r0, #25
 8011e06:	d5fb      	bpl.n	8011e00 <_printf_i+0xe8>
 8011e08:	881e      	ldrh	r6, [r3, #0]
 8011e0a:	4854      	ldr	r0, [pc, #336]	; (8011f5c <_printf_i+0x244>)
 8011e0c:	2f6f      	cmp	r7, #111	; 0x6f
 8011e0e:	bf0c      	ite	eq
 8011e10:	2308      	moveq	r3, #8
 8011e12:	230a      	movne	r3, #10
 8011e14:	2100      	movs	r1, #0
 8011e16:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8011e1a:	6865      	ldr	r5, [r4, #4]
 8011e1c:	60a5      	str	r5, [r4, #8]
 8011e1e:	2d00      	cmp	r5, #0
 8011e20:	bfa2      	ittt	ge
 8011e22:	6821      	ldrge	r1, [r4, #0]
 8011e24:	f021 0104 	bicge.w	r1, r1, #4
 8011e28:	6021      	strge	r1, [r4, #0]
 8011e2a:	b90e      	cbnz	r6, 8011e30 <_printf_i+0x118>
 8011e2c:	2d00      	cmp	r5, #0
 8011e2e:	d04d      	beq.n	8011ecc <_printf_i+0x1b4>
 8011e30:	4615      	mov	r5, r2
 8011e32:	fbb6 f1f3 	udiv	r1, r6, r3
 8011e36:	fb03 6711 	mls	r7, r3, r1, r6
 8011e3a:	5dc7      	ldrb	r7, [r0, r7]
 8011e3c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8011e40:	4637      	mov	r7, r6
 8011e42:	42bb      	cmp	r3, r7
 8011e44:	460e      	mov	r6, r1
 8011e46:	d9f4      	bls.n	8011e32 <_printf_i+0x11a>
 8011e48:	2b08      	cmp	r3, #8
 8011e4a:	d10b      	bne.n	8011e64 <_printf_i+0x14c>
 8011e4c:	6823      	ldr	r3, [r4, #0]
 8011e4e:	07de      	lsls	r6, r3, #31
 8011e50:	d508      	bpl.n	8011e64 <_printf_i+0x14c>
 8011e52:	6923      	ldr	r3, [r4, #16]
 8011e54:	6861      	ldr	r1, [r4, #4]
 8011e56:	4299      	cmp	r1, r3
 8011e58:	bfde      	ittt	le
 8011e5a:	2330      	movle	r3, #48	; 0x30
 8011e5c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8011e60:	f105 35ff 	addle.w	r5, r5, #4294967295
 8011e64:	1b52      	subs	r2, r2, r5
 8011e66:	6122      	str	r2, [r4, #16]
 8011e68:	f8cd a000 	str.w	sl, [sp]
 8011e6c:	464b      	mov	r3, r9
 8011e6e:	aa03      	add	r2, sp, #12
 8011e70:	4621      	mov	r1, r4
 8011e72:	4640      	mov	r0, r8
 8011e74:	f7ff fee2 	bl	8011c3c <_printf_common>
 8011e78:	3001      	adds	r0, #1
 8011e7a:	d14c      	bne.n	8011f16 <_printf_i+0x1fe>
 8011e7c:	f04f 30ff 	mov.w	r0, #4294967295
 8011e80:	b004      	add	sp, #16
 8011e82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011e86:	4835      	ldr	r0, [pc, #212]	; (8011f5c <_printf_i+0x244>)
 8011e88:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8011e8c:	6829      	ldr	r1, [r5, #0]
 8011e8e:	6823      	ldr	r3, [r4, #0]
 8011e90:	f851 6b04 	ldr.w	r6, [r1], #4
 8011e94:	6029      	str	r1, [r5, #0]
 8011e96:	061d      	lsls	r5, r3, #24
 8011e98:	d514      	bpl.n	8011ec4 <_printf_i+0x1ac>
 8011e9a:	07df      	lsls	r7, r3, #31
 8011e9c:	bf44      	itt	mi
 8011e9e:	f043 0320 	orrmi.w	r3, r3, #32
 8011ea2:	6023      	strmi	r3, [r4, #0]
 8011ea4:	b91e      	cbnz	r6, 8011eae <_printf_i+0x196>
 8011ea6:	6823      	ldr	r3, [r4, #0]
 8011ea8:	f023 0320 	bic.w	r3, r3, #32
 8011eac:	6023      	str	r3, [r4, #0]
 8011eae:	2310      	movs	r3, #16
 8011eb0:	e7b0      	b.n	8011e14 <_printf_i+0xfc>
 8011eb2:	6823      	ldr	r3, [r4, #0]
 8011eb4:	f043 0320 	orr.w	r3, r3, #32
 8011eb8:	6023      	str	r3, [r4, #0]
 8011eba:	2378      	movs	r3, #120	; 0x78
 8011ebc:	4828      	ldr	r0, [pc, #160]	; (8011f60 <_printf_i+0x248>)
 8011ebe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8011ec2:	e7e3      	b.n	8011e8c <_printf_i+0x174>
 8011ec4:	0659      	lsls	r1, r3, #25
 8011ec6:	bf48      	it	mi
 8011ec8:	b2b6      	uxthmi	r6, r6
 8011eca:	e7e6      	b.n	8011e9a <_printf_i+0x182>
 8011ecc:	4615      	mov	r5, r2
 8011ece:	e7bb      	b.n	8011e48 <_printf_i+0x130>
 8011ed0:	682b      	ldr	r3, [r5, #0]
 8011ed2:	6826      	ldr	r6, [r4, #0]
 8011ed4:	6961      	ldr	r1, [r4, #20]
 8011ed6:	1d18      	adds	r0, r3, #4
 8011ed8:	6028      	str	r0, [r5, #0]
 8011eda:	0635      	lsls	r5, r6, #24
 8011edc:	681b      	ldr	r3, [r3, #0]
 8011ede:	d501      	bpl.n	8011ee4 <_printf_i+0x1cc>
 8011ee0:	6019      	str	r1, [r3, #0]
 8011ee2:	e002      	b.n	8011eea <_printf_i+0x1d2>
 8011ee4:	0670      	lsls	r0, r6, #25
 8011ee6:	d5fb      	bpl.n	8011ee0 <_printf_i+0x1c8>
 8011ee8:	8019      	strh	r1, [r3, #0]
 8011eea:	2300      	movs	r3, #0
 8011eec:	6123      	str	r3, [r4, #16]
 8011eee:	4615      	mov	r5, r2
 8011ef0:	e7ba      	b.n	8011e68 <_printf_i+0x150>
 8011ef2:	682b      	ldr	r3, [r5, #0]
 8011ef4:	1d1a      	adds	r2, r3, #4
 8011ef6:	602a      	str	r2, [r5, #0]
 8011ef8:	681d      	ldr	r5, [r3, #0]
 8011efa:	6862      	ldr	r2, [r4, #4]
 8011efc:	2100      	movs	r1, #0
 8011efe:	4628      	mov	r0, r5
 8011f00:	f7ee f96e 	bl	80001e0 <memchr>
 8011f04:	b108      	cbz	r0, 8011f0a <_printf_i+0x1f2>
 8011f06:	1b40      	subs	r0, r0, r5
 8011f08:	6060      	str	r0, [r4, #4]
 8011f0a:	6863      	ldr	r3, [r4, #4]
 8011f0c:	6123      	str	r3, [r4, #16]
 8011f0e:	2300      	movs	r3, #0
 8011f10:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011f14:	e7a8      	b.n	8011e68 <_printf_i+0x150>
 8011f16:	6923      	ldr	r3, [r4, #16]
 8011f18:	462a      	mov	r2, r5
 8011f1a:	4649      	mov	r1, r9
 8011f1c:	4640      	mov	r0, r8
 8011f1e:	47d0      	blx	sl
 8011f20:	3001      	adds	r0, #1
 8011f22:	d0ab      	beq.n	8011e7c <_printf_i+0x164>
 8011f24:	6823      	ldr	r3, [r4, #0]
 8011f26:	079b      	lsls	r3, r3, #30
 8011f28:	d413      	bmi.n	8011f52 <_printf_i+0x23a>
 8011f2a:	68e0      	ldr	r0, [r4, #12]
 8011f2c:	9b03      	ldr	r3, [sp, #12]
 8011f2e:	4298      	cmp	r0, r3
 8011f30:	bfb8      	it	lt
 8011f32:	4618      	movlt	r0, r3
 8011f34:	e7a4      	b.n	8011e80 <_printf_i+0x168>
 8011f36:	2301      	movs	r3, #1
 8011f38:	4632      	mov	r2, r6
 8011f3a:	4649      	mov	r1, r9
 8011f3c:	4640      	mov	r0, r8
 8011f3e:	47d0      	blx	sl
 8011f40:	3001      	adds	r0, #1
 8011f42:	d09b      	beq.n	8011e7c <_printf_i+0x164>
 8011f44:	3501      	adds	r5, #1
 8011f46:	68e3      	ldr	r3, [r4, #12]
 8011f48:	9903      	ldr	r1, [sp, #12]
 8011f4a:	1a5b      	subs	r3, r3, r1
 8011f4c:	42ab      	cmp	r3, r5
 8011f4e:	dcf2      	bgt.n	8011f36 <_printf_i+0x21e>
 8011f50:	e7eb      	b.n	8011f2a <_printf_i+0x212>
 8011f52:	2500      	movs	r5, #0
 8011f54:	f104 0619 	add.w	r6, r4, #25
 8011f58:	e7f5      	b.n	8011f46 <_printf_i+0x22e>
 8011f5a:	bf00      	nop
 8011f5c:	08012ce9 	.word	0x08012ce9
 8011f60:	08012cfa 	.word	0x08012cfa

08011f64 <__sread>:
 8011f64:	b510      	push	{r4, lr}
 8011f66:	460c      	mov	r4, r1
 8011f68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011f6c:	f000 f8ec 	bl	8012148 <_read_r>
 8011f70:	2800      	cmp	r0, #0
 8011f72:	bfab      	itete	ge
 8011f74:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8011f76:	89a3      	ldrhlt	r3, [r4, #12]
 8011f78:	181b      	addge	r3, r3, r0
 8011f7a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8011f7e:	bfac      	ite	ge
 8011f80:	6563      	strge	r3, [r4, #84]	; 0x54
 8011f82:	81a3      	strhlt	r3, [r4, #12]
 8011f84:	bd10      	pop	{r4, pc}

08011f86 <__swrite>:
 8011f86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011f8a:	461f      	mov	r7, r3
 8011f8c:	898b      	ldrh	r3, [r1, #12]
 8011f8e:	05db      	lsls	r3, r3, #23
 8011f90:	4605      	mov	r5, r0
 8011f92:	460c      	mov	r4, r1
 8011f94:	4616      	mov	r6, r2
 8011f96:	d505      	bpl.n	8011fa4 <__swrite+0x1e>
 8011f98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011f9c:	2302      	movs	r3, #2
 8011f9e:	2200      	movs	r2, #0
 8011fa0:	f000 f868 	bl	8012074 <_lseek_r>
 8011fa4:	89a3      	ldrh	r3, [r4, #12]
 8011fa6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011faa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8011fae:	81a3      	strh	r3, [r4, #12]
 8011fb0:	4632      	mov	r2, r6
 8011fb2:	463b      	mov	r3, r7
 8011fb4:	4628      	mov	r0, r5
 8011fb6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011fba:	f000 b817 	b.w	8011fec <_write_r>

08011fbe <__sseek>:
 8011fbe:	b510      	push	{r4, lr}
 8011fc0:	460c      	mov	r4, r1
 8011fc2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011fc6:	f000 f855 	bl	8012074 <_lseek_r>
 8011fca:	1c43      	adds	r3, r0, #1
 8011fcc:	89a3      	ldrh	r3, [r4, #12]
 8011fce:	bf15      	itete	ne
 8011fd0:	6560      	strne	r0, [r4, #84]	; 0x54
 8011fd2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8011fd6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8011fda:	81a3      	strheq	r3, [r4, #12]
 8011fdc:	bf18      	it	ne
 8011fde:	81a3      	strhne	r3, [r4, #12]
 8011fe0:	bd10      	pop	{r4, pc}

08011fe2 <__sclose>:
 8011fe2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011fe6:	f000 b813 	b.w	8012010 <_close_r>
	...

08011fec <_write_r>:
 8011fec:	b538      	push	{r3, r4, r5, lr}
 8011fee:	4d07      	ldr	r5, [pc, #28]	; (801200c <_write_r+0x20>)
 8011ff0:	4604      	mov	r4, r0
 8011ff2:	4608      	mov	r0, r1
 8011ff4:	4611      	mov	r1, r2
 8011ff6:	2200      	movs	r2, #0
 8011ff8:	602a      	str	r2, [r5, #0]
 8011ffa:	461a      	mov	r2, r3
 8011ffc:	f7ef fa9e 	bl	800153c <_write>
 8012000:	1c43      	adds	r3, r0, #1
 8012002:	d102      	bne.n	801200a <_write_r+0x1e>
 8012004:	682b      	ldr	r3, [r5, #0]
 8012006:	b103      	cbz	r3, 801200a <_write_r+0x1e>
 8012008:	6023      	str	r3, [r4, #0]
 801200a:	bd38      	pop	{r3, r4, r5, pc}
 801200c:	20011a50 	.word	0x20011a50

08012010 <_close_r>:
 8012010:	b538      	push	{r3, r4, r5, lr}
 8012012:	4d06      	ldr	r5, [pc, #24]	; (801202c <_close_r+0x1c>)
 8012014:	2300      	movs	r3, #0
 8012016:	4604      	mov	r4, r0
 8012018:	4608      	mov	r0, r1
 801201a:	602b      	str	r3, [r5, #0]
 801201c:	f7f1 fd77 	bl	8003b0e <_close>
 8012020:	1c43      	adds	r3, r0, #1
 8012022:	d102      	bne.n	801202a <_close_r+0x1a>
 8012024:	682b      	ldr	r3, [r5, #0]
 8012026:	b103      	cbz	r3, 801202a <_close_r+0x1a>
 8012028:	6023      	str	r3, [r4, #0]
 801202a:	bd38      	pop	{r3, r4, r5, pc}
 801202c:	20011a50 	.word	0x20011a50

08012030 <_fstat_r>:
 8012030:	b538      	push	{r3, r4, r5, lr}
 8012032:	4d07      	ldr	r5, [pc, #28]	; (8012050 <_fstat_r+0x20>)
 8012034:	2300      	movs	r3, #0
 8012036:	4604      	mov	r4, r0
 8012038:	4608      	mov	r0, r1
 801203a:	4611      	mov	r1, r2
 801203c:	602b      	str	r3, [r5, #0]
 801203e:	f7f1 fd72 	bl	8003b26 <_fstat>
 8012042:	1c43      	adds	r3, r0, #1
 8012044:	d102      	bne.n	801204c <_fstat_r+0x1c>
 8012046:	682b      	ldr	r3, [r5, #0]
 8012048:	b103      	cbz	r3, 801204c <_fstat_r+0x1c>
 801204a:	6023      	str	r3, [r4, #0]
 801204c:	bd38      	pop	{r3, r4, r5, pc}
 801204e:	bf00      	nop
 8012050:	20011a50 	.word	0x20011a50

08012054 <_isatty_r>:
 8012054:	b538      	push	{r3, r4, r5, lr}
 8012056:	4d06      	ldr	r5, [pc, #24]	; (8012070 <_isatty_r+0x1c>)
 8012058:	2300      	movs	r3, #0
 801205a:	4604      	mov	r4, r0
 801205c:	4608      	mov	r0, r1
 801205e:	602b      	str	r3, [r5, #0]
 8012060:	f7f1 fd71 	bl	8003b46 <_isatty>
 8012064:	1c43      	adds	r3, r0, #1
 8012066:	d102      	bne.n	801206e <_isatty_r+0x1a>
 8012068:	682b      	ldr	r3, [r5, #0]
 801206a:	b103      	cbz	r3, 801206e <_isatty_r+0x1a>
 801206c:	6023      	str	r3, [r4, #0]
 801206e:	bd38      	pop	{r3, r4, r5, pc}
 8012070:	20011a50 	.word	0x20011a50

08012074 <_lseek_r>:
 8012074:	b538      	push	{r3, r4, r5, lr}
 8012076:	4d07      	ldr	r5, [pc, #28]	; (8012094 <_lseek_r+0x20>)
 8012078:	4604      	mov	r4, r0
 801207a:	4608      	mov	r0, r1
 801207c:	4611      	mov	r1, r2
 801207e:	2200      	movs	r2, #0
 8012080:	602a      	str	r2, [r5, #0]
 8012082:	461a      	mov	r2, r3
 8012084:	f7f1 fd6a 	bl	8003b5c <_lseek>
 8012088:	1c43      	adds	r3, r0, #1
 801208a:	d102      	bne.n	8012092 <_lseek_r+0x1e>
 801208c:	682b      	ldr	r3, [r5, #0]
 801208e:	b103      	cbz	r3, 8012092 <_lseek_r+0x1e>
 8012090:	6023      	str	r3, [r4, #0]
 8012092:	bd38      	pop	{r3, r4, r5, pc}
 8012094:	20011a50 	.word	0x20011a50

08012098 <memcpy>:
 8012098:	440a      	add	r2, r1
 801209a:	4291      	cmp	r1, r2
 801209c:	f100 33ff 	add.w	r3, r0, #4294967295
 80120a0:	d100      	bne.n	80120a4 <memcpy+0xc>
 80120a2:	4770      	bx	lr
 80120a4:	b510      	push	{r4, lr}
 80120a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80120aa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80120ae:	4291      	cmp	r1, r2
 80120b0:	d1f9      	bne.n	80120a6 <memcpy+0xe>
 80120b2:	bd10      	pop	{r4, pc}

080120b4 <memmove>:
 80120b4:	4288      	cmp	r0, r1
 80120b6:	b510      	push	{r4, lr}
 80120b8:	eb01 0402 	add.w	r4, r1, r2
 80120bc:	d902      	bls.n	80120c4 <memmove+0x10>
 80120be:	4284      	cmp	r4, r0
 80120c0:	4623      	mov	r3, r4
 80120c2:	d807      	bhi.n	80120d4 <memmove+0x20>
 80120c4:	1e43      	subs	r3, r0, #1
 80120c6:	42a1      	cmp	r1, r4
 80120c8:	d008      	beq.n	80120dc <memmove+0x28>
 80120ca:	f811 2b01 	ldrb.w	r2, [r1], #1
 80120ce:	f803 2f01 	strb.w	r2, [r3, #1]!
 80120d2:	e7f8      	b.n	80120c6 <memmove+0x12>
 80120d4:	4402      	add	r2, r0
 80120d6:	4601      	mov	r1, r0
 80120d8:	428a      	cmp	r2, r1
 80120da:	d100      	bne.n	80120de <memmove+0x2a>
 80120dc:	bd10      	pop	{r4, pc}
 80120de:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80120e2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80120e6:	e7f7      	b.n	80120d8 <memmove+0x24>

080120e8 <_realloc_r>:
 80120e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80120ec:	4680      	mov	r8, r0
 80120ee:	4614      	mov	r4, r2
 80120f0:	460e      	mov	r6, r1
 80120f2:	b921      	cbnz	r1, 80120fe <_realloc_r+0x16>
 80120f4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80120f8:	4611      	mov	r1, r2
 80120fa:	f7fe be09 	b.w	8010d10 <_malloc_r>
 80120fe:	b92a      	cbnz	r2, 801210c <_realloc_r+0x24>
 8012100:	f7fe fd9a 	bl	8010c38 <_free_r>
 8012104:	4625      	mov	r5, r4
 8012106:	4628      	mov	r0, r5
 8012108:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801210c:	f000 f82e 	bl	801216c <_malloc_usable_size_r>
 8012110:	4284      	cmp	r4, r0
 8012112:	4607      	mov	r7, r0
 8012114:	d802      	bhi.n	801211c <_realloc_r+0x34>
 8012116:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801211a:	d812      	bhi.n	8012142 <_realloc_r+0x5a>
 801211c:	4621      	mov	r1, r4
 801211e:	4640      	mov	r0, r8
 8012120:	f7fe fdf6 	bl	8010d10 <_malloc_r>
 8012124:	4605      	mov	r5, r0
 8012126:	2800      	cmp	r0, #0
 8012128:	d0ed      	beq.n	8012106 <_realloc_r+0x1e>
 801212a:	42bc      	cmp	r4, r7
 801212c:	4622      	mov	r2, r4
 801212e:	4631      	mov	r1, r6
 8012130:	bf28      	it	cs
 8012132:	463a      	movcs	r2, r7
 8012134:	f7ff ffb0 	bl	8012098 <memcpy>
 8012138:	4631      	mov	r1, r6
 801213a:	4640      	mov	r0, r8
 801213c:	f7fe fd7c 	bl	8010c38 <_free_r>
 8012140:	e7e1      	b.n	8012106 <_realloc_r+0x1e>
 8012142:	4635      	mov	r5, r6
 8012144:	e7df      	b.n	8012106 <_realloc_r+0x1e>
	...

08012148 <_read_r>:
 8012148:	b538      	push	{r3, r4, r5, lr}
 801214a:	4d07      	ldr	r5, [pc, #28]	; (8012168 <_read_r+0x20>)
 801214c:	4604      	mov	r4, r0
 801214e:	4608      	mov	r0, r1
 8012150:	4611      	mov	r1, r2
 8012152:	2200      	movs	r2, #0
 8012154:	602a      	str	r2, [r5, #0]
 8012156:	461a      	mov	r2, r3
 8012158:	f7f1 fcbc 	bl	8003ad4 <_read>
 801215c:	1c43      	adds	r3, r0, #1
 801215e:	d102      	bne.n	8012166 <_read_r+0x1e>
 8012160:	682b      	ldr	r3, [r5, #0]
 8012162:	b103      	cbz	r3, 8012166 <_read_r+0x1e>
 8012164:	6023      	str	r3, [r4, #0]
 8012166:	bd38      	pop	{r3, r4, r5, pc}
 8012168:	20011a50 	.word	0x20011a50

0801216c <_malloc_usable_size_r>:
 801216c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012170:	1f18      	subs	r0, r3, #4
 8012172:	2b00      	cmp	r3, #0
 8012174:	bfbc      	itt	lt
 8012176:	580b      	ldrlt	r3, [r1, r0]
 8012178:	18c0      	addlt	r0, r0, r3
 801217a:	4770      	bx	lr

0801217c <_init>:
 801217c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801217e:	bf00      	nop
 8012180:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012182:	bc08      	pop	{r3}
 8012184:	469e      	mov	lr, r3
 8012186:	4770      	bx	lr

08012188 <_fini>:
 8012188:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801218a:	bf00      	nop
 801218c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801218e:	bc08      	pop	{r3}
 8012190:	469e      	mov	lr, r3
 8012192:	4770      	bx	lr
